
Iot-Weather-Monitoring_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b668  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userconfig   00000000  08040960  08040960  00020120  2**0
                  CONTENTS
  3 .storage      00000000  08043008  08043008  00020120  2**0
                  CONTENTS
  4 .rodata       00000b88  0800b7f8  0800b7f8  0001b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800c380  0800c380  00020120  2**0
                  CONTENTS
  6 .ARM          00000008  0800c380  0800c380  0001c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800c388  0800c388  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  0800c388  0800c388  0001c388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0800c390  0800c390  0001c390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000120  20000000  0800c398  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000f08  20000120  0800c4b8  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00014000  20001028  0800c4b8  00021028  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b6b4  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004562  00000000  00000000  0003b804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001860  00000000  00000000  0003fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001628  00000000  00000000  000415c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ff2f  00000000  00000000  00042bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028d2e  00000000  00000000  00072b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00113468  00000000  00000000  0009b84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001aecb5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007448  00000000  00000000  001aed08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7dc 	.word	0x0800b7dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0800b7dc 	.word	0x0800b7dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_ldivmod>:
 8000658:	b97b      	cbnz	r3, 800067a <__aeabi_ldivmod+0x22>
 800065a:	b972      	cbnz	r2, 800067a <__aeabi_ldivmod+0x22>
 800065c:	2900      	cmp	r1, #0
 800065e:	bfbe      	ittt	lt
 8000660:	2000      	movlt	r0, #0
 8000662:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000666:	e006      	blt.n	8000676 <__aeabi_ldivmod+0x1e>
 8000668:	bf08      	it	eq
 800066a:	2800      	cmpeq	r0, #0
 800066c:	bf1c      	itt	ne
 800066e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000672:	f04f 30ff 	movne.w	r0, #4294967295
 8000676:	f000 b9bf 	b.w	80009f8 <__aeabi_idiv0>
 800067a:	f1ad 0c08 	sub.w	ip, sp, #8
 800067e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000682:	2900      	cmp	r1, #0
 8000684:	db09      	blt.n	800069a <__aeabi_ldivmod+0x42>
 8000686:	2b00      	cmp	r3, #0
 8000688:	db1a      	blt.n	80006c0 <__aeabi_ldivmod+0x68>
 800068a:	f000 f84d 	bl	8000728 <__udivmoddi4>
 800068e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000696:	b004      	add	sp, #16
 8000698:	4770      	bx	lr
 800069a:	4240      	negs	r0, r0
 800069c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db1b      	blt.n	80006dc <__aeabi_ldivmod+0x84>
 80006a4:	f000 f840 	bl	8000728 <__udivmoddi4>
 80006a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b0:	b004      	add	sp, #16
 80006b2:	4240      	negs	r0, r0
 80006b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b8:	4252      	negs	r2, r2
 80006ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006be:	4770      	bx	lr
 80006c0:	4252      	negs	r2, r2
 80006c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006c6:	f000 f82f 	bl	8000728 <__udivmoddi4>
 80006ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d2:	b004      	add	sp, #16
 80006d4:	4240      	negs	r0, r0
 80006d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006da:	4770      	bx	lr
 80006dc:	4252      	negs	r2, r2
 80006de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006e2:	f000 f821 	bl	8000728 <__udivmoddi4>
 80006e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ee:	b004      	add	sp, #16
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	4770      	bx	lr

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b974 	b.w	80009f8 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468e      	mov	lr, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14d      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000736:	428a      	cmp	r2, r1
 8000738:	4694      	mov	ip, r2
 800073a:	d969      	bls.n	8000810 <__udivmoddi4+0xe8>
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	b152      	cbz	r2, 8000758 <__udivmoddi4+0x30>
 8000742:	fa01 f302 	lsl.w	r3, r1, r2
 8000746:	f1c2 0120 	rsb	r1, r2, #32
 800074a:	fa20 f101 	lsr.w	r1, r0, r1
 800074e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000752:	ea41 0e03 	orr.w	lr, r1, r3
 8000756:	4094      	lsls	r4, r2
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	0c21      	lsrs	r1, r4, #16
 800075e:	fbbe f6f8 	udiv	r6, lr, r8
 8000762:	fa1f f78c 	uxth.w	r7, ip
 8000766:	fb08 e316 	mls	r3, r8, r6, lr
 800076a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800076e:	fb06 f107 	mul.w	r1, r6, r7
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f106 30ff 	add.w	r0, r6, #4294967295
 800077e:	f080 811f 	bcs.w	80009c0 <__udivmoddi4+0x298>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 811c 	bls.w	80009c0 <__udivmoddi4+0x298>
 8000788:	3e02      	subs	r6, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb00 f707 	mul.w	r7, r0, r7
 80007a0:	42a7      	cmp	r7, r4
 80007a2:	d90a      	bls.n	80007ba <__udivmoddi4+0x92>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ac:	f080 810a 	bcs.w	80009c4 <__udivmoddi4+0x29c>
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	f240 8107 	bls.w	80009c4 <__udivmoddi4+0x29c>
 80007b6:	4464      	add	r4, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007be:	1be4      	subs	r4, r4, r7
 80007c0:	2600      	movs	r6, #0
 80007c2:	b11d      	cbz	r5, 80007cc <__udivmoddi4+0xa4>
 80007c4:	40d4      	lsrs	r4, r2
 80007c6:	2300      	movs	r3, #0
 80007c8:	e9c5 4300 	strd	r4, r3, [r5]
 80007cc:	4631      	mov	r1, r6
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0xc2>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	f000 80ef 	beq.w	80009ba <__udivmoddi4+0x292>
 80007dc:	2600      	movs	r6, #0
 80007de:	e9c5 0100 	strd	r0, r1, [r5]
 80007e2:	4630      	mov	r0, r6
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	fab3 f683 	clz	r6, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d14a      	bne.n	8000888 <__udivmoddi4+0x160>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d302      	bcc.n	80007fc <__udivmoddi4+0xd4>
 80007f6:	4282      	cmp	r2, r0
 80007f8:	f200 80f9 	bhi.w	80009ee <__udivmoddi4+0x2c6>
 80007fc:	1a84      	subs	r4, r0, r2
 80007fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	469e      	mov	lr, r3
 8000806:	2d00      	cmp	r5, #0
 8000808:	d0e0      	beq.n	80007cc <__udivmoddi4+0xa4>
 800080a:	e9c5 4e00 	strd	r4, lr, [r5]
 800080e:	e7dd      	b.n	80007cc <__udivmoddi4+0xa4>
 8000810:	b902      	cbnz	r2, 8000814 <__udivmoddi4+0xec>
 8000812:	deff      	udf	#255	; 0xff
 8000814:	fab2 f282 	clz	r2, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	f040 8092 	bne.w	8000942 <__udivmoddi4+0x21a>
 800081e:	eba1 010c 	sub.w	r1, r1, ip
 8000822:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	2601      	movs	r6, #1
 800082c:	0c20      	lsrs	r0, r4, #16
 800082e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000832:	fb07 1113 	mls	r1, r7, r3, r1
 8000836:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800083a:	fb0e f003 	mul.w	r0, lr, r3
 800083e:	4288      	cmp	r0, r1
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x12c>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f103 38ff 	add.w	r8, r3, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x12a>
 800084c:	4288      	cmp	r0, r1
 800084e:	f200 80cb 	bhi.w	80009e8 <__udivmoddi4+0x2c0>
 8000852:	4643      	mov	r3, r8
 8000854:	1a09      	subs	r1, r1, r0
 8000856:	b2a4      	uxth	r4, r4
 8000858:	fbb1 f0f7 	udiv	r0, r1, r7
 800085c:	fb07 1110 	mls	r1, r7, r0, r1
 8000860:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000864:	fb0e fe00 	mul.w	lr, lr, r0
 8000868:	45a6      	cmp	lr, r4
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x156>
 800086c:	eb1c 0404 	adds.w	r4, ip, r4
 8000870:	f100 31ff 	add.w	r1, r0, #4294967295
 8000874:	d202      	bcs.n	800087c <__udivmoddi4+0x154>
 8000876:	45a6      	cmp	lr, r4
 8000878:	f200 80bb 	bhi.w	80009f2 <__udivmoddi4+0x2ca>
 800087c:	4608      	mov	r0, r1
 800087e:	eba4 040e 	sub.w	r4, r4, lr
 8000882:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000886:	e79c      	b.n	80007c2 <__udivmoddi4+0x9a>
 8000888:	f1c6 0720 	rsb	r7, r6, #32
 800088c:	40b3      	lsls	r3, r6
 800088e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000892:	ea4c 0c03 	orr.w	ip, ip, r3
 8000896:	fa20 f407 	lsr.w	r4, r0, r7
 800089a:	fa01 f306 	lsl.w	r3, r1, r6
 800089e:	431c      	orrs	r4, r3
 80008a0:	40f9      	lsrs	r1, r7
 80008a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008a6:	fa00 f306 	lsl.w	r3, r0, r6
 80008aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ae:	0c20      	lsrs	r0, r4, #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fb09 1118 	mls	r1, r9, r8, r1
 80008b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008bc:	fb08 f00e 	mul.w	r0, r8, lr
 80008c0:	4288      	cmp	r0, r1
 80008c2:	fa02 f206 	lsl.w	r2, r2, r6
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b8>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d0:	f080 8088 	bcs.w	80009e4 <__udivmoddi4+0x2bc>
 80008d4:	4288      	cmp	r0, r1
 80008d6:	f240 8085 	bls.w	80009e4 <__udivmoddi4+0x2bc>
 80008da:	f1a8 0802 	sub.w	r8, r8, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1a09      	subs	r1, r1, r0
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008e8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f4:	458e      	cmp	lr, r1
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1e2>
 80008f8:	eb1c 0101 	adds.w	r1, ip, r1
 80008fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000900:	d26c      	bcs.n	80009dc <__udivmoddi4+0x2b4>
 8000902:	458e      	cmp	lr, r1
 8000904:	d96a      	bls.n	80009dc <__udivmoddi4+0x2b4>
 8000906:	3802      	subs	r0, #2
 8000908:	4461      	add	r1, ip
 800090a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800090e:	fba0 9402 	umull	r9, r4, r0, r2
 8000912:	eba1 010e 	sub.w	r1, r1, lr
 8000916:	42a1      	cmp	r1, r4
 8000918:	46c8      	mov	r8, r9
 800091a:	46a6      	mov	lr, r4
 800091c:	d356      	bcc.n	80009cc <__udivmoddi4+0x2a4>
 800091e:	d053      	beq.n	80009c8 <__udivmoddi4+0x2a0>
 8000920:	b15d      	cbz	r5, 800093a <__udivmoddi4+0x212>
 8000922:	ebb3 0208 	subs.w	r2, r3, r8
 8000926:	eb61 010e 	sbc.w	r1, r1, lr
 800092a:	fa01 f707 	lsl.w	r7, r1, r7
 800092e:	fa22 f306 	lsr.w	r3, r2, r6
 8000932:	40f1      	lsrs	r1, r6
 8000934:	431f      	orrs	r7, r3
 8000936:	e9c5 7100 	strd	r7, r1, [r5]
 800093a:	2600      	movs	r6, #0
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	f1c2 0320 	rsb	r3, r2, #32
 8000946:	40d8      	lsrs	r0, r3
 8000948:	fa0c fc02 	lsl.w	ip, ip, r2
 800094c:	fa21 f303 	lsr.w	r3, r1, r3
 8000950:	4091      	lsls	r1, r2
 8000952:	4301      	orrs	r1, r0
 8000954:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000958:	fa1f fe8c 	uxth.w	lr, ip
 800095c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000960:	fb07 3610 	mls	r6, r7, r0, r3
 8000964:	0c0b      	lsrs	r3, r1, #16
 8000966:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800096a:	fb00 f60e 	mul.w	r6, r0, lr
 800096e:	429e      	cmp	r6, r3
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x260>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 38ff 	add.w	r8, r0, #4294967295
 800097e:	d22f      	bcs.n	80009e0 <__udivmoddi4+0x2b8>
 8000980:	429e      	cmp	r6, r3
 8000982:	d92d      	bls.n	80009e0 <__udivmoddi4+0x2b8>
 8000984:	3802      	subs	r0, #2
 8000986:	4463      	add	r3, ip
 8000988:	1b9b      	subs	r3, r3, r6
 800098a:	b289      	uxth	r1, r1
 800098c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000990:	fb07 3316 	mls	r3, r7, r6, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb06 f30e 	mul.w	r3, r6, lr
 800099c:	428b      	cmp	r3, r1
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x28a>
 80009a0:	eb1c 0101 	adds.w	r1, ip, r1
 80009a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009a8:	d216      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d914      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 80009ae:	3e02      	subs	r6, #2
 80009b0:	4461      	add	r1, ip
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009b8:	e738      	b.n	800082c <__udivmoddi4+0x104>
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e705      	b.n	80007cc <__udivmoddi4+0xa4>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e3      	b.n	800078c <__udivmoddi4+0x64>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6f8      	b.n	80007ba <__udivmoddi4+0x92>
 80009c8:	454b      	cmp	r3, r9
 80009ca:	d2a9      	bcs.n	8000920 <__udivmoddi4+0x1f8>
 80009cc:	ebb9 0802 	subs.w	r8, r9, r2
 80009d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7a3      	b.n	8000920 <__udivmoddi4+0x1f8>
 80009d8:	4646      	mov	r6, r8
 80009da:	e7ea      	b.n	80009b2 <__udivmoddi4+0x28a>
 80009dc:	4620      	mov	r0, r4
 80009de:	e794      	b.n	800090a <__udivmoddi4+0x1e2>
 80009e0:	4640      	mov	r0, r8
 80009e2:	e7d1      	b.n	8000988 <__udivmoddi4+0x260>
 80009e4:	46d0      	mov	r8, sl
 80009e6:	e77b      	b.n	80008e0 <__udivmoddi4+0x1b8>
 80009e8:	3b02      	subs	r3, #2
 80009ea:	4461      	add	r1, ip
 80009ec:	e732      	b.n	8000854 <__udivmoddi4+0x12c>
 80009ee:	4630      	mov	r0, r6
 80009f0:	e709      	b.n	8000806 <__udivmoddi4+0xde>
 80009f2:	4464      	add	r4, ip
 80009f4:	3802      	subs	r0, #2
 80009f6:	e742      	b.n	800087e <__udivmoddi4+0x156>

080009f8 <__aeabi_idiv0>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <AplusAPP_Init>:
void _FlashWriteAppUserConfig(void);
void _InitUserConfig(void);


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void AplusAPP_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
	// Initialize the debug log
	Debug_InitLog();
 8000a02:	f000 f9a7 	bl	8000d54 <Debug_InitLog>
	printf("Debug log initialized\r\n");
 8000a06:	4829      	ldr	r0, [pc, #164]	; (8000aac <AplusAPP_Init+0xb0>)
 8000a08:	f008 fd14 	bl	8009434 <puts>

	// Capture reset cause
	/*ResetCause_t reset_cause =*/ Get_Reset_Cause();
 8000a0c:	f000 f898 	bl	8000b40 <Get_Reset_Cause>

	// Initialize the watchdog timer
	Watchdog_Init();
 8000a10:	f000 fba4 	bl	800115c <Watchdog_Init>
	printf("Watchdog initialized\r\n");
 8000a14:	4826      	ldr	r0, [pc, #152]	; (8000ab0 <AplusAPP_Init+0xb4>)
 8000a16:	f008 fd0d 	bl	8009434 <puts>

	// Initialize the RTC.
	Timestamp_Init();
 8000a1a:	f000 fb01 	bl	8001020 <Timestamp_Init>
	printf("RTC initialized\r\n");
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <AplusAPP_Init+0xb8>)
 8000a20:	f008 fd08 	bl	8009434 <puts>

	uint32_t new_timestamp = 1680554930;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <AplusAPP_Init+0xbc>)
 8000a26:	60fb      	str	r3, [r7, #12]
	Timestamp_SetTimestamp(new_timestamp);
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 fb23 	bl	8001074 <Timestamp_SetTimestamp>

	// Initialize flash - where user configuration is stored
	Flash_Init();
 8000a2e:	f000 f9bd 	bl	8000dac <Flash_Init>
	printf("Flash initialized\r\n");
 8000a32:	4822      	ldr	r0, [pc, #136]	; (8000abc <AplusAPP_Init+0xc0>)
 8000a34:	f008 fcfe 	bl	8009434 <puts>

	// Read user configuration from flash
	_FlashReadAppUserConfig();
 8000a38:	f000 f8ec 	bl	8000c14 <_FlashReadAppUserConfig>
	printf("User configuration retrieved\r\n");
 8000a3c:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <AplusAPP_Init+0xc4>)
 8000a3e:	f008 fcf9 	bl	8009434 <puts>
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <AplusAPP_Init+0xc8>)
 8000a44:	685b      	ldr	r3, [r3, #4]

	 // Set current time from the last timestamp stored in flash.
	uint32_t timestamp;
	memcpy(&timestamp, &g_stUserConfig.au8Timestamp[0], 4);
 8000a46:	607b      	str	r3, [r7, #4]
	if(timestamp>0) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <AplusAPP_Init+0x5a>
		Timestamp_SetTimestamp(timestamp);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fb0f 	bl	8001074 <Timestamp_SetTimestamp>
	}
	printf("Timestamp Initialized\r\n");
 8000a56:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <AplusAPP_Init+0xcc>)
 8000a58:	f008 fcec 	bl	8009434 <puts>

	int8_t s8Status = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	72fb      	strb	r3, [r7, #11]

	s8Status = Wifi_Init();
 8000a60:	f000 fba0 	bl	80011a4 <Wifi_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	72fb      	strb	r3, [r7, #11]
	if (s8Status!=0) {
 8000a68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <AplusAPP_Init+0x7c>
		printf("Wifi failed to initialize.\r\n");
 8000a70:	4816      	ldr	r0, [pc, #88]	; (8000acc <AplusAPP_Init+0xd0>)
 8000a72:	f008 fcdf 	bl	8009434 <puts>
		while(1) {}
 8000a76:	e7fe      	b.n	8000a76 <AplusAPP_Init+0x7a>
	}
	printf("Wifi initialized.\r\n");
 8000a78:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <AplusAPP_Init+0xd4>)
 8000a7a:	f008 fcdb 	bl	8009434 <puts>

	TempSensor_Init();
 8000a7e:	f000 fa87 	bl	8000f90 <TempSensor_Init>
	printf("Temp sensor initialize.\r\n");
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <AplusAPP_Init+0xd8>)
 8000a84:	f008 fcd6 	bl	8009434 <puts>

	HumiditySensor_Init();
 8000a88:	f000 fa3a 	bl	8000f00 <HumiditySensor_Init>
	printf("Humidity sensor initialize.\r\n");
 8000a8c:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <AplusAPP_Init+0xdc>)
 8000a8e:	f008 fcd1 	bl	8009434 <puts>

	DataQueue_Init();
 8000a92:	f000 f913 	bl	8000cbc <DataQueue_Init>
	printf("Storage queue initialize.\r\n");
 8000a96:	4811      	ldr	r0, [pc, #68]	; (8000adc <AplusAPP_Init+0xe0>)
 8000a98:	f008 fccc 	bl	8009434 <puts>



	printf("Application init complete\r\n");
 8000a9c:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <AplusAPP_Init+0xe4>)
 8000a9e:	f008 fcc9 	bl	8009434 <puts>
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	0800b7f8 	.word	0x0800b7f8
 8000ab0:	0800b810 	.word	0x0800b810
 8000ab4:	0800b828 	.word	0x0800b828
 8000ab8:	642b3bb2 	.word	0x642b3bb2
 8000abc:	0800b83c 	.word	0x0800b83c
 8000ac0:	0800b850 	.word	0x0800b850
 8000ac4:	2000013c 	.word	0x2000013c
 8000ac8:	0800b870 	.word	0x0800b870
 8000acc:	0800b888 	.word	0x0800b888
 8000ad0:	0800b8a4 	.word	0x0800b8a4
 8000ad4:	0800b8b8 	.word	0x0800b8b8
 8000ad8:	0800b8d4 	.word	0x0800b8d4
 8000adc:	0800b8f4 	.word	0x0800b8f4
 8000ae0:	0800b910 	.word	0x0800b910

08000ae4 <AplusAPP_Entry>:

void AplusAPP_Entry(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	static bool s_fCheckLink = true;

	printf("Entering main state machine\r\n");
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <AplusAPP_Entry+0x4c>)
 8000aec:	f008 fca2 	bl	8009434 <puts>

	while(1) {
		// Feed the watchdog every time through this callback - if not, the device will reset after 8 seconds
		Watchdog_Feed();
 8000af0:	f000 fb4e 	bl	8001190 <Watchdog_Feed>

		if (s_fCheckLink==true) {
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <AplusAPP_Entry+0x50>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d011      	beq.n	8000b20 <AplusAPP_Entry+0x3c>
			// Init vars.
			int8_t s8Status;

			// Attempt connect to stored SSID.
			s8Status = Wifi_Connect();
 8000afc:	f000 fb6c 	bl	80011d8 <Wifi_Connect>
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
			if (s8Status!=0) {
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <AplusAPP_Entry+0x30>
				printf("Wifi to connect.\r\n");
 8000b0c:	480a      	ldr	r0, [pc, #40]	; (8000b38 <AplusAPP_Entry+0x54>)
 8000b0e:	f008 fc91 	bl	8009434 <puts>
				while(1) {}
 8000b12:	e7fe      	b.n	8000b12 <AplusAPP_Entry+0x2e>
			}
			printf("Wifi connected.\r\n");
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <AplusAPP_Entry+0x58>)
 8000b16:	f008 fc8d 	bl	8009434 <puts>
			s_fCheckLink = false;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <AplusAPP_Entry+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
		}

		///////////////////////////////////////////////////////////////////
		// Measurement collection
		///////////////////////////////////////////////////////////////////
		TempSensor_GetData();
 8000b20:	f000 fa3c 	bl	8000f9c <TempSensor_GetData>
		HumiditySensor_GetData();
 8000b24:	f000 f9f2 	bl	8000f0c <HumiditySensor_GetData>
		///////////////////////////////////////////////////////////////////
		// Measurement processing
		///////////////////////////////////////////////////////////////////

		// Determine if it is time to send to the server
		bool fTimeToSend = false;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	71bb      	strb	r3, [r7, #6]
	while(1) {
 8000b2c:	e7e0      	b.n	8000af0 <AplusAPP_Entry+0xc>
 8000b2e:	bf00      	nop
 8000b30:	0800b92c 	.word	0x0800b92c
 8000b34:	20000000 	.word	0x20000000
 8000b38:	0800b94c 	.word	0x0800b94c
 8000b3c:	0800b960 	.word	0x0800b960

08000b40 <Get_Reset_Cause>:
		}

	}
}

ResetCause_t Get_Reset_Cause(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
    ResetCause_t cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) {
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <Get_Reset_Cause+0xb4>)
 8000b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da05      	bge.n	8000b5c <Get_Reset_Cause+0x1c>
        cause = RESET_CAUSE_LOW_POWER_RESET;
 8000b50:	2301      	movs	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Low Power Reset\r\n");
 8000b54:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <Get_Reset_Cause+0xb8>)
 8000b56:	f008 fc6d 	bl	8009434 <puts>
 8000b5a:	e045      	b.n	8000be8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) {
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <Get_Reset_Cause+0xb4>)
 8000b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <Get_Reset_Cause+0x36>
        cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Window Watchdog Reset\r\n");
 8000b6e:	4823      	ldr	r0, [pc, #140]	; (8000bfc <Get_Reset_Cause+0xbc>)
 8000b70:	f008 fc60 	bl	8009434 <puts>
 8000b74:	e038      	b.n	8000be8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) {
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <Get_Reset_Cause+0xb4>)
 8000b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <Get_Reset_Cause+0x50>
        cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000b84:	2303      	movs	r3, #3
 8000b86:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Independent Watchdog Reset\r\n");
 8000b88:	481d      	ldr	r0, [pc, #116]	; (8000c00 <Get_Reset_Cause+0xc0>)
 8000b8a:	f008 fc53 	bl	8009434 <puts>
 8000b8e:	e02b      	b.n	8000be8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) {
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <Get_Reset_Cause+0xb4>)
 8000b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <Get_Reset_Cause+0x6a>
        cause = RESET_CAUSE_SOFTWARE_RESET;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Software Reset\r\n");
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <Get_Reset_Cause+0xc4>)
 8000ba4:	f008 fc46 	bl	8009434 <puts>
 8000ba8:	e01e      	b.n	8000be8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) {
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <Get_Reset_Cause+0xb4>)
 8000bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <Get_Reset_Cause+0x84>
        cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: External Reset Pin Reset\r\n");
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <Get_Reset_Cause+0xc8>)
 8000bbe:	f008 fc39 	bl	8009434 <puts>
 8000bc2:	e011      	b.n	8000be8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) {
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <Get_Reset_Cause+0xb4>)
 8000bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d005      	beq.n	8000bde <Get_Reset_Cause+0x9e>
        cause = RESET_CAUSE_BROWN_OUT_RESET;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Brown Out Reset\r\n");
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <Get_Reset_Cause+0xcc>)
 8000bd8:	f008 fc2c 	bl	8009434 <puts>
 8000bdc:	e004      	b.n	8000be8 <Get_Reset_Cause+0xa8>
    } else {
        cause = RESET_CAUSE_UNKNOWN;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Unknown\r\n");
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <Get_Reset_Cause+0xd0>)
 8000be4:	f008 fc26 	bl	8009434 <puts>
    }

    return cause;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	0800b974 	.word	0x0800b974
 8000bfc:	0800b994 	.word	0x0800b994
 8000c00:	0800b9b8 	.word	0x0800b9b8
 8000c04:	0800b9e4 	.word	0x0800b9e4
 8000c08:	0800ba04 	.word	0x0800ba04
 8000c0c:	0800ba2c 	.word	0x0800ba2c
 8000c10:	0800ba4c 	.word	0x0800ba4c

08000c14 <_FlashReadAppUserConfig>:

void _FlashReadAppUserConfig(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	Flash_ReadFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_stUserConfig, sizeof(AplusUserConfig));
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <_FlashReadAppUserConfig+0x28>)
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <_FlashReadAppUserConfig+0x2c>)
 8000c1e:	f000 f8cc 	bl	8000dba <Flash_ReadFlash>

	if(g_stUserConfig.u16InitCode!=USER_CONFIG_INIT_CODE) {
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <_FlashReadAppUserConfig+0x28>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	f645 225a 	movw	r2, #23130	; 0x5a5a
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d004      	beq.n	8000c38 <_FlashReadAppUserConfig+0x24>
		printf("Init User Config\r\n");
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <_FlashReadAppUserConfig+0x30>)
 8000c30:	f008 fc00 	bl	8009434 <puts>
		_InitUserConfig();
 8000c34:	f000 f82e 	bl	8000c94 <_InitUserConfig>
	}
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000013c 	.word	0x2000013c
 8000c40:	08040960 	.word	0x08040960
 8000c44:	0800ba64 	.word	0x0800ba64

08000c48 <_FlashWriteAppUserConfig>:

void _FlashWriteAppUserConfig(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	// Set timestamp
	uint32_t timestamp;
	Timestamp_GetTimestamp(&timestamp);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fa4d 	bl	80010f0 <Timestamp_GetTimestamp>
 8000c56:	687b      	ldr	r3, [r7, #4]
	memcpy(&g_stUserConfig.au8Timestamp[0], &timestamp, 4);
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <_FlashWriteAppUserConfig+0x3c>)
 8000c5a:	6053      	str	r3, [r2, #4]

	printf("Erase Flash\r\n");
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <_FlashWriteAppUserConfig+0x40>)
 8000c5e:	f008 fbe9 	bl	8009434 <puts>
	Flash_EraseFlash(USER_CONFIG_SPACE_ORIGIN, USER_CONFIG_SPACE_SIZE_BYTES);
 8000c62:	f242 0148 	movw	r1, #8264	; 0x2048
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <_FlashWriteAppUserConfig+0x44>)
 8000c68:	f000 f8d6 	bl	8000e18 <Flash_EraseFlash>

	printf("Write Flash\r\n");
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <_FlashWriteAppUserConfig+0x48>)
 8000c6e:	f008 fbe1 	bl	8009434 <puts>
	Flash_WriteFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_stUserConfig, sizeof(AplusUserConfig));
 8000c72:	2208      	movs	r2, #8
 8000c74:	4903      	ldr	r1, [pc, #12]	; (8000c84 <_FlashWriteAppUserConfig+0x3c>)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <_FlashWriteAppUserConfig+0x44>)
 8000c78:	f000 f8fe 	bl	8000e78 <Flash_WriteFlash>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000013c 	.word	0x2000013c
 8000c88:	0800ba78 	.word	0x0800ba78
 8000c8c:	08040960 	.word	0x08040960
 8000c90:	0800ba88 	.word	0x0800ba88

08000c94 <_InitUserConfig>:

void _InitUserConfig(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	memset(&g_stUserConfig, 0, sizeof(AplusUserConfig));
 8000c98:	2208      	movs	r2, #8
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <_InitUserConfig+0x24>)
 8000c9e:	f008 f801 	bl	8008ca4 <memset>

	g_stUserConfig.u16InitCode = USER_CONFIG_INIT_CODE;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <_InitUserConfig+0x24>)
 8000ca4:	f645 225a 	movw	r2, #23130	; 0x5a5a
 8000ca8:	801a      	strh	r2, [r3, #0]
	g_stUserConfig.u16CfgSize  = sizeof(AplusUserConfig);
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <_InitUserConfig+0x24>)
 8000cac:	2208      	movs	r2, #8
 8000cae:	805a      	strh	r2, [r3, #2]

	_FlashWriteAppUserConfig();
 8000cb0:	f7ff ffca 	bl	8000c48 <_FlashWriteAppUserConfig>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000013c 	.word	0x2000013c

08000cbc <DataQueue_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void DataQueue_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	// Clear the contents of the reading queue
	memset(&g_acReadingBuffer[0], 0, READING_BUFF_NUM_BYTES);
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <DataQueue_Init+0x18>)
 8000cc6:	f007 ffed 	bl	8008ca4 <memset>
	s_u16QueueCount = 0;
 8000cca:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <DataQueue_Init+0x1c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	801a      	strh	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000148 	.word	0x20000148
 8000cd8:	20000144 	.word	0x20000144

08000cdc <DataQueue_Add>:

void DataQueue_Add(eDataType eType, uint8_t u8DataValue, uint8_t u8DataFloat) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	71bb      	strb	r3, [r7, #6]
 8000cea:	4613      	mov	r3, r2
 8000cec:	717b      	strb	r3, [r7, #5]
	tsData tsTempData;

	// Set timestamp
	uint32_t timestamp;
	Timestamp_GetTimestamp(&timestamp);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9fc 	bl	80010f0 <Timestamp_GetTimestamp>

	tsTempData.u32Timestamp = timestamp;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	617b      	str	r3, [r7, #20]
	tsTempData.eType = eType;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	743b      	strb	r3, [r7, #16]
	tsTempData.u8DataValue = u8DataValue;
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	747b      	strb	r3, [r7, #17]
	tsTempData.u8DataFloat = u8DataFloat;
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	74bb      	strb	r3, [r7, #18]

	memcpy(&g_acReadingBuffer[s_u16QueueCount], &tsTempData, sizeof(tsData));
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <DataQueue_Add+0x4c>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <DataQueue_Add+0x50>)
 8000d10:	4413      	add	r3, r2
 8000d12:	f107 0110 	add.w	r1, r7, #16
 8000d16:	2208      	movs	r2, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f007 ffb5 	bl	8008c88 <memcpy>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000144 	.word	0x20000144
 8000d2c:	20000148 	.word	0x20000148

08000d30 <__io_putchar>:

/** VARIABLES *****************************************************************/


/** LOCAL (PRIVATE) STRUCTURES AND ENUMERATIONS *******************************/
PUTCHAR_PROTOTYPE {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000d38:	1d39      	adds	r1, r7, #4
 8000d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <__io_putchar+0x20>)
 8000d42:	f007 f92e 	bl	8007fa2 <HAL_UART_Transmit>

  return ch;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000f60 	.word	0x20000f60

08000d54 <Debug_InitLog>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Debug_InitLog() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	/* Initialize all configured peripherals */
	  hDiscoUart.Instance = DISCOVERY_COM1;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <Debug_InitLog+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <Debug_InitLog+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
	  hDiscoUart.Init.BaudRate = 115200;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <Debug_InitLog+0x50>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
	  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <Debug_InitLog+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
	  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <Debug_InitLog+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
	  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <Debug_InitLog+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
	  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <Debug_InitLog+0x50>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
	  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <Debug_InitLog+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
	  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <Debug_InitLog+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
	  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <Debug_InitLog+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
	  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <Debug_InitLog+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24

	  BSP_COM_Init(COM1, &hDiscoUart);
 8000d96:	4903      	ldr	r1, [pc, #12]	; (8000da4 <Debug_InitLog+0x50>)
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f001 fb93 	bl	80024c4 <BSP_COM_Init>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000f60 	.word	0x20000f60
 8000da8:	40013800 	.word	0x40013800

08000dac <Flash_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Flash_Init(void) {
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <Flash_ReadFlash>:

void Flash_ReadFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b088      	sub	sp, #32
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint64_t data;

    for (i = 0; i < size; i += 8) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e01b      	b.n	8000e04 <Flash_ReadFlash+0x4a>
        // Read 8 bytes (double word) from the flash memory
        data = *(__IO uint64_t *)(byteAddress + i);
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Copy the data to the buffer
        memcpy(&buffer[i], &data, (i + 8 <= size) ? 8 : (size - i));
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	18d0      	adds	r0, r2, r3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	3308      	adds	r3, #8
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d203      	bcs.n	8000df2 <Flash_ReadFlash+0x38>
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	e000      	b.n	8000df4 <Flash_ReadFlash+0x3a>
 8000df2:	2308      	movs	r3, #8
 8000df4:	f107 0110 	add.w	r1, r7, #16
 8000df8:	461a      	mov	r2, r3
 8000dfa:	f007 ff45 	bl	8008c88 <memcpy>
    for (i = 0; i < size; i += 8) {
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3308      	adds	r3, #8
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3df      	bcc.n	8000dcc <Flash_ReadFlash+0x12>
    }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <Flash_EraseFlash>:


void Flash_EraseFlash(uint32_t byteAddress, uint32_t size) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	uint32_t pageError = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef eraseInitStruct;

	// Calculate the start page number
	uint32_t startPage = (byteAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e2c:	0adb      	lsrs	r3, r3, #11
 8000e2e:	61fb      	str	r3, [r7, #28]

	// Unlock the Flash memory
	HAL_FLASH_Unlock();
 8000e30:	f002 f94c 	bl	80030cc <HAL_FLASH_Unlock>

	// Clear any existing error flags
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <Flash_EraseFlash+0x5c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <Flash_EraseFlash+0x5c>)
 8000e3a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <Flash_EraseFlash+0x5c>)
 8000e42:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000e46:	611a      	str	r2, [r3, #16]

	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
	eraseInitStruct.Page = startPage;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	613b      	str	r3, [r7, #16]
	eraseInitStruct.NbPages = (size/FLASH_PAGE_SIZE);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	0adb      	lsrs	r3, r3, #11
 8000e54:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 8000e56:	f107 0218 	add.w	r2, r7, #24
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fa17 	bl	8003294 <HAL_FLASHEx_Erase>
		// Handle erase error
	}

	// Lock the Flash memory
	HAL_FLASH_Lock();
 8000e66:	f002 f953 	bl	8003110 <HAL_FLASH_Lock>
}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000

08000e78 <Flash_WriteFlash>:

void Flash_WriteFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint64_t data;

    // Unlock the Flash memory
    HAL_FLASH_Unlock();
 8000e84:	f002 f922 	bl	80030cc <HAL_FLASH_Unlock>

    // Clear any existing error flags
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <Flash_WriteFlash+0x84>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <Flash_WriteFlash+0x84>)
 8000e8e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <Flash_WriteFlash+0x84>)
 8000e96:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000e9a:	611a      	str	r2, [r3, #16]

    for (i = 0; i < size; i += 8) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	e022      	b.n	8000ee8 <Flash_WriteFlash+0x70>
        // Zero the data variable to ensure proper padding
        data = 0;
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Read up to 8 bytes from the buffer
        memcpy(&data, &buffer[i], (i + 8 <= size) ? 8 : (size - i));
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	18d1      	adds	r1, r2, r3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d203      	bcs.n	8000ec6 <Flash_WriteFlash+0x4e>
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	e000      	b.n	8000ec8 <Flash_WriteFlash+0x50>
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	f107 0010 	add.w	r0, r7, #16
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f007 fedb 	bl	8008c88 <memcpy>

        // Write the double word to the flash memory
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, byteAddress + i, data) != HAL_OK) {
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	18d1      	adds	r1, r2, r3
 8000ed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000edc:	2000      	movs	r0, #0
 8000ede:	f002 f889 	bl	8002ff4 <HAL_FLASH_Program>
    for (i = 0; i < size; i += 8) {
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3308      	adds	r3, #8
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d3d8      	bcc.n	8000ea2 <Flash_WriteFlash+0x2a>
            // Handle write error
        }
    }

    // Lock the Flash memory
    HAL_FLASH_Lock();
 8000ef0:	f002 f90e 	bl	8003110 <HAL_FLASH_Lock>
}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40022000 	.word	0x40022000

08000f00 <HumiditySensor_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void HumiditySensor_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	BSP_HSENSOR_Init();
 8000f04:	f001 fc9a 	bl	800283c <BSP_HSENSOR_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HumiditySensor_GetData>:

void HumiditySensor_GetData(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
	float hum_value = 0;  // Measured temperature value
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
	hum_value = BSP_HSENSOR_ReadHumidity();
 8000f18:	f001 fcb0 	bl	800287c <BSP_HSENSOR_ReadHumidity>
 8000f1c:	ed87 0a05 	vstr	s0, [r7, #20]
	uint8_t humInt1 = hum_value;
 8000f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f28:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f2c:	793b      	ldrb	r3, [r7, #4]
 8000f2e:	74fb      	strb	r3, [r7, #19]
	float humFrac = hum_value - humInt1;
 8000f30:	7cfb      	ldrb	r3, [r7, #19]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f42:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t humInt2 = trunc(humFrac * 100);
 8000f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f8c <HumiditySensor_GetData+0x80>
 8000f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f52:	ee17 0a90 	vmov	r0, s15
 8000f56:	f7ff fb07 	bl	8000568 <__aeabi_f2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	ec43 2b10 	vmov	d0, r2, r3
 8000f62:	f00a fc09 	bl	800b778 <trunc>
 8000f66:	ec53 2b10 	vmov	r2, r3, d0
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fb53 	bl	8000618 <__aeabi_d2uiz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	72fb      	strb	r3, [r7, #11]

	DataQueue_Add(DATA_TYPE_HUM, humInt1, humInt2);
 8000f76:	7afa      	ldrb	r2, [r7, #11]
 8000f78:	7cfb      	ldrb	r3, [r7, #19]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff fead 	bl	8000cdc <DataQueue_Add>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	42c80000 	.word	0x42c80000

08000f90 <TempSensor_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void TempSensor_Init(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	BSP_TSENSOR_Init();
 8000f94:	f001 fc80 	bl	8002898 <BSP_TSENSOR_Init>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <TempSensor_GetData>:

void TempSensor_GetData(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
	float temp_value = 0;  // Measured temperature value
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
	temp_value = BSP_TSENSOR_ReadTemp();
 8000fa8:	f001 fc92 	bl	80028d0 <BSP_TSENSOR_ReadTemp>
 8000fac:	ed87 0a05 	vstr	s0, [r7, #20]
	uint8_t tmpInt1 = temp_value;
 8000fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fbc:	793b      	ldrb	r3, [r7, #4]
 8000fbe:	74fb      	strb	r3, [r7, #19]
	float tmpFrac = temp_value - tmpInt1;
 8000fc0:	7cfb      	ldrb	r3, [r7, #19]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd2:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t tmpInt2 = trunc(tmpFrac * 100);
 8000fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fda:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800101c <TempSensor_GetData+0x80>
 8000fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe2:	ee17 0a90 	vmov	r0, s15
 8000fe6:	f7ff fabf 	bl	8000568 <__aeabi_f2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	ec43 2b10 	vmov	d0, r2, r3
 8000ff2:	f00a fbc1 	bl	800b778 <trunc>
 8000ff6:	ec53 2b10 	vmov	r2, r3, d0
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fb0b 	bl	8000618 <__aeabi_d2uiz>
 8001002:	4603      	mov	r3, r0
 8001004:	72fb      	strb	r3, [r7, #11]

	DataQueue_Add(DATA_TYPE_TEMP, tmpInt1, tmpInt2);
 8001006:	7afa      	ldrb	r2, [r7, #11]
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	4619      	mov	r1, r3
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fe65 	bl	8000cdc <DataQueue_Add>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	42c80000 	.word	0x42c80000

08001020 <Timestamp_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Timestamp_Init(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	// Enable the RTC Clock
	__HAL_RCC_RTC_ENABLE();
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <Timestamp_Init+0x48>)
 8001026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <Timestamp_Init+0x48>)
 800102c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Configure the RTC
	hrtc.Instance = RTC;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <Timestamp_Init+0x4c>)
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <Timestamp_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <Timestamp_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <Timestamp_Init+0x4c>)
 8001042:	227f      	movs	r2, #127	; 0x7f
 8001044:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <Timestamp_Init+0x4c>)
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <Timestamp_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <Timestamp_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <Timestamp_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]

	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <Timestamp_Init+0x4c>)
 8001060:	f004 fd78 	bl	8005b54 <HAL_RTC_Init>
		/* Initialization Error */
	}
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000
 800106c:	2000055c 	.word	0x2000055c
 8001070:	40002800 	.word	0x40002800

08001074 <Timestamp_SetTimestamp>:

bool Timestamp_SetTimestamp(uint32_t timestamp) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	struct tm *tm;

	// Convert the epoch timestamp to tm struct
	tm = localtime((time_t *)&timestamp);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4618      	mov	r0, r3
 8001080:	f007 fce0 	bl	8008a44 <localtime>
 8001084:	6278      	str	r0, [r7, #36]	; 0x24

	// Populate the date and time structs
	date.Year = tm->tm_year - 100;
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	3b64      	subs	r3, #100	; 0x64
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date.Month = tm->tm_mon + 1;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3301      	adds	r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date.Date = tm->tm_mday;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time.Hours = tm->tm_hour;
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	733b      	strb	r3, [r7, #12]
	time.Minutes = tm->tm_min;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	737b      	strb	r3, [r7, #13]
	time.Seconds = tm->tm_sec;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]

	// Set the RTC date and time
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <Timestamp_SetTimestamp+0x78>)
 80010ce:	f004 febf 	bl	8005e50 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <Timestamp_SetTimestamp+0x78>)
 80010dc:	f004 fdbf 	bl	8005c5e <HAL_RTC_SetTime>

	return true;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000055c 	.word	0x2000055c

080010f0 <Timestamp_GetTimestamp>:

void Timestamp_GetTimestamp(uint32_t *timestamp) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b092      	sub	sp, #72	; 0x48
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	struct tm tm;

	// Read the current date and time from RTC
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80010f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <Timestamp_GetTimestamp+0x68>)
 8001102:	f004 ff2c 	bl	8005f5e <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <Timestamp_GetTimestamp+0x68>)
 8001110:	f004 fe42 	bl	8005d98 <HAL_RTC_GetTime>

	// Populate the tm struct
	tm.tm_year = date.Year + 100;  // Years since 1900
 8001114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001118:	3364      	adds	r3, #100	; 0x64
 800111a:	623b      	str	r3, [r7, #32]
	tm.tm_mon = date.Month - 1;
 800111c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001120:	3b01      	subs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
	tm.tm_mday = date.Date;
 8001124:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001128:	61bb      	str	r3, [r7, #24]
	tm.tm_hour = time.Hours;
 800112a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800112e:	617b      	str	r3, [r7, #20]
	tm.tm_min = time.Minutes;
 8001130:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001134:	613b      	str	r3, [r7, #16]
	tm.tm_sec = time.Seconds;
 8001136:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800113a:	60fb      	str	r3, [r7, #12]

	*timestamp = mktime(&tm);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4618      	mov	r0, r3
 8001142:	f007 fe8f 	bl	8008e64 <mktime>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3748      	adds	r7, #72	; 0x48
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000055c 	.word	0x2000055c

0800115c <Watchdog_Init>:
/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/

void Watchdog_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <Watchdog_Init+0x2c>)
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <Watchdog_Init+0x30>)
 8001164:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = WATCHDOG_PRESCALER;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <Watchdog_Init+0x2c>)
 8001168:	2206      	movs	r2, #6
 800116a:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = WATCHDOG_RELOAD;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <Watchdog_Init+0x2c>)
 800116e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001172:	609a      	str	r2, [r3, #8]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <Watchdog_Init+0x2c>)
 8001176:	f640 72ff 	movw	r2, #4095	; 0xfff
 800117a:	60da      	str	r2, [r3, #12]


	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <Watchdog_Init+0x2c>)
 800117e:	f003 f9b0 	bl	80044e2 <HAL_IWDG_Init>
		/* Initialization Error */
	}
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000580 	.word	0x20000580
 800118c:	40003000 	.word	0x40003000

08001190 <Watchdog_Feed>:


void Watchdog_Feed(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <Watchdog_Feed+0x10>)
 8001196:	f003 f9f3 	bl	8004580 <HAL_IWDG_Refresh>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000580 	.word	0x20000580

080011a4 <Wifi_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
int8_t Wifi_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	// Init vars.
	WIFI_Status_t stmRet;

	// Initialize the WiFi info structure
	memset((uint8_t *)&s_stWiFiInfo, 0, sizeof(sWiFiInfo));
 80011aa:	2213      	movs	r2, #19
 80011ac:	2100      	movs	r1, #0
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <Wifi_Init+0x30>)
 80011b0:	f007 fd78 	bl	8008ca4 <memset>

	// Initalize Wifi stack.
	stmRet = WIFI_Init();
 80011b4:	f000 ffee 	bl	8002194 <WIFI_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <Wifi_Init+0x24>
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	e000      	b.n	80011ca <Wifi_Init+0x26>

	// Set Response.
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000548 	.word	0x20000548

080011d8 <Wifi_Connect>:

int8_t Wifi_Connect(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	// Init vars.
	WIFI_Status_t stmRet;

	memset(&s_stWiFiInfo.au8IpAddr[0], 0, 4);
 80011de:	2204      	movs	r2, #4
 80011e0:	2100      	movs	r1, #0
 80011e2:	4810      	ldr	r0, [pc, #64]	; (8001224 <Wifi_Connect+0x4c>)
 80011e4:	f007 fd5e 	bl	8008ca4 <memset>
//	memset(&s_stWiFiInfo.au8SubnetMask[0], 0, 4);
//	memset(&s_stWiFiInfo.au8Gateway[0], 0, 4);
//	memset(&s_stWiFiInfo.au8Dns[0], 0, 4);

	// Attempt connect with hardcode SSID and Password.
	stmRet = WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK);
 80011e8:	2203      	movs	r2, #3
 80011ea:	490f      	ldr	r1, [pc, #60]	; (8001228 <Wifi_Connect+0x50>)
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <Wifi_Connect+0x54>)
 80011ee:	f000 fffd 	bl	80021ec <WIFI_Connect>
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <Wifi_Connect+0x2a>
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	e00c      	b.n	800121c <Wifi_Connect+0x44>

	// Get network information
	stmRet = WIFI_GetIP_Address(&s_stWiFiInfo.au8IpAddr[0], sizeof(&s_stWiFiInfo.au8IpAddr[0]));
 8001202:	2104      	movs	r1, #4
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <Wifi_Connect+0x4c>)
 8001206:	f001 f813 	bl	8002230 <WIFI_GetIP_Address>
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <Wifi_Connect+0x42>
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	e000      	b.n	800121c <Wifi_Connect+0x44>
//	memcpy(&s_stWiFiInfo.au8SubnetMask[0], esWifiObj.NetSettings.IP_Mask, 4);
//	memcpy(&s_stWiFiInfo.au8Gateway[0], esWifiObj.NetSettings.Gateway_Addr, 4);
//	memcpy(&s_stWiFiInfo.au8Dns[0], esWifiObj.NetSettings.DNS1, 4);

	// Set Response.
	return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000054b 	.word	0x2000054b
 8001228:	0800ba98 	.word	0x0800ba98
 800122c:	0800baa4 	.word	0x0800baa4

08001230 <system_init>:

static void SystemClock_Config(void);
static void RTCClock_Config(void);
static void Timer_Config(void);

void system_init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001234:	f001 fcec 	bl	8002c10 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001238:	f000 f806 	bl	8001248 <SystemClock_Config>

	/* Configure the rtc clock */
	RTCClock_Config();
 800123c:	f000 f83e 	bl	80012bc <RTCClock_Config>

	Timer_Config();
 8001240:	f000 f87a 	bl	8001338 <Timer_Config>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <SystemClock_Config>:
  *            PLL_Q                          = 4
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b096      	sub	sp, #88	; 0x58
 800124c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800124e:	2310      	movs	r3, #16
 8001250:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001256:	2360      	movs	r3, #96	; 0x60
 8001258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001262:	2301      	movs	r3, #1
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001266:	2301      	movs	r3, #1
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 800126a:	2328      	movs	r3, #40	; 0x28
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001272:	2307      	movs	r3, #7
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001276:	2304      	movs	r3, #4
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4618      	mov	r0, r3
 800127e:	f003 f9ad 	bl	80045dc <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d000      	beq.n	800128a <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8001288:	e7fe      	b.n	8001288 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800128a:	230f      	movs	r3, #15
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2303      	movs	r3, #3
 8001290:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800129e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012a2:	2104      	movs	r1, #4
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fd75 	bl	8004d94 <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d000      	beq.n	80012b2 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 80012b0:	e7fe      	b.n	80012b0 <SystemClock_Config+0x68>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3758      	adds	r7, #88	; 0x58
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <RTCClock_Config>:

static void RTCClock_Config(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0b4      	sub	sp, #208	; 0xd0
 80012c0:	af00      	add	r7, sp, #0
	// Enable the Power Clock and enable access to the RTC domain
	__HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <RTCClock_Config+0x78>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <RTCClock_Config+0x78>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <RTCClock_Config+0x78>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
	HAL_PWR_EnableBkUpAccess();
 80012da:	f003 f961 	bl	80045a0 <HAL_PWR_EnableBkUpAccess>

	// Enable the LSE (Low-Speed External) or LSI (Low-Speed Internal) oscillator
	// If your board has an external 32.768 kHz crystal, use LSE
	// Otherwise, use LSI
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012e2:	2244      	movs	r2, #68	; 0x44
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f007 fcdc 	bl	8008ca4 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80012ec:	2304      	movs	r3, #4
 80012ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001302:	4618      	mov	r0, r3
 8001304:	f003 f96a 	bl	80045dc <HAL_RCC_OscConfig>
		/* Initialization Error */
	}

	// Configure the RTC clock source
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2288      	movs	r2, #136	; 0x88
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f007 fcc8 	bl	8008ca4 <memset>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001318:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800131a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f003 ff59 	bl	80051dc <HAL_RCCEx_PeriphCLKConfig>
		/* Initialization Error */
	}
}
 800132a:	bf00      	nop
 800132c:	37d0      	adds	r7, #208	; 0xd0
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <Timer_Config>:
static void Timer_Config(void) {
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d102      	bne.n	800135c <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8001356:	f000 ff0d 	bl	8002174 <SPI_WIFI_ISR>
      break;
 800135a:	e000      	b.n	800135e <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 800135c:	bf00      	nop
    }
  }
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <SPI3_IRQHandler+0x10>)
 800136e:	f005 ff3d 	bl	80071ec <HAL_SPI_IRQHandler>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000590 	.word	0x20000590

0800137c <stm_start_init>:
#include "stm_start.h"

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void stm_start_init(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	system_init();
 8001380:	f7ff ff56 	bl	8001230 <system_init>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b2d      	cmp	r3, #45	; 0x2d
 80013a4:	d119      	bne.n	80013da <ParseNumber+0x52>
        minus = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
        done_count++;
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80013b6:	e010      	b.n	80013da <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	3b30      	subs	r3, #48	; 0x30
 80013ca:	4413      	add	r3, r2
 80013cc:	60bb      	str	r3, [r7, #8]
        ptr++;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3301      	adds	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
        done_count++;
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	3301      	adds	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b2f      	cmp	r3, #47	; 0x2f
 80013e0:	d903      	bls.n	80013ea <ParseNumber+0x62>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b39      	cmp	r3, #57	; 0x39
 80013e8:	d9e6      	bls.n	80013b8 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <ParseNumber+0x6e>
        *cnt = done_count;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <ParseNumber+0x7a>
        return 0 - sum;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	425b      	negs	r3, r3
 8001400:	e000      	b.n	8001404 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001402:	68bb      	ldr	r3, [r7, #8]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d027      	beq.n	8001476 <ParseIP+0x66>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d024      	beq.n	8001476 <ParseIP+0x66>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d921      	bls.n	8001476 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001432:	e019      	b.n	8001468 <ParseIP+0x58>
    uint8_t done_count = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b2e      	cmp	r3, #46	; 0x2e
 800143e:	d00e      	beq.n	800145e <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001440:	f107 0316 	add.w	r3, r7, #22
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ff9e 	bl	8001388 <ParseNumber>
 800144c:	4601      	mov	r1, r0
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	75fa      	strb	r2, [r7, #23]
 8001454:	461a      	mov	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 800145e:	7dbb      	ldrb	r3, [r7, #22]
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d803      	bhi.n	8001476 <ParseIP+0x66>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1de      	bne.n	8001434 <ParseIP+0x24>
   }
  }
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3302      	adds	r3, #2
 8001492:	4940      	ldr	r1, [pc, #256]	; (8001594 <AT_ParseInfo+0x114>)
 8001494:	4618      	mov	r0, r3
 8001496:	f008 f843 	bl	8009520 <strtok>
 800149a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800149c:	e071      	b.n	8001582 <AT_ParseInfo+0x102>
    switch (num++) {
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	72fa      	strb	r2, [r7, #11]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d866      	bhi.n	8001576 <AT_ParseInfo+0xf6>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <AT_ParseInfo+0x30>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014cd 	.word	0x080014cd
 80014b4:	080014e1 	.word	0x080014e1
 80014b8:	080014f9 	.word	0x080014f9
 80014bc:	08001511 	.word	0x08001511
 80014c0:	08001529 	.word	0x08001529
 80014c4:	08001541 	.word	0x08001541
 80014c8:	08001555 	.word	0x08001555
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	221f      	movs	r2, #31
 80014d0:	68f9      	ldr	r1, [r7, #12]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f007 fffa 	bl	80094cc <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	77da      	strb	r2, [r3, #31]
      break;
 80014de:	e04b      	b.n	8001578 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3320      	adds	r3, #32
 80014e4:	2217      	movs	r2, #23
 80014e6:	68f9      	ldr	r1, [r7, #12]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f007 ffef 	bl	80094cc <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 80014f6:	e03f      	b.n	8001578 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3338      	adds	r3, #56	; 0x38
 80014fc:	220f      	movs	r2, #15
 80014fe:	68f9      	ldr	r1, [r7, #12]
 8001500:	4618      	mov	r0, r3
 8001502:	f007 ffe3 	bl	80094cc <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800150e:	e033      	b.n	8001578 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3348      	adds	r3, #72	; 0x48
 8001514:	220f      	movs	r2, #15
 8001516:	68f9      	ldr	r1, [r7, #12]
 8001518:	4618      	mov	r0, r3
 800151a:	f007 ffd7 	bl	80094cc <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8001526:	e027      	b.n	8001578 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3358      	adds	r3, #88	; 0x58
 800152c:	220f      	movs	r2, #15
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	4618      	mov	r0, r3
 8001532:	f007 ffcb 	bl	80094cc <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 800153e:	e01b      	b.n	8001578 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001540:	2100      	movs	r1, #0
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff ff20 	bl	8001388 <ParseNumber>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001552:	e011      	b.n	8001578 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001554:	4910      	ldr	r1, [pc, #64]	; (8001598 <AT_ParseInfo+0x118>)
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f007 ffe2 	bl	8009520 <strtok>
 800155c:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3368      	adds	r3, #104	; 0x68
 8001562:	221f      	movs	r2, #31
 8001564:	68f9      	ldr	r1, [r7, #12]
 8001566:	4618      	mov	r0, r3
 8001568:	f007 ffb0 	bl	80094cc <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8001574:	e000      	b.n	8001578 <AT_ParseInfo+0xf8>

    default: break;
 8001576:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001578:	4906      	ldr	r1, [pc, #24]	; (8001594 <AT_ParseInfo+0x114>)
 800157a:	2000      	movs	r0, #0
 800157c:	f007 ffd0 	bl	8009520 <strtok>
 8001580:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d18a      	bne.n	800149e <AT_ParseInfo+0x1e>
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	0800bad8 	.word	0x0800bad8
 8001598:	0800badc 	.word	0x0800badc

0800159c <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3302      	adds	r3, #2
 80015ae:	4959      	ldr	r1, [pc, #356]	; (8001714 <AT_ParseConnSettings+0x178>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f007 ffb5 	bl	8009520 <strtok>
 80015b6:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80015b8:	e0a2      	b.n	8001700 <AT_ParseConnSettings+0x164>
    switch (num++) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	73fa      	strb	r2, [r7, #15]
 80015c0:	2b0b      	cmp	r3, #11
 80015c2:	f200 808c 	bhi.w	80016de <AT_ParseConnSettings+0x142>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <AT_ParseConnSettings+0x30>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	080015fd 	.word	0x080015fd
 80015d0:	08001613 	.word	0x08001613
 80015d4:	0800162b 	.word	0x0800162b
 80015d8:	0800163f 	.word	0x0800163f
 80015dc:	08001653 	.word	0x08001653
 80015e0:	08001667 	.word	0x08001667
 80015e4:	08001677 	.word	0x08001677
 80015e8:	08001687 	.word	0x08001687
 80015ec:	08001697 	.word	0x08001697
 80015f0:	080016a7 	.word	0x080016a7
 80015f4:	080016b7 	.word	0x080016b7
 80015f8:	080016cb 	.word	0x080016cb
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	4618      	mov	r0, r3
 8001604:	f007 ff62 	bl	80094cc <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001610:	e066      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3321      	adds	r3, #33	; 0x21
 8001616:	2220      	movs	r2, #32
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	4618      	mov	r0, r3
 800161c:	f007 ff56 	bl	80094cc <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 8001628:	e05a      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800162a:	2100      	movs	r1, #0
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f7ff feab 	bl	8001388 <ParseNumber>
 8001632:	4603      	mov	r3, r0
 8001634:	b2da      	uxtb	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800163c:	e050      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 800163e:	2100      	movs	r1, #0
 8001640:	68b8      	ldr	r0, [r7, #8]
 8001642:	f7ff fea1 	bl	8001388 <ParseNumber>
 8001646:	4603      	mov	r3, r0
 8001648:	b2da      	uxtb	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8001650:	e046      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001652:	2100      	movs	r1, #0
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f7ff fe97 	bl	8001388 <ParseNumber>
 800165a:	4603      	mov	r3, r0
 800165c:	b2da      	uxtb	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001664:	e03c      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3348      	adds	r3, #72	; 0x48
 800166a:	2204      	movs	r2, #4
 800166c:	4619      	mov	r1, r3
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f7ff fece 	bl	8001410 <ParseIP>
      break;
 8001674:	e034      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	334c      	adds	r3, #76	; 0x4c
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f7ff fec6 	bl	8001410 <ParseIP>
      break;
 8001684:	e02c      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3350      	adds	r3, #80	; 0x50
 800168a:	2204      	movs	r2, #4
 800168c:	4619      	mov	r1, r3
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7ff febe 	bl	8001410 <ParseIP>
      break;
 8001694:	e024      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3354      	adds	r3, #84	; 0x54
 800169a:	2204      	movs	r2, #4
 800169c:	4619      	mov	r1, r3
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f7ff feb6 	bl	8001410 <ParseIP>
      break;
 80016a4:	e01c      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3358      	adds	r3, #88	; 0x58
 80016aa:	2204      	movs	r2, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7ff feae 	bl	8001410 <ParseIP>
      break;
 80016b4:	e014      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 80016b6:	2100      	movs	r1, #0
 80016b8:	68b8      	ldr	r0, [r7, #8]
 80016ba:	f7ff fe65 	bl	8001388 <ParseNumber>
 80016be:	4603      	mov	r3, r0
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80016c8:	e00a      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 80016ca:	2100      	movs	r1, #0
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f7ff fe5b 	bl	8001388 <ParseNumber>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80016dc:	e000      	b.n	80016e0 <AT_ParseConnSettings+0x144>

    default:
      break;
 80016de:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <AT_ParseConnSettings+0x178>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f007 ff1c 	bl	8009520 <strtok>
 80016e8:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <AT_ParseConnSettings+0x164>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b2c      	cmp	r3, #44	; 0x2c
 80016f8:	d102      	bne.n	8001700 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3301      	adds	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f af59 	bne.w	80015ba <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800bad8 	.word	0x0800bad8

08001718 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001732:	2b00      	cmp	r3, #0
 8001734:	d056      	beq.n	80017e4 <AT_ExecuteCommand+0xcc>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800173c:	2b00      	cmp	r3, #0
 800173e:	d051      	beq.n	80017e4 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001746:	68b8      	ldr	r0, [r7, #8]
 8001748:	f7fe fd42 	bl	80001d0 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b299      	uxth	r1, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001756:	461a      	mov	r2, r3
 8001758:	68b8      	ldr	r0, [r7, #8]
 800175a:	47a0      	blx	r4
 800175c:	4603      	mov	r3, r0
 800175e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	dd3e      	ble.n	80017e4 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001772:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
 800177a:	4603      	mov	r3, r0
 800177c:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800177e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001782:	2b00      	cmp	r3, #0
 8001784:	dd27      	ble.n	80017d6 <AT_ExecuteCommand+0xbe>
 8001786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800178a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800178e:	dc22      	bgt.n	80017d6 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001790:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001794:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001798:	d105      	bne.n	80017a6 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800179a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 80017a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 80017b2:	490f      	ldr	r1, [pc, #60]	; (80017f0 <AT_ExecuteCommand+0xd8>)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f007 fe9c 	bl	80094f2 <strstr>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e010      	b.n	80017e6 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80017c4:	490b      	ldr	r1, [pc, #44]	; (80017f4 <AT_ExecuteCommand+0xdc>)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f007 fe93 	bl	80094f2 <strstr>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80017d2:	2305      	movs	r3, #5
 80017d4:	e007      	b.n	80017e6 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80017d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017da:	f113 0f04 	cmn.w	r3, #4
 80017de:	d101      	bne.n	80017e4 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80017e0:	2306      	movs	r3, #6
 80017e2:	e000      	b.n	80017e6 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80017e4:	2304      	movs	r3, #4
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800baf0 	.word	0x0800baf0
 80017f4:	0800bafc 	.word	0x0800bafc

080017f8 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001800:	2302      	movs	r3, #2
 8001802:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f247 5230 	movw	r2, #30000	; 0x7530
 800180a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800181e:	2000      	movs	r0, #0
 8001820:	4798      	blx	r3
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d113      	bne.n	8001850 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800182e:	461a      	mov	r2, r3
 8001830:	490a      	ldr	r1, [pc, #40]	; (800185c <ES_WIFI_Init+0x64>)
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff70 	bl	8001718 <AT_ExecuteCommand>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001848:	4619      	mov	r1, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fe18 	bl	8001480 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800bb0c 	.word	0x0800bb0c

08001860 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <ES_WIFI_RegisterBusIO+0x2c>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <ES_WIFI_RegisterBusIO+0x2c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <ES_WIFI_RegisterBusIO+0x2c>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <ES_WIFI_RegisterBusIO+0x2c>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800188c:	2302      	movs	r3, #2
 800188e:	e014      	b.n	80018ba <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	4932      	ldr	r1, [pc, #200]	; (80019a8 <ES_WIFI_Connect+0xe0>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fdbf 	bl	8009464 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018f2:	461a      	mov	r2, r3
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff ff0f 	bl	8001718 <AT_ExecuteCommand>
 80018fa:	4603      	mov	r3, r0
 80018fc:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d14b      	bne.n	800199c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4927      	ldr	r1, [pc, #156]	; (80019ac <ES_WIFI_Connect+0xe4>)
 800190e:	4618      	mov	r0, r3
 8001910:	f007 fda8 	bl	8009464 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001920:	461a      	mov	r2, r3
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff fef8 	bl	8001718 <AT_ExecuteCommand>
 8001928:	4603      	mov	r3, r0
 800192a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d134      	bne.n	800199c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	491b      	ldr	r1, [pc, #108]	; (80019b0 <ES_WIFI_Connect+0xe8>)
 8001944:	4618      	mov	r0, r3
 8001946:	f007 fd8d 	bl	8009464 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001956:	461a      	mov	r2, r3
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff fedd 	bl	8001718 <AT_ExecuteCommand>
 800195e:	4603      	mov	r3, r0
 8001960:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d119      	bne.n	800199c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800196e:	4911      	ldr	r1, [pc, #68]	; (80019b4 <ES_WIFI_Connect+0xec>)
 8001970:	4618      	mov	r0, r3
 8001972:	f007 fd77 	bl	8009464 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001982:	461a      	mov	r2, r3
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fec7 	bl	8001718 <AT_ExecuteCommand>
 800198a:	4603      	mov	r3, r0
 800198c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800199c:	7dfb      	ldrb	r3, [r7, #23]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0800bb24 	.word	0x0800bb24
 80019ac:	0800bb2c 	.word	0x0800bb2c
 80019b0:	0800bb34 	.word	0x0800bb34
 80019b4:	0800bb3c 	.word	0x0800bb3c

080019b8 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019c6:	4913      	ldr	r1, [pc, #76]	; (8001a14 <ES_WIFI_IsConnected+0x5c>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f007 fd4b 	bl	8009464 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019da:	461a      	mov	r2, r3
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fe9b 	bl	8001718 <AT_ExecuteCommand>
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10b      	bne.n	8001a04 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80019f2:	2b31      	cmp	r3, #49	; 0x31
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	0800bb40 	.word	0x0800bb40

08001a18 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a26:	4910      	ldr	r1, [pc, #64]	; (8001a68 <ES_WIFI_GetNetworkSettings+0x50>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f007 fd1b 	bl	8009464 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fe6b 	bl	8001718 <AT_ExecuteCommand>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	338d      	adds	r3, #141	; 0x8d
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff fd9f 	bl	800159c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	0800bb48 	.word	0x0800bb48

08001a6c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001a74:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a56      	ldr	r2, [pc, #344]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a80:	4b54      	ldr	r3, [pc, #336]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a98:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001abc:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac0:	4a44      	ldr	r2, [pc, #272]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac8:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <SPI_WIFI_MspInit+0x168>)
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ada:	483f      	ldr	r0, [pc, #252]	; (8001bd8 <SPI_WIFI_MspInit+0x16c>)
 8001adc:	f001 fee0 	bl	80038a0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4837      	ldr	r0, [pc, #220]	; (8001bd8 <SPI_WIFI_MspInit+0x16c>)
 8001afa:	f001 fd0f 	bl	800351c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001b02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b06:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4831      	ldr	r0, [pc, #196]	; (8001bdc <SPI_WIFI_MspInit+0x170>)
 8001b18:	f001 fd00 	bl	800351c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4828      	ldr	r0, [pc, #160]	; (8001bdc <SPI_WIFI_MspInit+0x170>)
 8001b3a:	f001 fcef 	bl	800351c <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2101      	movs	r1, #1
 8001b42:	4826      	ldr	r0, [pc, #152]	; (8001bdc <SPI_WIFI_MspInit+0x170>)
 8001b44:	f001 feac 	bl	80038a0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481f      	ldr	r0, [pc, #124]	; (8001bdc <SPI_WIFI_MspInit+0x170>)
 8001b60:	f001 fcdc 	bl	800351c <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001b72:	2301      	movs	r3, #1
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001b76:	2306      	movs	r3, #6
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4817      	ldr	r0, [pc, #92]	; (8001be0 <SPI_WIFI_MspInit+0x174>)
 8001b82:	f001 fccb 	bl	800351c <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001b98:	2306      	movs	r3, #6
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480f      	ldr	r0, [pc, #60]	; (8001be0 <SPI_WIFI_MspInit+0x174>)
 8001ba4:	f001 fcba 	bl	800351c <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001bba:	2306      	movs	r3, #6
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <SPI_WIFI_MspInit+0x174>)
 8001bc6:	f001 fca9 	bl	800351c <HAL_GPIO_Init>
}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	; 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	48001000 	.word	0x48001000
 8001be0:	48000800 	.word	0x48000800

08001be4 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d145      	bne.n	8001c84 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001bfa:	4a28      	ldr	r2, [pc, #160]	; (8001c9c <SPI_WIFI_Init+0xb8>)
 8001bfc:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001bfe:	4826      	ldr	r0, [pc, #152]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c00:	f7ff ff34 	bl	8001a6c <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c06:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c0a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c14:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001c18:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c30:	2210      	movs	r2, #16
 8001c32:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001c4c:	4812      	ldr	r0, [pc, #72]	; (8001c98 <SPI_WIFI_Init+0xb4>)
 8001c4e:	f004 faa5 	bl	800619c <HAL_SPI_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	e018      	b.n	8001c90 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2007      	movs	r0, #7
 8001c64:	f001 f94f 	bl	8002f06 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001c68:	2007      	movs	r0, #7
 8001c6a:	f001 f968 	bl	8002f3e <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2033      	movs	r0, #51	; 0x33
 8001c74:	f001 f947 	bl	8002f06 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001c78:	2033      	movs	r0, #51	; 0x33
 8001c7a:	f001 f960 	bl	8002f3e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001c7e:	200a      	movs	r0, #10
 8001c80:	f000 f9fe 	bl	8002080 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8001c84:	f000 f80c 	bl	8001ca0 <SPI_WIFI_ResetModule>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000590 	.word	0x20000590
 8001c9c:	40003c00 	.word	0x40003c00

08001ca0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001ca6:	f001 f823 	bl	8002cf0 <HAL_GetTick>
 8001caa:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb6:	4830      	ldr	r0, [pc, #192]	; (8001d78 <SPI_WIFI_ResetModule+0xd8>)
 8001cb8:	f001 fdf2 	bl	80038a0 <HAL_GPIO_WritePin>
 8001cbc:	200a      	movs	r0, #10
 8001cbe:	f001 f823 	bl	8002d08 <HAL_Delay>
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc8:	482b      	ldr	r0, [pc, #172]	; (8001d78 <SPI_WIFI_ResetModule+0xd8>)
 8001cca:	f001 fde9 	bl	80038a0 <HAL_GPIO_WritePin>
 8001cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd2:	f001 f819 	bl	8002d08 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4827      	ldr	r0, [pc, #156]	; (8001d78 <SPI_WIFI_ResetModule+0xd8>)
 8001cdc:	f001 fde0 	bl	80038a0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001ce0:	200f      	movs	r0, #15
 8001ce2:	f000 f9cd 	bl	8002080 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8001ce6:	e020      	b.n	8001d2a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	463a      	mov	r2, r7
 8001cec:	18d1      	adds	r1, r2, r3
 8001cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4821      	ldr	r0, [pc, #132]	; (8001d7c <SPI_WIFI_ResetModule+0xdc>)
 8001cf6:	f004 fb59 	bl	80063ac <HAL_SPI_Receive>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3302      	adds	r3, #2
 8001d02:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001d04:	f000 fff4 	bl	8002cf0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d202      	bcs.n	8001d1a <SPI_WIFI_ResetModule+0x7a>
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4816      	ldr	r0, [pc, #88]	; (8001d78 <SPI_WIFI_ResetModule+0xd8>)
 8001d20:	f001 fdbe 	bl	80038a0 <HAL_GPIO_WritePin>
      return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e021      	b.n	8001d6e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4812      	ldr	r0, [pc, #72]	; (8001d78 <SPI_WIFI_ResetModule+0xd8>)
 8001d2e:	f001 fd9f 	bl	8003870 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d0d7      	beq.n	8001ce8 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <SPI_WIFI_ResetModule+0xd8>)
 8001d3e:	f001 fdaf 	bl	80038a0 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001d42:	783b      	ldrb	r3, [r7, #0]
 8001d44:	2b15      	cmp	r3, #21
 8001d46:	d10e      	bne.n	8001d66 <SPI_WIFI_ResetModule+0xc6>
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b15      	cmp	r3, #21
 8001d4c:	d10b      	bne.n	8001d66 <SPI_WIFI_ResetModule+0xc6>
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	2b0d      	cmp	r3, #13
 8001d52:	d108      	bne.n	8001d66 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001d54:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001d56:	2b0a      	cmp	r3, #10
 8001d58:	d105      	bne.n	8001d66 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001d5a:	793b      	ldrb	r3, [r7, #4]
 8001d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d5e:	d102      	bne.n	8001d66 <SPI_WIFI_ResetModule+0xc6>
 8001d60:	797b      	ldrb	r3, [r7, #5]
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d002      	beq.n	8001d6c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e000      	b.n	8001d6e <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	48001000 	.word	0x48001000
 8001d7c:	20000590 	.word	0x20000590

08001d80 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <SPI_WIFI_DeInit+0x10>)
 8001d86:	f004 fad5 	bl	8006334 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000590 	.word	0x20000590

08001d94 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001d9c:	f000 ffa8 	bl	8002cf0 <HAL_GetTick>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001da4:	e00a      	b.n	8001dbc <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001da6:	f000 ffa3 	bl	8002cf0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d902      	bls.n	8001dbc <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	e007      	b.n	8001dcc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <wait_cmddata_rdy_high+0x40>)
 8001dc0:	f001 fd56 	bl	8003870 <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d1ed      	bne.n	8001da6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	48001000 	.word	0x48001000

08001dd8 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001de0:	f000 ff86 	bl	8002cf0 <HAL_GetTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8001de8:	e00a      	b.n	8001e00 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001dea:	f000 ff81 	bl	8002cf0 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1ad2      	subs	r2, r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d902      	bls.n	8001e00 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	e004      	b.n	8001e0a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <wait_cmddata_rdy_rising_event+0x3c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d0f0      	beq.n	8001dea <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001e08:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200005fc 	.word	0x200005fc

08001e18 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001e20:	f000 ff66 	bl	8002cf0 <HAL_GetTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8001e28:	e00a      	b.n	8001e40 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e2a:	f000 ff61 	bl	8002cf0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d902      	bls.n	8001e40 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e004      	b.n	8001e4a <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <wait_spi_rx_event+0x3c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d0f0      	beq.n	8001e2a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001e48:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200005f4 	.word	0x200005f4

08001e58 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001e60:	f000 ff46 	bl	8002cf0 <HAL_GetTick>
 8001e64:	4603      	mov	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8001e68:	e00a      	b.n	8001e80 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e6a:	f000 ff41 	bl	8002cf0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad2      	subs	r2, r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d902      	bls.n	8001e80 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e004      	b.n	8001e8a <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <wait_spi_tx_event+0x3c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d0f0      	beq.n	8001e6a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001e88:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200005f8 	.word	0x200005f8

08001e98 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2101      	movs	r1, #1
 8001eae:	4834      	ldr	r0, [pc, #208]	; (8001f80 <SPI_WIFI_ReceiveData+0xe8>)
 8001eb0:	f001 fcf6 	bl	80038a0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f8e3 	bl	8002080 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff8b 	bl	8001dd8 <wait_cmddata_rdy_rising_event>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da02      	bge.n	8001ece <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001ec8:	f06f 0302 	mvn.w	r3, #2
 8001ecc:	e054      	b.n	8001f78 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	482b      	ldr	r0, [pc, #172]	; (8001f80 <SPI_WIFI_ReceiveData+0xe8>)
 8001ed4:	f001 fce4 	bl	80038a0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f000 f8d1 	bl	8002080 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001ede:	e03d      	b.n	8001f5c <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8001ee0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ee4:	897b      	ldrh	r3, [r7, #10]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	db02      	blt.n	8001ef0 <SPI_WIFI_ReceiveData+0x58>
 8001eea:	897b      	ldrh	r3, [r7, #10]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d13c      	bne.n	8001f6a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <SPI_WIFI_ReceiveData+0xec>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	2201      	movs	r2, #1
 8001efc:	4619      	mov	r1, r3
 8001efe:	4822      	ldr	r0, [pc, #136]	; (8001f88 <SPI_WIFI_ReceiveData+0xf0>)
 8001f00:	f004 ffc4 	bl	8006e8c <HAL_SPI_Receive_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	481c      	ldr	r0, [pc, #112]	; (8001f80 <SPI_WIFI_ReceiveData+0xe8>)
 8001f10:	f001 fcc6 	bl	80038a0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	e02e      	b.n	8001f78 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff7b 	bl	8001e18 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001f22:	7d3a      	ldrb	r2, [r7, #20]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	7d7a      	ldrb	r2, [r7, #21]
 8001f2e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001f30:	8afb      	ldrh	r3, [r7, #22]
 8001f32:	3302      	adds	r3, #2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8001f3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f46:	db09      	blt.n	8001f5c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <SPI_WIFI_ReceiveData+0xe8>)
 8001f4e:	f001 fca7 	bl	80038a0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001f52:	f7ff fea5 	bl	8001ca0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001f56:	f06f 0303 	mvn.w	r3, #3
 8001f5a:	e00d      	b.n	8001f78 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4808      	ldr	r0, [pc, #32]	; (8001f80 <SPI_WIFI_ReceiveData+0xe8>)
 8001f60:	f001 fc86 	bl	8003870 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d0ba      	beq.n	8001ee0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4804      	ldr	r0, [pc, #16]	; (8001f80 <SPI_WIFI_ReceiveData+0xe8>)
 8001f70:	f001 fc96 	bl	80038a0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001f74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	48001000 	.word	0x48001000
 8001f84:	200005f4 	.word	0x200005f4
 8001f88:	20000590 	.word	0x20000590

08001f8c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	460b      	mov	r3, r1
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fef9 	bl	8001d94 <wait_cmddata_rdy_high>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	da02      	bge.n	8001fae <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fac:	e04f      	b.n	800204e <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <SPI_WIFI_SendData+0xcc>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4828      	ldr	r0, [pc, #160]	; (800205c <SPI_WIFI_SendData+0xd0>)
 8001fba:	f001 fc71 	bl	80038a0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f000 f85e 	bl	8002080 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001fc4:	897b      	ldrh	r3, [r7, #10]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d919      	bls.n	8001ffe <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <SPI_WIFI_SendData+0xd4>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68f9      	ldr	r1, [r7, #12]
 8001fda:	4822      	ldr	r0, [pc, #136]	; (8002064 <SPI_WIFI_SendData+0xd8>)
 8001fdc:	f004 feb4 	bl	8006d48 <HAL_SPI_Transmit_IT>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2101      	movs	r1, #1
 8001fea:	481c      	ldr	r0, [pc, #112]	; (800205c <SPI_WIFI_SendData+0xd0>)
 8001fec:	f001 fc58 	bl	80038a0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff4:	e02b      	b.n	800204e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff2d 	bl	8001e58 <wait_spi_tx_event>
  }

  if (len & 1)
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	3b01      	subs	r3, #1
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002014:	230a      	movs	r3, #10
 8002016:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <SPI_WIFI_SendData+0xd4>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	2201      	movs	r2, #1
 8002024:	4619      	mov	r1, r3
 8002026:	480f      	ldr	r0, [pc, #60]	; (8002064 <SPI_WIFI_SendData+0xd8>)
 8002028:	f004 fe8e 	bl	8006d48 <HAL_SPI_Transmit_IT>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002032:	2201      	movs	r2, #1
 8002034:	2101      	movs	r1, #1
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <SPI_WIFI_SendData+0xd0>)
 8002038:	f001 fc32 	bl	80038a0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	e005      	b.n	800204e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff07 	bl	8001e58 <wait_spi_tx_event>
  }
  return len;
 800204a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200005fc 	.word	0x200005fc
 800205c:	48001000 	.word	0x48001000
 8002060:	200005f8 	.word	0x200005f8
 8002064:	20000590 	.word	0x20000590

08002068 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fe49 	bl	8002d08 <HAL_Delay>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <SPI_WIFI_DelayUs+0x94>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d122      	bne.n	80020de <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <SPI_WIFI_DelayUs+0x98>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1f      	ldr	r2, [pc, #124]	; (800211c <SPI_WIFI_DelayUs+0x9c>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80020ae:	f000 fe1f 	bl	8002cf0 <HAL_GetTick>
 80020b2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80020b4:	e002      	b.n	80020bc <SPI_WIFI_DelayUs+0x3c>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f9      	bne.n	80020b6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 80020c2:	f000 fe15 	bl	8002cf0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <SPI_WIFI_DelayUs+0x94>)
 80020ce:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <SPI_WIFI_DelayUs+0x94>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <SPI_WIFI_DelayUs+0x5e>
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <SPI_WIFI_DelayUs+0x94>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <SPI_WIFI_DelayUs+0x98>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <SPI_WIFI_DelayUs+0xa0>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9a      	lsrs	r2, r3, #18
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <SPI_WIFI_DelayUs+0x94>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80020fe:	e002      	b.n	8002106 <SPI_WIFI_DelayUs+0x86>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	3b01      	subs	r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f9      	bne.n	8002100 <SPI_WIFI_DelayUs+0x80>
  return;
 800210c:	bf00      	nop
}
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000600 	.word	0x20000600
 8002118:	20000008 	.word	0x20000008
 800211c:	10624dd3 	.word	0x10624dd3
 8002120:	431bde83 	.word	0x431bde83

08002124 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_SPI_RxCpltCallback+0x24>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_SPI_RxCpltCallback+0x24>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	200005f4 	.word	0x200005f4

0800214c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_SPI_TxCpltCallback+0x24>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_SPI_TxCpltCallback+0x24>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200005f8 	.word	0x200005f8

08002174 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <SPI_WIFI_ISR+0x1c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d102      	bne.n	8002186 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <SPI_WIFI_ISR+0x1c>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
   }
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	200005fc 	.word	0x200005fc

08002194 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <WIFI_Init+0x40>)
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <WIFI_Init+0x44>)
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <WIFI_Init+0x48>)
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <WIFI_Init+0x4c>)
 80021aa:	490e      	ldr	r1, [pc, #56]	; (80021e4 <WIFI_Init+0x50>)
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <WIFI_Init+0x54>)
 80021ae:	f7ff fb57 	bl	8001860 <ES_WIFI_RegisterBusIO>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <WIFI_Init+0x54>)
 80021ba:	f7ff fb1d 	bl	80017f8 <ES_WIFI_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	08001e99 	.word	0x08001e99
 80021d8:	08001f8d 	.word	0x08001f8d
 80021dc:	08002069 	.word	0x08002069
 80021e0:	08001d81 	.word	0x08001d81
 80021e4:	08001be5 	.word	0x08001be5
 80021e8:	20000604 	.word	0x20000604

080021ec <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	4613      	mov	r3, r2
 80021f8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <WIFI_Connect+0x40>)
 8002206:	f7ff fb5f 	bl	80018c8 <ES_WIFI_Connect>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d107      	bne.n	8002220 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002210:	4806      	ldr	r0, [pc, #24]	; (800222c <WIFI_Connect+0x40>)
 8002212:	f7ff fc01 	bl	8001a18 <ES_WIFI_GetNetworkSettings>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002220:	7dfb      	ldrb	r3, [r7, #23]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000604 	.word	0x20000604

08002230 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <WIFI_GetIP_Address+0x38>
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d90d      	bls.n	8002268 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800224c:	4809      	ldr	r0, [pc, #36]	; (8002274 <WIFI_GetIP_Address+0x44>)
 800224e:	f7ff fbb3 	bl	80019b8 <ES_WIFI_IsConnected>
 8002252:	4603      	mov	r3, r0
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <WIFI_GetIP_Address+0x38>
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <WIFI_GetIP_Address+0x44>)
 800225a:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800225e:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000604 	.word	0x20000604

08002278 <main>:


/* Private functions ---------------------------------------------------------*/


int main(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0

	/* Initializes MCU, drivers and middleware */
	stm_start_init();
 800227c:	f7ff f87e 	bl	800137c <stm_start_init>

	// Initialize specific functionality
	AplusAPP_Init();
 8002280:	f7fe fbbc 	bl	80009fc <AplusAPP_Init>

	// Main processing loop
	AplusAPP_Entry();
 8002284:	f7fe fc2e 	bl	8000ae4 <AplusAPP_Entry>
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}

0800228e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <HardFault_Handler+0x4>

080022a2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <MemManage_Handler+0x4>

080022a8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <BusFault_Handler+0x4>

080022ae <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <UsageFault_Handler+0x4>

080022b4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80022e2:	f000 fcf1 	bl	8002cc8 <HAL_IncTick>
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}

080022ea <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80022ee:	2002      	movs	r0, #2
 80022f0:	f001 faee 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
	return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_kill>:

int _kill(int pid, int sig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002312:	f006 fb6d 	bl	80089f0 <__errno>
 8002316:	4603      	mov	r3, r0
 8002318:	2216      	movs	r2, #22
 800231a:	601a      	str	r2, [r3, #0]
	return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_exit>:

void _exit (int status)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffe7 	bl	8002308 <_kill>
	while (1) {}		/* Make sure we hang here */
 800233a:	e7fe      	b.n	800233a <_exit+0x12>

0800233c <_read>:
}

int _read (int file, char *ptr, int len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8002348:	f3af 8000 	nop.w
 800234c:	4603      	mov	r3, r0
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	701a      	strb	r2, [r3, #0]

	return 1;
 8002354:	2301      	movs	r3, #1
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_write>:

int _write(int file, char *ptr, int len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e009      	b.n	8002384 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fcd9 	bl	8000d30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf1      	blt.n	8002370 <_write+0x12>
	}
	return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x50>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x16>
		heap_end = &end;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <_sbrk+0x50>)
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <_sbrk+0x54>)
 80023ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <_sbrk+0x50>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <_sbrk+0x50>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	466a      	mov	r2, sp
 80023be:	4293      	cmp	r3, r2
 80023c0:	d907      	bls.n	80023d2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80023c2:	f006 fb15 	bl	80089f0 <__errno>
 80023c6:	4603      	mov	r3, r0
 80023c8:	220c      	movs	r2, #12
 80023ca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
 80023d0:	e006      	b.n	80023e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <_sbrk+0x50>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <_sbrk+0x50>)
 80023dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000f08 	.word	0x20000f08
 80023ec:	20001028 	.word	0x20001028

080023f0 <_close>:

int _close(int file)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	return -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002418:	605a      	str	r2, [r3, #4]
	return 0;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_isatty>:

int _isatty(int file)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
	return 0;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <SystemInit+0x64>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	4a16      	ldr	r2, [pc, #88]	; (80024bc <SystemInit+0x64>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <SystemInit+0x68>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <SystemInit+0x68>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <SystemInit+0x68>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <SystemInit+0x68>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <SystemInit+0x68>)
 8002484:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002488:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800248c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <SystemInit+0x68>)
 8002490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002494:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <SystemInit+0x68>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <SystemInit+0x68>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <SystemInit+0x68>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SystemInit+0x64>)
 80024aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ae:	609a      	str	r2, [r3, #8]
#endif
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00
 80024c0:	40021000 	.word	0x40021000

080024c4 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <BSP_COM_Init+0x2a>
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <BSP_COM_Init+0xc8>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4a2c      	ldr	r2, [pc, #176]	; (800258c <BSP_COM_Init+0xc8>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <BSP_COM_Init+0xc8>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <BSP_COM_Init+0x48>
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <BSP_COM_Init+0xc8>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <BSP_COM_Init+0xc8>)
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <BSP_COM_Init+0xc8>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10b      	bne.n	800252a <BSP_COM_Init+0x66>
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <BSP_COM_Init+0xc8>)
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <BSP_COM_Init+0xc8>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6613      	str	r3, [r2, #96]	; 0x60
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <BSP_COM_Init+0xc8>)
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002532:	2302      	movs	r3, #2
 8002534:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800253a:	2307      	movs	r3, #7
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4a13      	ldr	r2, [pc, #76]	; (8002590 <BSP_COM_Init+0xcc>)
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	f107 0214 	add.w	r2, r7, #20
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f000 ffe5 	bl	800351c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800255a:	2307      	movs	r3, #7
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <BSP_COM_Init+0xd0>)
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	f107 0214 	add.w	r2, r7, #20
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 ffd5 	bl	800351c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <BSP_COM_Init+0xd4>)
 8002576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f005 fcb7 	bl	8007ef2 <HAL_UART_Init>
}
 8002584:	bf00      	nop
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	20000010 	.word	0x20000010
 8002594:	20000014 	.word	0x20000014
 8002598:	2000000c 	.word	0x2000000c

0800259c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <I2Cx_MspInit+0xa8>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <I2Cx_MspInit+0xa8>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <I2Cx_MspInit+0xa8>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80025bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025c2:	2312      	movs	r3, #18
 80025c4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80025ce:	2304      	movs	r3, #4
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	481b      	ldr	r0, [pc, #108]	; (8002648 <I2Cx_MspInit+0xac>)
 80025da:	f000 ff9f 	bl	800351c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	4818      	ldr	r0, [pc, #96]	; (8002648 <I2Cx_MspInit+0xac>)
 80025e6:	f000 ff99 	bl	800351c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <I2Cx_MspInit+0xa8>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <I2Cx_MspInit+0xa8>)
 80025f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <I2Cx_MspInit+0xa8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <I2Cx_MspInit+0xa8>)
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <I2Cx_MspInit+0xa8>)
 8002608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800260c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <I2Cx_MspInit+0xa8>)
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <I2Cx_MspInit+0xa8>)
 8002614:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002618:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	210f      	movs	r1, #15
 800261e:	2021      	movs	r0, #33	; 0x21
 8002620:	f000 fc71 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002624:	2021      	movs	r0, #33	; 0x21
 8002626:	f000 fc8a 	bl	8002f3e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	210f      	movs	r1, #15
 800262e:	2022      	movs	r0, #34	; 0x22
 8002630:	f000 fc69 	bl	8002f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002634:	2022      	movs	r0, #34	; 0x22
 8002636:	f000 fc82 	bl	8002f3e <HAL_NVIC_EnableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3728      	adds	r7, #40	; 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	48000400 	.word	0x48000400

0800264c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <I2Cx_Init+0x54>)
 8002658:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <I2Cx_Init+0x58>)
 800265e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff89 	bl	800259c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f001 f938 	bl	8003900 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002690:	2100      	movs	r1, #0
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f001 feda 	bl	800444c <HAL_I2CEx_ConfigAnalogFilter>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40005800 	.word	0x40005800
 80026a4:	00702681 	.word	0x00702681

080026a8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	4608      	mov	r0, r1
 80026b2:	4611      	mov	r1, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	72fb      	strb	r3, [r7, #11]
 80026ba:	460b      	mov	r3, r1
 80026bc:	813b      	strh	r3, [r7, #8]
 80026be:	4613      	mov	r3, r2
 80026c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	b299      	uxth	r1, r3
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	893a      	ldrh	r2, [r7, #8]
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4603      	mov	r3, r0
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f001 faf4 	bl	8003ccc <HAL_I2C_Mem_Read>
 80026e4:	4603      	mov	r3, r0
 80026e6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80026ee:	7afb      	ldrb	r3, [r7, #11]
 80026f0:	4619      	mov	r1, r3
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f832 	bl	800275c <I2Cx_Error>
  }
  return status;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b08a      	sub	sp, #40	; 0x28
 8002706:	af04      	add	r7, sp, #16
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	4608      	mov	r0, r1
 800270c:	4611      	mov	r1, r2
 800270e:	461a      	mov	r2, r3
 8002710:	4603      	mov	r3, r0
 8002712:	72fb      	strb	r3, [r7, #11]
 8002714:	460b      	mov	r3, r1
 8002716:	813b      	strh	r3, [r7, #8]
 8002718:	4613      	mov	r3, r2
 800271a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	b299      	uxth	r1, r3
 8002724:	88f8      	ldrh	r0, [r7, #6]
 8002726:	893a      	ldrh	r2, [r7, #8]
 8002728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	4603      	mov	r3, r0
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f001 f9b3 	bl	8003aa4 <HAL_I2C_Mem_Write>
 800273e:	4603      	mov	r3, r0
 8002740:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	4619      	mov	r1, r3
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f805 	bl	800275c <I2Cx_Error>
  }
  return status;
 8002752:	7dfb      	ldrb	r3, [r7, #23]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f001 f958 	bl	8003a1e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ff6c 	bl	800264c <I2Cx_Init>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <SENSOR_IO_Init+0x10>)
 8002782:	f7ff ff63 	bl	800264c <I2Cx_Init>
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000f0c 	.word	0x20000f0c

08002790 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af02      	add	r7, sp, #8
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	460b      	mov	r3, r1
 800279c:	71bb      	strb	r3, [r7, #6]
 800279e:	4613      	mov	r3, r2
 80027a0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80027a2:	79bb      	ldrb	r3, [r7, #6]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	79f9      	ldrb	r1, [r7, #7]
 80027a8:	2301      	movs	r3, #1
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	1d7b      	adds	r3, r7, #5
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	4803      	ldr	r0, [pc, #12]	; (80027c0 <SENSOR_IO_Write+0x30>)
 80027b4:	f7ff ffa5 	bl	8002702 <I2Cx_WriteMultiple>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000f0c 	.word	0x20000f0c

080027c4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	4603      	mov	r3, r0
 80027cc:	460a      	mov	r2, r1
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	79f9      	ldrb	r1, [r7, #7]
 80027de:	2301      	movs	r3, #1
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	f107 030f 	add.w	r3, r7, #15
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2301      	movs	r3, #1
 80027ea:	4804      	ldr	r0, [pc, #16]	; (80027fc <SENSOR_IO_Read+0x38>)
 80027ec:	f7ff ff5c 	bl	80026a8 <I2Cx_ReadMultiple>

  return read_value;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000f0c 	.word	0x20000f0c

08002800 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af02      	add	r7, sp, #8
 8002806:	603a      	str	r2, [r7, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
 800280e:	460b      	mov	r3, r1
 8002810:	71bb      	strb	r3, [r7, #6]
 8002812:	4613      	mov	r3, r2
 8002814:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	b29a      	uxth	r2, r3
 800281a:	79f9      	ldrb	r1, [r7, #7]
 800281c:	88bb      	ldrh	r3, [r7, #4]
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2301      	movs	r3, #1
 8002826:	4804      	ldr	r0, [pc, #16]	; (8002838 <SENSOR_IO_ReadMultiple+0x38>)
 8002828:	f7ff ff3e 	bl	80026a8 <I2Cx_ReadMultiple>
 800282c:	4603      	mov	r3, r0
 800282e:	b29b      	uxth	r3, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000f0c 	.word	0x20000f0c

0800283c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <BSP_HSENSOR_Init+0x38>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	20be      	movs	r0, #190	; 0xbe
 8002848:	4798      	blx	r3
 800284a:	4603      	mov	r3, r0
 800284c:	2bbc      	cmp	r3, #188	; 0xbc
 800284e:	d002      	beq.n	8002856 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e009      	b.n	800286a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <BSP_HSENSOR_Init+0x3c>)
 8002858:	4a06      	ldr	r2, [pc, #24]	; (8002874 <BSP_HSENSOR_Init+0x38>)
 800285a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <BSP_HSENSOR_Init+0x3c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	20be      	movs	r0, #190	; 0xbe
 8002864:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800286a:	687b      	ldr	r3, [r7, #4]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000018 	.word	0x20000018
 8002878:	20000fe4 	.word	0x20000fe4

0800287c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	20be      	movs	r0, #190	; 0xbe
 8002888:	4798      	blx	r3
 800288a:	eef0 7a40 	vmov.f32	s15, s0
}
 800288e:	eeb0 0a67 	vmov.f32	s0, s15
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000fe4 	.word	0x20000fe4

08002898 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <BSP_TSENSOR_Init+0x30>)
 80028a4:	4a09      	ldr	r2, [pc, #36]	; (80028cc <BSP_TSENSOR_Init+0x34>)
 80028a6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80028a8:	f7ff ff68 	bl	800277c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <BSP_TSENSOR_Init+0x30>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2100      	movs	r1, #0
 80028b4:	20be      	movs	r0, #190	; 0xbe
 80028b6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80028bc:	79fb      	ldrb	r3, [r7, #7]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000fe8 	.word	0x20000fe8
 80028cc:	20000024 	.word	0x20000024

080028d0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <BSP_TSENSOR_ReadTemp+0x18>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	20be      	movs	r0, #190	; 0xbe
 80028dc:	4798      	blx	r3
 80028de:	eef0 7a40 	vmov.f32	s15, s0
}
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000fe8 	.word	0x20000fe8

080028ec <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2120      	movs	r1, #32
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff61 	bl	80027c4 <SENSOR_IO_Read>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	f023 0303 	bic.w	r3, r3, #3
 800291c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800292c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	2120      	movs	r1, #32
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff2a 	bl	8002790 <SENSOR_IO_Write>
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002952:	f7ff ff13 	bl	800277c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	210f      	movs	r1, #15
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <SENSOR_IO_Read>
 8002962:	4603      	mov	r3, r0
 8002964:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	b2d8      	uxtb	r0, r3
 800297e:	f107 020c 	add.w	r2, r7, #12
 8002982:	2302      	movs	r3, #2
 8002984:	21b0      	movs	r1, #176	; 0xb0
 8002986:	f7ff ff3b 	bl	8002800 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800298a:	7b3b      	ldrb	r3, [r7, #12]
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	b2d8      	uxtb	r0, r3
 800299e:	f107 020c 	add.w	r2, r7, #12
 80029a2:	2302      	movs	r3, #2
 80029a4:	21b6      	movs	r1, #182	; 0xb6
 80029a6:	f7ff ff2b 	bl	8002800 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029aa:	7b7b      	ldrb	r3, [r7, #13]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	7b3b      	ldrb	r3, [r7, #12]
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	4313      	orrs	r3, r2
 80029b6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	b2d8      	uxtb	r0, r3
 80029bc:	f107 020c 	add.w	r2, r7, #12
 80029c0:	2302      	movs	r3, #2
 80029c2:	21ba      	movs	r1, #186	; 0xba
 80029c4:	f7ff ff1c 	bl	8002800 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	7b3b      	ldrb	r3, [r7, #12]
 80029d0:	b21b      	sxth	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	b2d8      	uxtb	r0, r3
 80029da:	f107 020c 	add.w	r2, r7, #12
 80029de:	2302      	movs	r3, #2
 80029e0:	21a8      	movs	r1, #168	; 0xa8
 80029e2:	f7ff ff0d 	bl	8002800 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029e6:	7b7b      	ldrb	r3, [r7, #13]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	7b3b      	ldrb	r3, [r7, #12]
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80029f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80029f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a06:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a1c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a20:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a42:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a52:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002a56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a5a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002aa0 <HTS221_H_ReadHumidity+0x130>
 8002a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	dd01      	ble.n	8002a6c <HTS221_H_ReadHumidity+0xfc>
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HTS221_H_ReadHumidity+0x134>)
 8002a6a:	e00a      	b.n	8002a82 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	d502      	bpl.n	8002a80 <HTS221_H_ReadHumidity+0x110>
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HTS221_H_ReadHumidity+0x112>
 8002a80:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002a82:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002a84:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a90:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a94:	eeb0 0a67 	vmov.f32	s0, s15
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	447a0000 	.word	0x447a0000
 8002aa4:	447a0000 	.word	0x447a0000

08002aa8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2120      	movs	r1, #32
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe82 	bl	80027c4 <SENSOR_IO_Read>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aea:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	2120      	movs	r1, #32
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fe4b 	bl	8002790 <SENSOR_IO_Write>
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b088      	sub	sp, #32
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	b2d8      	uxtb	r0, r3
 8002b10:	f107 0208 	add.w	r2, r7, #8
 8002b14:	2302      	movs	r3, #2
 8002b16:	21b2      	movs	r1, #178	; 0xb2
 8002b18:	f7ff fe72 	bl	8002800 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2135      	movs	r1, #53	; 0x35
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fe4e 	bl	80027c4 <SENSOR_IO_Read>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	b21a      	sxth	r2, r3
 8002b38:	7a3b      	ldrb	r3, [r7, #8]
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002b40:	7ffb      	ldrb	r3, [r7, #31]
 8002b42:	019b      	lsls	r3, r3, #6
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	7a7b      	ldrb	r3, [r7, #9]
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002b54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b58:	10db      	asrs	r3, r3, #3
 8002b5a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002b5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b60:	10db      	asrs	r3, r3, #3
 8002b62:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	f107 0208 	add.w	r2, r7, #8
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	21bc      	movs	r1, #188	; 0xbc
 8002b70:	f7ff fe46 	bl	8002800 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b74:	7a7b      	ldrb	r3, [r7, #9]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	b21a      	sxth	r2, r3
 8002b7a:	7a3b      	ldrb	r3, [r7, #8]
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	7abb      	ldrb	r3, [r7, #10]
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	b2d8      	uxtb	r0, r3
 8002b94:	f107 0208 	add.w	r2, r7, #8
 8002b98:	2302      	movs	r3, #2
 8002b9a:	21aa      	movs	r1, #170	; 0xaa
 8002b9c:	f7ff fe30 	bl	8002800 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ba0:	7a7b      	ldrb	r3, [r7, #9]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b21a      	sxth	r2, r3
 8002ba6:	7a3b      	ldrb	r3, [r7, #8]
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002bae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002bc4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002bd6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002bda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	ee07 3a90 	vmov	s15, r3
}
 8002c06:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	f000 f968 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c20:	200f      	movs	r0, #15
 8002c22:	f000 f815 	bl	8002c50 <HAL_InitTick>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	71fb      	strb	r3, [r7, #7]
 8002c30:	e001      	b.n	8002c36 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c32:	f000 f805 	bl	8002c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c36:	79fb      	ldrb	r3, [r7, #7]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_InitTick+0x6c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d023      	beq.n	8002cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c64:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_InitTick+0x70>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_InitTick+0x6c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f96d 	bl	8002f5a <HAL_SYSTICK_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d809      	bhi.n	8002ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	f000 f937 	bl	8002f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_InitTick+0x74>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e007      	b.n	8002cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e004      	b.n	8002cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e001      	b.n	8002cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000038 	.word	0x20000038
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	20000034 	.word	0x20000034

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000038 	.word	0x20000038
 8002cec:	20000fec 	.word	0x20000fec

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000fec 	.word	0x20000fec

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000038 	.word	0x20000038

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db0b      	blt.n	8002dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	4907      	ldr	r1, [pc, #28]	; (8002dec <__NVIC_EnableIRQ+0x38>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	; (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	4313      	orrs	r3, r2
         );
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ebc:	d301      	bcc.n	8002ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <SysTick_Config+0x40>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eca:	210f      	movs	r1, #15
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f7ff ff8e 	bl	8002df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <SysTick_Config+0x40>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <SysTick_Config+0x40>)
 8002edc:	2207      	movs	r2, #7
 8002ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff29 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f18:	f7ff ff3e 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff8e 	bl	8002e44 <NVIC_EncodePriority>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff5d 	bl	8002df0 <__NVIC_SetPriority>
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff31 	bl	8002db4 <__NVIC_EnableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffa2 	bl	8002eac <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d005      	beq.n	8002f96 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e029      	b.n	8002fea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 020e 	bic.w	r2, r2, #14
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f003 021c 	and.w	r2, r3, #28
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    }
  }
  return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_FLASH_Program+0xd0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_FLASH_Program+0x1e>
 800300e:	2302      	movs	r3, #2
 8003010:	e053      	b.n	80030ba <HAL_FLASH_Program+0xc6>
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_FLASH_Program+0xd0>)
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003018:	f24c 3050 	movw	r0, #50000	; 0xc350
 800301c:	f000 f888 	bl	8003130 <FLASH_WaitForLastOperation>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d143      	bne.n	80030b2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_FLASH_Program+0xd0>)
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <HAL_FLASH_Program+0xd4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_FLASH_Program+0xd4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <HAL_FLASH_Program+0xd4>)
 8003042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003046:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_FLASH_Program+0xd0>)
 800304a:	2202      	movs	r2, #2
 800304c:	771a      	strb	r2, [r3, #28]
 800304e:	e002      	b.n	8003056 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_FLASH_Program+0xd0>)
 8003052:	2200      	movs	r2, #0
 8003054:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800305c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003060:	68b8      	ldr	r0, [r7, #8]
 8003062:	f000 f8bb 	bl	80031dc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003066:	2301      	movs	r3, #1
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e010      	b.n	800308e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d002      	beq.n	8003078 <HAL_FLASH_Program+0x84>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d10a      	bne.n	800308e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	68b8      	ldr	r0, [r7, #8]
 800307e:	f000 f8d3 	bl	8003228 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d102      	bne.n	800308e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800308c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800308e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003092:	f000 f84d 	bl	8003130 <FLASH_WaitForLastOperation>
 8003096:	4603      	mov	r3, r0
 8003098:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_FLASH_Program+0xd4>)
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <HAL_FLASH_Program+0xd4>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80030ae:	f000 f9eb 	bl	8003488 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <HAL_FLASH_Program+0xd0>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]

  return status;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000003c 	.word	0x2000003c
 80030c8:	40022000 	.word	0x40022000

080030cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_FLASH_Unlock+0x38>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da0b      	bge.n	80030f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_FLASH_Unlock+0x38>)
 80030e0:	4a09      	ldr	r2, [pc, #36]	; (8003108 <HAL_FLASH_Unlock+0x3c>)
 80030e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_FLASH_Unlock+0x38>)
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_FLASH_Unlock+0x40>)
 80030e8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_FLASH_Unlock+0x38>)
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da01      	bge.n	80030f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80030f6:	79fb      	ldrb	r3, [r7, #7]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40022000 	.word	0x40022000
 8003108:	45670123 	.word	0x45670123
 800310c:	cdef89ab 	.word	0xcdef89ab

08003110 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_FLASH_Lock+0x1c>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_FLASH_Lock+0x1c>)
 800311a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800311e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40022000 	.word	0x40022000

08003130 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff fdda 	bl	8002cf0 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800313e:	e00d      	b.n	800315c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d009      	beq.n	800315c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003148:	f7ff fdd2 	bl	8002cf0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d801      	bhi.n	800315c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e037      	b.n	80031cc <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <FLASH_WaitForLastOperation+0xa4>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1eb      	bne.n	8003140 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <FLASH_WaitForLastOperation+0xa4>)
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003170:	4013      	ands	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01e      	beq.n	80031b8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <FLASH_WaitForLastOperation+0xa8>)
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <FLASH_WaitForLastOperation+0xa8>)
 8003184:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <FLASH_WaitForLastOperation+0x70>
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <FLASH_WaitForLastOperation+0xa4>)
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800319a:	490e      	ldr	r1, [pc, #56]	; (80031d4 <FLASH_WaitForLastOperation+0xa4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	618b      	str	r3, [r1, #24]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <FLASH_WaitForLastOperation+0x84>
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <FLASH_WaitForLastOperation+0xa4>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031b2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e009      	b.n	80031cc <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <FLASH_WaitForLastOperation+0xa4>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <FLASH_WaitForLastOperation+0xa4>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40022000 	.word	0x40022000
 80031d8:	2000003c 	.word	0x2000003c

080031dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <FLASH_Program_DoubleWord+0x48>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <FLASH_Program_DoubleWord+0x48>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80031fa:	f3bf 8f6f 	isb	sy
}
 80031fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	000a      	movs	r2, r1
 800320e:	2300      	movs	r3, #0
 8003210:	68f9      	ldr	r1, [r7, #12]
 8003212:	3104      	adds	r1, #4
 8003214:	4613      	mov	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40022000 	.word	0x40022000

08003228 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003232:	2340      	movs	r3, #64	; 0x40
 8003234:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800323e:	4b14      	ldr	r3, [pc, #80]	; (8003290 <FLASH_Program_Fast+0x68>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <FLASH_Program_Fast+0x68>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003250:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	3304      	adds	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	3304      	adds	r3, #4
 800326a:	617b      	str	r3, [r7, #20]
    row_index--;
 800326c:	7ffb      	ldrb	r3, [r7, #31]
 800326e:	3b01      	subs	r3, #1
 8003270:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ef      	bne.n	8003258 <FLASH_Program_Fast+0x30>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f383 8810 	msr	PRIMASK, r3
}
 8003282:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003284:	bf00      	nop
 8003286:	3724      	adds	r7, #36	; 0x24
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40022000 	.word	0x40022000

08003294 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800329e:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_FLASHEx_Erase+0x16>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e087      	b.n	80033ba <HAL_FLASHEx_Erase+0x126>
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032b4:	f7ff ff3c 	bl	8003130 <FLASH_WaitForLastOperation>
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d177      	bne.n	80033b2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032c2:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80032c8:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80032d4:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a38      	ldr	r2, [pc, #224]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 80032e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80032ec:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 80032ee:	2203      	movs	r2, #3
 80032f0:	771a      	strb	r2, [r3, #28]
 80032f2:	e016      	b.n	8003322 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	771a      	strb	r2, [r3, #28]
 80032fa:	e012      	b.n	8003322 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2e      	ldr	r2, [pc, #184]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 800330e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003312:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 8003316:	2202      	movs	r2, #2
 8003318:	771a      	strb	r2, [r3, #28]
 800331a:	e002      	b.n	8003322 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 800331e:	2200      	movs	r2, #0
 8003320:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d113      	bne.n	8003352 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f84c 	bl	80033cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003334:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003338:	f7ff fefa 	bl	8003130 <FLASH_WaitForLastOperation>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 8003346:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	6153      	str	r3, [r2, #20]
 8003350:	e02d      	b.n	80033ae <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	e01d      	b.n	800339e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4619      	mov	r1, r3
 8003368:	68b8      	ldr	r0, [r7, #8]
 800336a:	f000 f857 	bl	800341c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800336e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003372:	f7ff fedd 	bl	8003130 <FLASH_WaitForLastOperation>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_FLASHEx_Erase+0x134>)
 8003380:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003384:	f023 0302 	bic.w	r3, r3, #2
 8003388:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	601a      	str	r2, [r3, #0]
          break;
 8003396:	e00a      	b.n	80033ae <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3301      	adds	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d3d9      	bcc.n	8003362 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80033ae:	f000 f86b 	bl	8003488 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <HAL_FLASHEx_Erase+0x130>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]

  return status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	2000003c 	.word	0x2000003c
 80033c8:	40022000 	.word	0x40022000

080033cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <FLASH_MassErase+0x4c>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <FLASH_MassErase+0x4c>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <FLASH_MassErase+0x4c>)
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	4a07      	ldr	r2, [pc, #28]	; (8003418 <FLASH_MassErase+0x4c>)
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <FLASH_MassErase+0x4c>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <FLASH_MassErase+0x4c>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6153      	str	r3, [r2, #20]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40022000 	.word	0x40022000

0800341c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <FLASH_PageErase+0x68>)
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <FLASH_PageErase+0x68>)
 8003436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800343a:	6153      	str	r3, [r2, #20]
 800343c:	e005      	b.n	800344a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <FLASH_PageErase+0x68>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <FLASH_PageErase+0x68>)
 8003444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003448:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <FLASH_PageErase+0x68>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800345a:	490a      	ldr	r1, [pc, #40]	; (8003484 <FLASH_PageErase+0x68>)
 800345c:	4313      	orrs	r3, r2
 800345e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <FLASH_PageErase+0x68>)
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <FLASH_PageErase+0x68>)
 8003466:	f043 0302 	orr.w	r3, r3, #2
 800346a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <FLASH_PageErase+0x68>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <FLASH_PageErase+0x68>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	6153      	str	r3, [r2, #20]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40022000 	.word	0x40022000

08003488 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800348e:	4b21      	ldr	r3, [pc, #132]	; (8003514 <FLASH_FlushCaches+0x8c>)
 8003490:	7f1b      	ldrb	r3, [r3, #28]
 8003492:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d002      	beq.n	80034a0 <FLASH_FlushCaches+0x18>
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d117      	bne.n	80034d0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d002      	beq.n	80034dc <FLASH_FlushCaches+0x54>
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d111      	bne.n	8003500 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a07      	ldr	r2, [pc, #28]	; (8003518 <FLASH_FlushCaches+0x90>)
 80034fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034fe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <FLASH_FlushCaches+0x8c>)
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	2000003c 	.word	0x2000003c
 8003518:	40022000 	.word	0x40022000

0800351c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	e17f      	b.n	800382c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8171 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d005      	beq.n	800355c <HAL_GPIO_Init+0x40>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d130      	bne.n	80035be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003592:	2201      	movs	r2, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0201 	and.w	r2, r3, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d118      	bne.n	80035fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d017      	beq.n	8003638 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	6939      	ldr	r1, [r7, #16]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80ac 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	4b5f      	ldr	r3, [pc, #380]	; (800384c <HAL_GPIO_Init+0x330>)
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	4a5e      	ldr	r2, [pc, #376]	; (800384c <HAL_GPIO_Init+0x330>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6613      	str	r3, [r2, #96]	; 0x60
 80036da:	4b5c      	ldr	r3, [pc, #368]	; (800384c <HAL_GPIO_Init+0x330>)
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e6:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <HAL_GPIO_Init+0x334>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003710:	d025      	beq.n	800375e <HAL_GPIO_Init+0x242>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x338>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01f      	beq.n	800375a <HAL_GPIO_Init+0x23e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_GPIO_Init+0x33c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d019      	beq.n	8003756 <HAL_GPIO_Init+0x23a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_GPIO_Init+0x340>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0x236>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4c      	ldr	r2, [pc, #304]	; (8003860 <HAL_GPIO_Init+0x344>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00d      	beq.n	800374e <HAL_GPIO_Init+0x232>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <HAL_GPIO_Init+0x348>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <HAL_GPIO_Init+0x22e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_GPIO_Init+0x34c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_GPIO_Init+0x22a>
 8003742:	2306      	movs	r3, #6
 8003744:	e00c      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003746:	2307      	movs	r3, #7
 8003748:	e00a      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374a:	2305      	movs	r3, #5
 800374c:	e008      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374e:	2304      	movs	r3, #4
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003752:	2303      	movs	r3, #3
 8003754:	e004      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003756:	2302      	movs	r3, #2
 8003758:	e002      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375e:	2300      	movs	r3, #0
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	f002 0203 	and.w	r2, r2, #3
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	4093      	lsls	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003770:	4937      	ldr	r1, [pc, #220]	; (8003850 <HAL_GPIO_Init+0x334>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_GPIO_Init+0x350>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a2:	4a32      	ldr	r2, [pc, #200]	; (800386c <HAL_GPIO_Init+0x350>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_GPIO_Init+0x350>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <HAL_GPIO_Init+0x350>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_GPIO_Init+0x350>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_GPIO_Init+0x350>)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_GPIO_Init+0x350>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <HAL_GPIO_Init+0x350>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae78 	bne.w	800352c <HAL_GPIO_Init+0x10>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40010000 	.word	0x40010000
 8003854:	48000400 	.word	0x48000400
 8003858:	48000800 	.word	0x48000800
 800385c:	48000c00 	.word	0x48000c00
 8003860:	48001000 	.word	0x48001000
 8003864:	48001400 	.word	0x48001400
 8003868:	48001800 	.word	0x48001800
 800386c:	40010400 	.word	0x40010400

08003870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	e001      	b.n	8003892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fd29 	bl	8001346 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e081      	b.n	8003a16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8a8 	bl	8003a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	e006      	b.n	8003988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d104      	bne.n	800399a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e021      	b.n	8003a74 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	; 0x24
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f821 	bl	8003a90 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	813b      	strh	r3, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	f040 80f9 	bne.w	8003cbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x34>
 8003ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0ed      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_I2C_Mem_Write+0x4e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e0e6      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003afa:	f7ff f8f9 	bl	8002cf0 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2319      	movs	r3, #25
 8003b06:	2201      	movs	r2, #1
 8003b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fac3 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0d1      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2221      	movs	r2, #33	; 0x21
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a3a      	ldr	r2, [r7, #32]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b44:	88f8      	ldrh	r0, [r7, #6]
 8003b46:	893a      	ldrh	r2, [r7, #8]
 8003b48:	8979      	ldrh	r1, [r7, #10]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4603      	mov	r3, r0
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f9d3 	bl	8003f00 <I2C_RequestMemoryWrite>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0a9      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2bff      	cmp	r3, #255	; 0xff
 8003b74:	d90e      	bls.n	8003b94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	22ff      	movs	r2, #255	; 0xff
 8003b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	8979      	ldrh	r1, [r7, #10]
 8003b84:	2300      	movs	r3, #0
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fc2b 	bl	80043e8 <I2C_TransferConfig>
 8003b92:	e00f      	b.n	8003bb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	8979      	ldrh	r1, [r7, #10]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fc1a 	bl	80043e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 faad 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e07b      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d034      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x1c8>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d130      	bne.n	8003c6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	2200      	movs	r2, #0
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fa3f 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e04d      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2bff      	cmp	r3, #255	; 0xff
 8003c2c:	d90e      	bls.n	8003c4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	22ff      	movs	r2, #255	; 0xff
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	8979      	ldrh	r1, [r7, #10]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fbcf 	bl	80043e8 <I2C_TransferConfig>
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	8979      	ldrh	r1, [r7, #10]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fbbe 	bl	80043e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d19e      	bne.n	8003bb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa8c 	bl	8004198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e01a      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_I2C_Mem_Write+0x224>)
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	f040 80fd 	bne.w	8003eee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x34>
 8003cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0f1      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_Mem_Read+0x4e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e0ea      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d22:	f7fe ffe5 	bl	8002cf0 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2319      	movs	r3, #25
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f9af 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0d5      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2222      	movs	r2, #34	; 0x22
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2240      	movs	r2, #64	; 0x40
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d6c:	88f8      	ldrh	r0, [r7, #6]
 8003d6e:	893a      	ldrh	r2, [r7, #8]
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f913 	bl	8003fa8 <I2C_RequestMemoryRead>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0ad      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2bff      	cmp	r3, #255	; 0xff
 8003d9c:	d90e      	bls.n	8003dbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	22ff      	movs	r2, #255	; 0xff
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	4b52      	ldr	r3, [pc, #328]	; (8003ef8 <HAL_I2C_Mem_Read+0x22c>)
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fb17 	bl	80043e8 <I2C_TransferConfig>
 8003dba:	e00f      	b.n	8003ddc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	8979      	ldrh	r1, [r7, #10]
 8003dce:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <HAL_I2C_Mem_Read+0x22c>)
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fb06 	bl	80043e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	2200      	movs	r2, #0
 8003de4:	2104      	movs	r1, #4
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f956 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07c      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d034      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x1d0>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d130      	bne.n	8003e9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	2200      	movs	r2, #0
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f927 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e04d      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2bff      	cmp	r3, #255	; 0xff
 8003e5c:	d90e      	bls.n	8003e7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	8979      	ldrh	r1, [r7, #10]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fab7 	bl	80043e8 <I2C_TransferConfig>
 8003e7a:	e00f      	b.n	8003e9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	8979      	ldrh	r1, [r7, #10]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 faa6 	bl	80043e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d19a      	bne.n	8003ddc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f974 	bl	8004198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e01a      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_I2C_Mem_Read+0x230>)
 8003ece:	400b      	ands	r3, r1
 8003ed0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	80002400 	.word	0x80002400
 8003efc:	fe00e800 	.word	0xfe00e800

08003f00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	460b      	mov	r3, r1
 8003f14:	813b      	strh	r3, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	8979      	ldrh	r1, [r7, #10]
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <I2C_RequestMemoryWrite+0xa4>)
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fa5d 	bl	80043e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	69b9      	ldr	r1, [r7, #24]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f8f0 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e02c      	b.n	8003f9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f48:	893b      	ldrh	r3, [r7, #8]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
 8003f52:	e015      	b.n	8003f80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f54:	893b      	ldrh	r3, [r7, #8]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	69b9      	ldr	r1, [r7, #24]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f8d6 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e012      	b.n	8003f9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f76:	893b      	ldrh	r3, [r7, #8]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f884 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	80002000 	.word	0x80002000

08003fa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	8979      	ldrh	r1, [r7, #10]
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <I2C_RequestMemoryRead+0xa4>)
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa0a 	bl	80043e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f89d 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e02c      	b.n	8004042 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fee:	893b      	ldrh	r3, [r7, #8]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff8:	e015      	b.n	8004026 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ffa:	893b      	ldrh	r3, [r7, #8]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f883 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e012      	b.n	8004042 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800401c:	893b      	ldrh	r3, [r7, #8]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2200      	movs	r2, #0
 800402e:	2140      	movs	r1, #64	; 0x40
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f831 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	80002000 	.word	0x80002000

08004050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d103      	bne.n	800406e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d007      	beq.n	800408c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	619a      	str	r2, [r3, #24]
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a8:	e022      	b.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d01e      	beq.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fe fe1d 	bl	8002cf0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d113      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e00f      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	429a      	cmp	r2, r3
 800410c:	d0cd      	beq.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004124:	e02c      	b.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f870 	bl	8004210 <I2C_IsErrorOccurred>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e02a      	b.n	8004190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d01e      	beq.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fe fdd5 	bl	8002cf0 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d113      	bne.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d1cb      	bne.n	8004126 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a4:	e028      	b.n	80041f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f830 	bl	8004210 <I2C_IsErrorOccurred>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e026      	b.n	8004208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fe fd99 	bl	8002cf0 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d113      	bne.n	80041f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b20      	cmp	r3, #32
 8004204:	d1cf      	bne.n	80041a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d075      	beq.n	8004328 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2210      	movs	r2, #16
 8004242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004244:	e056      	b.n	80042f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d052      	beq.n	80042f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fe fd4f 	bl	8002cf0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_IsErrorOccurred+0x54>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d147      	bne.n	80042f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004286:	d12e      	bne.n	80042e6 <I2C_IsErrorOccurred+0xd6>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428e:	d02a      	beq.n	80042e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	2b20      	cmp	r3, #32
 8004294:	d027      	beq.n	80042e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042a6:	f7fe fd23 	bl	8002cf0 <HAL_GetTick>
 80042aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ac:	e01b      	b.n	80042e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042ae:	f7fe fd1f 	bl	8002cf0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b19      	cmp	r3, #25
 80042ba:	d914      	bls.n	80042e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d1dc      	bne.n	80042ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d003      	beq.n	800430a <I2C_IsErrorOccurred+0xfa>
 8004302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004306:	2b00      	cmp	r3, #0
 8004308:	d09d      	beq.n	8004246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800430a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2220      	movs	r2, #32
 8004318:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800434a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f043 0308 	orr.w	r3, r3, #8
 8004362:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800436c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01c      	beq.n	80043d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fe56 	bl	8004050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6859      	ldr	r1, [r3, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <I2C_IsErrorOccurred+0x1d4>)
 80043b0:	400b      	ands	r3, r1
 80043b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3728      	adds	r7, #40	; 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	fe00e800 	.word	0xfe00e800

080043e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	4613      	mov	r3, r2
 80043f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004400:	7a7b      	ldrb	r3, [r7, #9]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004408:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	4313      	orrs	r3, r2
 8004412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004416:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	0d5b      	lsrs	r3, r3, #21
 8004422:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <I2C_TransferConfig+0x60>)
 8004428:	430b      	orrs	r3, r1
 800442a:	43db      	mvns	r3, r3
 800442c:	ea02 0103 	and.w	r1, r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	03ff63ff 	.word	0x03ff63ff

0800444c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	d138      	bne.n	80044d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800446c:	2302      	movs	r3, #2
 800446e:	e032      	b.n	80044d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800449e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e041      	b.n	8004578 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80044fc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f245 5255 	movw	r2, #21845	; 0x5555
 8004506:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6852      	ldr	r2, [r2, #4]
 8004510:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6892      	ldr	r2, [r2, #8]
 800451a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800451c:	f7fe fbe8 	bl	8002cf0 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004522:	e00f      	b.n	8004544 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004524:	f7fe fbe4 	bl	8002cf0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b31      	cmp	r3, #49	; 0x31
 8004530:	d908      	bls.n	8004544 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e019      	b.n	8004578 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e8      	bne.n	8004524 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d005      	beq.n	800456c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68d2      	ldr	r2, [r2, #12]
 8004568:	611a      	str	r2, [r3, #16]
 800456a:	e004      	b.n	8004576 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004590:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a04      	ldr	r2, [pc, #16]	; (80045bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ae:	6013      	str	r3, [r2, #0]
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40007000 	.word	0x40007000

080045c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40007000 	.word	0x40007000

080045dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e3ca      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ee:	4b97      	ldr	r3, [pc, #604]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f8:	4b94      	ldr	r3, [pc, #592]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80e4 	beq.w	80047d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_RCC_OscConfig+0x4a>
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	f040 808b 	bne.w	8004734 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 8087 	bne.w	8004734 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004626:	4b89      	ldr	r3, [pc, #548]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_RCC_OscConfig+0x62>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e3a2      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	4b82      	ldr	r3, [pc, #520]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <HAL_RCC_OscConfig+0x7c>
 800464e:	4b7f      	ldr	r3, [pc, #508]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004656:	e005      	b.n	8004664 <HAL_RCC_OscConfig+0x88>
 8004658:	4b7c      	ldr	r3, [pc, #496]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	4293      	cmp	r3, r2
 8004666:	d223      	bcs.n	80046b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fd55 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e383      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800467c:	4b73      	ldr	r3, [pc, #460]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a72      	ldr	r2, [pc, #456]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004682:	f043 0308 	orr.w	r3, r3, #8
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b70      	ldr	r3, [pc, #448]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	496d      	ldr	r1, [pc, #436]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800469a:	4b6c      	ldr	r3, [pc, #432]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	4968      	ldr	r1, [pc, #416]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
 80046ae:	e025      	b.n	80046fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b0:	4b66      	ldr	r3, [pc, #408]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80046b6:	f043 0308 	orr.w	r3, r3, #8
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4960      	ldr	r1, [pc, #384]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ce:	4b5f      	ldr	r3, [pc, #380]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	495b      	ldr	r1, [pc, #364]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fd15 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e343      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046fc:	f000 fc4a 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	4950      	ldr	r1, [pc, #320]	; (8004850 <HAL_RCC_OscConfig+0x274>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	4a4e      	ldr	r2, [pc, #312]	; (8004854 <HAL_RCC_OscConfig+0x278>)
 800471a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800471c:	4b4e      	ldr	r3, [pc, #312]	; (8004858 <HAL_RCC_OscConfig+0x27c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fa95 	bl	8002c50 <HAL_InitTick>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d052      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	e327      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d032      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800473c:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a42      	ldr	r2, [pc, #264]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004748:	f7fe fad2 	bl	8002cf0 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004750:	f7fe face 	bl	8002cf0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e310      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004762:	4b3a      	ldr	r3, [pc, #232]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a36      	ldr	r2, [pc, #216]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004774:	f043 0308 	orr.w	r3, r3, #8
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b34      	ldr	r3, [pc, #208]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4931      	ldr	r1, [pc, #196]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800478c:	4b2f      	ldr	r3, [pc, #188]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	492c      	ldr	r1, [pc, #176]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
 80047a0:	e01a      	b.n	80047d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047ae:	f7fe fa9f 	bl	8002cf0 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047b6:	f7fe fa9b 	bl	8002cf0 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e2dd      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x1da>
 80047d4:	e000      	b.n	80047d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d074      	beq.n	80048ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x21a>
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	d10e      	bne.n	800480e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d10b      	bne.n	800480e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d064      	beq.n	80048cc <HAL_RCC_OscConfig+0x2f0>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d160      	bne.n	80048cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e2ba      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d106      	bne.n	8004826 <HAL_RCC_OscConfig+0x24a>
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a0b      	ldr	r2, [pc, #44]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e026      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800482e:	d115      	bne.n	800485c <HAL_RCC_OscConfig+0x280>
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a05      	ldr	r2, [pc, #20]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <HAL_RCC_OscConfig+0x270>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a02      	ldr	r2, [pc, #8]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e014      	b.n	8004874 <HAL_RCC_OscConfig+0x298>
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	0800bf74 	.word	0x0800bf74
 8004854:	20000008 	.word	0x20000008
 8004858:	20000034 	.word	0x20000034
 800485c:	4ba0      	ldr	r3, [pc, #640]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a9f      	ldr	r2, [pc, #636]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4b9d      	ldr	r3, [pc, #628]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a9c      	ldr	r2, [pc, #624]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 800486e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d013      	beq.n	80048a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fe fa38 	bl	8002cf0 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7fe fa34 	bl	8002cf0 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e276      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004896:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x2a8>
 80048a2:	e014      	b.n	80048ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fe fa24 	bl	8002cf0 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ac:	f7fe fa20 	bl	8002cf0 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b64      	cmp	r3, #100	; 0x64
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e262      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048be:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x2d0>
 80048ca:	e000      	b.n	80048ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d060      	beq.n	800499c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d005      	beq.n	80048ec <HAL_RCC_OscConfig+0x310>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d119      	bne.n	800491a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d116      	bne.n	800491a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048ec:	4b7c      	ldr	r3, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_OscConfig+0x328>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e23f      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004904:	4b76      	ldr	r3, [pc, #472]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	4973      	ldr	r1, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004914:	4313      	orrs	r3, r2
 8004916:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004918:	e040      	b.n	800499c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d023      	beq.n	800496a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004922:	4b6f      	ldr	r3, [pc, #444]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6e      	ldr	r2, [pc, #440]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fe f9df 	bl	8002cf0 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004936:	f7fe f9db 	bl	8002cf0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e21d      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004948:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004954:	4b62      	ldr	r3, [pc, #392]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	495f      	ldr	r1, [pc, #380]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
 8004968:	e018      	b.n	800499c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496a:	4b5d      	ldr	r3, [pc, #372]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a5c      	ldr	r2, [pc, #368]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fe f9bb 	bl	8002cf0 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497e:	f7fe f9b7 	bl	8002cf0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e1f9      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004990:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d03c      	beq.n	8004a22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01c      	beq.n	80049ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b0:	4b4b      	ldr	r3, [pc, #300]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 80049b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b6:	4a4a      	ldr	r2, [pc, #296]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fe f996 	bl	8002cf0 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fe f992 	bl	8002cf0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e1d4      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049da:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 80049dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0ef      	beq.n	80049c8 <HAL_RCC_OscConfig+0x3ec>
 80049e8:	e01b      	b.n	8004a22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ea:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 80049ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f0:	4a3b      	ldr	r2, [pc, #236]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fa:	f7fe f979 	bl	8002cf0 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a02:	f7fe f975 	bl	8002cf0 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e1b7      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a14:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ef      	bne.n	8004a02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80a6 	beq.w	8004b7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a30:	2300      	movs	r3, #0
 8004a32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a34:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10d      	bne.n	8004a5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a44:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4c:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5c:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_RCC_OscConfig+0x508>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d118      	bne.n	8004a9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_RCC_OscConfig+0x508>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <HAL_RCC_OscConfig+0x508>)
 8004a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a74:	f7fe f93c 	bl	8002cf0 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7c:	f7fe f938 	bl	8002cf0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e17a      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <HAL_RCC_OscConfig+0x508>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d108      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4d8>
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab2:	e029      	b.n	8004b08 <HAL_RCC_OscConfig+0x52c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b05      	cmp	r3, #5
 8004aba:	d115      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x50c>
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	f043 0304 	orr.w	r3, r3, #4
 8004ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	4a03      	ldr	r2, [pc, #12]	; (8004ae0 <HAL_RCC_OscConfig+0x504>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004adc:	e014      	b.n	8004b08 <HAL_RCC_OscConfig+0x52c>
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40007000 	.word	0x40007000
 8004ae8:	4b9c      	ldr	r3, [pc, #624]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	4a9b      	ldr	r2, [pc, #620]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af8:	4b98      	ldr	r3, [pc, #608]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	4a97      	ldr	r2, [pc, #604]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d016      	beq.n	8004b3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fe f8ee 	bl	8002cf0 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fe f8ea 	bl	8002cf0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e12a      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2e:	4b8b      	ldr	r3, [pc, #556]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ed      	beq.n	8004b18 <HAL_RCC_OscConfig+0x53c>
 8004b3c:	e015      	b.n	8004b6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fe f8d7 	bl	8002cf0 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fe f8d3 	bl	8002cf0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e113      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5c:	4b7f      	ldr	r3, [pc, #508]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1ed      	bne.n	8004b46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b6a:	7ffb      	ldrb	r3, [r7, #31]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b70:	4b7a      	ldr	r3, [pc, #488]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	4a79      	ldr	r2, [pc, #484]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80fe 	beq.w	8004d82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	f040 80d0 	bne.w	8004d30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b90:	4b72      	ldr	r3, [pc, #456]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f003 0203 	and.w	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d130      	bne.n	8004c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d127      	bne.n	8004c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d11f      	bne.n	8004c06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd0:	2a07      	cmp	r2, #7
 8004bd2:	bf14      	ite	ne
 8004bd4:	2201      	movne	r2, #1
 8004bd6:	2200      	moveq	r2, #0
 8004bd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d113      	bne.n	8004c06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	3b01      	subs	r3, #1
 8004bec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d109      	bne.n	8004c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d06e      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d069      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c0c:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c18:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0ad      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c28:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c34:	f7fe f85c 	bl	8002cf0 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fe f858 	bl	8002cf0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e09a      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c5a:	4b40      	ldr	r3, [pc, #256]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <HAL_RCC_OscConfig+0x784>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	0112      	lsls	r2, r2, #4
 8004c6e:	4311      	orrs	r1, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c74:	0212      	lsls	r2, r2, #8
 8004c76:	4311      	orrs	r1, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c7c:	0852      	lsrs	r2, r2, #1
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	0552      	lsls	r2, r2, #21
 8004c82:	4311      	orrs	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c88:	0852      	lsrs	r2, r2, #1
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	0652      	lsls	r2, r2, #25
 8004c8e:	4311      	orrs	r1, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c94:	0912      	lsrs	r2, r2, #4
 8004c96:	0452      	lsls	r2, r2, #17
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	4930      	ldr	r1, [pc, #192]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004caa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a2a      	ldr	r2, [pc, #168]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb8:	f7fe f81a 	bl	8002cf0 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fe f816 	bl	8002cf0 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e058      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd2:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cde:	e050      	b.n	8004d82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e04f      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d148      	bne.n	8004d82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d08:	f7fd fff2 	bl	8002cf0 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fd ffee 	bl	8002cf0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e030      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x734>
 8004d2e:	e028      	b.n	8004d82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d023      	beq.n	8004d7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <HAL_RCC_OscConfig+0x780>)
 8004d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fd ffd5 	bl	8002cf0 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d48:	e00c      	b.n	8004d64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4a:	f7fd ffd1 	bl	8002cf0 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d905      	bls.n	8004d64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e013      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d64:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <HAL_RCC_OscConfig+0x7b0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ec      	bne.n	8004d4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_OscConfig+0x7b0>)
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	4905      	ldr	r1, [pc, #20]	; (8004d8c <HAL_RCC_OscConfig+0x7b0>)
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCC_OscConfig+0x7b4>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60cb      	str	r3, [r1, #12]
 8004d7c:	e001      	b.n	8004d82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	feeefffc 	.word	0xfeeefffc

08004d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0e7      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da8:	4b75      	ldr	r3, [pc, #468]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d910      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b72      	ldr	r3, [pc, #456]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 0207 	bic.w	r2, r3, #7
 8004dbe:	4970      	ldr	r1, [pc, #448]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b6e      	ldr	r3, [pc, #440]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0cf      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d010      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	4b66      	ldr	r3, [pc, #408]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d908      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df4:	4b63      	ldr	r3, [pc, #396]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4960      	ldr	r1, [pc, #384]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04c      	beq.n	8004eac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1a:	4b5a      	ldr	r3, [pc, #360]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d121      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0a6      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e32:	4b54      	ldr	r3, [pc, #336]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d115      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e09a      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e4a:	4b4e      	ldr	r3, [pc, #312]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e08e      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e086      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b46      	ldr	r3, [pc, #280]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4943      	ldr	r1, [pc, #268]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd ff38 	bl	8002cf0 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd ff34 	bl	8002cf0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e06e      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d010      	beq.n	8004eda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d208      	bcs.n	8004eda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b2e      	ldr	r3, [pc, #184]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	492b      	ldr	r1, [pc, #172]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d210      	bcs.n	8004f0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 0207 	bic.w	r2, r3, #7
 8004ef0:	4923      	ldr	r1, [pc, #140]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef8:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e036      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4918      	ldr	r1, [pc, #96]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4910      	ldr	r1, [pc, #64]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f48:	f000 f824 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	490b      	ldr	r1, [pc, #44]	; (8004f88 <HAL_RCC_ClockConfig+0x1f4>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
 8004f64:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <HAL_RCC_ClockConfig+0x1f8>)
 8004f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f68:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_RCC_ClockConfig+0x1fc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fd fe6f 	bl	8002c50 <HAL_InitTick>
 8004f72:	4603      	mov	r3, r0
 8004f74:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f76:	7afb      	ldrb	r3, [r7, #11]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40022000 	.word	0x40022000
 8004f84:	40021000 	.word	0x40021000
 8004f88:	0800bf74 	.word	0x0800bf74
 8004f8c:	20000008 	.word	0x20000008
 8004f90:	20000034 	.word	0x20000034

08004f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	; 0x24
 8004f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa2:	4b3e      	ldr	r3, [pc, #248]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fac:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d121      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d11e      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc8:	4b34      	ldr	r3, [pc, #208]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fd4:	4b31      	ldr	r3, [pc, #196]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ff0:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10d      	bne.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005004:	e00a      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b04      	cmp	r3, #4
 800500a:	d102      	bne.n	8005012 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e004      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d101      	bne.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005018:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800501a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d134      	bne.n	800508c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005022:	4b1e      	ldr	r3, [pc, #120]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d003      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0xa6>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d003      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0xac>
 8005038:	e005      	b.n	8005046 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800503a:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800503c:	617b      	str	r3, [r7, #20]
      break;
 800503e:	e005      	b.n	800504c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005040:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005042:	617b      	str	r3, [r7, #20]
      break;
 8005044:	e002      	b.n	800504c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	617b      	str	r3, [r7, #20]
      break;
 800504a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	3301      	adds	r3, #1
 8005058:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	fb03 f202 	mul.w	r2, r3, r2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	0e5b      	lsrs	r3, r3, #25
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	3301      	adds	r3, #1
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800508c:	69bb      	ldr	r3, [r7, #24]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	0800bf8c 	.word	0x0800bf8c
 80050a4:	00f42400 	.word	0x00f42400
 80050a8:	007a1200 	.word	0x007a1200

080050ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b2:	681b      	ldr	r3, [r3, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000008 	.word	0x20000008

080050c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050c8:	f7ff fff0 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4904      	ldr	r1, [pc, #16]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40021000 	.word	0x40021000
 80050ec:	0800bf84 	.word	0x0800bf84

080050f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050f4:	f7ff ffda 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0adb      	lsrs	r3, r3, #11
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4904      	ldr	r1, [pc, #16]	; (8005118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	0800bf84 	.word	0x0800bf84

0800511c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005128:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005134:	f7ff fa44 	bl	80045c0 <HAL_PWREx_GetVoltageRange>
 8005138:	6178      	str	r0, [r7, #20]
 800513a:	e014      	b.n	8005166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	6593      	str	r3, [r2, #88]	; 0x58
 8005148:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005154:	f7ff fa34 	bl	80045c0 <HAL_PWREx_GetVoltageRange>
 8005158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800516c:	d10b      	bne.n	8005186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d919      	bls.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2ba0      	cmp	r3, #160	; 0xa0
 8005178:	d902      	bls.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800517a:	2302      	movs	r3, #2
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e013      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005180:	2301      	movs	r3, #1
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e010      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d902      	bls.n	8005192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800518c:	2303      	movs	r3, #3
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e00a      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b80      	cmp	r3, #128	; 0x80
 8005196:	d102      	bne.n	800519e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005198:	2302      	movs	r3, #2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	e004      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b70      	cmp	r3, #112	; 0x70
 80051a2:	d101      	bne.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051a4:	2301      	movs	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 0207 	bic.w	r2, r3, #7
 80051b0:	4909      	ldr	r1, [pc, #36]	; (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d001      	beq.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40022000 	.word	0x40022000

080051dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051e4:	2300      	movs	r3, #0
 80051e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051e8:	2300      	movs	r3, #0
 80051ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d041      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005200:	d02a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005206:	d824      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800520c:	d008      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800520e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005212:	d81e      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521c:	d010      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800521e:	e018      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005220:	4b86      	ldr	r3, [pc, #536]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4a85      	ldr	r2, [pc, #532]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800522c:	e015      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fabb 	bl	80057b0 <RCCEx_PLLSAI1_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800523e:	e00c      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3320      	adds	r3, #32
 8005244:	2100      	movs	r1, #0
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fba6 	bl	8005998 <RCCEx_PLLSAI2_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005250:	e003      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	74fb      	strb	r3, [r7, #19]
      break;
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800525a:	7cfb      	ldrb	r3, [r7, #19]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10b      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005260:	4b76      	ldr	r3, [pc, #472]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800526e:	4973      	ldr	r1, [pc, #460]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005276:	e001      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d041      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005290:	d02a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005292:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005296:	d824      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800529c:	d008      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800529e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052a2:	d81e      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80052a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ac:	d010      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052ae:	e018      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052b0:	4b62      	ldr	r3, [pc, #392]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a61      	ldr	r2, [pc, #388]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052bc:	e015      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fa73 	bl	80057b0 <RCCEx_PLLSAI1_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052ce:	e00c      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3320      	adds	r3, #32
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb5e 	bl	8005998 <RCCEx_PLLSAI2_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052e0:	e003      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	74fb      	strb	r3, [r7, #19]
      break;
 80052e6:	e000      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80052e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052f0:	4b52      	ldr	r3, [pc, #328]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fe:	494f      	ldr	r1, [pc, #316]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005306:	e001      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80a0 	beq.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800531e:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800532e:	2300      	movs	r3, #0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005334:	4b41      	ldr	r3, [pc, #260]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	4a40      	ldr	r2, [pc, #256]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	6593      	str	r3, [r2, #88]	; 0x58
 8005340:	4b3e      	ldr	r3, [pc, #248]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534c:	2301      	movs	r3, #1
 800534e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800535c:	f7fd fcc8 	bl	8002cf0 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005362:	e009      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005364:	f7fd fcc4 	bl	8002cf0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d902      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	74fb      	strb	r3, [r7, #19]
        break;
 8005376:	e005      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005378:	4b31      	ldr	r3, [pc, #196]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0ef      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d15c      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800538a:	4b2c      	ldr	r3, [pc, #176]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005394:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d019      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053b4:	4b21      	ldr	r3, [pc, #132]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	4a20      	ldr	r2, [pc, #128]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	4a1c      	ldr	r2, [pc, #112]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053d4:	4a19      	ldr	r2, [pc, #100]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fd fc83 	bl	8002cf0 <HAL_GetTick>
 80053ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ec:	e00b      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fd fc7f 	bl	8002cf0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d902      	bls.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	74fb      	strb	r3, [r7, #19]
            break;
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0ec      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10c      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800541a:	4b08      	ldr	r3, [pc, #32]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542a:	4904      	ldr	r1, [pc, #16]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005432:	e009      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
 8005438:	e006      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000
 8005440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005448:	7c7b      	ldrb	r3, [r7, #17]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d105      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544e:	4b9e      	ldr	r3, [pc, #632]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	4a9d      	ldr	r2, [pc, #628]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005458:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005466:	4b98      	ldr	r3, [pc, #608]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f023 0203 	bic.w	r2, r3, #3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	4994      	ldr	r1, [pc, #592]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005488:	4b8f      	ldr	r3, [pc, #572]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f023 020c 	bic.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	498c      	ldr	r1, [pc, #560]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054aa:	4b87      	ldr	r3, [pc, #540]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	4983      	ldr	r1, [pc, #524]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054cc:	4b7e      	ldr	r3, [pc, #504]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	497b      	ldr	r1, [pc, #492]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054ee:	4b76      	ldr	r3, [pc, #472]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fc:	4972      	ldr	r1, [pc, #456]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005510:	4b6d      	ldr	r3, [pc, #436]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551e:	496a      	ldr	r1, [pc, #424]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005532:	4b65      	ldr	r3, [pc, #404]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005540:	4961      	ldr	r1, [pc, #388]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005554:	4b5c      	ldr	r3, [pc, #368]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	4959      	ldr	r1, [pc, #356]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005576:	4b54      	ldr	r3, [pc, #336]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005584:	4950      	ldr	r1, [pc, #320]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005598:	4b4b      	ldr	r3, [pc, #300]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	4948      	ldr	r1, [pc, #288]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ba:	4b43      	ldr	r3, [pc, #268]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	493f      	ldr	r1, [pc, #252]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d028      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055dc:	4b3a      	ldr	r3, [pc, #232]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	4937      	ldr	r1, [pc, #220]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055fa:	d106      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055fc:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a31      	ldr	r2, [pc, #196]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005606:	60d3      	str	r3, [r2, #12]
 8005608:	e011      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005612:	d10c      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	2101      	movs	r1, #1
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f8c8 	bl	80057b0 <RCCEx_PLLSAI1_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800562a:	7cfb      	ldrb	r3, [r7, #19]
 800562c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d028      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800563a:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005640:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	491f      	ldr	r1, [pc, #124]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005658:	d106      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	4a1a      	ldr	r2, [pc, #104]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005664:	60d3      	str	r3, [r2, #12]
 8005666:	e011      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005670:	d10c      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	2101      	movs	r1, #1
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f899 	bl	80057b0 <RCCEx_PLLSAI1_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005688:	7cfb      	ldrb	r3, [r7, #19]
 800568a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02b      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a6:	4908      	ldr	r1, [pc, #32]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b6:	d109      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b8:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4a02      	ldr	r2, [pc, #8]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c2:	60d3      	str	r3, [r2, #12]
 80056c4:	e014      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	2101      	movs	r1, #1
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f867 	bl	80057b0 <RCCEx_PLLSAI1_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d02f      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056fc:	4b2b      	ldr	r3, [pc, #172]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800570a:	4928      	ldr	r1, [pc, #160]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800571a:	d10d      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	2102      	movs	r1, #2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f844 	bl	80057b0 <RCCEx_PLLSAI1_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d014      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005732:	7cfb      	ldrb	r3, [r7, #19]
 8005734:	74bb      	strb	r3, [r7, #18]
 8005736:	e011      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005740:	d10c      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3320      	adds	r3, #32
 8005746:	2102      	movs	r1, #2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f925 	bl	8005998 <RCCEx_PLLSAI2_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005752:	7cfb      	ldrb	r3, [r7, #19]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005758:	7cfb      	ldrb	r3, [r7, #19]
 800575a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005768:	4b10      	ldr	r3, [pc, #64]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005776:	490d      	ldr	r1, [pc, #52]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800578a:	4b08      	ldr	r3, [pc, #32]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579a:	4904      	ldr	r1, [pc, #16]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000

080057b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057be:	4b75      	ldr	r3, [pc, #468]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d018      	beq.n	80057fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057ca:	4b72      	ldr	r3, [pc, #456]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0203 	and.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d10d      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
       ||
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057e2:	4b6c      	ldr	r3, [pc, #432]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
       ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d047      	beq.n	8005886 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
 80057fa:	e044      	b.n	8005886 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d018      	beq.n	8005836 <RCCEx_PLLSAI1_Config+0x86>
 8005804:	2b03      	cmp	r3, #3
 8005806:	d825      	bhi.n	8005854 <RCCEx_PLLSAI1_Config+0xa4>
 8005808:	2b01      	cmp	r3, #1
 800580a:	d002      	beq.n	8005812 <RCCEx_PLLSAI1_Config+0x62>
 800580c:	2b02      	cmp	r3, #2
 800580e:	d009      	beq.n	8005824 <RCCEx_PLLSAI1_Config+0x74>
 8005810:	e020      	b.n	8005854 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005812:	4b60      	ldr	r3, [pc, #384]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11d      	bne.n	800585a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005822:	e01a      	b.n	800585a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005824:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d116      	bne.n	800585e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005834:	e013      	b.n	800585e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005836:	4b57      	ldr	r3, [pc, #348]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10f      	bne.n	8005862 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005842:	4b54      	ldr	r3, [pc, #336]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005852:	e006      	b.n	8005862 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      break;
 8005858:	e004      	b.n	8005864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005862:	bf00      	nop
    }

    if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10d      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800586a:	4b4a      	ldr	r3, [pc, #296]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	3b01      	subs	r3, #1
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	430b      	orrs	r3, r1
 8005880:	4944      	ldr	r1, [pc, #272]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005882:	4313      	orrs	r3, r2
 8005884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d17d      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800588c:	4b41      	ldr	r3, [pc, #260]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a40      	ldr	r2, [pc, #256]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005892:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005898:	f7fd fa2a 	bl	8002cf0 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058a0:	f7fd fa26 	bl	8002cf0 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
        break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058b4:	4b37      	ldr	r3, [pc, #220]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ef      	bne.n	80058a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d160      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d111      	bne.n	80058f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058cc:	4b31      	ldr	r3, [pc, #196]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6892      	ldr	r2, [r2, #8]
 80058dc:	0211      	lsls	r1, r2, #8
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68d2      	ldr	r2, [r2, #12]
 80058e2:	0912      	lsrs	r2, r2, #4
 80058e4:	0452      	lsls	r2, r2, #17
 80058e6:	430a      	orrs	r2, r1
 80058e8:	492a      	ldr	r1, [pc, #168]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	610b      	str	r3, [r1, #16]
 80058ee:	e027      	b.n	8005940 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d112      	bne.n	800591c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058f6:	4b27      	ldr	r3, [pc, #156]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6892      	ldr	r2, [r2, #8]
 8005906:	0211      	lsls	r1, r2, #8
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6912      	ldr	r2, [r2, #16]
 800590c:	0852      	lsrs	r2, r2, #1
 800590e:	3a01      	subs	r2, #1
 8005910:	0552      	lsls	r2, r2, #21
 8005912:	430a      	orrs	r2, r1
 8005914:	491f      	ldr	r1, [pc, #124]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
 800591a:	e011      	b.n	8005940 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800591c:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6892      	ldr	r2, [r2, #8]
 800592c:	0211      	lsls	r1, r2, #8
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6952      	ldr	r2, [r2, #20]
 8005932:	0852      	lsrs	r2, r2, #1
 8005934:	3a01      	subs	r2, #1
 8005936:	0652      	lsls	r2, r2, #25
 8005938:	430a      	orrs	r2, r1
 800593a:	4916      	ldr	r1, [pc, #88]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800593c:	4313      	orrs	r3, r2
 800593e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a13      	ldr	r2, [pc, #76]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800594a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fd f9d0 	bl	8002cf0 <HAL_GetTick>
 8005950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005952:	e009      	b.n	8005968 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005954:	f7fd f9cc 	bl	8002cf0 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d902      	bls.n	8005968 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	73fb      	strb	r3, [r7, #15]
          break;
 8005966:	e005      	b.n	8005974 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ef      	beq.n	8005954 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	4904      	ldr	r1, [pc, #16]	; (8005994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005984:	4313      	orrs	r3, r2
 8005986:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000

08005998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059a6:	4b6a      	ldr	r3, [pc, #424]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d018      	beq.n	80059e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059b2:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0203 	and.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d10d      	bne.n	80059de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
       ||
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059ca:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
       ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d047      	beq.n	8005a6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	e044      	b.n	8005a6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d018      	beq.n	8005a1e <RCCEx_PLLSAI2_Config+0x86>
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d825      	bhi.n	8005a3c <RCCEx_PLLSAI2_Config+0xa4>
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d002      	beq.n	80059fa <RCCEx_PLLSAI2_Config+0x62>
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d009      	beq.n	8005a0c <RCCEx_PLLSAI2_Config+0x74>
 80059f8:	e020      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059fa:	4b55      	ldr	r3, [pc, #340]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11d      	bne.n	8005a42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a0a:	e01a      	b.n	8005a42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a0c:	4b50      	ldr	r3, [pc, #320]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d116      	bne.n	8005a46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a1c:	e013      	b.n	8005a46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a1e:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10f      	bne.n	8005a4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a2a:	4b49      	ldr	r3, [pc, #292]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a3a:	e006      	b.n	8005a4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	e004      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10d      	bne.n	8005a6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a52:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6819      	ldr	r1, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	430b      	orrs	r3, r1
 8005a68:	4939      	ldr	r1, [pc, #228]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d167      	bne.n	8005b44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a74:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a35      	ldr	r2, [pc, #212]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a80:	f7fd f936 	bl	8002cf0 <HAL_GetTick>
 8005a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a86:	e009      	b.n	8005a9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a88:	f7fd f932 	bl	8002cf0 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d902      	bls.n	8005a9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	73fb      	strb	r3, [r7, #15]
        break;
 8005a9a:	e005      	b.n	8005aa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a9c:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ef      	bne.n	8005a88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d14a      	bne.n	8005b44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d111      	bne.n	8005ad8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ab4:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6892      	ldr	r2, [r2, #8]
 8005ac4:	0211      	lsls	r1, r2, #8
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68d2      	ldr	r2, [r2, #12]
 8005aca:	0912      	lsrs	r2, r2, #4
 8005acc:	0452      	lsls	r2, r2, #17
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	491f      	ldr	r1, [pc, #124]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	614b      	str	r3, [r1, #20]
 8005ad6:	e011      	b.n	8005afc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ae0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6892      	ldr	r2, [r2, #8]
 8005ae8:	0211      	lsls	r1, r2, #8
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6912      	ldr	r2, [r2, #16]
 8005aee:	0852      	lsrs	r2, r2, #1
 8005af0:	3a01      	subs	r2, #1
 8005af2:	0652      	lsls	r2, r2, #25
 8005af4:	430a      	orrs	r2, r1
 8005af6:	4916      	ldr	r1, [pc, #88]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005afc:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b08:	f7fd f8f2 	bl	8002cf0 <HAL_GetTick>
 8005b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b0e:	e009      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b10:	f7fd f8ee 	bl	8002cf0 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d902      	bls.n	8005b24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	73fb      	strb	r3, [r7, #15]
          break;
 8005b22:	e005      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0ef      	beq.n	8005b10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b36:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4904      	ldr	r1, [pc, #16]	; (8005b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000

08005b54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d06c      	beq.n	8005c40 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f865 	bl	8005c4a <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	22ca      	movs	r2, #202	; 0xca
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2253      	movs	r2, #83	; 0x53
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fa53 	bl	8006044 <RTC_EnterInitMode>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d14b      	bne.n	8005c40 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bba:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6899      	ldr	r1, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68d2      	ldr	r2, [r2, #12]
 8005be2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6919      	ldr	r1, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	041a      	lsls	r2, r3, #16
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fa57 	bl	80060ac <RTC_ExitInitMode>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11b      	bne.n	8005c40 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0203 	bic.w	r2, r2, #3
 8005c16:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c5e:	b590      	push	{r4, r7, lr}
 8005c60:	b087      	sub	sp, #28
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_RTC_SetTime+0x1a>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e08b      	b.n	8005d90 <HAL_RTC_SetTime+0x132>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	22ca      	movs	r2, #202	; 0xca
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2253      	movs	r2, #83	; 0x53
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f9d3 	bl	8006044 <RTC_EnterInitMode>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005ca2:	7cfb      	ldrb	r3, [r7, #19]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d163      	bne.n	8005d70 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d126      	bne.n	8005cfc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fa2e 	bl	8006128 <RTC_ByteToBcd2>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fa27 	bl	8006128 <RTC_ByteToBcd2>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cde:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	789b      	ldrb	r3, [r3, #2]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fa1f 	bl	8006128 <RTC_ByteToBcd2>
 8005cea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	78db      	ldrb	r3, [r3, #3]
 8005cf4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e018      	b.n	8005d2e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d1c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d22:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	78db      	ldrb	r3, [r3, #3]
 8005d28:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d38:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d3c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6899      	ldr	r1, [r3, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f9a0 	bl	80060ac <RTC_ExitInitMode>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd90      	pop	{r4, r7, pc}

08005d98 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005dc6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005dca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	0d9b      	lsrs	r3, r3, #22
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11a      	bne.n	8005e46 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 f9a7 	bl	8006168 <RTC_Bcd2ToByte>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f99e 	bl	8006168 <RTC_Bcd2ToByte>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	789b      	ldrb	r3, [r3, #2]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 f995 	bl	8006168 <RTC_Bcd2ToByte>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_RTC_SetDate+0x1a>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e075      	b.n	8005f56 <HAL_RTC_SetDate+0x106>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10e      	bne.n	8005e9e <HAL_RTC_SetDate+0x4e>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	f023 0310 	bic.w	r3, r3, #16
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	330a      	adds	r3, #10
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11c      	bne.n	8005ede <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 f93d 	bl	8006128 <RTC_ByteToBcd2>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f936 	bl	8006128 <RTC_ByteToBcd2>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ec0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	789b      	ldrb	r3, [r3, #2]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f92e 	bl	8006128 <RTC_ByteToBcd2>
 8005ecc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ece:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e00e      	b.n	8005efc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	78db      	ldrb	r3, [r3, #3]
 8005ee2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005eea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ef0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	22ca      	movs	r2, #202	; 0xca
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2253      	movs	r2, #83	; 0x53
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f899 	bl	8006044 <RTC_EnterInitMode>
 8005f12:	4603      	mov	r3, r0
 8005f14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005f16:	7cfb      	ldrb	r3, [r7, #19]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10c      	bne.n	8005f36 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f2a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f8bd 	bl	80060ac <RTC_ExitInitMode>
 8005f32:	4603      	mov	r3, r0
 8005f34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	22ff      	movs	r2, #255	; 0xff
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005f3e:	7cfb      	ldrb	r3, [r7, #19]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd90      	pop	{r4, r7, pc}

08005f5e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	0b5b      	lsrs	r3, r3, #13
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11a      	bne.n	8005fee <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f8d3 	bl	8006168 <RTC_Bcd2ToByte>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 f8ca 	bl	8006168 <RTC_Bcd2ToByte>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	789b      	ldrb	r3, [r3, #2]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f8c1 	bl	8006168 <RTC_Bcd2ToByte>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800600e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006010:	f7fc fe6e 	bl	8002cf0 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006016:	e009      	b.n	800602c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006018:	f7fc fe6a 	bl	8002cf0 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006026:	d901      	bls.n	800602c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e007      	b.n	800603c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0ee      	beq.n	8006018 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d120      	bne.n	80060a0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006068:	f7fc fe42 	bl	8002cf0 <HAL_GetTick>
 800606c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800606e:	e00d      	b.n	800608c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006070:	f7fc fe3e 	bl	8002cf0 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800607e:	d905      	bls.n	800608c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2203      	movs	r2, #3
 8006088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <RTC_EnterInitMode+0x5c>
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d1e7      	bne.n	8006070 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80060b8:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <RTC_ExitInitMode+0x78>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a19      	ldr	r2, [pc, #100]	; (8006124 <RTC_ExitInitMode+0x78>)
 80060be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80060c4:	4b17      	ldr	r3, [pc, #92]	; (8006124 <RTC_ExitInitMode+0x78>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10c      	bne.n	80060ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff91 	bl	8005ff8 <HAL_RTC_WaitForSynchro>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01e      	beq.n	800611a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2203      	movs	r2, #3
 80060e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	73fb      	strb	r3, [r7, #15]
 80060e8:	e017      	b.n	800611a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060ea:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <RTC_ExitInitMode+0x78>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	4a0d      	ldr	r2, [pc, #52]	; (8006124 <RTC_ExitInitMode+0x78>)
 80060f0:	f023 0320 	bic.w	r3, r3, #32
 80060f4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff ff7e 	bl	8005ff8 <HAL_RTC_WaitForSynchro>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2203      	movs	r2, #3
 8006106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <RTC_ExitInitMode+0x78>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	4a04      	ldr	r2, [pc, #16]	; (8006124 <RTC_ExitInitMode+0x78>)
 8006114:	f043 0320 	orr.w	r3, r3, #32
 8006118:	6093      	str	r3, [r2, #8]
  }

  return status;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40002800 	.word	0x40002800

08006128 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800613a:	e005      	b.n	8006148 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	3b0a      	subs	r3, #10
 8006146:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006148:	7afb      	ldrb	r3, [r7, #11]
 800614a:	2b09      	cmp	r3, #9
 800614c:	d8f6      	bhi.n	800613c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	b2da      	uxtb	r2, r3
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	4313      	orrs	r3, r2
 800615a:	b2db      	uxtb	r3, r3
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	0092      	lsls	r2, r2, #2
 800617c:	4413      	add	r3, r2
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	b2da      	uxtb	r2, r3
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	4413      	add	r3, r2
 800618e:	b2db      	uxtb	r3, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e0be      	b.n	800632c <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d108      	bne.n	80061c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061be:	d009      	beq.n	80061d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	61da      	str	r2, [r3, #28]
 80061c6:	e005      	b.n	80061d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f8cb 	bl	8006384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006204:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800620e:	d902      	bls.n	8006216 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e002      	b.n	800621c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006224:	d007      	beq.n	8006236 <HAL_SPI_Init+0x9a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800622e:	d002      	beq.n	8006236 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	ea42 0103 	orr.w	r1, r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006294:	d11b      	bne.n	80062ce <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062a6:	d903      	bls.n	80062b0 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
 80062ae:	e002      	b.n	80062b6 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d107      	bne.n	80062ce <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	f003 0204 	and.w	r2, r3, #4
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80062f4:	ea42 0103 	orr.w	r1, r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630e:	d105      	bne.n	800631c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	b292      	uxth	r2, r2
 800631a:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e01a      	b.n	800637c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f81a 	bl	8006398 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d2:	d112      	bne.n	80063fa <HAL_SPI_Receive+0x4e>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10e      	bne.n	80063fa <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2204      	movs	r2, #4
 80063e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063e4:	88fa      	ldrh	r2, [r7, #6]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f9c4 	bl	800677e <HAL_SPI_TransmitReceive>
 80063f6:	4603      	mov	r3, r0
 80063f8:	e1bd      	b.n	8006776 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_SPI_Receive+0x5c>
 8006404:	2302      	movs	r3, #2
 8006406:	e1b6      	b.n	8006776 <HAL_SPI_Receive+0x3ca>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006410:	f7fc fc6e 	bl	8002cf0 <HAL_GetTick>
 8006414:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	d003      	beq.n	800642a <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8006422:	2302      	movs	r3, #2
 8006424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8006428:	e19b      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_SPI_Receive+0x8a>
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 800643c:	e191      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2204      	movs	r2, #4
 8006442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	88fa      	ldrh	r2, [r7, #6]
 800645e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006488:	d118      	bne.n	80064bc <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a8:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064c4:	d908      	bls.n	80064d8 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	e007      	b.n	80064e8 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f0:	d10f      	bne.n	8006512 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d007      	beq.n	8006530 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800652e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006538:	d869      	bhi.n	800660e <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800653a:	e031      	b.n	80065a0 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d117      	bne.n	800657a <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f103 020c 	add.w	r2, r3, #12
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	7812      	ldrb	r2, [r2, #0]
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006578:	e012      	b.n	80065a0 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657a:	f7fc fbb9 	bl	8002cf0 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <HAL_SPI_Receive+0x1e6>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d102      	bne.n	8006598 <HAL_SPI_Receive+0x1ec>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800659e:	e0e0      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1c7      	bne.n	800653c <HAL_SPI_Receive+0x190>
 80065ac:	e035      	b.n	800661a <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d115      	bne.n	80065e8 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	b292      	uxth	r2, r2
 80065c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80065e6:	e012      	b.n	800660e <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e8:	f7fc fb82 	bl	8002cf0 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d803      	bhi.n	8006600 <HAL_SPI_Receive+0x254>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d102      	bne.n	8006606 <HAL_SPI_Receive+0x25a>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800660c:	e0a9      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1c9      	bne.n	80065ae <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006622:	d178      	bne.n	8006716 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006632:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2201      	movs	r2, #1
 800663c:	2101      	movs	r1, #1
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f001 f9ba 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8006650:	e087      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800665a:	d907      	bls.n	800666c <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	b292      	uxth	r2, r2
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e008      	b.n	800667e <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f103 020c 	add.w	r2, r3, #12
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2201      	movs	r2, #1
 8006686:	2101      	movs	r1, #1
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f001 f995 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	f043 0202 	orr.w	r2, r3, #2
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80066a6:	e05c      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066b0:	d105      	bne.n	80066be <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	e02b      	b.n	8006716 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	330c      	adds	r3, #12
 80066c4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066ce:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d8:	d11d      	bne.n	8006716 <HAL_SPI_Receive+0x36a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d119      	bne.n	8006716 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2201      	movs	r2, #1
 80066ea:	2101      	movs	r1, #1
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f001 f963 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fc:	f043 0202 	orr.w	r2, r3, #2
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800670a:	e02a      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006714:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006716:	6a3a      	ldr	r2, [r7, #32]
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f001 fa6a 	bl	8007bf4 <SPI_EndRxTransaction>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	2b10      	cmp	r3, #16
 8006738:	d10a      	bne.n	8006750 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673e:	f043 0202 	orr.w	r2, r3, #2
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800674e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800675e:	e000      	b.n	8006762 <HAL_SPI_Receive+0x3b6>
  }

error :
 8006760:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006776:	4618      	mov	r0, r3
 8006778:	3728      	adds	r7, #40	; 0x28
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b092      	sub	sp, #72	; 0x48
 8006782:	af02      	add	r7, sp, #8
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006794:	2301      	movs	r3, #1
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x2e>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e2c8      	b.n	8006d3e <HAL_SPI_TransmitReceive+0x5c0>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067b4:	f7fc fa9c 	bl	8002cf0 <HAL_GetTick>
 80067b8:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80067ca:	887b      	ldrh	r3, [r7, #2]
 80067cc:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80067ce:	887b      	ldrh	r3, [r7, #2]
 80067d0:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d00f      	beq.n	800680a <HAL_SPI_TransmitReceive+0x8c>
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f0:	d107      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x84>
 80067fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d003      	beq.n	800680a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8006802:	2302      	movs	r3, #2
 8006804:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8006808:	e28f      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <HAL_SPI_TransmitReceive+0x9e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <HAL_SPI_TransmitReceive+0x9e>
 8006816:	887b      	ldrh	r3, [r7, #2]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8006822:	e282      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b04      	cmp	r3, #4
 800682e:	d003      	beq.n	8006838 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2205      	movs	r2, #5
 8006834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	887a      	ldrh	r2, [r7, #2]
 800685e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	887a      	ldrh	r2, [r7, #2]
 8006864:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687a:	d10f      	bne.n	800689c <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800689a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a4:	d802      	bhi.n	80068ac <HAL_SPI_TransmitReceive+0x12e>
 80068a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d908      	bls.n	80068be <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	e007      	b.n	80068ce <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d007      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f4:	f240 80a4 	bls.w	8006a40 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_SPI_TransmitReceive+0x18a>
 8006900:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006902:	2b01      	cmp	r3, #1
 8006904:	f040 808e 	bne.w	8006a24 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	881a      	ldrh	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	1c9a      	adds	r2, r3, #2
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692c:	e07a      	b.n	8006a24 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b02      	cmp	r3, #2
 800693a:	d13f      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x23e>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d03a      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x23e>
 8006946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d137      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d11e      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x23e>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006986:	d119      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10c      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x22e>
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069aa:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069ba:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d11c      	bne.n	8006a04 <HAL_SPI_TransmitReceive+0x286>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	b292      	uxth	r2, r2
 80069e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	1c9a      	adds	r2, r3, #2
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a00:	2301      	movs	r3, #1
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a04:	f7fc f974 	bl	8002cf0 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d807      	bhi.n	8006a24 <HAL_SPI_TransmitReceive+0x2a6>
 8006a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d003      	beq.n	8006a24 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006a22:	e182      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f47f af7f 	bne.w	800692e <HAL_SPI_TransmitReceive+0x1b0>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f47f af78 	bne.w	800692e <HAL_SPI_TransmitReceive+0x1b0>
 8006a3e:	e103      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_SPI_TransmitReceive+0x2d2>
 8006a48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	f040 80ef 	bne.w	8006c2e <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d912      	bls.n	8006a80 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	881a      	ldrh	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	1c9a      	adds	r2, r3, #2
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b02      	subs	r3, #2
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a7e:	e0d6      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa6:	e0c2      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d158      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x3ea>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d053      	beq.n	8006b68 <HAL_SPI_TransmitReceive+0x3ea>
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d150      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d912      	bls.n	8006af6 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	881a      	ldrh	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b02      	subs	r3, #2
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006af4:	e012      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	7812      	ldrb	r2, [r2, #0]
 8006b02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11e      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x3ea>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b32:	d119      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10c      	bne.n	8006b58 <HAL_SPI_TransmitReceive+0x3da>
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b56:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b66:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d148      	bne.n	8006c08 <HAL_SPI_TransmitReceive+0x48a>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d042      	beq.n	8006c08 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d923      	bls.n	8006bd6 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	1c9a      	adds	r2, r3, #2
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b02      	subs	r3, #2
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d81f      	bhi.n	8006c04 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bd2:	605a      	str	r2, [r3, #4]
 8006bd4:	e016      	b.n	8006c04 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f103 020c 	add.w	r2, r3, #12
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c04:	2301      	movs	r3, #1
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c08:	f7fc f872 	bl	8002cf0 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d803      	bhi.n	8006c20 <HAL_SPI_TransmitReceive+0x4a2>
 8006c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d102      	bne.n	8006c26 <HAL_SPI_TransmitReceive+0x4a8>
 8006c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006c2c:	e07d      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f af37 	bne.w	8006aa8 <HAL_SPI_TransmitReceive+0x32a>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f47f af30 	bne.w	8006aa8 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c50:	d146      	bne.n	8006ce0 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c58:	2201      	movs	r2, #1
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 feab 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6c:	f043 0202 	orr.w	r2, r3, #2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8006c7a:	e056      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c84:	d105      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	e026      	b.n	8006ce0 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d119      	bne.n	8006ce0 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fe7e 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc6:	f043 0202 	orr.w	r2, r3, #2
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006cd4:	e029      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d10d      	bne.n	8006d0a <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf2:	f043 0202 	orr.w	r2, r3, #2
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006d02:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 ffc8 	bl	8007ca4 <SPI_EndRxTxTransaction>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d006      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	661a      	str	r2, [r3, #96]	; 0x60
 8006d26:	e000      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8006d28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3740      	adds	r7, #64	; 0x40
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_SPI_Transmit_IT+0x20>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e087      	b.n	8006e78 <HAL_SPI_Transmit_IT+0x130>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_SPI_Transmit_IT+0x34>
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d80:	e075      	b.n	8006e6e <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d002      	beq.n	8006d94 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d92:	e06c      	b.n	8006e6e <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2203      	movs	r2, #3
 8006d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	88fa      	ldrh	r2, [r7, #6]
 8006db2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dd8:	d903      	bls.n	8006de2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a29      	ldr	r2, [pc, #164]	; (8006e84 <HAL_SPI_Transmit_IT+0x13c>)
 8006dde:	651a      	str	r2, [r3, #80]	; 0x50
 8006de0:	e002      	b.n	8006de8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a28      	ldr	r2, [pc, #160]	; (8006e88 <HAL_SPI_Transmit_IT+0x140>)
 8006de6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df0:	d10f      	bne.n	8006e12 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e10:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1a:	d10f      	bne.n	8006e3c <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e3a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006e4a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d008      	beq.n	8006e6c <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e000      	b.n	8006e6e <HAL_SPI_Transmit_IT+0x126>
  }

error :
 8006e6c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	08007959 	.word	0x08007959
 8006e88:	080078f9 	.word	0x080078f9

08006e8c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d110      	bne.n	8006ec8 <HAL_SPI_Receive_IT+0x3c>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eae:	d10b      	bne.n	8006ec8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f8bc 	bl	800703c <HAL_SPI_TransmitReceive_IT>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	e0b1      	b.n	800702c <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_SPI_Receive_IT+0x4a>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e0aa      	b.n	800702c <HAL_SPI_Receive_IT+0x1a0>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
 8006eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eee:	e098      	b.n	8007022 <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_Receive_IT+0x70>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f00:	e08f      	b.n	8007022 <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2204      	movs	r2, #4
 8006f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	88fa      	ldrh	r2, [r7, #6]
 8006f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f46:	d90b      	bls.n	8006f60 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f56:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4a36      	ldr	r2, [pc, #216]	; (8007034 <HAL_SPI_Receive_IT+0x1a8>)
 8006f5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f5e:	e00a      	b.n	8006f76 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f6e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a31      	ldr	r2, [pc, #196]	; (8007038 <HAL_SPI_Receive_IT+0x1ac>)
 8006f74:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7e:	d10f      	bne.n	8006fa0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f9e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa8:	d11f      	bne.n	8006fea <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb8:	d806      	bhi.n	8006fc8 <HAL_SPI_Receive_IT+0x13c>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d102      	bne.n	8006fc8 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e002      	b.n	8006ff0 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006ffe:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b40      	cmp	r3, #64	; 0x40
 800700c:	d008      	beq.n	8007020 <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e000      	b.n	8007022 <HAL_SPI_Receive_IT+0x196>
  }

error :
 8007020:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	08007871 	.word	0x08007871
 8007038:	080077b1 	.word	0x080077b1

0800703c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_SPI_TransmitReceive_IT+0x20>
 8007058:	2302      	movs	r3, #2
 800705a:	e0b9      	b.n	80071d0 <HAL_SPI_TransmitReceive_IT+0x194>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800706a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007072:	7dbb      	ldrb	r3, [r7, #22]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d00d      	beq.n	8007094 <HAL_SPI_TransmitReceive_IT+0x58>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707e:	d106      	bne.n	800708e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <HAL_SPI_TransmitReceive_IT+0x52>
 8007088:	7dbb      	ldrb	r3, [r7, #22]
 800708a:	2b04      	cmp	r3, #4
 800708c:	d002      	beq.n	8007094 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800708e:	2302      	movs	r3, #2
 8007090:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007092:	e098      	b.n	80071c6 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d005      	beq.n	80070a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80070a0:	887b      	ldrh	r3, [r7, #2]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070aa:	e08c      	b.n	80071c6 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d003      	beq.n	80070c0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2205      	movs	r2, #5
 80070bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	887a      	ldrh	r2, [r7, #2]
 80070d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	887a      	ldrh	r2, [r7, #2]
 80070d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	887a      	ldrh	r2, [r7, #2]
 80070e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	887a      	ldrh	r2, [r7, #2]
 80070ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070f6:	d906      	bls.n	8007106 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4a38      	ldr	r2, [pc, #224]	; (80071dc <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80070fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4a37      	ldr	r2, [pc, #220]	; (80071e0 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8007102:	651a      	str	r2, [r3, #80]	; 0x50
 8007104:	e005      	b.n	8007112 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4a36      	ldr	r2, [pc, #216]	; (80071e4 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 800710a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4a36      	ldr	r2, [pc, #216]	; (80071e8 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 8007110:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711a:	d11f      	bne.n	800715c <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800712a:	d806      	bhi.n	800713a <HAL_SPI_TransmitReceive_IT+0xfe>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	2b02      	cmp	r3, #2
 8007132:	d102      	bne.n	800713a <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2202      	movs	r2, #2
 8007138:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e002      	b.n	8007162 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800716a:	d802      	bhi.n	8007172 <HAL_SPI_TransmitReceive_IT+0x136>
 800716c:	887b      	ldrh	r3, [r7, #2]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d908      	bls.n	8007184 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	e007      	b.n	8007194 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007192:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80071a2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d008      	beq.n	80071c4 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e000      	b.n	80071c6 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 80071c4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	08007639 	.word	0x08007639
 80071e0:	080076e9 	.word	0x080076e9
 80071e4:	08007441 	.word	0x08007441
 80071e8:	0800757d 	.word	0x0800757d

080071ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10f      	bne.n	8007230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	099b      	lsrs	r3, r3, #6
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
    return;
 800722e:	e0d7      	b.n	80073e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_SPI_IRQHandler+0x66>
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	09db      	lsrs	r3, r3, #7
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
    return;
 8007250:	e0c6      	b.n	80073e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10c      	bne.n	8007278 <HAL_SPI_IRQHandler+0x8c>
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	099b      	lsrs	r3, r3, #6
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80b4 	beq.w	80073e0 <HAL_SPI_IRQHandler+0x1f4>
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80ad 	beq.w	80073e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	099b      	lsrs	r3, r3, #6
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d023      	beq.n	80072da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d011      	beq.n	80072c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a2:	f043 0204 	orr.w	r2, r3, #4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	e00b      	b.n	80072da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	613b      	str	r3, [r7, #16]
 80072d6:	693b      	ldr	r3, [r7, #16]
        return;
 80072d8:	e082      	b.n	80073e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d014      	beq.n	8007310 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007320:	f043 0208 	orr.w	r2, r3, #8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007328:	2300      	movs	r3, #0
 800732a:	60bb      	str	r3, [r7, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733a:	2b00      	cmp	r3, #0
 800733c:	d04f      	beq.n	80073de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800734c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <HAL_SPI_IRQHandler+0x17e>
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d034      	beq.n	80073d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0203 	bic.w	r2, r2, #3
 8007378:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	2b00      	cmp	r3, #0
 8007380:	d011      	beq.n	80073a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007386:	4a18      	ldr	r2, [pc, #96]	; (80073e8 <HAL_SPI_IRQHandler+0x1fc>)
 8007388:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	4618      	mov	r0, r3
 8007390:	f7fb fdef 	bl	8002f72 <HAL_DMA_Abort_IT>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d016      	beq.n	80073dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	4a0d      	ldr	r2, [pc, #52]	; (80073e8 <HAL_SPI_IRQHandler+0x1fc>)
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fb fdd9 	bl	8002f72 <HAL_DMA_Abort_IT>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80073d2:	e003      	b.n	80073dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f813 	bl	8007400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80073da:	e000      	b.n	80073de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80073dc:	bf00      	nop
    return;
 80073de:	bf00      	nop
  }
}
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	08007415 	.word	0x08007415

080073ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff ffe5 	bl	8007400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d923      	bls.n	800749c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	b292      	uxth	r2, r2
 8007460:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	1c9a      	adds	r2, r3, #2
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b02      	subs	r3, #2
 8007476:	b29a      	uxth	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d11f      	bne.n	80074ca <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	e016      	b.n	80074ca <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f103 020c 	add.w	r2, r3, #12
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d120      	bne.n	8007518 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074de:	d10b      	bne.n	80074f8 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074ee:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <SPI_2linesRxISR_8BIT+0xe0>)
 80074f4:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80074f6:	e00f      	b.n	8007518 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007506:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc0c 	bl	8007d30 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	08007525 	.word	0x08007525

08007524 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	330c      	adds	r3, #12
 8007536:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007540:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007546:	1e5a      	subs	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10f      	bne.n	8007574 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007562:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fbde 	bl	8007d30 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b01      	cmp	r3, #1
 800758c:	d912      	bls.n	80075b4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b02      	subs	r3, #2
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075b2:	e012      	b.n	80075da <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	330c      	adds	r3, #12
 80075be:	7812      	ldrb	r2, [r2, #0]
 80075c0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d126      	bne.n	8007632 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ec:	d110      	bne.n	8007610 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075fc:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800760c:	605a      	str	r2, [r3, #4]
      return;
 800760e:	e010      	b.n	8007632 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800761e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fb7f 	bl	8007d30 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	b292      	uxth	r2, r2
 800764c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d118      	bne.n	80076a8 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767e:	d103      	bne.n	8007688 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a0b      	ldr	r2, [pc, #44]	; (80076b0 <SPI_2linesRxISR_16BIT+0x78>)
 8007684:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007686:	e00f      	b.n	80076a8 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007696:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb44 	bl	8007d30 <SPI_CloseRxTx_ISR>
    }
  }
}
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	080076b5 	.word	0x080076b5

080076b4 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80076c8:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d8:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fb28 	bl	8007d30 <SPI_CloseRxTx_ISR>
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	881a      	ldrh	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d126      	bne.n	800776c <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007726:	d110      	bne.n	800774a <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007736:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007746:	605a      	str	r2, [r3, #4]
      return;
 8007748:	e010      	b.n	800776c <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007758:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fae2 	bl	8007d30 <SPI_CloseRxTx_ISR>
    }
  }
}
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	330c      	adds	r3, #12
 8007784:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 800778e:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007794:	1e5a      	subs	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fb20 	bl	8007de8 <SPI_CloseRx_ISR>
  }
}
 80077a8:	bf00      	nop
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f103 020c 	add.w	r2, r3, #12
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	7812      	ldrb	r2, [r2, #0]
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d10c      	bne.n	800780c <SPI_RxISR_8BIT+0x5c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fa:	d107      	bne.n	800780c <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800780a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007820:	d103      	bne.n	800782a <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a04      	ldr	r2, [pc, #16]	; (8007838 <SPI_RxISR_8BIT+0x88>)
 8007826:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007828:	e002      	b.n	8007830 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fadc 	bl	8007de8 <SPI_CloseRx_ISR>
  }
}
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	08007773 	.word	0x08007773

0800783c <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007850:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007860:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fac0 	bl	8007de8 <SPI_CloseRx_ISR>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	b292      	uxth	r2, r2
 8007884:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	1c9a      	adds	r2, r3, #2
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10c      	bne.n	80078c8 <SPI_RxISR_16BIT+0x58>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b6:	d107      	bne.n	80078c8 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078c6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078dc:	d103      	bne.n	80078e6 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a04      	ldr	r2, [pc, #16]	; (80078f4 <SPI_RxISR_16BIT+0x84>)
 80078e2:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80078e4:	e002      	b.n	80078ec <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa7e 	bl	8007de8 <SPI_CloseRx_ISR>
  }
}
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	0800783d 	.word	0x0800783d

080078f8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	330c      	adds	r3, #12
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10f      	bne.n	8007950 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007938:	d107      	bne.n	800794a <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007948:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa92 	bl	8007e74 <SPI_CloseTx_ISR>
  }
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	881a      	ldrh	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007970:	1c9a      	adds	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10f      	bne.n	80079ae <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007996:	d107      	bne.n	80079a8 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079a6:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa63 	bl	8007e74 <SPI_CloseTx_ISR>
  }
}
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079c8:	f7fb f992 	bl	8002cf0 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	4413      	add	r3, r2
 80079d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079d8:	f7fb f98a 	bl	8002cf0 <HAL_GetTick>
 80079dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079de:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	015b      	lsls	r3, r3, #5
 80079e4:	0d1b      	lsrs	r3, r3, #20
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	fb02 f303 	mul.w	r3, r2, r3
 80079ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ee:	e054      	b.n	8007a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f6:	d050      	beq.n	8007a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079f8:	f7fb f97a 	bl	8002cf0 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d902      	bls.n	8007a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d13d      	bne.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a26:	d111      	bne.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a30:	d004      	beq.n	8007a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3a:	d107      	bne.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a54:	d10f      	bne.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e017      	b.n	8007aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2301      	moveq	r3, #1
 8007aac:	2300      	movne	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d19b      	bne.n	80079f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000008 	.word	0x20000008

08007ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ada:	f7fb f909 	bl	8002cf0 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007aea:	f7fb f901 	bl	8002cf0 <HAL_GetTick>
 8007aee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	330c      	adds	r3, #12
 8007af6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007af8:	4b3d      	ldr	r3, [pc, #244]	; (8007bf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	00da      	lsls	r2, r3, #3
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	0d1b      	lsrs	r3, r3, #20
 8007b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0a:	fb02 f303 	mul.w	r3, r2, r3
 8007b0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b10:	e060      	b.n	8007bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b18:	d107      	bne.n	8007b2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d050      	beq.n	8007bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b32:	f7fb f8dd 	bl	8002cf0 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d902      	bls.n	8007b48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d13d      	bne.n	8007bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b60:	d111      	bne.n	8007b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6a:	d004      	beq.n	8007b76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b74:	d107      	bne.n	8007b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8e:	d10f      	bne.n	8007bb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e010      	b.n	8007be6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d196      	bne.n	8007b12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3728      	adds	r7, #40	; 0x28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000008 	.word	0x20000008

08007bf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c08:	d111      	bne.n	8007c2e <SPI_EndRxTransaction+0x3a>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c12:	d004      	beq.n	8007c1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c1c:	d107      	bne.n	8007c2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	2180      	movs	r1, #128	; 0x80
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff febd 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d007      	beq.n	8007c54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e023      	b.n	8007c9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5c:	d11d      	bne.n	8007c9a <SPI_EndRxTransaction+0xa6>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c66:	d004      	beq.n	8007c72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d113      	bne.n	8007c9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff ff22 	bl	8007ac8 <SPI_WaitFifoStateUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e000      	b.n	8007c9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff ff03 	bl	8007ac8 <SPI_WaitFifoStateUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e027      	b.n	8007d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2180      	movs	r1, #128	; 0x80
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fe68 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	f043 0220 	orr.w	r2, r3, #32
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e014      	b.n	8007d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff fedc 	bl	8007ac8 <SPI_WaitFifoStateUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1a:	f043 0220 	orr.w	r2, r3, #32
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e000      	b.n	8007d28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d38:	f7fa ffda 	bl	8002cf0 <HAL_GetTick>
 8007d3c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0220 	bic.w	r2, r2, #32
 8007d4c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	2164      	movs	r1, #100	; 0x64
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ffa6 	bl	8007ca4 <SPI_EndRxTxTransaction>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d62:	f043 0220 	orr.w	r2, r3, #32
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	d112      	bne.n	8007d9e <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d84:	f043 0202 	orr.w	r2, r3, #2
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007d94:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff fb32 	bl	8007400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d9c:	e020      	b.n	8007de0 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d115      	bne.n	8007dd2 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d107      	bne.n	8007dc2 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fa f9b2 	bl	8002124 <HAL_SPI_RxCpltCallback>
}
 8007dc0:	e00e      	b.n	8007de0 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff fb0e 	bl	80073ec <HAL_SPI_TxRxCpltCallback>
}
 8007dd0:	e006      	b.n	8007de0 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fb10 	bl	8007400 <HAL_SPI_ErrorCallback>
}
 8007de0:	bf00      	nop
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007dfe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007e00:	f7fa ff76 	bl	8002cf0 <HAL_GetTick>
 8007e04:	4603      	mov	r3, r0
 8007e06:	461a      	mov	r2, r3
 8007e08:	2164      	movs	r1, #100	; 0x64
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff fef2 	bl	8007bf4 <SPI_EndRxTransaction>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1a:	f043 0220 	orr.w	r2, r3, #32
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d10e      	bne.n	8007e56 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3c:	f043 0202 	orr.w	r2, r3, #2
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007e4c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fad6 	bl	8007400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007e54:	e00a      	b.n	8007e6c <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d103      	bne.n	8007e66 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fa f960 	bl	8002124 <HAL_SPI_RxCpltCallback>
}
 8007e64:	e002      	b.n	8007e6c <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff faca 	bl	8007400 <HAL_SPI_ErrorCallback>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e7c:	f7fa ff38 	bl	8002cf0 <HAL_GetTick>
 8007e80:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e90:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	2164      	movs	r1, #100	; 0x64
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff ff04 	bl	8007ca4 <SPI_EndRxTxTransaction>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea6:	f043 0220 	orr.w	r2, r3, #32
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fa8f 	bl	8007400 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007ee2:	e002      	b.n	8007eea <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fa f931 	bl	800214c <HAL_SPI_TxCpltCallback>
}
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e040      	b.n	8007f86 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f83a 	bl	8007f8e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2224      	movs	r2, #36	; 0x24
 8007f1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0201 	bic.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f8cb 	bl	80080cc <UART_SetConfig>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e022      	b.n	8007f86 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fb77 	bl	800863c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f042 0201 	orr.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fbfe 	bl	8008780 <UART_CheckIdleState>
 8007f84:	4603      	mov	r3, r0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b08a      	sub	sp, #40	; 0x28
 8007fa6:	af02      	add	r7, sp, #8
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	603b      	str	r3, [r7, #0]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	f040 8082 	bne.w	80080c0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <HAL_UART_Transmit+0x26>
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e07a      	b.n	80080c2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_UART_Transmit+0x38>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e073      	b.n	80080c2 <HAL_UART_Transmit+0x120>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2221      	movs	r2, #33	; 0x21
 8007fee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ff0:	f7fa fe7e 	bl	8002cf0 <HAL_GetTick>
 8007ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	88fa      	ldrh	r2, [r7, #6]
 8007ffa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800e:	d108      	bne.n	8008022 <HAL_UART_Transmit+0x80>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	e003      	b.n	800802a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008032:	e02d      	b.n	8008090 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2200      	movs	r2, #0
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fbe7 	bl	8008812 <UART_WaitOnFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e039      	b.n	80080c2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	881a      	ldrh	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008060:	b292      	uxth	r2, r2
 8008062:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	3302      	adds	r3, #2
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	e008      	b.n	800807e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	781a      	ldrb	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	b292      	uxth	r2, r2
 8008076:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	3301      	adds	r3, #1
 800807c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008096:	b29b      	uxth	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1cb      	bne.n	8008034 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2200      	movs	r2, #0
 80080a4:	2140      	movs	r1, #64	; 0x40
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fbb3 	bl	8008812 <UART_WaitOnFlagUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e005      	b.n	80080c2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3720      	adds	r7, #32
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080d0:	b08a      	sub	sp, #40	; 0x28
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4ba4      	ldr	r3, [pc, #656]	; (800838c <UART_SetConfig+0x2c0>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008104:	430b      	orrs	r3, r1
 8008106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a99      	ldr	r2, [pc, #612]	; (8008390 <UART_SetConfig+0x2c4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008134:	4313      	orrs	r3, r2
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008148:	430a      	orrs	r2, r1
 800814a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a90      	ldr	r2, [pc, #576]	; (8008394 <UART_SetConfig+0x2c8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d126      	bne.n	80081a4 <UART_SetConfig+0xd8>
 8008156:	4b90      	ldr	r3, [pc, #576]	; (8008398 <UART_SetConfig+0x2cc>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	2b03      	cmp	r3, #3
 8008162:	d81b      	bhi.n	800819c <UART_SetConfig+0xd0>
 8008164:	a201      	add	r2, pc, #4	; (adr r2, 800816c <UART_SetConfig+0xa0>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	0800817d 	.word	0x0800817d
 8008170:	0800818d 	.word	0x0800818d
 8008174:	08008185 	.word	0x08008185
 8008178:	08008195 	.word	0x08008195
 800817c:	2301      	movs	r3, #1
 800817e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008182:	e116      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008184:	2302      	movs	r3, #2
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818a:	e112      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800818c:	2304      	movs	r3, #4
 800818e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008192:	e10e      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008194:	2308      	movs	r3, #8
 8008196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819a:	e10a      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800819c:	2310      	movs	r3, #16
 800819e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a2:	e106      	b.n	80083b2 <UART_SetConfig+0x2e6>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a7c      	ldr	r2, [pc, #496]	; (800839c <UART_SetConfig+0x2d0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d138      	bne.n	8008220 <UART_SetConfig+0x154>
 80081ae:	4b7a      	ldr	r3, [pc, #488]	; (8008398 <UART_SetConfig+0x2cc>)
 80081b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b4:	f003 030c 	and.w	r3, r3, #12
 80081b8:	2b0c      	cmp	r3, #12
 80081ba:	d82d      	bhi.n	8008218 <UART_SetConfig+0x14c>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <UART_SetConfig+0xf8>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081f9 	.word	0x080081f9
 80081c8:	08008219 	.word	0x08008219
 80081cc:	08008219 	.word	0x08008219
 80081d0:	08008219 	.word	0x08008219
 80081d4:	08008209 	.word	0x08008209
 80081d8:	08008219 	.word	0x08008219
 80081dc:	08008219 	.word	0x08008219
 80081e0:	08008219 	.word	0x08008219
 80081e4:	08008201 	.word	0x08008201
 80081e8:	08008219 	.word	0x08008219
 80081ec:	08008219 	.word	0x08008219
 80081f0:	08008219 	.word	0x08008219
 80081f4:	08008211 	.word	0x08008211
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fe:	e0d8      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008200:	2302      	movs	r3, #2
 8008202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008206:	e0d4      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008208:	2304      	movs	r3, #4
 800820a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800820e:	e0d0      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008210:	2308      	movs	r3, #8
 8008212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008216:	e0cc      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008218:	2310      	movs	r3, #16
 800821a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800821e:	e0c8      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a5e      	ldr	r2, [pc, #376]	; (80083a0 <UART_SetConfig+0x2d4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d125      	bne.n	8008276 <UART_SetConfig+0x1aa>
 800822a:	4b5b      	ldr	r3, [pc, #364]	; (8008398 <UART_SetConfig+0x2cc>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008234:	2b30      	cmp	r3, #48	; 0x30
 8008236:	d016      	beq.n	8008266 <UART_SetConfig+0x19a>
 8008238:	2b30      	cmp	r3, #48	; 0x30
 800823a:	d818      	bhi.n	800826e <UART_SetConfig+0x1a2>
 800823c:	2b20      	cmp	r3, #32
 800823e:	d00a      	beq.n	8008256 <UART_SetConfig+0x18a>
 8008240:	2b20      	cmp	r3, #32
 8008242:	d814      	bhi.n	800826e <UART_SetConfig+0x1a2>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <UART_SetConfig+0x182>
 8008248:	2b10      	cmp	r3, #16
 800824a:	d008      	beq.n	800825e <UART_SetConfig+0x192>
 800824c:	e00f      	b.n	800826e <UART_SetConfig+0x1a2>
 800824e:	2300      	movs	r3, #0
 8008250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008254:	e0ad      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008256:	2302      	movs	r3, #2
 8008258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800825c:	e0a9      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800825e:	2304      	movs	r3, #4
 8008260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008264:	e0a5      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008266:	2308      	movs	r3, #8
 8008268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800826c:	e0a1      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800826e:	2310      	movs	r3, #16
 8008270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008274:	e09d      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a4a      	ldr	r2, [pc, #296]	; (80083a4 <UART_SetConfig+0x2d8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d125      	bne.n	80082cc <UART_SetConfig+0x200>
 8008280:	4b45      	ldr	r3, [pc, #276]	; (8008398 <UART_SetConfig+0x2cc>)
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008286:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800828a:	2bc0      	cmp	r3, #192	; 0xc0
 800828c:	d016      	beq.n	80082bc <UART_SetConfig+0x1f0>
 800828e:	2bc0      	cmp	r3, #192	; 0xc0
 8008290:	d818      	bhi.n	80082c4 <UART_SetConfig+0x1f8>
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d00a      	beq.n	80082ac <UART_SetConfig+0x1e0>
 8008296:	2b80      	cmp	r3, #128	; 0x80
 8008298:	d814      	bhi.n	80082c4 <UART_SetConfig+0x1f8>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <UART_SetConfig+0x1d8>
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	d008      	beq.n	80082b4 <UART_SetConfig+0x1e8>
 80082a2:	e00f      	b.n	80082c4 <UART_SetConfig+0x1f8>
 80082a4:	2300      	movs	r3, #0
 80082a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082aa:	e082      	b.n	80083b2 <UART_SetConfig+0x2e6>
 80082ac:	2302      	movs	r3, #2
 80082ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082b2:	e07e      	b.n	80083b2 <UART_SetConfig+0x2e6>
 80082b4:	2304      	movs	r3, #4
 80082b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ba:	e07a      	b.n	80083b2 <UART_SetConfig+0x2e6>
 80082bc:	2308      	movs	r3, #8
 80082be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c2:	e076      	b.n	80083b2 <UART_SetConfig+0x2e6>
 80082c4:	2310      	movs	r3, #16
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ca:	e072      	b.n	80083b2 <UART_SetConfig+0x2e6>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a35      	ldr	r2, [pc, #212]	; (80083a8 <UART_SetConfig+0x2dc>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d12a      	bne.n	800832c <UART_SetConfig+0x260>
 80082d6:	4b30      	ldr	r3, [pc, #192]	; (8008398 <UART_SetConfig+0x2cc>)
 80082d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e4:	d01a      	beq.n	800831c <UART_SetConfig+0x250>
 80082e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ea:	d81b      	bhi.n	8008324 <UART_SetConfig+0x258>
 80082ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f0:	d00c      	beq.n	800830c <UART_SetConfig+0x240>
 80082f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f6:	d815      	bhi.n	8008324 <UART_SetConfig+0x258>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <UART_SetConfig+0x238>
 80082fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008300:	d008      	beq.n	8008314 <UART_SetConfig+0x248>
 8008302:	e00f      	b.n	8008324 <UART_SetConfig+0x258>
 8008304:	2300      	movs	r3, #0
 8008306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800830a:	e052      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800830c:	2302      	movs	r3, #2
 800830e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008312:	e04e      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008314:	2304      	movs	r3, #4
 8008316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800831a:	e04a      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800831c:	2308      	movs	r3, #8
 800831e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008322:	e046      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008324:	2310      	movs	r3, #16
 8008326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800832a:	e042      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a17      	ldr	r2, [pc, #92]	; (8008390 <UART_SetConfig+0x2c4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d13a      	bne.n	80083ac <UART_SetConfig+0x2e0>
 8008336:	4b18      	ldr	r3, [pc, #96]	; (8008398 <UART_SetConfig+0x2cc>)
 8008338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008344:	d01a      	beq.n	800837c <UART_SetConfig+0x2b0>
 8008346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800834a:	d81b      	bhi.n	8008384 <UART_SetConfig+0x2b8>
 800834c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008350:	d00c      	beq.n	800836c <UART_SetConfig+0x2a0>
 8008352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008356:	d815      	bhi.n	8008384 <UART_SetConfig+0x2b8>
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <UART_SetConfig+0x298>
 800835c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008360:	d008      	beq.n	8008374 <UART_SetConfig+0x2a8>
 8008362:	e00f      	b.n	8008384 <UART_SetConfig+0x2b8>
 8008364:	2300      	movs	r3, #0
 8008366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800836a:	e022      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800836c:	2302      	movs	r3, #2
 800836e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008372:	e01e      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008374:	2304      	movs	r3, #4
 8008376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800837a:	e01a      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800837c:	2308      	movs	r3, #8
 800837e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008382:	e016      	b.n	80083b2 <UART_SetConfig+0x2e6>
 8008384:	2310      	movs	r3, #16
 8008386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800838a:	e012      	b.n	80083b2 <UART_SetConfig+0x2e6>
 800838c:	efff69f3 	.word	0xefff69f3
 8008390:	40008000 	.word	0x40008000
 8008394:	40013800 	.word	0x40013800
 8008398:	40021000 	.word	0x40021000
 800839c:	40004400 	.word	0x40004400
 80083a0:	40004800 	.word	0x40004800
 80083a4:	40004c00 	.word	0x40004c00
 80083a8:	40005000 	.word	0x40005000
 80083ac:	2310      	movs	r3, #16
 80083ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a9f      	ldr	r2, [pc, #636]	; (8008634 <UART_SetConfig+0x568>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d17a      	bne.n	80084b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d824      	bhi.n	800840e <UART_SetConfig+0x342>
 80083c4:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <UART_SetConfig+0x300>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	0800840f 	.word	0x0800840f
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	0800840f 	.word	0x0800840f
 80083dc:	080083ff 	.word	0x080083ff
 80083e0:	0800840f 	.word	0x0800840f
 80083e4:	0800840f 	.word	0x0800840f
 80083e8:	0800840f 	.word	0x0800840f
 80083ec:	08008407 	.word	0x08008407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f0:	f7fc fe68 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 80083f4:	61f8      	str	r0, [r7, #28]
        break;
 80083f6:	e010      	b.n	800841a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f8:	4b8f      	ldr	r3, [pc, #572]	; (8008638 <UART_SetConfig+0x56c>)
 80083fa:	61fb      	str	r3, [r7, #28]
        break;
 80083fc:	e00d      	b.n	800841a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fe:	f7fc fdc9 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8008402:	61f8      	str	r0, [r7, #28]
        break;
 8008404:	e009      	b.n	800841a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840a:	61fb      	str	r3, [r7, #28]
        break;
 800840c:	e005      	b.n	800841a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008418:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80fb 	beq.w	8008618 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	4413      	add	r3, r2
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	429a      	cmp	r2, r3
 8008430:	d305      	bcc.n	800843e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	429a      	cmp	r2, r3
 800843c:	d903      	bls.n	8008446 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008444:	e0e8      	b.n	8008618 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	2200      	movs	r2, #0
 800844a:	461c      	mov	r4, r3
 800844c:	4615      	mov	r5, r2
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	f04f 0300 	mov.w	r3, #0
 8008456:	022b      	lsls	r3, r5, #8
 8008458:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800845c:	0222      	lsls	r2, r4, #8
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	6849      	ldr	r1, [r1, #4]
 8008462:	0849      	lsrs	r1, r1, #1
 8008464:	2000      	movs	r0, #0
 8008466:	4688      	mov	r8, r1
 8008468:	4681      	mov	r9, r0
 800846a:	eb12 0a08 	adds.w	sl, r2, r8
 800846e:	eb43 0b09 	adc.w	fp, r3, r9
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	603b      	str	r3, [r7, #0]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008480:	4650      	mov	r0, sl
 8008482:	4659      	mov	r1, fp
 8008484:	f7f8 f938 	bl	80006f8 <__aeabi_uldivmod>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4613      	mov	r3, r2
 800848e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008496:	d308      	bcc.n	80084aa <UART_SetConfig+0x3de>
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800849e:	d204      	bcs.n	80084aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	60da      	str	r2, [r3, #12]
 80084a8:	e0b6      	b.n	8008618 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80084b0:	e0b2      	b.n	8008618 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ba:	d15e      	bne.n	800857a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80084bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d828      	bhi.n	8008516 <UART_SetConfig+0x44a>
 80084c4:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0x400>)
 80084c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ca:	bf00      	nop
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	080084f9 	.word	0x080084f9
 80084d4:	08008501 	.word	0x08008501
 80084d8:	08008517 	.word	0x08008517
 80084dc:	08008507 	.word	0x08008507
 80084e0:	08008517 	.word	0x08008517
 80084e4:	08008517 	.word	0x08008517
 80084e8:	08008517 	.word	0x08008517
 80084ec:	0800850f 	.word	0x0800850f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f0:	f7fc fde8 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 80084f4:	61f8      	str	r0, [r7, #28]
        break;
 80084f6:	e014      	b.n	8008522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f8:	f7fc fdfa 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 80084fc:	61f8      	str	r0, [r7, #28]
        break;
 80084fe:	e010      	b.n	8008522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008500:	4b4d      	ldr	r3, [pc, #308]	; (8008638 <UART_SetConfig+0x56c>)
 8008502:	61fb      	str	r3, [r7, #28]
        break;
 8008504:	e00d      	b.n	8008522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008506:	f7fc fd45 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 800850a:	61f8      	str	r0, [r7, #28]
        break;
 800850c:	e009      	b.n	8008522 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008512:	61fb      	str	r3, [r7, #28]
        break;
 8008514:	e005      	b.n	8008522 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d077      	beq.n	8008618 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	005a      	lsls	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	085b      	lsrs	r3, r3, #1
 8008532:	441a      	add	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	2b0f      	cmp	r3, #15
 8008542:	d916      	bls.n	8008572 <UART_SetConfig+0x4a6>
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800854a:	d212      	bcs.n	8008572 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	b29b      	uxth	r3, r3
 8008550:	f023 030f 	bic.w	r3, r3, #15
 8008554:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	b29b      	uxth	r3, r3
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	b29a      	uxth	r2, r3
 8008562:	8afb      	ldrh	r3, [r7, #22]
 8008564:	4313      	orrs	r3, r2
 8008566:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	8afa      	ldrh	r2, [r7, #22]
 800856e:	60da      	str	r2, [r3, #12]
 8008570:	e052      	b.n	8008618 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008578:	e04e      	b.n	8008618 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800857a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800857e:	2b08      	cmp	r3, #8
 8008580:	d827      	bhi.n	80085d2 <UART_SetConfig+0x506>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <UART_SetConfig+0x4bc>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085ad 	.word	0x080085ad
 800858c:	080085b5 	.word	0x080085b5
 8008590:	080085bd 	.word	0x080085bd
 8008594:	080085d3 	.word	0x080085d3
 8008598:	080085c3 	.word	0x080085c3
 800859c:	080085d3 	.word	0x080085d3
 80085a0:	080085d3 	.word	0x080085d3
 80085a4:	080085d3 	.word	0x080085d3
 80085a8:	080085cb 	.word	0x080085cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ac:	f7fc fd8a 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 80085b0:	61f8      	str	r0, [r7, #28]
        break;
 80085b2:	e014      	b.n	80085de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b4:	f7fc fd9c 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 80085b8:	61f8      	str	r0, [r7, #28]
        break;
 80085ba:	e010      	b.n	80085de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085bc:	4b1e      	ldr	r3, [pc, #120]	; (8008638 <UART_SetConfig+0x56c>)
 80085be:	61fb      	str	r3, [r7, #28]
        break;
 80085c0:	e00d      	b.n	80085de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c2:	f7fc fce7 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80085c6:	61f8      	str	r0, [r7, #28]
        break;
 80085c8:	e009      	b.n	80085de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	61fb      	str	r3, [r7, #28]
        break;
 80085d0:	e005      	b.n	80085de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80085dc:	bf00      	nop
    }

    if (pclk != 0U)
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d019      	beq.n	8008618 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	085a      	lsrs	r2, r3, #1
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	441a      	add	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b0f      	cmp	r3, #15
 80085fc:	d909      	bls.n	8008612 <UART_SetConfig+0x546>
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008604:	d205      	bcs.n	8008612 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60da      	str	r2, [r3, #12]
 8008610:	e002      	b.n	8008618 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008624:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008628:	4618      	mov	r0, r3
 800862a:	3728      	adds	r7, #40	; 0x28
 800862c:	46bd      	mov	sp, r7
 800862e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008632:	bf00      	nop
 8008634:	40008000 	.word	0x40008000
 8008638:	00f42400 	.word	0x00f42400

0800863c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01a      	beq.n	8008752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873a:	d10a      	bne.n	8008752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008790:	f7fa faae 	bl	8002cf0 <HAL_GetTick>
 8008794:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0308 	and.w	r3, r3, #8
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d10e      	bne.n	80087c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f82d 	bl	8008812 <UART_WaitOnFlagUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e023      	b.n	800880a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0304 	and.w	r3, r3, #4
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d10e      	bne.n	80087ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f817 	bl	8008812 <UART_WaitOnFlagUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e00d      	b.n	800880a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2220      	movs	r2, #32
 80087f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b09c      	sub	sp, #112	; 0x70
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	603b      	str	r3, [r7, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008822:	e0a5      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	f000 80a1 	beq.w	8008970 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882e:	f7fa fa5f 	bl	8002cf0 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800883a:	429a      	cmp	r2, r3
 800883c:	d302      	bcc.n	8008844 <UART_WaitOnFlagUntilTimeout+0x32>
 800883e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008840:	2b00      	cmp	r3, #0
 8008842:	d13e      	bne.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008858:	667b      	str	r3, [r7, #100]	; 0x64
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008864:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	663b      	str	r3, [r7, #96]	; 0x60
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008896:	64ba      	str	r2, [r7, #72]	; 0x48
 8008898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800889c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e5      	bne.n	8008876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2220      	movs	r2, #32
 80088ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e067      	b.n	8008992 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d04f      	beq.n	8008970 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088de:	d147      	bne.n	8008970 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	e853 3f00 	ldrex	r3, [r3]
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008908:	637b      	str	r3, [r7, #52]	; 0x34
 800890a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800890e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e6      	bne.n	80088ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	613b      	str	r3, [r7, #16]
   return(result);
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f023 0301 	bic.w	r3, r3, #1
 8008932:	66bb      	str	r3, [r7, #104]	; 0x68
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3308      	adds	r3, #8
 800893a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800893c:	623a      	str	r2, [r7, #32]
 800893e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	69f9      	ldr	r1, [r7, #28]
 8008942:	6a3a      	ldr	r2, [r7, #32]
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	61bb      	str	r3, [r7, #24]
   return(result);
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e5      	bne.n	800891c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2220      	movs	r2, #32
 8008954:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2220      	movs	r2, #32
 800895a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2220      	movs	r2, #32
 8008960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e010      	b.n	8008992 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69da      	ldr	r2, [r3, #28]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	4013      	ands	r3, r2
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	429a      	cmp	r2, r3
 800897e:	bf0c      	ite	eq
 8008980:	2301      	moveq	r3, #1
 8008982:	2300      	movne	r3, #0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	461a      	mov	r2, r3
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	429a      	cmp	r2, r3
 800898c:	f43f af4a 	beq.w	8008824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3770      	adds	r7, #112	; 0x70
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800899c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80089d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80089a0:	f7f9 fd5a 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80089a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80089a6:	e003      	b.n	80089b0 <LoopCopyDataInit>

080089a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80089a8:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80089aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80089ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80089ae:	3104      	adds	r1, #4

080089b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80089b0:	480a      	ldr	r0, [pc, #40]	; (80089dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80089b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80089b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80089b8:	d3f6      	bcc.n	80089a8 <CopyDataInit>
	ldr	r2, =_sbss
 80089ba:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80089bc:	e002      	b.n	80089c4 <LoopFillZerobss>

080089be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80089be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80089c0:	f842 3b04 	str.w	r3, [r2], #4

080089c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80089c4:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <LoopForever+0x16>)
	cmp	r2, r3
 80089c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80089c8:	d3f9      	bcc.n	80089be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80089ca:	f000 f817 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80089ce:	f7f9 fc53 	bl	8002278 <main>

080089d2 <LoopForever>:

LoopForever:
    b LoopForever
 80089d2:	e7fe      	b.n	80089d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80089d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80089d8:	0800c398 	.word	0x0800c398
	ldr	r0, =_sdata
 80089dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80089e0:	20000120 	.word	0x20000120
	ldr	r2, =_sbss
 80089e4:	20000120 	.word	0x20000120
	ldr	r3, = _ebss
 80089e8:	20001028 	.word	0x20001028

080089ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80089ec:	e7fe      	b.n	80089ec <ADC1_2_IRQHandler>
	...

080089f0 <__errno>:
 80089f0:	4b01      	ldr	r3, [pc, #4]	; (80089f8 <__errno+0x8>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	2000005c 	.word	0x2000005c

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4d0d      	ldr	r5, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1b64      	subs	r4, r4, r5
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2600      	movs	r6, #0
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4d0b      	ldr	r5, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f002 fee4 	bl	800b7dc <_init>
 8008a14:	1b64      	subs	r4, r4, r5
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2600      	movs	r6, #0
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	0800c388 	.word	0x0800c388
 8008a38:	0800c388 	.word	0x0800c388
 8008a3c:	0800c388 	.word	0x0800c388
 8008a40:	0800c38c 	.word	0x0800c38c

08008a44 <localtime>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <localtime+0x30>)
 8008a48:	681d      	ldr	r5, [r3, #0]
 8008a4a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	b953      	cbnz	r3, 8008a66 <localtime+0x22>
 8008a50:	2024      	movs	r0, #36	; 0x24
 8008a52:	f000 f909 	bl	8008c68 <malloc>
 8008a56:	4602      	mov	r2, r0
 8008a58:	63e8      	str	r0, [r5, #60]	; 0x3c
 8008a5a:	b920      	cbnz	r0, 8008a66 <localtime+0x22>
 8008a5c:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <localtime+0x34>)
 8008a5e:	4807      	ldr	r0, [pc, #28]	; (8008a7c <localtime+0x38>)
 8008a60:	2132      	movs	r1, #50	; 0x32
 8008a62:	f001 f8b5 	bl	8009bd0 <__assert_func>
 8008a66:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8008a68:	4620      	mov	r0, r4
 8008a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6e:	f000 b807 	b.w	8008a80 <localtime_r>
 8008a72:	bf00      	nop
 8008a74:	2000005c 	.word	0x2000005c
 8008a78:	0800bfc0 	.word	0x0800bfc0
 8008a7c:	0800bfd7 	.word	0x0800bfd7

08008a80 <localtime_r>:
 8008a80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a84:	4680      	mov	r8, r0
 8008a86:	9101      	str	r1, [sp, #4]
 8008a88:	f001 fae2 	bl	800a050 <__gettzinfo>
 8008a8c:	9901      	ldr	r1, [sp, #4]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	4640      	mov	r0, r8
 8008a92:	f001 fae1 	bl	800a058 <gmtime_r>
 8008a96:	6943      	ldr	r3, [r0, #20]
 8008a98:	0799      	lsls	r1, r3, #30
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8008aa0:	d105      	bne.n	8008aae <localtime_r+0x2e>
 8008aa2:	2264      	movs	r2, #100	; 0x64
 8008aa4:	fb97 f3f2 	sdiv	r3, r7, r2
 8008aa8:	fb02 7313 	mls	r3, r2, r3, r7
 8008aac:	bb73      	cbnz	r3, 8008b0c <localtime_r+0x8c>
 8008aae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008ab2:	fb97 f6f3 	sdiv	r6, r7, r3
 8008ab6:	fb03 7616 	mls	r6, r3, r6, r7
 8008aba:	fab6 f386 	clz	r3, r6
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	4e67      	ldr	r6, [pc, #412]	; (8008c60 <localtime_r+0x1e0>)
 8008ac2:	2230      	movs	r2, #48	; 0x30
 8008ac4:	fb02 6603 	mla	r6, r2, r3, r6
 8008ac8:	f000 fe30 	bl	800972c <__tz_lock>
 8008acc:	f000 fe3a 	bl	8009744 <_tzset_unlocked>
 8008ad0:	4b64      	ldr	r3, [pc, #400]	; (8008c64 <localtime_r+0x1e4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	b34b      	cbz	r3, 8008b2a <localtime_r+0xaa>
 8008ad6:	686b      	ldr	r3, [r5, #4]
 8008ad8:	42bb      	cmp	r3, r7
 8008ada:	d119      	bne.n	8008b10 <localtime_r+0x90>
 8008adc:	682f      	ldr	r7, [r5, #0]
 8008ade:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ae2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8008ae6:	b9df      	cbnz	r7, 8008b20 <localtime_r+0xa0>
 8008ae8:	4282      	cmp	r2, r0
 8008aea:	eb73 0101 	sbcs.w	r1, r3, r1
 8008aee:	da23      	bge.n	8008b38 <localtime_r+0xb8>
 8008af0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008af4:	4282      	cmp	r2, r0
 8008af6:	eb73 0701 	sbcs.w	r7, r3, r1
 8008afa:	bfb4      	ite	lt
 8008afc:	2701      	movlt	r7, #1
 8008afe:	2700      	movge	r7, #0
 8008b00:	4282      	cmp	r2, r0
 8008b02:	418b      	sbcs	r3, r1
 8008b04:	6227      	str	r7, [r4, #32]
 8008b06:	db19      	blt.n	8008b3c <localtime_r+0xbc>
 8008b08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008b0a:	e018      	b.n	8008b3e <localtime_r+0xbe>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e7d7      	b.n	8008ac0 <localtime_r+0x40>
 8008b10:	4638      	mov	r0, r7
 8008b12:	f000 fd61 	bl	80095d8 <__tzcalc_limits>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d1e0      	bne.n	8008adc <localtime_r+0x5c>
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	e004      	b.n	8008b2a <localtime_r+0xaa>
 8008b20:	4282      	cmp	r2, r0
 8008b22:	eb73 0101 	sbcs.w	r1, r3, r1
 8008b26:	da02      	bge.n	8008b2e <localtime_r+0xae>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	6223      	str	r3, [r4, #32]
 8008b2c:	e7ec      	b.n	8008b08 <localtime_r+0x88>
 8008b2e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008b32:	4282      	cmp	r2, r0
 8008b34:	418b      	sbcs	r3, r1
 8008b36:	daf7      	bge.n	8008b28 <localtime_r+0xa8>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	6223      	str	r3, [r4, #32]
 8008b3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008b3e:	6861      	ldr	r1, [r4, #4]
 8008b40:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008b44:	203c      	movs	r0, #60	; 0x3c
 8008b46:	fb93 f5f2 	sdiv	r5, r3, r2
 8008b4a:	fb02 3315 	mls	r3, r2, r5, r3
 8008b4e:	fb93 f2f0 	sdiv	r2, r3, r0
 8008b52:	fb00 3012 	mls	r0, r0, r2, r3
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	1a89      	subs	r1, r1, r2
 8008b5a:	68a2      	ldr	r2, [r4, #8]
 8008b5c:	6061      	str	r1, [r4, #4]
 8008b5e:	1a1b      	subs	r3, r3, r0
 8008b60:	1b52      	subs	r2, r2, r5
 8008b62:	2b3b      	cmp	r3, #59	; 0x3b
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	60a2      	str	r2, [r4, #8]
 8008b68:	dd35      	ble.n	8008bd6 <localtime_r+0x156>
 8008b6a:	3101      	adds	r1, #1
 8008b6c:	6061      	str	r1, [r4, #4]
 8008b6e:	3b3c      	subs	r3, #60	; 0x3c
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	6863      	ldr	r3, [r4, #4]
 8008b74:	2b3b      	cmp	r3, #59	; 0x3b
 8008b76:	dd34      	ble.n	8008be2 <localtime_r+0x162>
 8008b78:	3201      	adds	r2, #1
 8008b7a:	60a2      	str	r2, [r4, #8]
 8008b7c:	3b3c      	subs	r3, #60	; 0x3c
 8008b7e:	6063      	str	r3, [r4, #4]
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	2b17      	cmp	r3, #23
 8008b84:	dd33      	ble.n	8008bee <localtime_r+0x16e>
 8008b86:	69e2      	ldr	r2, [r4, #28]
 8008b88:	3201      	adds	r2, #1
 8008b8a:	61e2      	str	r2, [r4, #28]
 8008b8c:	69a2      	ldr	r2, [r4, #24]
 8008b8e:	3201      	adds	r2, #1
 8008b90:	2a06      	cmp	r2, #6
 8008b92:	bfc8      	it	gt
 8008b94:	2200      	movgt	r2, #0
 8008b96:	61a2      	str	r2, [r4, #24]
 8008b98:	68e2      	ldr	r2, [r4, #12]
 8008b9a:	3b18      	subs	r3, #24
 8008b9c:	3201      	adds	r2, #1
 8008b9e:	60a3      	str	r3, [r4, #8]
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	60e2      	str	r2, [r4, #12]
 8008ba4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008ba8:	428a      	cmp	r2, r1
 8008baa:	dd0e      	ble.n	8008bca <localtime_r+0x14a>
 8008bac:	2b0b      	cmp	r3, #11
 8008bae:	eba2 0201 	sub.w	r2, r2, r1
 8008bb2:	60e2      	str	r2, [r4, #12]
 8008bb4:	f103 0201 	add.w	r2, r3, #1
 8008bb8:	bf09      	itett	eq
 8008bba:	6963      	ldreq	r3, [r4, #20]
 8008bbc:	6122      	strne	r2, [r4, #16]
 8008bbe:	2200      	moveq	r2, #0
 8008bc0:	3301      	addeq	r3, #1
 8008bc2:	bf02      	ittt	eq
 8008bc4:	6122      	streq	r2, [r4, #16]
 8008bc6:	6163      	streq	r3, [r4, #20]
 8008bc8:	61e2      	streq	r2, [r4, #28]
 8008bca:	f000 fdb5 	bl	8009738 <__tz_unlock>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	b002      	add	sp, #8
 8008bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dacb      	bge.n	8008b72 <localtime_r+0xf2>
 8008bda:	3901      	subs	r1, #1
 8008bdc:	6061      	str	r1, [r4, #4]
 8008bde:	333c      	adds	r3, #60	; 0x3c
 8008be0:	e7c6      	b.n	8008b70 <localtime_r+0xf0>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	dacc      	bge.n	8008b80 <localtime_r+0x100>
 8008be6:	3a01      	subs	r2, #1
 8008be8:	60a2      	str	r2, [r4, #8]
 8008bea:	333c      	adds	r3, #60	; 0x3c
 8008bec:	e7c7      	b.n	8008b7e <localtime_r+0xfe>
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	daeb      	bge.n	8008bca <localtime_r+0x14a>
 8008bf2:	69e2      	ldr	r2, [r4, #28]
 8008bf4:	3a01      	subs	r2, #1
 8008bf6:	61e2      	str	r2, [r4, #28]
 8008bf8:	69a2      	ldr	r2, [r4, #24]
 8008bfa:	3a01      	subs	r2, #1
 8008bfc:	bf48      	it	mi
 8008bfe:	2206      	movmi	r2, #6
 8008c00:	61a2      	str	r2, [r4, #24]
 8008c02:	68e2      	ldr	r2, [r4, #12]
 8008c04:	3318      	adds	r3, #24
 8008c06:	3a01      	subs	r2, #1
 8008c08:	60e2      	str	r2, [r4, #12]
 8008c0a:	60a3      	str	r3, [r4, #8]
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d1dc      	bne.n	8008bca <localtime_r+0x14a>
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	d405      	bmi.n	8008c22 <localtime_r+0x1a2>
 8008c16:	6123      	str	r3, [r4, #16]
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008c1e:	60e3      	str	r3, [r4, #12]
 8008c20:	e7d3      	b.n	8008bca <localtime_r+0x14a>
 8008c22:	230b      	movs	r3, #11
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	6963      	ldr	r3, [r4, #20]
 8008c28:	1e5a      	subs	r2, r3, #1
 8008c2a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008c2e:	6162      	str	r2, [r4, #20]
 8008c30:	079a      	lsls	r2, r3, #30
 8008c32:	d105      	bne.n	8008c40 <localtime_r+0x1c0>
 8008c34:	2164      	movs	r1, #100	; 0x64
 8008c36:	fb93 f2f1 	sdiv	r2, r3, r1
 8008c3a:	fb01 3212 	mls	r2, r1, r2, r3
 8008c3e:	b962      	cbnz	r2, 8008c5a <localtime_r+0x1da>
 8008c40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008c44:	fb93 f1f2 	sdiv	r1, r3, r2
 8008c48:	fb02 3311 	mls	r3, r2, r1, r3
 8008c4c:	fab3 f383 	clz	r3, r3
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008c56:	61e3      	str	r3, [r4, #28]
 8008c58:	e7de      	b.n	8008c18 <localtime_r+0x198>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e7f9      	b.n	8008c52 <localtime_r+0x1d2>
 8008c5e:	bf00      	nop
 8008c60:	0800c094 	.word	0x0800c094
 8008c64:	20001014 	.word	0x20001014

08008c68 <malloc>:
 8008c68:	4b02      	ldr	r3, [pc, #8]	; (8008c74 <malloc+0xc>)
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	f000 baff 	b.w	8009270 <_malloc_r>
 8008c72:	bf00      	nop
 8008c74:	2000005c 	.word	0x2000005c

08008c78 <free>:
 8008c78:	4b02      	ldr	r3, [pc, #8]	; (8008c84 <free+0xc>)
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	f000 ba8b 	b.w	8009198 <_free_r>
 8008c82:	bf00      	nop
 8008c84:	2000005c 	.word	0x2000005c

08008c88 <memcpy>:
 8008c88:	440a      	add	r2, r1
 8008c8a:	4291      	cmp	r1, r2
 8008c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c90:	d100      	bne.n	8008c94 <memcpy+0xc>
 8008c92:	4770      	bx	lr
 8008c94:	b510      	push	{r4, lr}
 8008c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	d1f9      	bne.n	8008c96 <memcpy+0xe>
 8008ca2:	bd10      	pop	{r4, pc}

08008ca4 <memset>:
 8008ca4:	4402      	add	r2, r0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d100      	bne.n	8008cae <memset+0xa>
 8008cac:	4770      	bx	lr
 8008cae:	f803 1b01 	strb.w	r1, [r3], #1
 8008cb2:	e7f9      	b.n	8008ca8 <memset+0x4>

08008cb4 <validate_structure>:
 8008cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cb6:	6801      	ldr	r1, [r0, #0]
 8008cb8:	293b      	cmp	r1, #59	; 0x3b
 8008cba:	4604      	mov	r4, r0
 8008cbc:	d911      	bls.n	8008ce2 <validate_structure+0x2e>
 8008cbe:	223c      	movs	r2, #60	; 0x3c
 8008cc0:	4668      	mov	r0, sp
 8008cc2:	f000 ffa3 	bl	8009c0c <div>
 8008cc6:	9a01      	ldr	r2, [sp, #4]
 8008cc8:	6863      	ldr	r3, [r4, #4]
 8008cca:	9900      	ldr	r1, [sp, #0]
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	440b      	add	r3, r1
 8008cd0:	6063      	str	r3, [r4, #4]
 8008cd2:	bfbb      	ittet	lt
 8008cd4:	323c      	addlt	r2, #60	; 0x3c
 8008cd6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008cda:	6022      	strge	r2, [r4, #0]
 8008cdc:	6022      	strlt	r2, [r4, #0]
 8008cde:	bfb8      	it	lt
 8008ce0:	6063      	strlt	r3, [r4, #4]
 8008ce2:	6861      	ldr	r1, [r4, #4]
 8008ce4:	293b      	cmp	r1, #59	; 0x3b
 8008ce6:	d911      	bls.n	8008d0c <validate_structure+0x58>
 8008ce8:	223c      	movs	r2, #60	; 0x3c
 8008cea:	4668      	mov	r0, sp
 8008cec:	f000 ff8e 	bl	8009c0c <div>
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	68a3      	ldr	r3, [r4, #8]
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	2a00      	cmp	r2, #0
 8008cf8:	440b      	add	r3, r1
 8008cfa:	60a3      	str	r3, [r4, #8]
 8008cfc:	bfbb      	ittet	lt
 8008cfe:	323c      	addlt	r2, #60	; 0x3c
 8008d00:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008d04:	6062      	strge	r2, [r4, #4]
 8008d06:	6062      	strlt	r2, [r4, #4]
 8008d08:	bfb8      	it	lt
 8008d0a:	60a3      	strlt	r3, [r4, #8]
 8008d0c:	68a1      	ldr	r1, [r4, #8]
 8008d0e:	2917      	cmp	r1, #23
 8008d10:	d911      	bls.n	8008d36 <validate_structure+0x82>
 8008d12:	2218      	movs	r2, #24
 8008d14:	4668      	mov	r0, sp
 8008d16:	f000 ff79 	bl	8009c0c <div>
 8008d1a:	9a01      	ldr	r2, [sp, #4]
 8008d1c:	68e3      	ldr	r3, [r4, #12]
 8008d1e:	9900      	ldr	r1, [sp, #0]
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	440b      	add	r3, r1
 8008d24:	60e3      	str	r3, [r4, #12]
 8008d26:	bfbb      	ittet	lt
 8008d28:	3218      	addlt	r2, #24
 8008d2a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008d2e:	60a2      	strge	r2, [r4, #8]
 8008d30:	60a2      	strlt	r2, [r4, #8]
 8008d32:	bfb8      	it	lt
 8008d34:	60e3      	strlt	r3, [r4, #12]
 8008d36:	6921      	ldr	r1, [r4, #16]
 8008d38:	290b      	cmp	r1, #11
 8008d3a:	d911      	bls.n	8008d60 <validate_structure+0xac>
 8008d3c:	220c      	movs	r2, #12
 8008d3e:	4668      	mov	r0, sp
 8008d40:	f000 ff64 	bl	8009c0c <div>
 8008d44:	9a01      	ldr	r2, [sp, #4]
 8008d46:	6963      	ldr	r3, [r4, #20]
 8008d48:	9900      	ldr	r1, [sp, #0]
 8008d4a:	2a00      	cmp	r2, #0
 8008d4c:	440b      	add	r3, r1
 8008d4e:	6163      	str	r3, [r4, #20]
 8008d50:	bfbb      	ittet	lt
 8008d52:	320c      	addlt	r2, #12
 8008d54:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008d58:	6122      	strge	r2, [r4, #16]
 8008d5a:	6122      	strlt	r2, [r4, #16]
 8008d5c:	bfb8      	it	lt
 8008d5e:	6163      	strlt	r3, [r4, #20]
 8008d60:	6963      	ldr	r3, [r4, #20]
 8008d62:	0798      	lsls	r0, r3, #30
 8008d64:	d120      	bne.n	8008da8 <validate_structure+0xf4>
 8008d66:	2164      	movs	r1, #100	; 0x64
 8008d68:	fb93 f2f1 	sdiv	r2, r3, r1
 8008d6c:	fb01 3212 	mls	r2, r1, r2, r3
 8008d70:	b9e2      	cbnz	r2, 8008dac <validate_structure+0xf8>
 8008d72:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008d76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008d7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8008d7e:	fb02 3311 	mls	r3, r2, r1, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bf14      	ite	ne
 8008d86:	231c      	movne	r3, #28
 8008d88:	231d      	moveq	r3, #29
 8008d8a:	68e2      	ldr	r2, [r4, #12]
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	dc0f      	bgt.n	8008db0 <validate_structure+0xfc>
 8008d90:	4f33      	ldr	r7, [pc, #204]	; (8008e60 <validate_structure+0x1ac>)
 8008d92:	260b      	movs	r6, #11
 8008d94:	2064      	movs	r0, #100	; 0x64
 8008d96:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008d9a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008d9e:	f1bc 0f00 	cmp.w	ip, #0
 8008da2:	dd31      	ble.n	8008e08 <validate_structure+0x154>
 8008da4:	b003      	add	sp, #12
 8008da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da8:	231c      	movs	r3, #28
 8008daa:	e7ee      	b.n	8008d8a <validate_structure+0xd6>
 8008dac:	231d      	movs	r3, #29
 8008dae:	e7ec      	b.n	8008d8a <validate_structure+0xd6>
 8008db0:	4e2b      	ldr	r6, [pc, #172]	; (8008e60 <validate_structure+0x1ac>)
 8008db2:	2700      	movs	r7, #0
 8008db4:	2064      	movs	r0, #100	; 0x64
 8008db6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008dba:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008dbe:	2a01      	cmp	r2, #1
 8008dc0:	bf14      	ite	ne
 8008dc2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8008dc6:	469c      	moveq	ip, r3
 8008dc8:	4561      	cmp	r1, ip
 8008dca:	ddeb      	ble.n	8008da4 <validate_structure+0xf0>
 8008dcc:	3201      	adds	r2, #1
 8008dce:	eba1 010c 	sub.w	r1, r1, ip
 8008dd2:	2a0c      	cmp	r2, #12
 8008dd4:	60e1      	str	r1, [r4, #12]
 8008dd6:	6122      	str	r2, [r4, #16]
 8008dd8:	d1ef      	bne.n	8008dba <validate_structure+0x106>
 8008dda:	6963      	ldr	r3, [r4, #20]
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	0791      	lsls	r1, r2, #30
 8008de0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8008de4:	d137      	bne.n	8008e56 <validate_structure+0x1a2>
 8008de6:	fb92 f1f0 	sdiv	r1, r2, r0
 8008dea:	fb00 2211 	mls	r2, r0, r1, r2
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	d133      	bne.n	8008e5a <validate_structure+0x1a6>
 8008df2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8008df6:	fb93 f2f5 	sdiv	r2, r3, r5
 8008dfa:	fb05 3312 	mls	r3, r5, r2, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bf14      	ite	ne
 8008e02:	231c      	movne	r3, #28
 8008e04:	231d      	moveq	r3, #29
 8008e06:	e7d8      	b.n	8008dba <validate_structure+0x106>
 8008e08:	6921      	ldr	r1, [r4, #16]
 8008e0a:	3901      	subs	r1, #1
 8008e0c:	6121      	str	r1, [r4, #16]
 8008e0e:	3101      	adds	r1, #1
 8008e10:	d114      	bne.n	8008e3c <validate_structure+0x188>
 8008e12:	6963      	ldr	r3, [r4, #20]
 8008e14:	1e5a      	subs	r2, r3, #1
 8008e16:	0791      	lsls	r1, r2, #30
 8008e18:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8008e1c:	d117      	bne.n	8008e4e <validate_structure+0x19a>
 8008e1e:	fb92 f1f0 	sdiv	r1, r2, r0
 8008e22:	fb00 2211 	mls	r2, r0, r1, r2
 8008e26:	b9a2      	cbnz	r2, 8008e52 <validate_structure+0x19e>
 8008e28:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008e2c:	fb93 f2f5 	sdiv	r2, r3, r5
 8008e30:	fb05 3312 	mls	r3, r5, r2, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bf14      	ite	ne
 8008e38:	231c      	movne	r3, #28
 8008e3a:	231d      	moveq	r3, #29
 8008e3c:	6922      	ldr	r2, [r4, #16]
 8008e3e:	2a01      	cmp	r2, #1
 8008e40:	bf14      	ite	ne
 8008e42:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8008e46:	461a      	moveq	r2, r3
 8008e48:	4462      	add	r2, ip
 8008e4a:	60e2      	str	r2, [r4, #12]
 8008e4c:	e7a5      	b.n	8008d9a <validate_structure+0xe6>
 8008e4e:	231c      	movs	r3, #28
 8008e50:	e7f4      	b.n	8008e3c <validate_structure+0x188>
 8008e52:	231d      	movs	r3, #29
 8008e54:	e7f2      	b.n	8008e3c <validate_structure+0x188>
 8008e56:	231c      	movs	r3, #28
 8008e58:	e7af      	b.n	8008dba <validate_structure+0x106>
 8008e5a:	231d      	movs	r3, #29
 8008e5c:	e7ad      	b.n	8008dba <validate_structure+0x106>
 8008e5e:	bf00      	nop
 8008e60:	0800c034 	.word	0x0800c034

08008e64 <mktime>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	4607      	mov	r7, r0
 8008e6c:	f001 f8f0 	bl	800a050 <__gettzinfo>
 8008e70:	4681      	mov	r9, r0
 8008e72:	4638      	mov	r0, r7
 8008e74:	f7ff ff1e 	bl	8008cb4 <validate_structure>
 8008e78:	e9d7 4000 	ldrd	r4, r0, [r7]
 8008e7c:	233c      	movs	r3, #60	; 0x3c
 8008e7e:	fb03 4400 	mla	r4, r3, r0, r4
 8008e82:	68b8      	ldr	r0, [r7, #8]
 8008e84:	4abc      	ldr	r2, [pc, #752]	; (8009178 <mktime+0x314>)
 8008e86:	697e      	ldr	r6, [r7, #20]
 8008e88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008e8c:	fb03 4400 	mla	r4, r3, r0, r4
 8008e90:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8008e94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e98:	3d01      	subs	r5, #1
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	4415      	add	r5, r2
 8008e9e:	dd11      	ble.n	8008ec4 <mktime+0x60>
 8008ea0:	07b1      	lsls	r1, r6, #30
 8008ea2:	d10f      	bne.n	8008ec4 <mktime+0x60>
 8008ea4:	2264      	movs	r2, #100	; 0x64
 8008ea6:	fb96 f3f2 	sdiv	r3, r6, r2
 8008eaa:	fb02 6313 	mls	r3, r2, r3, r6
 8008eae:	b943      	cbnz	r3, 8008ec2 <mktime+0x5e>
 8008eb0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008eb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008eb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8008ebc:	fb02 3311 	mls	r3, r2, r1, r3
 8008ec0:	b903      	cbnz	r3, 8008ec4 <mktime+0x60>
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8008ec8:	3310      	adds	r3, #16
 8008eca:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	61fd      	str	r5, [r7, #28]
 8008ed2:	f200 815d 	bhi.w	8009190 <mktime+0x32c>
 8008ed6:	2e46      	cmp	r6, #70	; 0x46
 8008ed8:	dd71      	ble.n	8008fbe <mktime+0x15a>
 8008eda:	2346      	movs	r3, #70	; 0x46
 8008edc:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008ee0:	2164      	movs	r1, #100	; 0x64
 8008ee2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008ee6:	079a      	lsls	r2, r3, #30
 8008ee8:	d163      	bne.n	8008fb2 <mktime+0x14e>
 8008eea:	fb93 f2f1 	sdiv	r2, r3, r1
 8008eee:	fb01 3212 	mls	r2, r1, r2, r3
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	d160      	bne.n	8008fb8 <mktime+0x154>
 8008ef6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008efa:	fb92 fef0 	sdiv	lr, r2, r0
 8008efe:	fb00 221e 	mls	r2, r0, lr, r2
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	bf14      	ite	ne
 8008f06:	4662      	movne	r2, ip
 8008f08:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	429e      	cmp	r6, r3
 8008f10:	4415      	add	r5, r2
 8008f12:	d1e8      	bne.n	8008ee6 <mktime+0x82>
 8008f14:	4b99      	ldr	r3, [pc, #612]	; (800917c <mktime+0x318>)
 8008f16:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008f1a:	fbc5 4803 	smlal	r4, r8, r5, r3
 8008f1e:	f000 fc05 	bl	800972c <__tz_lock>
 8008f22:	f000 fc0f 	bl	8009744 <_tzset_unlocked>
 8008f26:	4b96      	ldr	r3, [pc, #600]	; (8009180 <mktime+0x31c>)
 8008f28:	f8d3 b000 	ldr.w	fp, [r3]
 8008f2c:	f1bb 0f00 	cmp.w	fp, #0
 8008f30:	d039      	beq.n	8008fa6 <mktime+0x142>
 8008f32:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8008f36:	6978      	ldr	r0, [r7, #20]
 8008f38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008f3c:	f1bb 0f01 	cmp.w	fp, #1
 8008f40:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008f44:	46da      	mov	sl, fp
 8008f46:	bfa8      	it	ge
 8008f48:	f04f 0a01 	movge.w	sl, #1
 8008f4c:	4283      	cmp	r3, r0
 8008f4e:	d178      	bne.n	8009042 <mktime+0x1de>
 8008f50:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8008f54:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8008f58:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8008f5c:	1a5b      	subs	r3, r3, r1
 8008f5e:	9302      	str	r3, [sp, #8]
 8008f60:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8008f6a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	ebb3 0c02 	subs.w	ip, r3, r2
 8008f74:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8008f78:	4564      	cmp	r4, ip
 8008f7a:	eb78 0300 	sbcs.w	r3, r8, r0
 8008f7e:	da66      	bge.n	800904e <mktime+0x1ea>
 8008f80:	f8d9 3000 	ldr.w	r3, [r9]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d06f      	beq.n	8009068 <mktime+0x204>
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	eb78 0303 	sbcs.w	r3, r8, r3
 8008f92:	db03      	blt.n	8008f9c <mktime+0x138>
 8008f94:	4564      	cmp	r4, ip
 8008f96:	eb78 0300 	sbcs.w	r3, r8, r0
 8008f9a:	db6b      	blt.n	8009074 <mktime+0x210>
 8008f9c:	f1bb 0f00 	cmp.w	fp, #0
 8008fa0:	f04f 0b00 	mov.w	fp, #0
 8008fa4:	da6b      	bge.n	800907e <mktime+0x21a>
 8008fa6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8008faa:	190c      	adds	r4, r1, r4
 8008fac:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8008fb0:	e0a9      	b.n	8009106 <mktime+0x2a2>
 8008fb2:	f240 126d 	movw	r2, #365	; 0x16d
 8008fb6:	e7a9      	b.n	8008f0c <mktime+0xa8>
 8008fb8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008fbc:	e7a6      	b.n	8008f0c <mktime+0xa8>
 8008fbe:	d0a9      	beq.n	8008f14 <mktime+0xb0>
 8008fc0:	2345      	movs	r3, #69	; 0x45
 8008fc2:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008fc6:	2164      	movs	r1, #100	; 0x64
 8008fc8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008fcc:	e012      	b.n	8008ff4 <mktime+0x190>
 8008fce:	bb62      	cbnz	r2, 800902a <mktime+0x1c6>
 8008fd0:	fb93 f2f1 	sdiv	r2, r3, r1
 8008fd4:	fb01 3212 	mls	r2, r1, r2, r3
 8008fd8:	bb52      	cbnz	r2, 8009030 <mktime+0x1cc>
 8008fda:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008fde:	fb92 fef0 	sdiv	lr, r2, r0
 8008fe2:	fb00 221e 	mls	r2, r0, lr, r2
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	bf14      	ite	ne
 8008fea:	4662      	movne	r2, ip
 8008fec:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008ff0:	1aad      	subs	r5, r5, r2
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	429e      	cmp	r6, r3
 8008ff6:	f003 0203 	and.w	r2, r3, #3
 8008ffa:	dbe8      	blt.n	8008fce <mktime+0x16a>
 8008ffc:	b9da      	cbnz	r2, 8009036 <mktime+0x1d2>
 8008ffe:	2264      	movs	r2, #100	; 0x64
 8009000:	fb96 f3f2 	sdiv	r3, r6, r2
 8009004:	fb02 6313 	mls	r3, r2, r3, r6
 8009008:	b9c3      	cbnz	r3, 800903c <mktime+0x1d8>
 800900a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800900e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009012:	fb93 f1f2 	sdiv	r1, r3, r2
 8009016:	fb02 3311 	mls	r3, r2, r1, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	f240 136d 	movw	r3, #365	; 0x16d
 8009020:	bf08      	it	eq
 8009022:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009026:	1aed      	subs	r5, r5, r3
 8009028:	e774      	b.n	8008f14 <mktime+0xb0>
 800902a:	f240 126d 	movw	r2, #365	; 0x16d
 800902e:	e7df      	b.n	8008ff0 <mktime+0x18c>
 8009030:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009034:	e7dc      	b.n	8008ff0 <mktime+0x18c>
 8009036:	f240 136d 	movw	r3, #365	; 0x16d
 800903a:	e7f4      	b.n	8009026 <mktime+0x1c2>
 800903c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009040:	e7f1      	b.n	8009026 <mktime+0x1c2>
 8009042:	f000 fac9 	bl	80095d8 <__tzcalc_limits>
 8009046:	2800      	cmp	r0, #0
 8009048:	d182      	bne.n	8008f50 <mktime+0xec>
 800904a:	46d3      	mov	fp, sl
 800904c:	e050      	b.n	80090f0 <mktime+0x28c>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	1a5b      	subs	r3, r3, r1
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8009058:	eb6e 0e03 	sbc.w	lr, lr, r3
 800905c:	9b01      	ldr	r3, [sp, #4]
 800905e:	429c      	cmp	r4, r3
 8009060:	eb78 030e 	sbcs.w	r3, r8, lr
 8009064:	dbf1      	blt.n	800904a <mktime+0x1e6>
 8009066:	e78b      	b.n	8008f80 <mktime+0x11c>
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	429c      	cmp	r4, r3
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	eb78 0303 	sbcs.w	r3, r8, r3
 8009072:	db8f      	blt.n	8008f94 <mktime+0x130>
 8009074:	f1bb 0f00 	cmp.w	fp, #0
 8009078:	db3e      	blt.n	80090f8 <mktime+0x294>
 800907a:	f04f 0b01 	mov.w	fp, #1
 800907e:	ea8a 0a0b 	eor.w	sl, sl, fp
 8009082:	f1ba 0f01 	cmp.w	sl, #1
 8009086:	d133      	bne.n	80090f0 <mktime+0x28c>
 8009088:	f1bb 0f00 	cmp.w	fp, #0
 800908c:	d04e      	beq.n	800912c <mktime+0x2c8>
 800908e:	1a52      	subs	r2, r2, r1
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	1914      	adds	r4, r2, r4
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	4638      	mov	r0, r7
 800909e:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80090a2:	f7ff fe07 	bl	8008cb4 <validate_structure>
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	ebb2 020a 	subs.w	r2, r2, sl
 80090ac:	d020      	beq.n	80090f0 <mktime+0x28c>
 80090ae:	2a01      	cmp	r2, #1
 80090b0:	dc3e      	bgt.n	8009130 <mktime+0x2cc>
 80090b2:	1c90      	adds	r0, r2, #2
 80090b4:	bfd8      	it	le
 80090b6:	2201      	movle	r2, #1
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	18d3      	adds	r3, r2, r3
 80090bc:	4415      	add	r5, r2
 80090be:	d540      	bpl.n	8009142 <mktime+0x2de>
 80090c0:	1e73      	subs	r3, r6, #1
 80090c2:	0799      	lsls	r1, r3, #30
 80090c4:	d137      	bne.n	8009136 <mktime+0x2d2>
 80090c6:	2264      	movs	r2, #100	; 0x64
 80090c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80090cc:	fb02 3311 	mls	r3, r2, r1, r3
 80090d0:	bba3      	cbnz	r3, 800913c <mktime+0x2d8>
 80090d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80090d6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80090da:	fb96 f2f3 	sdiv	r2, r6, r3
 80090de:	fb03 6612 	mls	r6, r3, r2, r6
 80090e2:	2e00      	cmp	r6, #0
 80090e4:	f240 136d 	movw	r3, #365	; 0x16d
 80090e8:	bf18      	it	ne
 80090ea:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	f1bb 0f01 	cmp.w	fp, #1
 80090f4:	f47f af57 	bne.w	8008fa6 <mktime+0x142>
 80090f8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80090fc:	190c      	adds	r4, r1, r4
 80090fe:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009102:	f04f 0b01 	mov.w	fp, #1
 8009106:	f000 fb17 	bl	8009738 <__tz_unlock>
 800910a:	3504      	adds	r5, #4
 800910c:	2307      	movs	r3, #7
 800910e:	fb95 f3f3 	sdiv	r3, r5, r3
 8009112:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009116:	1aed      	subs	r5, r5, r3
 8009118:	bf48      	it	mi
 800911a:	3507      	addmi	r5, #7
 800911c:	f8c7 b020 	str.w	fp, [r7, #32]
 8009120:	61bd      	str	r5, [r7, #24]
 8009122:	4620      	mov	r0, r4
 8009124:	4641      	mov	r1, r8
 8009126:	b005      	add	sp, #20
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912c:	1a8a      	subs	r2, r1, r2
 800912e:	e7af      	b.n	8009090 <mktime+0x22c>
 8009130:	f04f 32ff 	mov.w	r2, #4294967295
 8009134:	e7c0      	b.n	80090b8 <mktime+0x254>
 8009136:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800913a:	e7d8      	b.n	80090ee <mktime+0x28a>
 800913c:	f240 136d 	movw	r3, #365	; 0x16d
 8009140:	e7d5      	b.n	80090ee <mktime+0x28a>
 8009142:	07b2      	lsls	r2, r6, #30
 8009144:	d11e      	bne.n	8009184 <mktime+0x320>
 8009146:	2164      	movs	r1, #100	; 0x64
 8009148:	fb96 f2f1 	sdiv	r2, r6, r1
 800914c:	fb01 6212 	mls	r2, r1, r2, r6
 8009150:	b9da      	cbnz	r2, 800918a <mktime+0x326>
 8009152:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009156:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800915a:	fb96 f1f2 	sdiv	r1, r6, r2
 800915e:	fb02 6611 	mls	r6, r2, r1, r6
 8009162:	2e00      	cmp	r6, #0
 8009164:	f240 126d 	movw	r2, #365	; 0x16d
 8009168:	bf08      	it	eq
 800916a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800916e:	4293      	cmp	r3, r2
 8009170:	bfa8      	it	ge
 8009172:	1a9b      	subge	r3, r3, r2
 8009174:	e7bb      	b.n	80090ee <mktime+0x28a>
 8009176:	bf00      	nop
 8009178:	0800c064 	.word	0x0800c064
 800917c:	00015180 	.word	0x00015180
 8009180:	20001014 	.word	0x20001014
 8009184:	f240 126d 	movw	r2, #365	; 0x16d
 8009188:	e7f1      	b.n	800916e <mktime+0x30a>
 800918a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800918e:	e7ee      	b.n	800916e <mktime+0x30a>
 8009190:	f04f 34ff 	mov.w	r4, #4294967295
 8009194:	46a0      	mov	r8, r4
 8009196:	e7c4      	b.n	8009122 <mktime+0x2be>

08009198 <_free_r>:
 8009198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919a:	2900      	cmp	r1, #0
 800919c:	d044      	beq.n	8009228 <_free_r+0x90>
 800919e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a2:	9001      	str	r0, [sp, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f1a1 0404 	sub.w	r4, r1, #4
 80091aa:	bfb8      	it	lt
 80091ac:	18e4      	addlt	r4, r4, r3
 80091ae:	f001 f869 	bl	800a284 <__malloc_lock>
 80091b2:	4a1e      	ldr	r2, [pc, #120]	; (800922c <_free_r+0x94>)
 80091b4:	9801      	ldr	r0, [sp, #4]
 80091b6:	6813      	ldr	r3, [r2, #0]
 80091b8:	b933      	cbnz	r3, 80091c8 <_free_r+0x30>
 80091ba:	6063      	str	r3, [r4, #4]
 80091bc:	6014      	str	r4, [r2, #0]
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c4:	f001 b864 	b.w	800a290 <__malloc_unlock>
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	d908      	bls.n	80091de <_free_r+0x46>
 80091cc:	6825      	ldr	r5, [r4, #0]
 80091ce:	1961      	adds	r1, r4, r5
 80091d0:	428b      	cmp	r3, r1
 80091d2:	bf01      	itttt	eq
 80091d4:	6819      	ldreq	r1, [r3, #0]
 80091d6:	685b      	ldreq	r3, [r3, #4]
 80091d8:	1949      	addeq	r1, r1, r5
 80091da:	6021      	streq	r1, [r4, #0]
 80091dc:	e7ed      	b.n	80091ba <_free_r+0x22>
 80091de:	461a      	mov	r2, r3
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	b10b      	cbz	r3, 80091e8 <_free_r+0x50>
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d9fa      	bls.n	80091de <_free_r+0x46>
 80091e8:	6811      	ldr	r1, [r2, #0]
 80091ea:	1855      	adds	r5, r2, r1
 80091ec:	42a5      	cmp	r5, r4
 80091ee:	d10b      	bne.n	8009208 <_free_r+0x70>
 80091f0:	6824      	ldr	r4, [r4, #0]
 80091f2:	4421      	add	r1, r4
 80091f4:	1854      	adds	r4, r2, r1
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	6011      	str	r1, [r2, #0]
 80091fa:	d1e0      	bne.n	80091be <_free_r+0x26>
 80091fc:	681c      	ldr	r4, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	6053      	str	r3, [r2, #4]
 8009202:	4421      	add	r1, r4
 8009204:	6011      	str	r1, [r2, #0]
 8009206:	e7da      	b.n	80091be <_free_r+0x26>
 8009208:	d902      	bls.n	8009210 <_free_r+0x78>
 800920a:	230c      	movs	r3, #12
 800920c:	6003      	str	r3, [r0, #0]
 800920e:	e7d6      	b.n	80091be <_free_r+0x26>
 8009210:	6825      	ldr	r5, [r4, #0]
 8009212:	1961      	adds	r1, r4, r5
 8009214:	428b      	cmp	r3, r1
 8009216:	bf04      	itt	eq
 8009218:	6819      	ldreq	r1, [r3, #0]
 800921a:	685b      	ldreq	r3, [r3, #4]
 800921c:	6063      	str	r3, [r4, #4]
 800921e:	bf04      	itt	eq
 8009220:	1949      	addeq	r1, r1, r5
 8009222:	6021      	streq	r1, [r4, #0]
 8009224:	6054      	str	r4, [r2, #4]
 8009226:	e7ca      	b.n	80091be <_free_r+0x26>
 8009228:	b003      	add	sp, #12
 800922a:	bd30      	pop	{r4, r5, pc}
 800922c:	20000ff0 	.word	0x20000ff0

08009230 <sbrk_aligned>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	4e0e      	ldr	r6, [pc, #56]	; (800926c <sbrk_aligned+0x3c>)
 8009234:	460c      	mov	r4, r1
 8009236:	6831      	ldr	r1, [r6, #0]
 8009238:	4605      	mov	r5, r0
 800923a:	b911      	cbnz	r1, 8009242 <sbrk_aligned+0x12>
 800923c:	f000 f902 	bl	8009444 <_sbrk_r>
 8009240:	6030      	str	r0, [r6, #0]
 8009242:	4621      	mov	r1, r4
 8009244:	4628      	mov	r0, r5
 8009246:	f000 f8fd 	bl	8009444 <_sbrk_r>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d00a      	beq.n	8009264 <sbrk_aligned+0x34>
 800924e:	1cc4      	adds	r4, r0, #3
 8009250:	f024 0403 	bic.w	r4, r4, #3
 8009254:	42a0      	cmp	r0, r4
 8009256:	d007      	beq.n	8009268 <sbrk_aligned+0x38>
 8009258:	1a21      	subs	r1, r4, r0
 800925a:	4628      	mov	r0, r5
 800925c:	f000 f8f2 	bl	8009444 <_sbrk_r>
 8009260:	3001      	adds	r0, #1
 8009262:	d101      	bne.n	8009268 <sbrk_aligned+0x38>
 8009264:	f04f 34ff 	mov.w	r4, #4294967295
 8009268:	4620      	mov	r0, r4
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	20000ff4 	.word	0x20000ff4

08009270 <_malloc_r>:
 8009270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009274:	1ccd      	adds	r5, r1, #3
 8009276:	f025 0503 	bic.w	r5, r5, #3
 800927a:	3508      	adds	r5, #8
 800927c:	2d0c      	cmp	r5, #12
 800927e:	bf38      	it	cc
 8009280:	250c      	movcc	r5, #12
 8009282:	2d00      	cmp	r5, #0
 8009284:	4607      	mov	r7, r0
 8009286:	db01      	blt.n	800928c <_malloc_r+0x1c>
 8009288:	42a9      	cmp	r1, r5
 800928a:	d905      	bls.n	8009298 <_malloc_r+0x28>
 800928c:	230c      	movs	r3, #12
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	2600      	movs	r6, #0
 8009292:	4630      	mov	r0, r6
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	4e2e      	ldr	r6, [pc, #184]	; (8009354 <_malloc_r+0xe4>)
 800929a:	f000 fff3 	bl	800a284 <__malloc_lock>
 800929e:	6833      	ldr	r3, [r6, #0]
 80092a0:	461c      	mov	r4, r3
 80092a2:	bb34      	cbnz	r4, 80092f2 <_malloc_r+0x82>
 80092a4:	4629      	mov	r1, r5
 80092a6:	4638      	mov	r0, r7
 80092a8:	f7ff ffc2 	bl	8009230 <sbrk_aligned>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	4604      	mov	r4, r0
 80092b0:	d14d      	bne.n	800934e <_malloc_r+0xde>
 80092b2:	6834      	ldr	r4, [r6, #0]
 80092b4:	4626      	mov	r6, r4
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d140      	bne.n	800933c <_malloc_r+0xcc>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	4631      	mov	r1, r6
 80092be:	4638      	mov	r0, r7
 80092c0:	eb04 0803 	add.w	r8, r4, r3
 80092c4:	f000 f8be 	bl	8009444 <_sbrk_r>
 80092c8:	4580      	cmp	r8, r0
 80092ca:	d13a      	bne.n	8009342 <_malloc_r+0xd2>
 80092cc:	6821      	ldr	r1, [r4, #0]
 80092ce:	3503      	adds	r5, #3
 80092d0:	1a6d      	subs	r5, r5, r1
 80092d2:	f025 0503 	bic.w	r5, r5, #3
 80092d6:	3508      	adds	r5, #8
 80092d8:	2d0c      	cmp	r5, #12
 80092da:	bf38      	it	cc
 80092dc:	250c      	movcc	r5, #12
 80092de:	4629      	mov	r1, r5
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff ffa5 	bl	8009230 <sbrk_aligned>
 80092e6:	3001      	adds	r0, #1
 80092e8:	d02b      	beq.n	8009342 <_malloc_r+0xd2>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	442b      	add	r3, r5
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	e00e      	b.n	8009310 <_malloc_r+0xa0>
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	1b52      	subs	r2, r2, r5
 80092f6:	d41e      	bmi.n	8009336 <_malloc_r+0xc6>
 80092f8:	2a0b      	cmp	r2, #11
 80092fa:	d916      	bls.n	800932a <_malloc_r+0xba>
 80092fc:	1961      	adds	r1, r4, r5
 80092fe:	42a3      	cmp	r3, r4
 8009300:	6025      	str	r5, [r4, #0]
 8009302:	bf18      	it	ne
 8009304:	6059      	strne	r1, [r3, #4]
 8009306:	6863      	ldr	r3, [r4, #4]
 8009308:	bf08      	it	eq
 800930a:	6031      	streq	r1, [r6, #0]
 800930c:	5162      	str	r2, [r4, r5]
 800930e:	604b      	str	r3, [r1, #4]
 8009310:	4638      	mov	r0, r7
 8009312:	f104 060b 	add.w	r6, r4, #11
 8009316:	f000 ffbb 	bl	800a290 <__malloc_unlock>
 800931a:	f026 0607 	bic.w	r6, r6, #7
 800931e:	1d23      	adds	r3, r4, #4
 8009320:	1af2      	subs	r2, r6, r3
 8009322:	d0b6      	beq.n	8009292 <_malloc_r+0x22>
 8009324:	1b9b      	subs	r3, r3, r6
 8009326:	50a3      	str	r3, [r4, r2]
 8009328:	e7b3      	b.n	8009292 <_malloc_r+0x22>
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	42a3      	cmp	r3, r4
 800932e:	bf0c      	ite	eq
 8009330:	6032      	streq	r2, [r6, #0]
 8009332:	605a      	strne	r2, [r3, #4]
 8009334:	e7ec      	b.n	8009310 <_malloc_r+0xa0>
 8009336:	4623      	mov	r3, r4
 8009338:	6864      	ldr	r4, [r4, #4]
 800933a:	e7b2      	b.n	80092a2 <_malloc_r+0x32>
 800933c:	4634      	mov	r4, r6
 800933e:	6876      	ldr	r6, [r6, #4]
 8009340:	e7b9      	b.n	80092b6 <_malloc_r+0x46>
 8009342:	230c      	movs	r3, #12
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	4638      	mov	r0, r7
 8009348:	f000 ffa2 	bl	800a290 <__malloc_unlock>
 800934c:	e7a1      	b.n	8009292 <_malloc_r+0x22>
 800934e:	6025      	str	r5, [r4, #0]
 8009350:	e7de      	b.n	8009310 <_malloc_r+0xa0>
 8009352:	bf00      	nop
 8009354:	20000ff0 	.word	0x20000ff0

08009358 <_puts_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	460e      	mov	r6, r1
 800935c:	4605      	mov	r5, r0
 800935e:	b118      	cbz	r0, 8009368 <_puts_r+0x10>
 8009360:	6983      	ldr	r3, [r0, #24]
 8009362:	b90b      	cbnz	r3, 8009368 <_puts_r+0x10>
 8009364:	f000 fd80 	bl	8009e68 <__sinit>
 8009368:	69ab      	ldr	r3, [r5, #24]
 800936a:	68ac      	ldr	r4, [r5, #8]
 800936c:	b913      	cbnz	r3, 8009374 <_puts_r+0x1c>
 800936e:	4628      	mov	r0, r5
 8009370:	f000 fd7a 	bl	8009e68 <__sinit>
 8009374:	4b2c      	ldr	r3, [pc, #176]	; (8009428 <_puts_r+0xd0>)
 8009376:	429c      	cmp	r4, r3
 8009378:	d120      	bne.n	80093bc <_puts_r+0x64>
 800937a:	686c      	ldr	r4, [r5, #4]
 800937c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800937e:	07db      	lsls	r3, r3, #31
 8009380:	d405      	bmi.n	800938e <_puts_r+0x36>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	0598      	lsls	r0, r3, #22
 8009386:	d402      	bmi.n	800938e <_puts_r+0x36>
 8009388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800938a:	f000 ff13 	bl	800a1b4 <__retarget_lock_acquire_recursive>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	0719      	lsls	r1, r3, #28
 8009392:	d51d      	bpl.n	80093d0 <_puts_r+0x78>
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	b1db      	cbz	r3, 80093d0 <_puts_r+0x78>
 8009398:	3e01      	subs	r6, #1
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093a0:	3b01      	subs	r3, #1
 80093a2:	60a3      	str	r3, [r4, #8]
 80093a4:	bb39      	cbnz	r1, 80093f6 <_puts_r+0x9e>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da38      	bge.n	800941c <_puts_r+0xc4>
 80093aa:	4622      	mov	r2, r4
 80093ac:	210a      	movs	r1, #10
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 fb4e 	bl	8009a50 <__swbuf_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d011      	beq.n	80093dc <_puts_r+0x84>
 80093b8:	250a      	movs	r5, #10
 80093ba:	e011      	b.n	80093e0 <_puts_r+0x88>
 80093bc:	4b1b      	ldr	r3, [pc, #108]	; (800942c <_puts_r+0xd4>)
 80093be:	429c      	cmp	r4, r3
 80093c0:	d101      	bne.n	80093c6 <_puts_r+0x6e>
 80093c2:	68ac      	ldr	r4, [r5, #8]
 80093c4:	e7da      	b.n	800937c <_puts_r+0x24>
 80093c6:	4b1a      	ldr	r3, [pc, #104]	; (8009430 <_puts_r+0xd8>)
 80093c8:	429c      	cmp	r4, r3
 80093ca:	bf08      	it	eq
 80093cc:	68ec      	ldreq	r4, [r5, #12]
 80093ce:	e7d5      	b.n	800937c <_puts_r+0x24>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 fb8e 	bl	8009af4 <__swsetup_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d0dd      	beq.n	8009398 <_puts_r+0x40>
 80093dc:	f04f 35ff 	mov.w	r5, #4294967295
 80093e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093e2:	07da      	lsls	r2, r3, #31
 80093e4:	d405      	bmi.n	80093f2 <_puts_r+0x9a>
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	059b      	lsls	r3, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <_puts_r+0x9a>
 80093ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ee:	f000 fee3 	bl	800a1b8 <__retarget_lock_release_recursive>
 80093f2:	4628      	mov	r0, r5
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	da04      	bge.n	8009404 <_puts_r+0xac>
 80093fa:	69a2      	ldr	r2, [r4, #24]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	dc06      	bgt.n	800940e <_puts_r+0xb6>
 8009400:	290a      	cmp	r1, #10
 8009402:	d004      	beq.n	800940e <_puts_r+0xb6>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	7019      	strb	r1, [r3, #0]
 800940c:	e7c5      	b.n	800939a <_puts_r+0x42>
 800940e:	4622      	mov	r2, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f000 fb1d 	bl	8009a50 <__swbuf_r>
 8009416:	3001      	adds	r0, #1
 8009418:	d1bf      	bne.n	800939a <_puts_r+0x42>
 800941a:	e7df      	b.n	80093dc <_puts_r+0x84>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	250a      	movs	r5, #10
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	6022      	str	r2, [r4, #0]
 8009424:	701d      	strb	r5, [r3, #0]
 8009426:	e7db      	b.n	80093e0 <_puts_r+0x88>
 8009428:	0800c1ec 	.word	0x0800c1ec
 800942c:	0800c20c 	.word	0x0800c20c
 8009430:	0800c1cc 	.word	0x0800c1cc

08009434 <puts>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <puts+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f7ff bf8d 	b.w	8009358 <_puts_r>
 800943e:	bf00      	nop
 8009440:	2000005c 	.word	0x2000005c

08009444 <_sbrk_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d06      	ldr	r5, [pc, #24]	; (8009460 <_sbrk_r+0x1c>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	f7f8 ffa2 	bl	8002398 <_sbrk>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_sbrk_r+0x1a>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_sbrk_r+0x1a>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	20001024 	.word	0x20001024

08009464 <siprintf>:
 8009464:	b40e      	push	{r1, r2, r3}
 8009466:	b500      	push	{lr}
 8009468:	b09c      	sub	sp, #112	; 0x70
 800946a:	ab1d      	add	r3, sp, #116	; 0x74
 800946c:	9002      	str	r0, [sp, #8]
 800946e:	9006      	str	r0, [sp, #24]
 8009470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009474:	4809      	ldr	r0, [pc, #36]	; (800949c <siprintf+0x38>)
 8009476:	9107      	str	r1, [sp, #28]
 8009478:	9104      	str	r1, [sp, #16]
 800947a:	4909      	ldr	r1, [pc, #36]	; (80094a0 <siprintf+0x3c>)
 800947c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009480:	9105      	str	r1, [sp, #20]
 8009482:	6800      	ldr	r0, [r0, #0]
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	a902      	add	r1, sp, #8
 8009488:	f000 ff64 	bl	800a354 <_svfiprintf_r>
 800948c:	9b02      	ldr	r3, [sp, #8]
 800948e:	2200      	movs	r2, #0
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	b01c      	add	sp, #112	; 0x70
 8009494:	f85d eb04 	ldr.w	lr, [sp], #4
 8009498:	b003      	add	sp, #12
 800949a:	4770      	bx	lr
 800949c:	2000005c 	.word	0x2000005c
 80094a0:	ffff0208 	.word	0xffff0208

080094a4 <strncmp>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	b17a      	cbz	r2, 80094c8 <strncmp+0x24>
 80094a8:	4603      	mov	r3, r0
 80094aa:	3901      	subs	r1, #1
 80094ac:	1884      	adds	r4, r0, r2
 80094ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094b6:	4290      	cmp	r0, r2
 80094b8:	d101      	bne.n	80094be <strncmp+0x1a>
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	d101      	bne.n	80094c2 <strncmp+0x1e>
 80094be:	1a80      	subs	r0, r0, r2
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d1f3      	bne.n	80094ae <strncmp+0xa>
 80094c6:	e7fa      	b.n	80094be <strncmp+0x1a>
 80094c8:	4610      	mov	r0, r2
 80094ca:	e7f9      	b.n	80094c0 <strncmp+0x1c>

080094cc <strncpy>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	3901      	subs	r1, #1
 80094d0:	4603      	mov	r3, r0
 80094d2:	b132      	cbz	r2, 80094e2 <strncpy+0x16>
 80094d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80094d8:	f803 4b01 	strb.w	r4, [r3], #1
 80094dc:	3a01      	subs	r2, #1
 80094de:	2c00      	cmp	r4, #0
 80094e0:	d1f7      	bne.n	80094d2 <strncpy+0x6>
 80094e2:	441a      	add	r2, r3
 80094e4:	2100      	movs	r1, #0
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d100      	bne.n	80094ec <strncpy+0x20>
 80094ea:	bd10      	pop	{r4, pc}
 80094ec:	f803 1b01 	strb.w	r1, [r3], #1
 80094f0:	e7f9      	b.n	80094e6 <strncpy+0x1a>

080094f2 <strstr>:
 80094f2:	780a      	ldrb	r2, [r1, #0]
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	b96a      	cbnz	r2, 8009514 <strstr+0x22>
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d109      	bne.n	8009512 <strstr+0x20>
 80094fe:	460c      	mov	r4, r1
 8009500:	4605      	mov	r5, r0
 8009502:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0f6      	beq.n	80094f8 <strstr+0x6>
 800950a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800950e:	429e      	cmp	r6, r3
 8009510:	d0f7      	beq.n	8009502 <strstr+0x10>
 8009512:	3001      	adds	r0, #1
 8009514:	7803      	ldrb	r3, [r0, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1ef      	bne.n	80094fa <strstr+0x8>
 800951a:	4618      	mov	r0, r3
 800951c:	e7ec      	b.n	80094f8 <strstr+0x6>
	...

08009520 <strtok>:
 8009520:	4b16      	ldr	r3, [pc, #88]	; (800957c <strtok+0x5c>)
 8009522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009524:	681e      	ldr	r6, [r3, #0]
 8009526:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009528:	4605      	mov	r5, r0
 800952a:	b9fc      	cbnz	r4, 800956c <strtok+0x4c>
 800952c:	2050      	movs	r0, #80	; 0x50
 800952e:	9101      	str	r1, [sp, #4]
 8009530:	f7ff fb9a 	bl	8008c68 <malloc>
 8009534:	9901      	ldr	r1, [sp, #4]
 8009536:	65b0      	str	r0, [r6, #88]	; 0x58
 8009538:	4602      	mov	r2, r0
 800953a:	b920      	cbnz	r0, 8009546 <strtok+0x26>
 800953c:	4b10      	ldr	r3, [pc, #64]	; (8009580 <strtok+0x60>)
 800953e:	4811      	ldr	r0, [pc, #68]	; (8009584 <strtok+0x64>)
 8009540:	2157      	movs	r1, #87	; 0x57
 8009542:	f000 fb45 	bl	8009bd0 <__assert_func>
 8009546:	e9c0 4400 	strd	r4, r4, [r0]
 800954a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800954e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009552:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009556:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800955a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800955e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009562:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009566:	6184      	str	r4, [r0, #24]
 8009568:	7704      	strb	r4, [r0, #28]
 800956a:	6244      	str	r4, [r0, #36]	; 0x24
 800956c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800956e:	2301      	movs	r3, #1
 8009570:	4628      	mov	r0, r5
 8009572:	b002      	add	sp, #8
 8009574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009578:	f000 b806 	b.w	8009588 <__strtok_r>
 800957c:	2000005c 	.word	0x2000005c
 8009580:	0800bfc0 	.word	0x0800bfc0
 8009584:	0800c0f4 	.word	0x0800c0f4

08009588 <__strtok_r>:
 8009588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800958a:	b908      	cbnz	r0, 8009590 <__strtok_r+0x8>
 800958c:	6810      	ldr	r0, [r2, #0]
 800958e:	b188      	cbz	r0, 80095b4 <__strtok_r+0x2c>
 8009590:	4604      	mov	r4, r0
 8009592:	4620      	mov	r0, r4
 8009594:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009598:	460f      	mov	r7, r1
 800959a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800959e:	b91e      	cbnz	r6, 80095a8 <__strtok_r+0x20>
 80095a0:	b965      	cbnz	r5, 80095bc <__strtok_r+0x34>
 80095a2:	6015      	str	r5, [r2, #0]
 80095a4:	4628      	mov	r0, r5
 80095a6:	e005      	b.n	80095b4 <__strtok_r+0x2c>
 80095a8:	42b5      	cmp	r5, r6
 80095aa:	d1f6      	bne.n	800959a <__strtok_r+0x12>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1f0      	bne.n	8009592 <__strtok_r+0xa>
 80095b0:	6014      	str	r4, [r2, #0]
 80095b2:	7003      	strb	r3, [r0, #0]
 80095b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b6:	461c      	mov	r4, r3
 80095b8:	e00c      	b.n	80095d4 <__strtok_r+0x4c>
 80095ba:	b915      	cbnz	r5, 80095c2 <__strtok_r+0x3a>
 80095bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095c0:	460e      	mov	r6, r1
 80095c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80095c6:	42ab      	cmp	r3, r5
 80095c8:	d1f7      	bne.n	80095ba <__strtok_r+0x32>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0f3      	beq.n	80095b6 <__strtok_r+0x2e>
 80095ce:	2300      	movs	r3, #0
 80095d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80095d4:	6014      	str	r4, [r2, #0]
 80095d6:	e7ed      	b.n	80095b4 <__strtok_r+0x2c>

080095d8 <__tzcalc_limits>:
 80095d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	4605      	mov	r5, r0
 80095de:	f000 fd37 	bl	800a050 <__gettzinfo>
 80095e2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80095e6:	429d      	cmp	r5, r3
 80095e8:	f340 8099 	ble.w	800971e <__tzcalc_limits+0x146>
 80095ec:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80095f0:	18ac      	adds	r4, r5, r2
 80095f2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80095f6:	f240 126d 	movw	r2, #365	; 0x16d
 80095fa:	10a4      	asrs	r4, r4, #2
 80095fc:	fb02 4403 	mla	r4, r2, r3, r4
 8009600:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009604:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009608:	fb93 f3f2 	sdiv	r3, r3, r2
 800960c:	441c      	add	r4, r3
 800960e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009612:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8009616:	fb95 fcf3 	sdiv	ip, r5, r3
 800961a:	fb03 5c1c 	mls	ip, r3, ip, r5
 800961e:	186a      	adds	r2, r5, r1
 8009620:	fabc f68c 	clz	r6, ip
 8009624:	fbb2 f2f3 	udiv	r2, r2, r3
 8009628:	f005 0303 	and.w	r3, r5, #3
 800962c:	4414      	add	r4, r2
 800962e:	2264      	movs	r2, #100	; 0x64
 8009630:	6045      	str	r5, [r0, #4]
 8009632:	fb95 f7f2 	sdiv	r7, r5, r2
 8009636:	0976      	lsrs	r6, r6, #5
 8009638:	fb02 5717 	mls	r7, r2, r7, r5
 800963c:	4601      	mov	r1, r0
 800963e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	f04f 0a07 	mov.w	sl, #7
 8009648:	7a0d      	ldrb	r5, [r1, #8]
 800964a:	694b      	ldr	r3, [r1, #20]
 800964c:	2d4a      	cmp	r5, #74	; 0x4a
 800964e:	d12d      	bne.n	80096ac <__tzcalc_limits+0xd4>
 8009650:	9a00      	ldr	r2, [sp, #0]
 8009652:	eb04 0e03 	add.w	lr, r4, r3
 8009656:	b902      	cbnz	r2, 800965a <__tzcalc_limits+0x82>
 8009658:	b917      	cbnz	r7, 8009660 <__tzcalc_limits+0x88>
 800965a:	f1bc 0f00 	cmp.w	ip, #0
 800965e:	d123      	bne.n	80096a8 <__tzcalc_limits+0xd0>
 8009660:	2b3b      	cmp	r3, #59	; 0x3b
 8009662:	bfd4      	ite	le
 8009664:	2300      	movle	r3, #0
 8009666:	2301      	movgt	r3, #1
 8009668:	4473      	add	r3, lr
 800966a:	3b01      	subs	r3, #1
 800966c:	698d      	ldr	r5, [r1, #24]
 800966e:	4a2d      	ldr	r2, [pc, #180]	; (8009724 <__tzcalc_limits+0x14c>)
 8009670:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8009674:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8009678:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800967a:	18ed      	adds	r5, r5, r3
 800967c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8009680:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8009684:	3128      	adds	r1, #40	; 0x28
 8009686:	458b      	cmp	fp, r1
 8009688:	d1de      	bne.n	8009648 <__tzcalc_limits+0x70>
 800968a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800968e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8009692:	428c      	cmp	r4, r1
 8009694:	eb72 0303 	sbcs.w	r3, r2, r3
 8009698:	bfb4      	ite	lt
 800969a:	2301      	movlt	r3, #1
 800969c:	2300      	movge	r3, #0
 800969e:	6003      	str	r3, [r0, #0]
 80096a0:	2001      	movs	r0, #1
 80096a2:	b003      	add	sp, #12
 80096a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a8:	2300      	movs	r3, #0
 80096aa:	e7dd      	b.n	8009668 <__tzcalc_limits+0x90>
 80096ac:	2d44      	cmp	r5, #68	; 0x44
 80096ae:	d101      	bne.n	80096b4 <__tzcalc_limits+0xdc>
 80096b0:	4423      	add	r3, r4
 80096b2:	e7db      	b.n	800966c <__tzcalc_limits+0x94>
 80096b4:	9a00      	ldr	r2, [sp, #0]
 80096b6:	bb62      	cbnz	r2, 8009712 <__tzcalc_limits+0x13a>
 80096b8:	2f00      	cmp	r7, #0
 80096ba:	bf0c      	ite	eq
 80096bc:	4635      	moveq	r5, r6
 80096be:	2501      	movne	r5, #1
 80096c0:	68ca      	ldr	r2, [r1, #12]
 80096c2:	9201      	str	r2, [sp, #4]
 80096c4:	4a18      	ldr	r2, [pc, #96]	; (8009728 <__tzcalc_limits+0x150>)
 80096c6:	f04f 0930 	mov.w	r9, #48	; 0x30
 80096ca:	fb09 2505 	mla	r5, r9, r5, r2
 80096ce:	46a6      	mov	lr, r4
 80096d0:	f04f 0800 	mov.w	r8, #0
 80096d4:	3d04      	subs	r5, #4
 80096d6:	9a01      	ldr	r2, [sp, #4]
 80096d8:	f108 0801 	add.w	r8, r8, #1
 80096dc:	4542      	cmp	r2, r8
 80096de:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80096e2:	dc18      	bgt.n	8009716 <__tzcalc_limits+0x13e>
 80096e4:	f10e 0504 	add.w	r5, lr, #4
 80096e8:	fb95 f8fa 	sdiv	r8, r5, sl
 80096ec:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80096f0:	eba5 0808 	sub.w	r8, r5, r8
 80096f4:	ebb3 0808 	subs.w	r8, r3, r8
 80096f8:	690b      	ldr	r3, [r1, #16]
 80096fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80096fe:	bf48      	it	mi
 8009700:	f108 0807 	addmi.w	r8, r8, #7
 8009704:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009708:	4443      	add	r3, r8
 800970a:	454b      	cmp	r3, r9
 800970c:	da05      	bge.n	800971a <__tzcalc_limits+0x142>
 800970e:	4473      	add	r3, lr
 8009710:	e7ac      	b.n	800966c <__tzcalc_limits+0x94>
 8009712:	4635      	mov	r5, r6
 8009714:	e7d4      	b.n	80096c0 <__tzcalc_limits+0xe8>
 8009716:	44ce      	add	lr, r9
 8009718:	e7dd      	b.n	80096d6 <__tzcalc_limits+0xfe>
 800971a:	3b07      	subs	r3, #7
 800971c:	e7f5      	b.n	800970a <__tzcalc_limits+0x132>
 800971e:	2000      	movs	r0, #0
 8009720:	e7bf      	b.n	80096a2 <__tzcalc_limits+0xca>
 8009722:	bf00      	nop
 8009724:	00015180 	.word	0x00015180
 8009728:	0800c094 	.word	0x0800c094

0800972c <__tz_lock>:
 800972c:	4801      	ldr	r0, [pc, #4]	; (8009734 <__tz_lock+0x8>)
 800972e:	f000 bd40 	b.w	800a1b2 <__retarget_lock_acquire>
 8009732:	bf00      	nop
 8009734:	20001020 	.word	0x20001020

08009738 <__tz_unlock>:
 8009738:	4801      	ldr	r0, [pc, #4]	; (8009740 <__tz_unlock+0x8>)
 800973a:	f000 bd3c 	b.w	800a1b6 <__retarget_lock_release>
 800973e:	bf00      	nop
 8009740:	20001020 	.word	0x20001020

08009744 <_tzset_unlocked>:
 8009744:	4b01      	ldr	r3, [pc, #4]	; (800974c <_tzset_unlocked+0x8>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	f000 b802 	b.w	8009750 <_tzset_unlocked_r>
 800974c:	2000005c 	.word	0x2000005c

08009750 <_tzset_unlocked_r>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	b08d      	sub	sp, #52	; 0x34
 8009756:	4607      	mov	r7, r0
 8009758:	f000 fc7a 	bl	800a050 <__gettzinfo>
 800975c:	49b0      	ldr	r1, [pc, #704]	; (8009a20 <_tzset_unlocked_r+0x2d0>)
 800975e:	4eb1      	ldr	r6, [pc, #708]	; (8009a24 <_tzset_unlocked_r+0x2d4>)
 8009760:	4605      	mov	r5, r0
 8009762:	4638      	mov	r0, r7
 8009764:	f000 fc6c 	bl	800a040 <_getenv_r>
 8009768:	4604      	mov	r4, r0
 800976a:	b970      	cbnz	r0, 800978a <_tzset_unlocked_r+0x3a>
 800976c:	4bae      	ldr	r3, [pc, #696]	; (8009a28 <_tzset_unlocked_r+0x2d8>)
 800976e:	4aaf      	ldr	r2, [pc, #700]	; (8009a2c <_tzset_unlocked_r+0x2dc>)
 8009770:	6018      	str	r0, [r3, #0]
 8009772:	4baf      	ldr	r3, [pc, #700]	; (8009a30 <_tzset_unlocked_r+0x2e0>)
 8009774:	6018      	str	r0, [r3, #0]
 8009776:	4baf      	ldr	r3, [pc, #700]	; (8009a34 <_tzset_unlocked_r+0x2e4>)
 8009778:	6830      	ldr	r0, [r6, #0]
 800977a:	e9c3 2200 	strd	r2, r2, [r3]
 800977e:	f7ff fa7b 	bl	8008c78 <free>
 8009782:	6034      	str	r4, [r6, #0]
 8009784:	b00d      	add	sp, #52	; 0x34
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	6831      	ldr	r1, [r6, #0]
 800978c:	2900      	cmp	r1, #0
 800978e:	d162      	bne.n	8009856 <_tzset_unlocked_r+0x106>
 8009790:	6830      	ldr	r0, [r6, #0]
 8009792:	f7ff fa71 	bl	8008c78 <free>
 8009796:	4620      	mov	r0, r4
 8009798:	f7f6 fd1a 	bl	80001d0 <strlen>
 800979c:	1c41      	adds	r1, r0, #1
 800979e:	4638      	mov	r0, r7
 80097a0:	f7ff fd66 	bl	8009270 <_malloc_r>
 80097a4:	6030      	str	r0, [r6, #0]
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d15a      	bne.n	8009860 <_tzset_unlocked_r+0x110>
 80097aa:	7823      	ldrb	r3, [r4, #0]
 80097ac:	4aa2      	ldr	r2, [pc, #648]	; (8009a38 <_tzset_unlocked_r+0x2e8>)
 80097ae:	49a3      	ldr	r1, [pc, #652]	; (8009a3c <_tzset_unlocked_r+0x2ec>)
 80097b0:	2b3a      	cmp	r3, #58	; 0x3a
 80097b2:	bf08      	it	eq
 80097b4:	3401      	addeq	r4, #1
 80097b6:	ae0a      	add	r6, sp, #40	; 0x28
 80097b8:	4633      	mov	r3, r6
 80097ba:	4620      	mov	r0, r4
 80097bc:	f001 f9b8 	bl	800ab30 <siscanf>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	dddf      	ble.n	8009784 <_tzset_unlocked_r+0x34>
 80097c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c6:	18e7      	adds	r7, r4, r3
 80097c8:	5ce3      	ldrb	r3, [r4, r3]
 80097ca:	2b2d      	cmp	r3, #45	; 0x2d
 80097cc:	d14c      	bne.n	8009868 <_tzset_unlocked_r+0x118>
 80097ce:	3701      	adds	r7, #1
 80097d0:	f04f 38ff 	mov.w	r8, #4294967295
 80097d4:	f10d 0a20 	add.w	sl, sp, #32
 80097d8:	f10d 0b1e 	add.w	fp, sp, #30
 80097dc:	2400      	movs	r4, #0
 80097de:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80097e2:	4997      	ldr	r1, [pc, #604]	; (8009a40 <_tzset_unlocked_r+0x2f0>)
 80097e4:	9603      	str	r6, [sp, #12]
 80097e6:	f8cd b000 	str.w	fp, [sp]
 80097ea:	4633      	mov	r3, r6
 80097ec:	aa07      	add	r2, sp, #28
 80097ee:	4638      	mov	r0, r7
 80097f0:	f8ad 401e 	strh.w	r4, [sp, #30]
 80097f4:	f8ad 4020 	strh.w	r4, [sp, #32]
 80097f8:	f001 f99a 	bl	800ab30 <siscanf>
 80097fc:	42a0      	cmp	r0, r4
 80097fe:	ddc1      	ble.n	8009784 <_tzset_unlocked_r+0x34>
 8009800:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009804:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009808:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009a4c <_tzset_unlocked_r+0x2fc>
 800980c:	213c      	movs	r1, #60	; 0x3c
 800980e:	fb01 3302 	mla	r3, r1, r2, r3
 8009812:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009816:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800981a:	fb01 3302 	mla	r3, r1, r2, r3
 800981e:	fb08 f303 	mul.w	r3, r8, r3
 8009822:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8009a34 <_tzset_unlocked_r+0x2e4>
 8009826:	62ab      	str	r3, [r5, #40]	; 0x28
 8009828:	4b83      	ldr	r3, [pc, #524]	; (8009a38 <_tzset_unlocked_r+0x2e8>)
 800982a:	f8c8 3000 	str.w	r3, [r8]
 800982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009830:	4982      	ldr	r1, [pc, #520]	; (8009a3c <_tzset_unlocked_r+0x2ec>)
 8009832:	441f      	add	r7, r3
 8009834:	464a      	mov	r2, r9
 8009836:	4633      	mov	r3, r6
 8009838:	4638      	mov	r0, r7
 800983a:	f001 f979 	bl	800ab30 <siscanf>
 800983e:	42a0      	cmp	r0, r4
 8009840:	dc18      	bgt.n	8009874 <_tzset_unlocked_r+0x124>
 8009842:	f8d8 3000 	ldr.w	r3, [r8]
 8009846:	f8c8 3004 	str.w	r3, [r8, #4]
 800984a:	4b77      	ldr	r3, [pc, #476]	; (8009a28 <_tzset_unlocked_r+0x2d8>)
 800984c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	4b77      	ldr	r3, [pc, #476]	; (8009a30 <_tzset_unlocked_r+0x2e0>)
 8009852:	601c      	str	r4, [r3, #0]
 8009854:	e796      	b.n	8009784 <_tzset_unlocked_r+0x34>
 8009856:	f7f6 fcc3 	bl	80001e0 <strcmp>
 800985a:	2800      	cmp	r0, #0
 800985c:	d198      	bne.n	8009790 <_tzset_unlocked_r+0x40>
 800985e:	e791      	b.n	8009784 <_tzset_unlocked_r+0x34>
 8009860:	4621      	mov	r1, r4
 8009862:	f001 f9d6 	bl	800ac12 <strcpy>
 8009866:	e7a0      	b.n	80097aa <_tzset_unlocked_r+0x5a>
 8009868:	2b2b      	cmp	r3, #43	; 0x2b
 800986a:	bf08      	it	eq
 800986c:	3701      	addeq	r7, #1
 800986e:	f04f 0801 	mov.w	r8, #1
 8009872:	e7af      	b.n	80097d4 <_tzset_unlocked_r+0x84>
 8009874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009876:	f8c8 9004 	str.w	r9, [r8, #4]
 800987a:	18fc      	adds	r4, r7, r3
 800987c:	5cfb      	ldrb	r3, [r7, r3]
 800987e:	2b2d      	cmp	r3, #45	; 0x2d
 8009880:	f040 808b 	bne.w	800999a <_tzset_unlocked_r+0x24a>
 8009884:	3401      	adds	r4, #1
 8009886:	f04f 37ff 	mov.w	r7, #4294967295
 800988a:	2300      	movs	r3, #0
 800988c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009890:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009894:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009898:	930a      	str	r3, [sp, #40]	; 0x28
 800989a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800989e:	e9cd b600 	strd	fp, r6, [sp]
 80098a2:	4967      	ldr	r1, [pc, #412]	; (8009a40 <_tzset_unlocked_r+0x2f0>)
 80098a4:	4633      	mov	r3, r6
 80098a6:	aa07      	add	r2, sp, #28
 80098a8:	4620      	mov	r0, r4
 80098aa:	f001 f941 	bl	800ab30 <siscanf>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	dc78      	bgt.n	80099a4 <_tzset_unlocked_r+0x254>
 80098b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80098b4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80098b8:	652b      	str	r3, [r5, #80]	; 0x50
 80098ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098bc:	462f      	mov	r7, r5
 80098be:	441c      	add	r4, r3
 80098c0:	f04f 0900 	mov.w	r9, #0
 80098c4:	7823      	ldrb	r3, [r4, #0]
 80098c6:	2b2c      	cmp	r3, #44	; 0x2c
 80098c8:	bf08      	it	eq
 80098ca:	3401      	addeq	r4, #1
 80098cc:	f894 8000 	ldrb.w	r8, [r4]
 80098d0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80098d4:	d178      	bne.n	80099c8 <_tzset_unlocked_r+0x278>
 80098d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80098da:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80098de:	ab09      	add	r3, sp, #36	; 0x24
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4958      	ldr	r1, [pc, #352]	; (8009a44 <_tzset_unlocked_r+0x2f4>)
 80098e4:	9603      	str	r6, [sp, #12]
 80098e6:	4633      	mov	r3, r6
 80098e8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80098ec:	4620      	mov	r0, r4
 80098ee:	f001 f91f 	bl	800ab30 <siscanf>
 80098f2:	2803      	cmp	r0, #3
 80098f4:	f47f af46 	bne.w	8009784 <_tzset_unlocked_r+0x34>
 80098f8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80098fc:	1e4b      	subs	r3, r1, #1
 80098fe:	2b0b      	cmp	r3, #11
 8009900:	f63f af40 	bhi.w	8009784 <_tzset_unlocked_r+0x34>
 8009904:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009908:	1e53      	subs	r3, r2, #1
 800990a:	2b04      	cmp	r3, #4
 800990c:	f63f af3a 	bhi.w	8009784 <_tzset_unlocked_r+0x34>
 8009910:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009914:	2b06      	cmp	r3, #6
 8009916:	f63f af35 	bhi.w	8009784 <_tzset_unlocked_r+0x34>
 800991a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800991e:	f887 8008 	strb.w	r8, [r7, #8]
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009926:	eb04 0803 	add.w	r8, r4, r3
 800992a:	2302      	movs	r3, #2
 800992c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009930:	2300      	movs	r3, #0
 8009932:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009936:	f8ad 3020 	strh.w	r3, [sp, #32]
 800993a:	930a      	str	r3, [sp, #40]	; 0x28
 800993c:	f898 3000 	ldrb.w	r3, [r8]
 8009940:	2b2f      	cmp	r3, #47	; 0x2f
 8009942:	d109      	bne.n	8009958 <_tzset_unlocked_r+0x208>
 8009944:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009948:	e9cd b600 	strd	fp, r6, [sp]
 800994c:	493e      	ldr	r1, [pc, #248]	; (8009a48 <_tzset_unlocked_r+0x2f8>)
 800994e:	4633      	mov	r3, r6
 8009950:	aa07      	add	r2, sp, #28
 8009952:	4640      	mov	r0, r8
 8009954:	f001 f8ec 	bl	800ab30 <siscanf>
 8009958:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800995c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009960:	213c      	movs	r1, #60	; 0x3c
 8009962:	fb01 3302 	mla	r3, r1, r2, r3
 8009966:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800996a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800996e:	fb01 3302 	mla	r3, r1, r2, r3
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009976:	3728      	adds	r7, #40	; 0x28
 8009978:	4444      	add	r4, r8
 800997a:	f1b9 0f00 	cmp.w	r9, #0
 800997e:	d020      	beq.n	80099c2 <_tzset_unlocked_r+0x272>
 8009980:	6868      	ldr	r0, [r5, #4]
 8009982:	f7ff fe29 	bl	80095d8 <__tzcalc_limits>
 8009986:	4b28      	ldr	r3, [pc, #160]	; (8009a28 <_tzset_unlocked_r+0x2d8>)
 8009988:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	4a27      	ldr	r2, [pc, #156]	; (8009a30 <_tzset_unlocked_r+0x2e0>)
 8009992:	bf18      	it	ne
 8009994:	2301      	movne	r3, #1
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	e6f4      	b.n	8009784 <_tzset_unlocked_r+0x34>
 800999a:	2b2b      	cmp	r3, #43	; 0x2b
 800999c:	bf08      	it	eq
 800999e:	3401      	addeq	r4, #1
 80099a0:	2701      	movs	r7, #1
 80099a2:	e772      	b.n	800988a <_tzset_unlocked_r+0x13a>
 80099a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80099a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80099ac:	213c      	movs	r1, #60	; 0x3c
 80099ae:	fb01 3302 	mla	r3, r1, r2, r3
 80099b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80099b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80099ba:	fb01 3302 	mla	r3, r1, r2, r3
 80099be:	437b      	muls	r3, r7
 80099c0:	e77a      	b.n	80098b8 <_tzset_unlocked_r+0x168>
 80099c2:	f04f 0901 	mov.w	r9, #1
 80099c6:	e77d      	b.n	80098c4 <_tzset_unlocked_r+0x174>
 80099c8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80099cc:	bf06      	itte	eq
 80099ce:	3401      	addeq	r4, #1
 80099d0:	4643      	moveq	r3, r8
 80099d2:	2344      	movne	r3, #68	; 0x44
 80099d4:	220a      	movs	r2, #10
 80099d6:	a90b      	add	r1, sp, #44	; 0x2c
 80099d8:	4620      	mov	r0, r4
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	f001 f996 	bl	800ad0c <strtoul>
 80099e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80099e4:	9b05      	ldr	r3, [sp, #20]
 80099e6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80099ea:	45a0      	cmp	r8, r4
 80099ec:	d114      	bne.n	8009a18 <_tzset_unlocked_r+0x2c8>
 80099ee:	234d      	movs	r3, #77	; 0x4d
 80099f0:	f1b9 0f00 	cmp.w	r9, #0
 80099f4:	d107      	bne.n	8009a06 <_tzset_unlocked_r+0x2b6>
 80099f6:	722b      	strb	r3, [r5, #8]
 80099f8:	2103      	movs	r1, #3
 80099fa:	2302      	movs	r3, #2
 80099fc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8009a00:	f8c5 9014 	str.w	r9, [r5, #20]
 8009a04:	e791      	b.n	800992a <_tzset_unlocked_r+0x1da>
 8009a06:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8009a0a:	220b      	movs	r2, #11
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8009a12:	2300      	movs	r3, #0
 8009a14:	63eb      	str	r3, [r5, #60]	; 0x3c
 8009a16:	e788      	b.n	800992a <_tzset_unlocked_r+0x1da>
 8009a18:	b280      	uxth	r0, r0
 8009a1a:	723b      	strb	r3, [r7, #8]
 8009a1c:	6178      	str	r0, [r7, #20]
 8009a1e:	e784      	b.n	800992a <_tzset_unlocked_r+0x1da>
 8009a20:	0800c151 	.word	0x0800c151
 8009a24:	20001010 	.word	0x20001010
 8009a28:	20001018 	.word	0x20001018
 8009a2c:	0800c154 	.word	0x0800c154
 8009a30:	20001014 	.word	0x20001014
 8009a34:	200000c0 	.word	0x200000c0
 8009a38:	20001003 	.word	0x20001003
 8009a3c:	0800c158 	.word	0x0800c158
 8009a40:	0800c17b 	.word	0x0800c17b
 8009a44:	0800c167 	.word	0x0800c167
 8009a48:	0800c17a 	.word	0x0800c17a
 8009a4c:	20000ff8 	.word	0x20000ff8

08009a50 <__swbuf_r>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	460e      	mov	r6, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	4605      	mov	r5, r0
 8009a58:	b118      	cbz	r0, 8009a62 <__swbuf_r+0x12>
 8009a5a:	6983      	ldr	r3, [r0, #24]
 8009a5c:	b90b      	cbnz	r3, 8009a62 <__swbuf_r+0x12>
 8009a5e:	f000 fa03 	bl	8009e68 <__sinit>
 8009a62:	4b21      	ldr	r3, [pc, #132]	; (8009ae8 <__swbuf_r+0x98>)
 8009a64:	429c      	cmp	r4, r3
 8009a66:	d12b      	bne.n	8009ac0 <__swbuf_r+0x70>
 8009a68:	686c      	ldr	r4, [r5, #4]
 8009a6a:	69a3      	ldr	r3, [r4, #24]
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	071a      	lsls	r2, r3, #28
 8009a72:	d52f      	bpl.n	8009ad4 <__swbuf_r+0x84>
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	b36b      	cbz	r3, 8009ad4 <__swbuf_r+0x84>
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	6820      	ldr	r0, [r4, #0]
 8009a7c:	1ac0      	subs	r0, r0, r3
 8009a7e:	6963      	ldr	r3, [r4, #20]
 8009a80:	b2f6      	uxtb	r6, r6
 8009a82:	4283      	cmp	r3, r0
 8009a84:	4637      	mov	r7, r6
 8009a86:	dc04      	bgt.n	8009a92 <__swbuf_r+0x42>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 f958 	bl	8009d40 <_fflush_r>
 8009a90:	bb30      	cbnz	r0, 8009ae0 <__swbuf_r+0x90>
 8009a92:	68a3      	ldr	r3, [r4, #8]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	60a3      	str	r3, [r4, #8]
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	6022      	str	r2, [r4, #0]
 8009a9e:	701e      	strb	r6, [r3, #0]
 8009aa0:	6963      	ldr	r3, [r4, #20]
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	4283      	cmp	r3, r0
 8009aa6:	d004      	beq.n	8009ab2 <__swbuf_r+0x62>
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	07db      	lsls	r3, r3, #31
 8009aac:	d506      	bpl.n	8009abc <__swbuf_r+0x6c>
 8009aae:	2e0a      	cmp	r6, #10
 8009ab0:	d104      	bne.n	8009abc <__swbuf_r+0x6c>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f000 f943 	bl	8009d40 <_fflush_r>
 8009aba:	b988      	cbnz	r0, 8009ae0 <__swbuf_r+0x90>
 8009abc:	4638      	mov	r0, r7
 8009abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <__swbuf_r+0x9c>)
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d101      	bne.n	8009aca <__swbuf_r+0x7a>
 8009ac6:	68ac      	ldr	r4, [r5, #8]
 8009ac8:	e7cf      	b.n	8009a6a <__swbuf_r+0x1a>
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <__swbuf_r+0xa0>)
 8009acc:	429c      	cmp	r4, r3
 8009ace:	bf08      	it	eq
 8009ad0:	68ec      	ldreq	r4, [r5, #12]
 8009ad2:	e7ca      	b.n	8009a6a <__swbuf_r+0x1a>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 f80c 	bl	8009af4 <__swsetup_r>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d0cb      	beq.n	8009a78 <__swbuf_r+0x28>
 8009ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ae4:	e7ea      	b.n	8009abc <__swbuf_r+0x6c>
 8009ae6:	bf00      	nop
 8009ae8:	0800c1ec 	.word	0x0800c1ec
 8009aec:	0800c20c 	.word	0x0800c20c
 8009af0:	0800c1cc 	.word	0x0800c1cc

08009af4 <__swsetup_r>:
 8009af4:	4b32      	ldr	r3, [pc, #200]	; (8009bc0 <__swsetup_r+0xcc>)
 8009af6:	b570      	push	{r4, r5, r6, lr}
 8009af8:	681d      	ldr	r5, [r3, #0]
 8009afa:	4606      	mov	r6, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	b125      	cbz	r5, 8009b0a <__swsetup_r+0x16>
 8009b00:	69ab      	ldr	r3, [r5, #24]
 8009b02:	b913      	cbnz	r3, 8009b0a <__swsetup_r+0x16>
 8009b04:	4628      	mov	r0, r5
 8009b06:	f000 f9af 	bl	8009e68 <__sinit>
 8009b0a:	4b2e      	ldr	r3, [pc, #184]	; (8009bc4 <__swsetup_r+0xd0>)
 8009b0c:	429c      	cmp	r4, r3
 8009b0e:	d10f      	bne.n	8009b30 <__swsetup_r+0x3c>
 8009b10:	686c      	ldr	r4, [r5, #4]
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b18:	0719      	lsls	r1, r3, #28
 8009b1a:	d42c      	bmi.n	8009b76 <__swsetup_r+0x82>
 8009b1c:	06dd      	lsls	r5, r3, #27
 8009b1e:	d411      	bmi.n	8009b44 <__swsetup_r+0x50>
 8009b20:	2309      	movs	r3, #9
 8009b22:	6033      	str	r3, [r6, #0]
 8009b24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2e:	e03e      	b.n	8009bae <__swsetup_r+0xba>
 8009b30:	4b25      	ldr	r3, [pc, #148]	; (8009bc8 <__swsetup_r+0xd4>)
 8009b32:	429c      	cmp	r4, r3
 8009b34:	d101      	bne.n	8009b3a <__swsetup_r+0x46>
 8009b36:	68ac      	ldr	r4, [r5, #8]
 8009b38:	e7eb      	b.n	8009b12 <__swsetup_r+0x1e>
 8009b3a:	4b24      	ldr	r3, [pc, #144]	; (8009bcc <__swsetup_r+0xd8>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	bf08      	it	eq
 8009b40:	68ec      	ldreq	r4, [r5, #12]
 8009b42:	e7e6      	b.n	8009b12 <__swsetup_r+0x1e>
 8009b44:	0758      	lsls	r0, r3, #29
 8009b46:	d512      	bpl.n	8009b6e <__swsetup_r+0x7a>
 8009b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4a:	b141      	cbz	r1, 8009b5e <__swsetup_r+0x6a>
 8009b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b50:	4299      	cmp	r1, r3
 8009b52:	d002      	beq.n	8009b5a <__swsetup_r+0x66>
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff fb1f 	bl	8009198 <_free_r>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	2300      	movs	r3, #0
 8009b68:	6063      	str	r3, [r4, #4]
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	f043 0308 	orr.w	r3, r3, #8
 8009b74:	81a3      	strh	r3, [r4, #12]
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	b94b      	cbnz	r3, 8009b8e <__swsetup_r+0x9a>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b84:	d003      	beq.n	8009b8e <__swsetup_r+0x9a>
 8009b86:	4621      	mov	r1, r4
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 fb3b 	bl	800a204 <__smakebuf_r>
 8009b8e:	89a0      	ldrh	r0, [r4, #12]
 8009b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b94:	f010 0301 	ands.w	r3, r0, #1
 8009b98:	d00a      	beq.n	8009bb0 <__swsetup_r+0xbc>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	6963      	ldr	r3, [r4, #20]
 8009ba0:	425b      	negs	r3, r3
 8009ba2:	61a3      	str	r3, [r4, #24]
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	b943      	cbnz	r3, 8009bba <__swsetup_r+0xc6>
 8009ba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bac:	d1ba      	bne.n	8009b24 <__swsetup_r+0x30>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	0781      	lsls	r1, r0, #30
 8009bb2:	bf58      	it	pl
 8009bb4:	6963      	ldrpl	r3, [r4, #20]
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	e7f4      	b.n	8009ba4 <__swsetup_r+0xb0>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e7f7      	b.n	8009bae <__swsetup_r+0xba>
 8009bbe:	bf00      	nop
 8009bc0:	2000005c 	.word	0x2000005c
 8009bc4:	0800c1ec 	.word	0x0800c1ec
 8009bc8:	0800c20c 	.word	0x0800c20c
 8009bcc:	0800c1cc 	.word	0x0800c1cc

08009bd0 <__assert_func>:
 8009bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bd2:	4614      	mov	r4, r2
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <__assert_func+0x2c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	68d8      	ldr	r0, [r3, #12]
 8009bde:	b14c      	cbz	r4, 8009bf4 <__assert_func+0x24>
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <__assert_func+0x30>)
 8009be2:	9100      	str	r1, [sp, #0]
 8009be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009be8:	4906      	ldr	r1, [pc, #24]	; (8009c04 <__assert_func+0x34>)
 8009bea:	462b      	mov	r3, r5
 8009bec:	f000 f9ba 	bl	8009f64 <fiprintf>
 8009bf0:	f001 f8a8 	bl	800ad44 <abort>
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <__assert_func+0x38>)
 8009bf6:	461c      	mov	r4, r3
 8009bf8:	e7f3      	b.n	8009be2 <__assert_func+0x12>
 8009bfa:	bf00      	nop
 8009bfc:	2000005c 	.word	0x2000005c
 8009c00:	0800c18d 	.word	0x0800c18d
 8009c04:	0800c19a 	.word	0x0800c19a
 8009c08:	0800c1c8 	.word	0x0800c1c8

08009c0c <div>:
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	fb91 f4f2 	sdiv	r4, r1, r2
 8009c14:	fb02 1314 	mls	r3, r2, r4, r1
 8009c18:	db06      	blt.n	8009c28 <div+0x1c>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da01      	bge.n	8009c22 <div+0x16>
 8009c1e:	3401      	adds	r4, #1
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	e9c0 4300 	strd	r4, r3, [r0]
 8009c26:	bd10      	pop	{r4, pc}
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bfc4      	itt	gt
 8009c2c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009c30:	189b      	addgt	r3, r3, r2
 8009c32:	e7f6      	b.n	8009c22 <div+0x16>

08009c34 <__sflush_r>:
 8009c34:	898a      	ldrh	r2, [r1, #12]
 8009c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	0710      	lsls	r0, r2, #28
 8009c3e:	460c      	mov	r4, r1
 8009c40:	d458      	bmi.n	8009cf4 <__sflush_r+0xc0>
 8009c42:	684b      	ldr	r3, [r1, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dc05      	bgt.n	8009c54 <__sflush_r+0x20>
 8009c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dc02      	bgt.n	8009c54 <__sflush_r+0x20>
 8009c4e:	2000      	movs	r0, #0
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	d0f9      	beq.n	8009c4e <__sflush_r+0x1a>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c60:	682f      	ldr	r7, [r5, #0]
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	d032      	beq.n	8009ccc <__sflush_r+0x98>
 8009c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	075a      	lsls	r2, r3, #29
 8009c6c:	d505      	bpl.n	8009c7a <__sflush_r+0x46>
 8009c6e:	6863      	ldr	r3, [r4, #4]
 8009c70:	1ac0      	subs	r0, r0, r3
 8009c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c74:	b10b      	cbz	r3, 8009c7a <__sflush_r+0x46>
 8009c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c78:	1ac0      	subs	r0, r0, r3
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c80:	6a21      	ldr	r1, [r4, #32]
 8009c82:	4628      	mov	r0, r5
 8009c84:	47b0      	blx	r6
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	d106      	bne.n	8009c9a <__sflush_r+0x66>
 8009c8c:	6829      	ldr	r1, [r5, #0]
 8009c8e:	291d      	cmp	r1, #29
 8009c90:	d82c      	bhi.n	8009cec <__sflush_r+0xb8>
 8009c92:	4a2a      	ldr	r2, [pc, #168]	; (8009d3c <__sflush_r+0x108>)
 8009c94:	40ca      	lsrs	r2, r1
 8009c96:	07d6      	lsls	r6, r2, #31
 8009c98:	d528      	bpl.n	8009cec <__sflush_r+0xb8>
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	6062      	str	r2, [r4, #4]
 8009c9e:	04d9      	lsls	r1, r3, #19
 8009ca0:	6922      	ldr	r2, [r4, #16]
 8009ca2:	6022      	str	r2, [r4, #0]
 8009ca4:	d504      	bpl.n	8009cb0 <__sflush_r+0x7c>
 8009ca6:	1c42      	adds	r2, r0, #1
 8009ca8:	d101      	bne.n	8009cae <__sflush_r+0x7a>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	b903      	cbnz	r3, 8009cb0 <__sflush_r+0x7c>
 8009cae:	6560      	str	r0, [r4, #84]	; 0x54
 8009cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cb2:	602f      	str	r7, [r5, #0]
 8009cb4:	2900      	cmp	r1, #0
 8009cb6:	d0ca      	beq.n	8009c4e <__sflush_r+0x1a>
 8009cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d002      	beq.n	8009cc6 <__sflush_r+0x92>
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f7ff fa69 	bl	8009198 <_free_r>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8009cca:	e7c1      	b.n	8009c50 <__sflush_r+0x1c>
 8009ccc:	6a21      	ldr	r1, [r4, #32]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b0      	blx	r6
 8009cd4:	1c41      	adds	r1, r0, #1
 8009cd6:	d1c7      	bne.n	8009c68 <__sflush_r+0x34>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0c4      	beq.n	8009c68 <__sflush_r+0x34>
 8009cde:	2b1d      	cmp	r3, #29
 8009ce0:	d001      	beq.n	8009ce6 <__sflush_r+0xb2>
 8009ce2:	2b16      	cmp	r3, #22
 8009ce4:	d101      	bne.n	8009cea <__sflush_r+0xb6>
 8009ce6:	602f      	str	r7, [r5, #0]
 8009ce8:	e7b1      	b.n	8009c4e <__sflush_r+0x1a>
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	e7ad      	b.n	8009c50 <__sflush_r+0x1c>
 8009cf4:	690f      	ldr	r7, [r1, #16]
 8009cf6:	2f00      	cmp	r7, #0
 8009cf8:	d0a9      	beq.n	8009c4e <__sflush_r+0x1a>
 8009cfa:	0793      	lsls	r3, r2, #30
 8009cfc:	680e      	ldr	r6, [r1, #0]
 8009cfe:	bf08      	it	eq
 8009d00:	694b      	ldreq	r3, [r1, #20]
 8009d02:	600f      	str	r7, [r1, #0]
 8009d04:	bf18      	it	ne
 8009d06:	2300      	movne	r3, #0
 8009d08:	eba6 0807 	sub.w	r8, r6, r7
 8009d0c:	608b      	str	r3, [r1, #8]
 8009d0e:	f1b8 0f00 	cmp.w	r8, #0
 8009d12:	dd9c      	ble.n	8009c4e <__sflush_r+0x1a>
 8009d14:	6a21      	ldr	r1, [r4, #32]
 8009d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d18:	4643      	mov	r3, r8
 8009d1a:	463a      	mov	r2, r7
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b0      	blx	r6
 8009d20:	2800      	cmp	r0, #0
 8009d22:	dc06      	bgt.n	8009d32 <__sflush_r+0xfe>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d2a:	81a3      	strh	r3, [r4, #12]
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	e78e      	b.n	8009c50 <__sflush_r+0x1c>
 8009d32:	4407      	add	r7, r0
 8009d34:	eba8 0800 	sub.w	r8, r8, r0
 8009d38:	e7e9      	b.n	8009d0e <__sflush_r+0xda>
 8009d3a:	bf00      	nop
 8009d3c:	20400001 	.word	0x20400001

08009d40 <_fflush_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	690b      	ldr	r3, [r1, #16]
 8009d44:	4605      	mov	r5, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	b913      	cbnz	r3, 8009d50 <_fflush_r+0x10>
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	b118      	cbz	r0, 8009d5a <_fflush_r+0x1a>
 8009d52:	6983      	ldr	r3, [r0, #24]
 8009d54:	b90b      	cbnz	r3, 8009d5a <_fflush_r+0x1a>
 8009d56:	f000 f887 	bl	8009e68 <__sinit>
 8009d5a:	4b14      	ldr	r3, [pc, #80]	; (8009dac <_fflush_r+0x6c>)
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	d11b      	bne.n	8009d98 <_fflush_r+0x58>
 8009d60:	686c      	ldr	r4, [r5, #4]
 8009d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0ef      	beq.n	8009d4a <_fflush_r+0xa>
 8009d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d6c:	07d0      	lsls	r0, r2, #31
 8009d6e:	d404      	bmi.n	8009d7a <_fflush_r+0x3a>
 8009d70:	0599      	lsls	r1, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_fflush_r+0x3a>
 8009d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d76:	f000 fa1d 	bl	800a1b4 <__retarget_lock_acquire_recursive>
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	f7ff ff59 	bl	8009c34 <__sflush_r>
 8009d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d84:	07da      	lsls	r2, r3, #31
 8009d86:	4605      	mov	r5, r0
 8009d88:	d4e0      	bmi.n	8009d4c <_fflush_r+0xc>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	059b      	lsls	r3, r3, #22
 8009d8e:	d4dd      	bmi.n	8009d4c <_fflush_r+0xc>
 8009d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d92:	f000 fa11 	bl	800a1b8 <__retarget_lock_release_recursive>
 8009d96:	e7d9      	b.n	8009d4c <_fflush_r+0xc>
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <_fflush_r+0x70>)
 8009d9a:	429c      	cmp	r4, r3
 8009d9c:	d101      	bne.n	8009da2 <_fflush_r+0x62>
 8009d9e:	68ac      	ldr	r4, [r5, #8]
 8009da0:	e7df      	b.n	8009d62 <_fflush_r+0x22>
 8009da2:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <_fflush_r+0x74>)
 8009da4:	429c      	cmp	r4, r3
 8009da6:	bf08      	it	eq
 8009da8:	68ec      	ldreq	r4, [r5, #12]
 8009daa:	e7da      	b.n	8009d62 <_fflush_r+0x22>
 8009dac:	0800c1ec 	.word	0x0800c1ec
 8009db0:	0800c20c 	.word	0x0800c20c
 8009db4:	0800c1cc 	.word	0x0800c1cc

08009db8 <std>:
 8009db8:	2300      	movs	r3, #0
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8009dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dc6:	6083      	str	r3, [r0, #8]
 8009dc8:	8181      	strh	r1, [r0, #12]
 8009dca:	6643      	str	r3, [r0, #100]	; 0x64
 8009dcc:	81c2      	strh	r2, [r0, #14]
 8009dce:	6183      	str	r3, [r0, #24]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	2208      	movs	r2, #8
 8009dd4:	305c      	adds	r0, #92	; 0x5c
 8009dd6:	f7fe ff65 	bl	8008ca4 <memset>
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <std+0x38>)
 8009ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8009dde:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <std+0x3c>)
 8009de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009de2:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <std+0x40>)
 8009de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009de6:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <std+0x44>)
 8009de8:	6224      	str	r4, [r4, #32]
 8009dea:	6323      	str	r3, [r4, #48]	; 0x30
 8009dec:	bd10      	pop	{r4, pc}
 8009dee:	bf00      	nop
 8009df0:	0800ab89 	.word	0x0800ab89
 8009df4:	0800abaf 	.word	0x0800abaf
 8009df8:	0800abe7 	.word	0x0800abe7
 8009dfc:	0800ac0b 	.word	0x0800ac0b

08009e00 <_cleanup_r>:
 8009e00:	4901      	ldr	r1, [pc, #4]	; (8009e08 <_cleanup_r+0x8>)
 8009e02:	f000 b8c1 	b.w	8009f88 <_fwalk_reent>
 8009e06:	bf00      	nop
 8009e08:	08009d41 	.word	0x08009d41

08009e0c <__sfmoreglue>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	2268      	movs	r2, #104	; 0x68
 8009e10:	1e4d      	subs	r5, r1, #1
 8009e12:	4355      	muls	r5, r2
 8009e14:	460e      	mov	r6, r1
 8009e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e1a:	f7ff fa29 	bl	8009270 <_malloc_r>
 8009e1e:	4604      	mov	r4, r0
 8009e20:	b140      	cbz	r0, 8009e34 <__sfmoreglue+0x28>
 8009e22:	2100      	movs	r1, #0
 8009e24:	e9c0 1600 	strd	r1, r6, [r0]
 8009e28:	300c      	adds	r0, #12
 8009e2a:	60a0      	str	r0, [r4, #8]
 8009e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e30:	f7fe ff38 	bl	8008ca4 <memset>
 8009e34:	4620      	mov	r0, r4
 8009e36:	bd70      	pop	{r4, r5, r6, pc}

08009e38 <__sfp_lock_acquire>:
 8009e38:	4801      	ldr	r0, [pc, #4]	; (8009e40 <__sfp_lock_acquire+0x8>)
 8009e3a:	f000 b9bb 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 8009e3e:	bf00      	nop
 8009e40:	2000101e 	.word	0x2000101e

08009e44 <__sfp_lock_release>:
 8009e44:	4801      	ldr	r0, [pc, #4]	; (8009e4c <__sfp_lock_release+0x8>)
 8009e46:	f000 b9b7 	b.w	800a1b8 <__retarget_lock_release_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	2000101e 	.word	0x2000101e

08009e50 <__sinit_lock_acquire>:
 8009e50:	4801      	ldr	r0, [pc, #4]	; (8009e58 <__sinit_lock_acquire+0x8>)
 8009e52:	f000 b9af 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 8009e56:	bf00      	nop
 8009e58:	2000101f 	.word	0x2000101f

08009e5c <__sinit_lock_release>:
 8009e5c:	4801      	ldr	r0, [pc, #4]	; (8009e64 <__sinit_lock_release+0x8>)
 8009e5e:	f000 b9ab 	b.w	800a1b8 <__retarget_lock_release_recursive>
 8009e62:	bf00      	nop
 8009e64:	2000101f 	.word	0x2000101f

08009e68 <__sinit>:
 8009e68:	b510      	push	{r4, lr}
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	f7ff fff0 	bl	8009e50 <__sinit_lock_acquire>
 8009e70:	69a3      	ldr	r3, [r4, #24]
 8009e72:	b11b      	cbz	r3, 8009e7c <__sinit+0x14>
 8009e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e78:	f7ff bff0 	b.w	8009e5c <__sinit_lock_release>
 8009e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e80:	6523      	str	r3, [r4, #80]	; 0x50
 8009e82:	4b13      	ldr	r3, [pc, #76]	; (8009ed0 <__sinit+0x68>)
 8009e84:	4a13      	ldr	r2, [pc, #76]	; (8009ed4 <__sinit+0x6c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	bf04      	itt	eq
 8009e8e:	2301      	moveq	r3, #1
 8009e90:	61a3      	streq	r3, [r4, #24]
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 f820 	bl	8009ed8 <__sfp>
 8009e98:	6060      	str	r0, [r4, #4]
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 f81c 	bl	8009ed8 <__sfp>
 8009ea0:	60a0      	str	r0, [r4, #8]
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 f818 	bl	8009ed8 <__sfp>
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	60e0      	str	r0, [r4, #12]
 8009eac:	2104      	movs	r1, #4
 8009eae:	6860      	ldr	r0, [r4, #4]
 8009eb0:	f7ff ff82 	bl	8009db8 <std>
 8009eb4:	68a0      	ldr	r0, [r4, #8]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	2109      	movs	r1, #9
 8009eba:	f7ff ff7d 	bl	8009db8 <std>
 8009ebe:	68e0      	ldr	r0, [r4, #12]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	2112      	movs	r1, #18
 8009ec4:	f7ff ff78 	bl	8009db8 <std>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	61a3      	str	r3, [r4, #24]
 8009ecc:	e7d2      	b.n	8009e74 <__sinit+0xc>
 8009ece:	bf00      	nop
 8009ed0:	0800bfbc 	.word	0x0800bfbc
 8009ed4:	08009e01 	.word	0x08009e01

08009ed8 <__sfp>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	4607      	mov	r7, r0
 8009edc:	f7ff ffac 	bl	8009e38 <__sfp_lock_acquire>
 8009ee0:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <__sfp+0x84>)
 8009ee2:	681e      	ldr	r6, [r3, #0]
 8009ee4:	69b3      	ldr	r3, [r6, #24]
 8009ee6:	b913      	cbnz	r3, 8009eee <__sfp+0x16>
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff ffbd 	bl	8009e68 <__sinit>
 8009eee:	3648      	adds	r6, #72	; 0x48
 8009ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	d503      	bpl.n	8009f00 <__sfp+0x28>
 8009ef8:	6833      	ldr	r3, [r6, #0]
 8009efa:	b30b      	cbz	r3, 8009f40 <__sfp+0x68>
 8009efc:	6836      	ldr	r6, [r6, #0]
 8009efe:	e7f7      	b.n	8009ef0 <__sfp+0x18>
 8009f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f04:	b9d5      	cbnz	r5, 8009f3c <__sfp+0x64>
 8009f06:	4b16      	ldr	r3, [pc, #88]	; (8009f60 <__sfp+0x88>)
 8009f08:	60e3      	str	r3, [r4, #12]
 8009f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8009f10:	f000 f94e 	bl	800a1b0 <__retarget_lock_init_recursive>
 8009f14:	f7ff ff96 	bl	8009e44 <__sfp_lock_release>
 8009f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f20:	6025      	str	r5, [r4, #0]
 8009f22:	61a5      	str	r5, [r4, #24]
 8009f24:	2208      	movs	r2, #8
 8009f26:	4629      	mov	r1, r5
 8009f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f2c:	f7fe feba 	bl	8008ca4 <memset>
 8009f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f38:	4620      	mov	r0, r4
 8009f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3c:	3468      	adds	r4, #104	; 0x68
 8009f3e:	e7d9      	b.n	8009ef4 <__sfp+0x1c>
 8009f40:	2104      	movs	r1, #4
 8009f42:	4638      	mov	r0, r7
 8009f44:	f7ff ff62 	bl	8009e0c <__sfmoreglue>
 8009f48:	4604      	mov	r4, r0
 8009f4a:	6030      	str	r0, [r6, #0]
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d1d5      	bne.n	8009efc <__sfp+0x24>
 8009f50:	f7ff ff78 	bl	8009e44 <__sfp_lock_release>
 8009f54:	230c      	movs	r3, #12
 8009f56:	603b      	str	r3, [r7, #0]
 8009f58:	e7ee      	b.n	8009f38 <__sfp+0x60>
 8009f5a:	bf00      	nop
 8009f5c:	0800bfbc 	.word	0x0800bfbc
 8009f60:	ffff0001 	.word	0xffff0001

08009f64 <fiprintf>:
 8009f64:	b40e      	push	{r1, r2, r3}
 8009f66:	b503      	push	{r0, r1, lr}
 8009f68:	4601      	mov	r1, r0
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	4805      	ldr	r0, [pc, #20]	; (8009f84 <fiprintf+0x20>)
 8009f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f72:	6800      	ldr	r0, [r0, #0]
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	f000 fb17 	bl	800a5a8 <_vfiprintf_r>
 8009f7a:	b002      	add	sp, #8
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	b003      	add	sp, #12
 8009f82:	4770      	bx	lr
 8009f84:	2000005c 	.word	0x2000005c

08009f88 <_fwalk_reent>:
 8009f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	4688      	mov	r8, r1
 8009f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f94:	2700      	movs	r7, #0
 8009f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8009f9e:	d505      	bpl.n	8009fac <_fwalk_reent+0x24>
 8009fa0:	6824      	ldr	r4, [r4, #0]
 8009fa2:	2c00      	cmp	r4, #0
 8009fa4:	d1f7      	bne.n	8009f96 <_fwalk_reent+0xe>
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fac:	89ab      	ldrh	r3, [r5, #12]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d907      	bls.n	8009fc2 <_fwalk_reent+0x3a>
 8009fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	d003      	beq.n	8009fc2 <_fwalk_reent+0x3a>
 8009fba:	4629      	mov	r1, r5
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	47c0      	blx	r8
 8009fc0:	4307      	orrs	r7, r0
 8009fc2:	3568      	adds	r5, #104	; 0x68
 8009fc4:	e7e9      	b.n	8009f9a <_fwalk_reent+0x12>
	...

08009fc8 <_findenv_r>:
 8009fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a03c <_findenv_r+0x74>
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	4616      	mov	r6, r2
 8009fd6:	f000 fecd 	bl	800ad74 <__env_lock>
 8009fda:	f8da 4000 	ldr.w	r4, [sl]
 8009fde:	b134      	cbz	r4, 8009fee <_findenv_r+0x26>
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	4698      	mov	r8, r3
 8009fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe8:	b13a      	cbz	r2, 8009ffa <_findenv_r+0x32>
 8009fea:	2a3d      	cmp	r2, #61	; 0x3d
 8009fec:	d1f9      	bne.n	8009fe2 <_findenv_r+0x1a>
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f000 fec6 	bl	800ad80 <__env_unlock>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffa:	eba8 0809 	sub.w	r8, r8, r9
 8009ffe:	46a3      	mov	fp, r4
 800a000:	f854 0b04 	ldr.w	r0, [r4], #4
 800a004:	2800      	cmp	r0, #0
 800a006:	d0f2      	beq.n	8009fee <_findenv_r+0x26>
 800a008:	4642      	mov	r2, r8
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7ff fa4a 	bl	80094a4 <strncmp>
 800a010:	2800      	cmp	r0, #0
 800a012:	d1f4      	bne.n	8009ffe <_findenv_r+0x36>
 800a014:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a018:	eb03 0508 	add.w	r5, r3, r8
 800a01c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a020:	2b3d      	cmp	r3, #61	; 0x3d
 800a022:	d1ec      	bne.n	8009ffe <_findenv_r+0x36>
 800a024:	f8da 3000 	ldr.w	r3, [sl]
 800a028:	ebab 0303 	sub.w	r3, fp, r3
 800a02c:	109b      	asrs	r3, r3, #2
 800a02e:	4638      	mov	r0, r7
 800a030:	6033      	str	r3, [r6, #0]
 800a032:	f000 fea5 	bl	800ad80 <__env_unlock>
 800a036:	1c68      	adds	r0, r5, #1
 800a038:	e7dd      	b.n	8009ff6 <_findenv_r+0x2e>
 800a03a:	bf00      	nop
 800a03c:	20000004 	.word	0x20000004

0800a040 <_getenv_r>:
 800a040:	b507      	push	{r0, r1, r2, lr}
 800a042:	aa01      	add	r2, sp, #4
 800a044:	f7ff ffc0 	bl	8009fc8 <_findenv_r>
 800a048:	b003      	add	sp, #12
 800a04a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a050 <__gettzinfo>:
 800a050:	4800      	ldr	r0, [pc, #0]	; (800a054 <__gettzinfo+0x4>)
 800a052:	4770      	bx	lr
 800a054:	200000c8 	.word	0x200000c8

0800a058 <gmtime_r>:
 800a058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a060:	460c      	mov	r4, r1
 800a062:	4a4f      	ldr	r2, [pc, #316]	; (800a1a0 <gmtime_r+0x148>)
 800a064:	2300      	movs	r3, #0
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 faf5 	bl	8000658 <__aeabi_ldivmod>
 800a06e:	4639      	mov	r1, r7
 800a070:	4605      	mov	r5, r0
 800a072:	4a4b      	ldr	r2, [pc, #300]	; (800a1a0 <gmtime_r+0x148>)
 800a074:	4630      	mov	r0, r6
 800a076:	2300      	movs	r3, #0
 800a078:	f7f6 faee 	bl	8000658 <__aeabi_ldivmod>
 800a07c:	2a00      	cmp	r2, #0
 800a07e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a082:	bfb7      	itett	lt
 800a084:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a088:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a08c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a090:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a094:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a098:	fbb2 f1f0 	udiv	r1, r2, r0
 800a09c:	fb00 2211 	mls	r2, r0, r1, r2
 800a0a0:	203c      	movs	r0, #60	; 0x3c
 800a0a2:	60a1      	str	r1, [r4, #8]
 800a0a4:	fbb2 f1f0 	udiv	r1, r2, r0
 800a0a8:	fb00 2211 	mls	r2, r0, r1, r2
 800a0ac:	6061      	str	r1, [r4, #4]
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	2107      	movs	r1, #7
 800a0b2:	1cda      	adds	r2, r3, #3
 800a0b4:	fb92 f1f1 	sdiv	r1, r2, r1
 800a0b8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a0bc:	1a52      	subs	r2, r2, r1
 800a0be:	bf48      	it	mi
 800a0c0:	3207      	addmi	r2, #7
 800a0c2:	4d38      	ldr	r5, [pc, #224]	; (800a1a4 <gmtime_r+0x14c>)
 800a0c4:	4838      	ldr	r0, [pc, #224]	; (800a1a8 <gmtime_r+0x150>)
 800a0c6:	61a2      	str	r2, [r4, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfb7      	itett	lt
 800a0cc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a0d0:	fb93 f5f5 	sdivge	r5, r3, r5
 800a0d4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a0d8:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a0dc:	fb00 3005 	mla	r0, r0, r5, r3
 800a0e0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a0e4:	fbb0 f2f2 	udiv	r2, r0, r2
 800a0e8:	4402      	add	r2, r0
 800a0ea:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a0ee:	fbb0 f1f3 	udiv	r1, r0, r3
 800a0f2:	1a52      	subs	r2, r2, r1
 800a0f4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a0f8:	492c      	ldr	r1, [pc, #176]	; (800a1ac <gmtime_r+0x154>)
 800a0fa:	fbb0 f1f1 	udiv	r1, r0, r1
 800a0fe:	2764      	movs	r7, #100	; 0x64
 800a100:	1a52      	subs	r2, r2, r1
 800a102:	fbb2 f1fc 	udiv	r1, r2, ip
 800a106:	fbb2 f3f3 	udiv	r3, r2, r3
 800a10a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a10e:	1af3      	subs	r3, r6, r3
 800a110:	4403      	add	r3, r0
 800a112:	fb0c 3311 	mls	r3, ip, r1, r3
 800a116:	2299      	movs	r2, #153	; 0x99
 800a118:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a11c:	f10e 0e02 	add.w	lr, lr, #2
 800a120:	f103 0c01 	add.w	ip, r3, #1
 800a124:	fbbe f0f2 	udiv	r0, lr, r2
 800a128:	4342      	muls	r2, r0
 800a12a:	3202      	adds	r2, #2
 800a12c:	f04f 0805 	mov.w	r8, #5
 800a130:	fbb2 f2f8 	udiv	r2, r2, r8
 800a134:	ebac 0c02 	sub.w	ip, ip, r2
 800a138:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a13c:	4596      	cmp	lr, r2
 800a13e:	bf94      	ite	ls
 800a140:	2202      	movls	r2, #2
 800a142:	f06f 0209 	mvnhi.w	r2, #9
 800a146:	4410      	add	r0, r2
 800a148:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a14c:	fb02 1505 	mla	r5, r2, r5, r1
 800a150:	2801      	cmp	r0, #1
 800a152:	bf98      	it	ls
 800a154:	3501      	addls	r5, #1
 800a156:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a15a:	d30d      	bcc.n	800a178 <gmtime_r+0x120>
 800a15c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a160:	61e3      	str	r3, [r4, #28]
 800a162:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a166:	2300      	movs	r3, #0
 800a168:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a16c:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a170:	6223      	str	r3, [r4, #32]
 800a172:	4620      	mov	r0, r4
 800a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a178:	078a      	lsls	r2, r1, #30
 800a17a:	d102      	bne.n	800a182 <gmtime_r+0x12a>
 800a17c:	fb07 1616 	mls	r6, r7, r6, r1
 800a180:	b95e      	cbnz	r6, 800a19a <gmtime_r+0x142>
 800a182:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a186:	fbb1 f6f2 	udiv	r6, r1, r2
 800a18a:	fb02 1216 	mls	r2, r2, r6, r1
 800a18e:	fab2 f282 	clz	r2, r2
 800a192:	0952      	lsrs	r2, r2, #5
 800a194:	333b      	adds	r3, #59	; 0x3b
 800a196:	4413      	add	r3, r2
 800a198:	e7e2      	b.n	800a160 <gmtime_r+0x108>
 800a19a:	2201      	movs	r2, #1
 800a19c:	e7fa      	b.n	800a194 <gmtime_r+0x13c>
 800a19e:	bf00      	nop
 800a1a0:	00015180 	.word	0x00015180
 800a1a4:	00023ab1 	.word	0x00023ab1
 800a1a8:	fffdc54f 	.word	0xfffdc54f
 800a1ac:	00023ab0 	.word	0x00023ab0

0800a1b0 <__retarget_lock_init_recursive>:
 800a1b0:	4770      	bx	lr

0800a1b2 <__retarget_lock_acquire>:
 800a1b2:	4770      	bx	lr

0800a1b4 <__retarget_lock_acquire_recursive>:
 800a1b4:	4770      	bx	lr

0800a1b6 <__retarget_lock_release>:
 800a1b6:	4770      	bx	lr

0800a1b8 <__retarget_lock_release_recursive>:
 800a1b8:	4770      	bx	lr

0800a1ba <__swhatbuf_r>:
 800a1ba:	b570      	push	{r4, r5, r6, lr}
 800a1bc:	460e      	mov	r6, r1
 800a1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	b096      	sub	sp, #88	; 0x58
 800a1c6:	4614      	mov	r4, r2
 800a1c8:	461d      	mov	r5, r3
 800a1ca:	da08      	bge.n	800a1de <__swhatbuf_r+0x24>
 800a1cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	602a      	str	r2, [r5, #0]
 800a1d4:	061a      	lsls	r2, r3, #24
 800a1d6:	d410      	bmi.n	800a1fa <__swhatbuf_r+0x40>
 800a1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1dc:	e00e      	b.n	800a1fc <__swhatbuf_r+0x42>
 800a1de:	466a      	mov	r2, sp
 800a1e0:	f000 fdd4 	bl	800ad8c <_fstat_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	dbf1      	blt.n	800a1cc <__swhatbuf_r+0x12>
 800a1e8:	9a01      	ldr	r2, [sp, #4]
 800a1ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1f2:	425a      	negs	r2, r3
 800a1f4:	415a      	adcs	r2, r3
 800a1f6:	602a      	str	r2, [r5, #0]
 800a1f8:	e7ee      	b.n	800a1d8 <__swhatbuf_r+0x1e>
 800a1fa:	2340      	movs	r3, #64	; 0x40
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	b016      	add	sp, #88	; 0x58
 800a202:	bd70      	pop	{r4, r5, r6, pc}

0800a204 <__smakebuf_r>:
 800a204:	898b      	ldrh	r3, [r1, #12]
 800a206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a208:	079d      	lsls	r5, r3, #30
 800a20a:	4606      	mov	r6, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	d507      	bpl.n	800a220 <__smakebuf_r+0x1c>
 800a210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	2301      	movs	r3, #1
 800a21a:	6163      	str	r3, [r4, #20]
 800a21c:	b002      	add	sp, #8
 800a21e:	bd70      	pop	{r4, r5, r6, pc}
 800a220:	ab01      	add	r3, sp, #4
 800a222:	466a      	mov	r2, sp
 800a224:	f7ff ffc9 	bl	800a1ba <__swhatbuf_r>
 800a228:	9900      	ldr	r1, [sp, #0]
 800a22a:	4605      	mov	r5, r0
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7ff f81f 	bl	8009270 <_malloc_r>
 800a232:	b948      	cbnz	r0, 800a248 <__smakebuf_r+0x44>
 800a234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a238:	059a      	lsls	r2, r3, #22
 800a23a:	d4ef      	bmi.n	800a21c <__smakebuf_r+0x18>
 800a23c:	f023 0303 	bic.w	r3, r3, #3
 800a240:	f043 0302 	orr.w	r3, r3, #2
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	e7e3      	b.n	800a210 <__smakebuf_r+0xc>
 800a248:	4b0d      	ldr	r3, [pc, #52]	; (800a280 <__smakebuf_r+0x7c>)
 800a24a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	6020      	str	r0, [r4, #0]
 800a250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	9b00      	ldr	r3, [sp, #0]
 800a258:	6163      	str	r3, [r4, #20]
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	6120      	str	r0, [r4, #16]
 800a25e:	b15b      	cbz	r3, 800a278 <__smakebuf_r+0x74>
 800a260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a264:	4630      	mov	r0, r6
 800a266:	f000 fda3 	bl	800adb0 <_isatty_r>
 800a26a:	b128      	cbz	r0, 800a278 <__smakebuf_r+0x74>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	f043 0301 	orr.w	r3, r3, #1
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	89a0      	ldrh	r0, [r4, #12]
 800a27a:	4305      	orrs	r5, r0
 800a27c:	81a5      	strh	r5, [r4, #12]
 800a27e:	e7cd      	b.n	800a21c <__smakebuf_r+0x18>
 800a280:	08009e01 	.word	0x08009e01

0800a284 <__malloc_lock>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__malloc_lock+0x8>)
 800a286:	f7ff bf95 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 800a28a:	bf00      	nop
 800a28c:	2000101d 	.word	0x2000101d

0800a290 <__malloc_unlock>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__malloc_unlock+0x8>)
 800a292:	f7ff bf91 	b.w	800a1b8 <__retarget_lock_release_recursive>
 800a296:	bf00      	nop
 800a298:	2000101d 	.word	0x2000101d

0800a29c <__ssputs_r>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	688e      	ldr	r6, [r1, #8]
 800a2a2:	429e      	cmp	r6, r3
 800a2a4:	4682      	mov	sl, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	4690      	mov	r8, r2
 800a2aa:	461f      	mov	r7, r3
 800a2ac:	d838      	bhi.n	800a320 <__ssputs_r+0x84>
 800a2ae:	898a      	ldrh	r2, [r1, #12]
 800a2b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2b4:	d032      	beq.n	800a31c <__ssputs_r+0x80>
 800a2b6:	6825      	ldr	r5, [r4, #0]
 800a2b8:	6909      	ldr	r1, [r1, #16]
 800a2ba:	eba5 0901 	sub.w	r9, r5, r1
 800a2be:	6965      	ldr	r5, [r4, #20]
 800a2c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	444b      	add	r3, r9
 800a2cc:	106d      	asrs	r5, r5, #1
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	bf38      	it	cc
 800a2d2:	461d      	movcc	r5, r3
 800a2d4:	0553      	lsls	r3, r2, #21
 800a2d6:	d531      	bpl.n	800a33c <__ssputs_r+0xa0>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7fe ffc9 	bl	8009270 <_malloc_r>
 800a2de:	4606      	mov	r6, r0
 800a2e0:	b950      	cbnz	r0, 800a2f8 <__ssputs_r+0x5c>
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	f8ca 3000 	str.w	r3, [sl]
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f8:	6921      	ldr	r1, [r4, #16]
 800a2fa:	464a      	mov	r2, r9
 800a2fc:	f7fe fcc4 	bl	8008c88 <memcpy>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	6126      	str	r6, [r4, #16]
 800a30e:	6165      	str	r5, [r4, #20]
 800a310:	444e      	add	r6, r9
 800a312:	eba5 0509 	sub.w	r5, r5, r9
 800a316:	6026      	str	r6, [r4, #0]
 800a318:	60a5      	str	r5, [r4, #8]
 800a31a:	463e      	mov	r6, r7
 800a31c:	42be      	cmp	r6, r7
 800a31e:	d900      	bls.n	800a322 <__ssputs_r+0x86>
 800a320:	463e      	mov	r6, r7
 800a322:	6820      	ldr	r0, [r4, #0]
 800a324:	4632      	mov	r2, r6
 800a326:	4641      	mov	r1, r8
 800a328:	f000 fd64 	bl	800adf4 <memmove>
 800a32c:	68a3      	ldr	r3, [r4, #8]
 800a32e:	1b9b      	subs	r3, r3, r6
 800a330:	60a3      	str	r3, [r4, #8]
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	4433      	add	r3, r6
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	2000      	movs	r0, #0
 800a33a:	e7db      	b.n	800a2f4 <__ssputs_r+0x58>
 800a33c:	462a      	mov	r2, r5
 800a33e:	f000 fd73 	bl	800ae28 <_realloc_r>
 800a342:	4606      	mov	r6, r0
 800a344:	2800      	cmp	r0, #0
 800a346:	d1e1      	bne.n	800a30c <__ssputs_r+0x70>
 800a348:	6921      	ldr	r1, [r4, #16]
 800a34a:	4650      	mov	r0, sl
 800a34c:	f7fe ff24 	bl	8009198 <_free_r>
 800a350:	e7c7      	b.n	800a2e2 <__ssputs_r+0x46>
	...

0800a354 <_svfiprintf_r>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	4698      	mov	r8, r3
 800a35a:	898b      	ldrh	r3, [r1, #12]
 800a35c:	061b      	lsls	r3, r3, #24
 800a35e:	b09d      	sub	sp, #116	; 0x74
 800a360:	4607      	mov	r7, r0
 800a362:	460d      	mov	r5, r1
 800a364:	4614      	mov	r4, r2
 800a366:	d50e      	bpl.n	800a386 <_svfiprintf_r+0x32>
 800a368:	690b      	ldr	r3, [r1, #16]
 800a36a:	b963      	cbnz	r3, 800a386 <_svfiprintf_r+0x32>
 800a36c:	2140      	movs	r1, #64	; 0x40
 800a36e:	f7fe ff7f 	bl	8009270 <_malloc_r>
 800a372:	6028      	str	r0, [r5, #0]
 800a374:	6128      	str	r0, [r5, #16]
 800a376:	b920      	cbnz	r0, 800a382 <_svfiprintf_r+0x2e>
 800a378:	230c      	movs	r3, #12
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	e0d1      	b.n	800a526 <_svfiprintf_r+0x1d2>
 800a382:	2340      	movs	r3, #64	; 0x40
 800a384:	616b      	str	r3, [r5, #20]
 800a386:	2300      	movs	r3, #0
 800a388:	9309      	str	r3, [sp, #36]	; 0x24
 800a38a:	2320      	movs	r3, #32
 800a38c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a390:	f8cd 800c 	str.w	r8, [sp, #12]
 800a394:	2330      	movs	r3, #48	; 0x30
 800a396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a540 <_svfiprintf_r+0x1ec>
 800a39a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a39e:	f04f 0901 	mov.w	r9, #1
 800a3a2:	4623      	mov	r3, r4
 800a3a4:	469a      	mov	sl, r3
 800a3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3aa:	b10a      	cbz	r2, 800a3b0 <_svfiprintf_r+0x5c>
 800a3ac:	2a25      	cmp	r2, #37	; 0x25
 800a3ae:	d1f9      	bne.n	800a3a4 <_svfiprintf_r+0x50>
 800a3b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b4:	d00b      	beq.n	800a3ce <_svfiprintf_r+0x7a>
 800a3b6:	465b      	mov	r3, fp
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f7ff ff6d 	bl	800a29c <__ssputs_r>
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f000 80aa 	beq.w	800a51c <_svfiprintf_r+0x1c8>
 800a3c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ca:	445a      	add	r2, fp
 800a3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 80a2 	beq.w	800a51c <_svfiprintf_r+0x1c8>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e2:	f10a 0a01 	add.w	sl, sl, #1
 800a3e6:	9304      	str	r3, [sp, #16]
 800a3e8:	9307      	str	r3, [sp, #28]
 800a3ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f0:	4654      	mov	r4, sl
 800a3f2:	2205      	movs	r2, #5
 800a3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f8:	4851      	ldr	r0, [pc, #324]	; (800a540 <_svfiprintf_r+0x1ec>)
 800a3fa:	f7f5 ff01 	bl	8000200 <memchr>
 800a3fe:	9a04      	ldr	r2, [sp, #16]
 800a400:	b9d8      	cbnz	r0, 800a43a <_svfiprintf_r+0xe6>
 800a402:	06d0      	lsls	r0, r2, #27
 800a404:	bf44      	itt	mi
 800a406:	2320      	movmi	r3, #32
 800a408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40c:	0711      	lsls	r1, r2, #28
 800a40e:	bf44      	itt	mi
 800a410:	232b      	movmi	r3, #43	; 0x2b
 800a412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a416:	f89a 3000 	ldrb.w	r3, [sl]
 800a41a:	2b2a      	cmp	r3, #42	; 0x2a
 800a41c:	d015      	beq.n	800a44a <_svfiprintf_r+0xf6>
 800a41e:	9a07      	ldr	r2, [sp, #28]
 800a420:	4654      	mov	r4, sl
 800a422:	2000      	movs	r0, #0
 800a424:	f04f 0c0a 	mov.w	ip, #10
 800a428:	4621      	mov	r1, r4
 800a42a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a42e:	3b30      	subs	r3, #48	; 0x30
 800a430:	2b09      	cmp	r3, #9
 800a432:	d94e      	bls.n	800a4d2 <_svfiprintf_r+0x17e>
 800a434:	b1b0      	cbz	r0, 800a464 <_svfiprintf_r+0x110>
 800a436:	9207      	str	r2, [sp, #28]
 800a438:	e014      	b.n	800a464 <_svfiprintf_r+0x110>
 800a43a:	eba0 0308 	sub.w	r3, r0, r8
 800a43e:	fa09 f303 	lsl.w	r3, r9, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	46a2      	mov	sl, r4
 800a448:	e7d2      	b.n	800a3f0 <_svfiprintf_r+0x9c>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	1d19      	adds	r1, r3, #4
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	9103      	str	r1, [sp, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	bfbb      	ittet	lt
 800a456:	425b      	neglt	r3, r3
 800a458:	f042 0202 	orrlt.w	r2, r2, #2
 800a45c:	9307      	strge	r3, [sp, #28]
 800a45e:	9307      	strlt	r3, [sp, #28]
 800a460:	bfb8      	it	lt
 800a462:	9204      	strlt	r2, [sp, #16]
 800a464:	7823      	ldrb	r3, [r4, #0]
 800a466:	2b2e      	cmp	r3, #46	; 0x2e
 800a468:	d10c      	bne.n	800a484 <_svfiprintf_r+0x130>
 800a46a:	7863      	ldrb	r3, [r4, #1]
 800a46c:	2b2a      	cmp	r3, #42	; 0x2a
 800a46e:	d135      	bne.n	800a4dc <_svfiprintf_r+0x188>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	9203      	str	r2, [sp, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfb8      	it	lt
 800a47c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a480:	3402      	adds	r4, #2
 800a482:	9305      	str	r3, [sp, #20]
 800a484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a550 <_svfiprintf_r+0x1fc>
 800a488:	7821      	ldrb	r1, [r4, #0]
 800a48a:	2203      	movs	r2, #3
 800a48c:	4650      	mov	r0, sl
 800a48e:	f7f5 feb7 	bl	8000200 <memchr>
 800a492:	b140      	cbz	r0, 800a4a6 <_svfiprintf_r+0x152>
 800a494:	2340      	movs	r3, #64	; 0x40
 800a496:	eba0 000a 	sub.w	r0, r0, sl
 800a49a:	fa03 f000 	lsl.w	r0, r3, r0
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	4303      	orrs	r3, r0
 800a4a2:	3401      	adds	r4, #1
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4aa:	4826      	ldr	r0, [pc, #152]	; (800a544 <_svfiprintf_r+0x1f0>)
 800a4ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b0:	2206      	movs	r2, #6
 800a4b2:	f7f5 fea5 	bl	8000200 <memchr>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d038      	beq.n	800a52c <_svfiprintf_r+0x1d8>
 800a4ba:	4b23      	ldr	r3, [pc, #140]	; (800a548 <_svfiprintf_r+0x1f4>)
 800a4bc:	bb1b      	cbnz	r3, 800a506 <_svfiprintf_r+0x1b2>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	3307      	adds	r3, #7
 800a4c2:	f023 0307 	bic.w	r3, r3, #7
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4cc:	4433      	add	r3, r6
 800a4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d0:	e767      	b.n	800a3a2 <_svfiprintf_r+0x4e>
 800a4d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	2001      	movs	r0, #1
 800a4da:	e7a5      	b.n	800a428 <_svfiprintf_r+0xd4>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	3401      	adds	r4, #1
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	f04f 0c0a 	mov.w	ip, #10
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ee:	3a30      	subs	r2, #48	; 0x30
 800a4f0:	2a09      	cmp	r2, #9
 800a4f2:	d903      	bls.n	800a4fc <_svfiprintf_r+0x1a8>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0c5      	beq.n	800a484 <_svfiprintf_r+0x130>
 800a4f8:	9105      	str	r1, [sp, #20]
 800a4fa:	e7c3      	b.n	800a484 <_svfiprintf_r+0x130>
 800a4fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a500:	4604      	mov	r4, r0
 800a502:	2301      	movs	r3, #1
 800a504:	e7f0      	b.n	800a4e8 <_svfiprintf_r+0x194>
 800a506:	ab03      	add	r3, sp, #12
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	462a      	mov	r2, r5
 800a50c:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <_svfiprintf_r+0x1f8>)
 800a50e:	a904      	add	r1, sp, #16
 800a510:	4638      	mov	r0, r7
 800a512:	f3af 8000 	nop.w
 800a516:	1c42      	adds	r2, r0, #1
 800a518:	4606      	mov	r6, r0
 800a51a:	d1d6      	bne.n	800a4ca <_svfiprintf_r+0x176>
 800a51c:	89ab      	ldrh	r3, [r5, #12]
 800a51e:	065b      	lsls	r3, r3, #25
 800a520:	f53f af2c 	bmi.w	800a37c <_svfiprintf_r+0x28>
 800a524:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a526:	b01d      	add	sp, #116	; 0x74
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	ab03      	add	r3, sp, #12
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	462a      	mov	r2, r5
 800a532:	4b06      	ldr	r3, [pc, #24]	; (800a54c <_svfiprintf_r+0x1f8>)
 800a534:	a904      	add	r1, sp, #16
 800a536:	4638      	mov	r0, r7
 800a538:	f000 f9d4 	bl	800a8e4 <_printf_i>
 800a53c:	e7eb      	b.n	800a516 <_svfiprintf_r+0x1c2>
 800a53e:	bf00      	nop
 800a540:	0800c22c 	.word	0x0800c22c
 800a544:	0800c236 	.word	0x0800c236
 800a548:	00000000 	.word	0x00000000
 800a54c:	0800a29d 	.word	0x0800a29d
 800a550:	0800c232 	.word	0x0800c232

0800a554 <__sfputc_r>:
 800a554:	6893      	ldr	r3, [r2, #8]
 800a556:	3b01      	subs	r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	b410      	push	{r4}
 800a55c:	6093      	str	r3, [r2, #8]
 800a55e:	da08      	bge.n	800a572 <__sfputc_r+0x1e>
 800a560:	6994      	ldr	r4, [r2, #24]
 800a562:	42a3      	cmp	r3, r4
 800a564:	db01      	blt.n	800a56a <__sfputc_r+0x16>
 800a566:	290a      	cmp	r1, #10
 800a568:	d103      	bne.n	800a572 <__sfputc_r+0x1e>
 800a56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56e:	f7ff ba6f 	b.w	8009a50 <__swbuf_r>
 800a572:	6813      	ldr	r3, [r2, #0]
 800a574:	1c58      	adds	r0, r3, #1
 800a576:	6010      	str	r0, [r2, #0]
 800a578:	7019      	strb	r1, [r3, #0]
 800a57a:	4608      	mov	r0, r1
 800a57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <__sfputs_r>:
 800a582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a584:	4606      	mov	r6, r0
 800a586:	460f      	mov	r7, r1
 800a588:	4614      	mov	r4, r2
 800a58a:	18d5      	adds	r5, r2, r3
 800a58c:	42ac      	cmp	r4, r5
 800a58e:	d101      	bne.n	800a594 <__sfputs_r+0x12>
 800a590:	2000      	movs	r0, #0
 800a592:	e007      	b.n	800a5a4 <__sfputs_r+0x22>
 800a594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a598:	463a      	mov	r2, r7
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7ff ffda 	bl	800a554 <__sfputc_r>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d1f3      	bne.n	800a58c <__sfputs_r+0xa>
 800a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5a8 <_vfiprintf_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	460d      	mov	r5, r1
 800a5ae:	b09d      	sub	sp, #116	; 0x74
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	4698      	mov	r8, r3
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	b118      	cbz	r0, 800a5c0 <_vfiprintf_r+0x18>
 800a5b8:	6983      	ldr	r3, [r0, #24]
 800a5ba:	b90b      	cbnz	r3, 800a5c0 <_vfiprintf_r+0x18>
 800a5bc:	f7ff fc54 	bl	8009e68 <__sinit>
 800a5c0:	4b89      	ldr	r3, [pc, #548]	; (800a7e8 <_vfiprintf_r+0x240>)
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	d11b      	bne.n	800a5fe <_vfiprintf_r+0x56>
 800a5c6:	6875      	ldr	r5, [r6, #4]
 800a5c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ca:	07d9      	lsls	r1, r3, #31
 800a5cc:	d405      	bmi.n	800a5da <_vfiprintf_r+0x32>
 800a5ce:	89ab      	ldrh	r3, [r5, #12]
 800a5d0:	059a      	lsls	r2, r3, #22
 800a5d2:	d402      	bmi.n	800a5da <_vfiprintf_r+0x32>
 800a5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d6:	f7ff fded 	bl	800a1b4 <__retarget_lock_acquire_recursive>
 800a5da:	89ab      	ldrh	r3, [r5, #12]
 800a5dc:	071b      	lsls	r3, r3, #28
 800a5de:	d501      	bpl.n	800a5e4 <_vfiprintf_r+0x3c>
 800a5e0:	692b      	ldr	r3, [r5, #16]
 800a5e2:	b9eb      	cbnz	r3, 800a620 <_vfiprintf_r+0x78>
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f7ff fa84 	bl	8009af4 <__swsetup_r>
 800a5ec:	b1c0      	cbz	r0, 800a620 <_vfiprintf_r+0x78>
 800a5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f0:	07dc      	lsls	r4, r3, #31
 800a5f2:	d50e      	bpl.n	800a612 <_vfiprintf_r+0x6a>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	b01d      	add	sp, #116	; 0x74
 800a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fe:	4b7b      	ldr	r3, [pc, #492]	; (800a7ec <_vfiprintf_r+0x244>)
 800a600:	429d      	cmp	r5, r3
 800a602:	d101      	bne.n	800a608 <_vfiprintf_r+0x60>
 800a604:	68b5      	ldr	r5, [r6, #8]
 800a606:	e7df      	b.n	800a5c8 <_vfiprintf_r+0x20>
 800a608:	4b79      	ldr	r3, [pc, #484]	; (800a7f0 <_vfiprintf_r+0x248>)
 800a60a:	429d      	cmp	r5, r3
 800a60c:	bf08      	it	eq
 800a60e:	68f5      	ldreq	r5, [r6, #12]
 800a610:	e7da      	b.n	800a5c8 <_vfiprintf_r+0x20>
 800a612:	89ab      	ldrh	r3, [r5, #12]
 800a614:	0598      	lsls	r0, r3, #22
 800a616:	d4ed      	bmi.n	800a5f4 <_vfiprintf_r+0x4c>
 800a618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a61a:	f7ff fdcd 	bl	800a1b8 <__retarget_lock_release_recursive>
 800a61e:	e7e9      	b.n	800a5f4 <_vfiprintf_r+0x4c>
 800a620:	2300      	movs	r3, #0
 800a622:	9309      	str	r3, [sp, #36]	; 0x24
 800a624:	2320      	movs	r3, #32
 800a626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a62a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62e:	2330      	movs	r3, #48	; 0x30
 800a630:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7f4 <_vfiprintf_r+0x24c>
 800a634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a638:	f04f 0901 	mov.w	r9, #1
 800a63c:	4623      	mov	r3, r4
 800a63e:	469a      	mov	sl, r3
 800a640:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a644:	b10a      	cbz	r2, 800a64a <_vfiprintf_r+0xa2>
 800a646:	2a25      	cmp	r2, #37	; 0x25
 800a648:	d1f9      	bne.n	800a63e <_vfiprintf_r+0x96>
 800a64a:	ebba 0b04 	subs.w	fp, sl, r4
 800a64e:	d00b      	beq.n	800a668 <_vfiprintf_r+0xc0>
 800a650:	465b      	mov	r3, fp
 800a652:	4622      	mov	r2, r4
 800a654:	4629      	mov	r1, r5
 800a656:	4630      	mov	r0, r6
 800a658:	f7ff ff93 	bl	800a582 <__sfputs_r>
 800a65c:	3001      	adds	r0, #1
 800a65e:	f000 80aa 	beq.w	800a7b6 <_vfiprintf_r+0x20e>
 800a662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a664:	445a      	add	r2, fp
 800a666:	9209      	str	r2, [sp, #36]	; 0x24
 800a668:	f89a 3000 	ldrb.w	r3, [sl]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80a2 	beq.w	800a7b6 <_vfiprintf_r+0x20e>
 800a672:	2300      	movs	r3, #0
 800a674:	f04f 32ff 	mov.w	r2, #4294967295
 800a678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a67c:	f10a 0a01 	add.w	sl, sl, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	9307      	str	r3, [sp, #28]
 800a684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a688:	931a      	str	r3, [sp, #104]	; 0x68
 800a68a:	4654      	mov	r4, sl
 800a68c:	2205      	movs	r2, #5
 800a68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a692:	4858      	ldr	r0, [pc, #352]	; (800a7f4 <_vfiprintf_r+0x24c>)
 800a694:	f7f5 fdb4 	bl	8000200 <memchr>
 800a698:	9a04      	ldr	r2, [sp, #16]
 800a69a:	b9d8      	cbnz	r0, 800a6d4 <_vfiprintf_r+0x12c>
 800a69c:	06d1      	lsls	r1, r2, #27
 800a69e:	bf44      	itt	mi
 800a6a0:	2320      	movmi	r3, #32
 800a6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a6:	0713      	lsls	r3, r2, #28
 800a6a8:	bf44      	itt	mi
 800a6aa:	232b      	movmi	r3, #43	; 0x2b
 800a6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b6:	d015      	beq.n	800a6e4 <_vfiprintf_r+0x13c>
 800a6b8:	9a07      	ldr	r2, [sp, #28]
 800a6ba:	4654      	mov	r4, sl
 800a6bc:	2000      	movs	r0, #0
 800a6be:	f04f 0c0a 	mov.w	ip, #10
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c8:	3b30      	subs	r3, #48	; 0x30
 800a6ca:	2b09      	cmp	r3, #9
 800a6cc:	d94e      	bls.n	800a76c <_vfiprintf_r+0x1c4>
 800a6ce:	b1b0      	cbz	r0, 800a6fe <_vfiprintf_r+0x156>
 800a6d0:	9207      	str	r2, [sp, #28]
 800a6d2:	e014      	b.n	800a6fe <_vfiprintf_r+0x156>
 800a6d4:	eba0 0308 	sub.w	r3, r0, r8
 800a6d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	46a2      	mov	sl, r4
 800a6e2:	e7d2      	b.n	800a68a <_vfiprintf_r+0xe2>
 800a6e4:	9b03      	ldr	r3, [sp, #12]
 800a6e6:	1d19      	adds	r1, r3, #4
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	9103      	str	r1, [sp, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bfbb      	ittet	lt
 800a6f0:	425b      	neglt	r3, r3
 800a6f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f6:	9307      	strge	r3, [sp, #28]
 800a6f8:	9307      	strlt	r3, [sp, #28]
 800a6fa:	bfb8      	it	lt
 800a6fc:	9204      	strlt	r2, [sp, #16]
 800a6fe:	7823      	ldrb	r3, [r4, #0]
 800a700:	2b2e      	cmp	r3, #46	; 0x2e
 800a702:	d10c      	bne.n	800a71e <_vfiprintf_r+0x176>
 800a704:	7863      	ldrb	r3, [r4, #1]
 800a706:	2b2a      	cmp	r3, #42	; 0x2a
 800a708:	d135      	bne.n	800a776 <_vfiprintf_r+0x1ce>
 800a70a:	9b03      	ldr	r3, [sp, #12]
 800a70c:	1d1a      	adds	r2, r3, #4
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	9203      	str	r2, [sp, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	bfb8      	it	lt
 800a716:	f04f 33ff 	movlt.w	r3, #4294967295
 800a71a:	3402      	adds	r4, #2
 800a71c:	9305      	str	r3, [sp, #20]
 800a71e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a804 <_vfiprintf_r+0x25c>
 800a722:	7821      	ldrb	r1, [r4, #0]
 800a724:	2203      	movs	r2, #3
 800a726:	4650      	mov	r0, sl
 800a728:	f7f5 fd6a 	bl	8000200 <memchr>
 800a72c:	b140      	cbz	r0, 800a740 <_vfiprintf_r+0x198>
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	eba0 000a 	sub.w	r0, r0, sl
 800a734:	fa03 f000 	lsl.w	r0, r3, r0
 800a738:	9b04      	ldr	r3, [sp, #16]
 800a73a:	4303      	orrs	r3, r0
 800a73c:	3401      	adds	r4, #1
 800a73e:	9304      	str	r3, [sp, #16]
 800a740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a744:	482c      	ldr	r0, [pc, #176]	; (800a7f8 <_vfiprintf_r+0x250>)
 800a746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a74a:	2206      	movs	r2, #6
 800a74c:	f7f5 fd58 	bl	8000200 <memchr>
 800a750:	2800      	cmp	r0, #0
 800a752:	d03f      	beq.n	800a7d4 <_vfiprintf_r+0x22c>
 800a754:	4b29      	ldr	r3, [pc, #164]	; (800a7fc <_vfiprintf_r+0x254>)
 800a756:	bb1b      	cbnz	r3, 800a7a0 <_vfiprintf_r+0x1f8>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	3307      	adds	r3, #7
 800a75c:	f023 0307 	bic.w	r3, r3, #7
 800a760:	3308      	adds	r3, #8
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a766:	443b      	add	r3, r7
 800a768:	9309      	str	r3, [sp, #36]	; 0x24
 800a76a:	e767      	b.n	800a63c <_vfiprintf_r+0x94>
 800a76c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a770:	460c      	mov	r4, r1
 800a772:	2001      	movs	r0, #1
 800a774:	e7a5      	b.n	800a6c2 <_vfiprintf_r+0x11a>
 800a776:	2300      	movs	r3, #0
 800a778:	3401      	adds	r4, #1
 800a77a:	9305      	str	r3, [sp, #20]
 800a77c:	4619      	mov	r1, r3
 800a77e:	f04f 0c0a 	mov.w	ip, #10
 800a782:	4620      	mov	r0, r4
 800a784:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a788:	3a30      	subs	r2, #48	; 0x30
 800a78a:	2a09      	cmp	r2, #9
 800a78c:	d903      	bls.n	800a796 <_vfiprintf_r+0x1ee>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0c5      	beq.n	800a71e <_vfiprintf_r+0x176>
 800a792:	9105      	str	r1, [sp, #20]
 800a794:	e7c3      	b.n	800a71e <_vfiprintf_r+0x176>
 800a796:	fb0c 2101 	mla	r1, ip, r1, r2
 800a79a:	4604      	mov	r4, r0
 800a79c:	2301      	movs	r3, #1
 800a79e:	e7f0      	b.n	800a782 <_vfiprintf_r+0x1da>
 800a7a0:	ab03      	add	r3, sp, #12
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	462a      	mov	r2, r5
 800a7a6:	4b16      	ldr	r3, [pc, #88]	; (800a800 <_vfiprintf_r+0x258>)
 800a7a8:	a904      	add	r1, sp, #16
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	1c78      	adds	r0, r7, #1
 800a7b4:	d1d6      	bne.n	800a764 <_vfiprintf_r+0x1bc>
 800a7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7b8:	07d9      	lsls	r1, r3, #31
 800a7ba:	d405      	bmi.n	800a7c8 <_vfiprintf_r+0x220>
 800a7bc:	89ab      	ldrh	r3, [r5, #12]
 800a7be:	059a      	lsls	r2, r3, #22
 800a7c0:	d402      	bmi.n	800a7c8 <_vfiprintf_r+0x220>
 800a7c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7c4:	f7ff fcf8 	bl	800a1b8 <__retarget_lock_release_recursive>
 800a7c8:	89ab      	ldrh	r3, [r5, #12]
 800a7ca:	065b      	lsls	r3, r3, #25
 800a7cc:	f53f af12 	bmi.w	800a5f4 <_vfiprintf_r+0x4c>
 800a7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7d2:	e711      	b.n	800a5f8 <_vfiprintf_r+0x50>
 800a7d4:	ab03      	add	r3, sp, #12
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	462a      	mov	r2, r5
 800a7da:	4b09      	ldr	r3, [pc, #36]	; (800a800 <_vfiprintf_r+0x258>)
 800a7dc:	a904      	add	r1, sp, #16
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f000 f880 	bl	800a8e4 <_printf_i>
 800a7e4:	e7e4      	b.n	800a7b0 <_vfiprintf_r+0x208>
 800a7e6:	bf00      	nop
 800a7e8:	0800c1ec 	.word	0x0800c1ec
 800a7ec:	0800c20c 	.word	0x0800c20c
 800a7f0:	0800c1cc 	.word	0x0800c1cc
 800a7f4:	0800c22c 	.word	0x0800c22c
 800a7f8:	0800c236 	.word	0x0800c236
 800a7fc:	00000000 	.word	0x00000000
 800a800:	0800a583 	.word	0x0800a583
 800a804:	0800c232 	.word	0x0800c232

0800a808 <_printf_common>:
 800a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	4616      	mov	r6, r2
 800a80e:	4699      	mov	r9, r3
 800a810:	688a      	ldr	r2, [r1, #8]
 800a812:	690b      	ldr	r3, [r1, #16]
 800a814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a818:	4293      	cmp	r3, r2
 800a81a:	bfb8      	it	lt
 800a81c:	4613      	movlt	r3, r2
 800a81e:	6033      	str	r3, [r6, #0]
 800a820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a824:	4607      	mov	r7, r0
 800a826:	460c      	mov	r4, r1
 800a828:	b10a      	cbz	r2, 800a82e <_printf_common+0x26>
 800a82a:	3301      	adds	r3, #1
 800a82c:	6033      	str	r3, [r6, #0]
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	0699      	lsls	r1, r3, #26
 800a832:	bf42      	ittt	mi
 800a834:	6833      	ldrmi	r3, [r6, #0]
 800a836:	3302      	addmi	r3, #2
 800a838:	6033      	strmi	r3, [r6, #0]
 800a83a:	6825      	ldr	r5, [r4, #0]
 800a83c:	f015 0506 	ands.w	r5, r5, #6
 800a840:	d106      	bne.n	800a850 <_printf_common+0x48>
 800a842:	f104 0a19 	add.w	sl, r4, #25
 800a846:	68e3      	ldr	r3, [r4, #12]
 800a848:	6832      	ldr	r2, [r6, #0]
 800a84a:	1a9b      	subs	r3, r3, r2
 800a84c:	42ab      	cmp	r3, r5
 800a84e:	dc26      	bgt.n	800a89e <_printf_common+0x96>
 800a850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a854:	1e13      	subs	r3, r2, #0
 800a856:	6822      	ldr	r2, [r4, #0]
 800a858:	bf18      	it	ne
 800a85a:	2301      	movne	r3, #1
 800a85c:	0692      	lsls	r2, r2, #26
 800a85e:	d42b      	bmi.n	800a8b8 <_printf_common+0xb0>
 800a860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a864:	4649      	mov	r1, r9
 800a866:	4638      	mov	r0, r7
 800a868:	47c0      	blx	r8
 800a86a:	3001      	adds	r0, #1
 800a86c:	d01e      	beq.n	800a8ac <_printf_common+0xa4>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	68e5      	ldr	r5, [r4, #12]
 800a872:	6832      	ldr	r2, [r6, #0]
 800a874:	f003 0306 	and.w	r3, r3, #6
 800a878:	2b04      	cmp	r3, #4
 800a87a:	bf08      	it	eq
 800a87c:	1aad      	subeq	r5, r5, r2
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	6922      	ldr	r2, [r4, #16]
 800a882:	bf0c      	ite	eq
 800a884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a888:	2500      	movne	r5, #0
 800a88a:	4293      	cmp	r3, r2
 800a88c:	bfc4      	itt	gt
 800a88e:	1a9b      	subgt	r3, r3, r2
 800a890:	18ed      	addgt	r5, r5, r3
 800a892:	2600      	movs	r6, #0
 800a894:	341a      	adds	r4, #26
 800a896:	42b5      	cmp	r5, r6
 800a898:	d11a      	bne.n	800a8d0 <_printf_common+0xc8>
 800a89a:	2000      	movs	r0, #0
 800a89c:	e008      	b.n	800a8b0 <_printf_common+0xa8>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	47c0      	blx	r8
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d103      	bne.n	800a8b4 <_printf_common+0xac>
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	e7c6      	b.n	800a846 <_printf_common+0x3e>
 800a8b8:	18e1      	adds	r1, r4, r3
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	2030      	movs	r0, #48	; 0x30
 800a8be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8c2:	4422      	add	r2, r4
 800a8c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	e7c7      	b.n	800a860 <_printf_common+0x58>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	47c0      	blx	r8
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d0e6      	beq.n	800a8ac <_printf_common+0xa4>
 800a8de:	3601      	adds	r6, #1
 800a8e0:	e7d9      	b.n	800a896 <_printf_common+0x8e>
	...

0800a8e4 <_printf_i>:
 800a8e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e8:	7e0f      	ldrb	r7, [r1, #24]
 800a8ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8ec:	2f78      	cmp	r7, #120	; 0x78
 800a8ee:	4691      	mov	r9, r2
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	469a      	mov	sl, r3
 800a8f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8fa:	d807      	bhi.n	800a90c <_printf_i+0x28>
 800a8fc:	2f62      	cmp	r7, #98	; 0x62
 800a8fe:	d80a      	bhi.n	800a916 <_printf_i+0x32>
 800a900:	2f00      	cmp	r7, #0
 800a902:	f000 80d8 	beq.w	800aab6 <_printf_i+0x1d2>
 800a906:	2f58      	cmp	r7, #88	; 0x58
 800a908:	f000 80a3 	beq.w	800aa52 <_printf_i+0x16e>
 800a90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a914:	e03a      	b.n	800a98c <_printf_i+0xa8>
 800a916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a91a:	2b15      	cmp	r3, #21
 800a91c:	d8f6      	bhi.n	800a90c <_printf_i+0x28>
 800a91e:	a101      	add	r1, pc, #4	; (adr r1, 800a924 <_printf_i+0x40>)
 800a920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a924:	0800a97d 	.word	0x0800a97d
 800a928:	0800a991 	.word	0x0800a991
 800a92c:	0800a90d 	.word	0x0800a90d
 800a930:	0800a90d 	.word	0x0800a90d
 800a934:	0800a90d 	.word	0x0800a90d
 800a938:	0800a90d 	.word	0x0800a90d
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a90d 	.word	0x0800a90d
 800a944:	0800a90d 	.word	0x0800a90d
 800a948:	0800a90d 	.word	0x0800a90d
 800a94c:	0800a90d 	.word	0x0800a90d
 800a950:	0800aa9d 	.word	0x0800aa9d
 800a954:	0800a9c1 	.word	0x0800a9c1
 800a958:	0800aa7f 	.word	0x0800aa7f
 800a95c:	0800a90d 	.word	0x0800a90d
 800a960:	0800a90d 	.word	0x0800a90d
 800a964:	0800aabf 	.word	0x0800aabf
 800a968:	0800a90d 	.word	0x0800a90d
 800a96c:	0800a9c1 	.word	0x0800a9c1
 800a970:	0800a90d 	.word	0x0800a90d
 800a974:	0800a90d 	.word	0x0800a90d
 800a978:	0800aa87 	.word	0x0800aa87
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	1d1a      	adds	r2, r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	602a      	str	r2, [r5, #0]
 800a984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a98c:	2301      	movs	r3, #1
 800a98e:	e0a3      	b.n	800aad8 <_printf_i+0x1f4>
 800a990:	6820      	ldr	r0, [r4, #0]
 800a992:	6829      	ldr	r1, [r5, #0]
 800a994:	0606      	lsls	r6, r0, #24
 800a996:	f101 0304 	add.w	r3, r1, #4
 800a99a:	d50a      	bpl.n	800a9b2 <_printf_i+0xce>
 800a99c:	680e      	ldr	r6, [r1, #0]
 800a99e:	602b      	str	r3, [r5, #0]
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	da03      	bge.n	800a9ac <_printf_i+0xc8>
 800a9a4:	232d      	movs	r3, #45	; 0x2d
 800a9a6:	4276      	negs	r6, r6
 800a9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ac:	485e      	ldr	r0, [pc, #376]	; (800ab28 <_printf_i+0x244>)
 800a9ae:	230a      	movs	r3, #10
 800a9b0:	e019      	b.n	800a9e6 <_printf_i+0x102>
 800a9b2:	680e      	ldr	r6, [r1, #0]
 800a9b4:	602b      	str	r3, [r5, #0]
 800a9b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9ba:	bf18      	it	ne
 800a9bc:	b236      	sxthne	r6, r6
 800a9be:	e7ef      	b.n	800a9a0 <_printf_i+0xbc>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	6820      	ldr	r0, [r4, #0]
 800a9c4:	1d19      	adds	r1, r3, #4
 800a9c6:	6029      	str	r1, [r5, #0]
 800a9c8:	0601      	lsls	r1, r0, #24
 800a9ca:	d501      	bpl.n	800a9d0 <_printf_i+0xec>
 800a9cc:	681e      	ldr	r6, [r3, #0]
 800a9ce:	e002      	b.n	800a9d6 <_printf_i+0xf2>
 800a9d0:	0646      	lsls	r6, r0, #25
 800a9d2:	d5fb      	bpl.n	800a9cc <_printf_i+0xe8>
 800a9d4:	881e      	ldrh	r6, [r3, #0]
 800a9d6:	4854      	ldr	r0, [pc, #336]	; (800ab28 <_printf_i+0x244>)
 800a9d8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9da:	bf0c      	ite	eq
 800a9dc:	2308      	moveq	r3, #8
 800a9de:	230a      	movne	r3, #10
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9e6:	6865      	ldr	r5, [r4, #4]
 800a9e8:	60a5      	str	r5, [r4, #8]
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	bfa2      	ittt	ge
 800a9ee:	6821      	ldrge	r1, [r4, #0]
 800a9f0:	f021 0104 	bicge.w	r1, r1, #4
 800a9f4:	6021      	strge	r1, [r4, #0]
 800a9f6:	b90e      	cbnz	r6, 800a9fc <_printf_i+0x118>
 800a9f8:	2d00      	cmp	r5, #0
 800a9fa:	d04d      	beq.n	800aa98 <_printf_i+0x1b4>
 800a9fc:	4615      	mov	r5, r2
 800a9fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa02:	fb03 6711 	mls	r7, r3, r1, r6
 800aa06:	5dc7      	ldrb	r7, [r0, r7]
 800aa08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa0c:	4637      	mov	r7, r6
 800aa0e:	42bb      	cmp	r3, r7
 800aa10:	460e      	mov	r6, r1
 800aa12:	d9f4      	bls.n	800a9fe <_printf_i+0x11a>
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d10b      	bne.n	800aa30 <_printf_i+0x14c>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	07de      	lsls	r6, r3, #31
 800aa1c:	d508      	bpl.n	800aa30 <_printf_i+0x14c>
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	6861      	ldr	r1, [r4, #4]
 800aa22:	4299      	cmp	r1, r3
 800aa24:	bfde      	ittt	le
 800aa26:	2330      	movle	r3, #48	; 0x30
 800aa28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa30:	1b52      	subs	r2, r2, r5
 800aa32:	6122      	str	r2, [r4, #16]
 800aa34:	f8cd a000 	str.w	sl, [sp]
 800aa38:	464b      	mov	r3, r9
 800aa3a:	aa03      	add	r2, sp, #12
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4640      	mov	r0, r8
 800aa40:	f7ff fee2 	bl	800a808 <_printf_common>
 800aa44:	3001      	adds	r0, #1
 800aa46:	d14c      	bne.n	800aae2 <_printf_i+0x1fe>
 800aa48:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4c:	b004      	add	sp, #16
 800aa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa52:	4835      	ldr	r0, [pc, #212]	; (800ab28 <_printf_i+0x244>)
 800aa54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa58:	6829      	ldr	r1, [r5, #0]
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa60:	6029      	str	r1, [r5, #0]
 800aa62:	061d      	lsls	r5, r3, #24
 800aa64:	d514      	bpl.n	800aa90 <_printf_i+0x1ac>
 800aa66:	07df      	lsls	r7, r3, #31
 800aa68:	bf44      	itt	mi
 800aa6a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa6e:	6023      	strmi	r3, [r4, #0]
 800aa70:	b91e      	cbnz	r6, 800aa7a <_printf_i+0x196>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	f023 0320 	bic.w	r3, r3, #32
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	2310      	movs	r3, #16
 800aa7c:	e7b0      	b.n	800a9e0 <_printf_i+0xfc>
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	f043 0320 	orr.w	r3, r3, #32
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	2378      	movs	r3, #120	; 0x78
 800aa88:	4828      	ldr	r0, [pc, #160]	; (800ab2c <_printf_i+0x248>)
 800aa8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa8e:	e7e3      	b.n	800aa58 <_printf_i+0x174>
 800aa90:	0659      	lsls	r1, r3, #25
 800aa92:	bf48      	it	mi
 800aa94:	b2b6      	uxthmi	r6, r6
 800aa96:	e7e6      	b.n	800aa66 <_printf_i+0x182>
 800aa98:	4615      	mov	r5, r2
 800aa9a:	e7bb      	b.n	800aa14 <_printf_i+0x130>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	6826      	ldr	r6, [r4, #0]
 800aaa0:	6961      	ldr	r1, [r4, #20]
 800aaa2:	1d18      	adds	r0, r3, #4
 800aaa4:	6028      	str	r0, [r5, #0]
 800aaa6:	0635      	lsls	r5, r6, #24
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	d501      	bpl.n	800aab0 <_printf_i+0x1cc>
 800aaac:	6019      	str	r1, [r3, #0]
 800aaae:	e002      	b.n	800aab6 <_printf_i+0x1d2>
 800aab0:	0670      	lsls	r0, r6, #25
 800aab2:	d5fb      	bpl.n	800aaac <_printf_i+0x1c8>
 800aab4:	8019      	strh	r1, [r3, #0]
 800aab6:	2300      	movs	r3, #0
 800aab8:	6123      	str	r3, [r4, #16]
 800aaba:	4615      	mov	r5, r2
 800aabc:	e7ba      	b.n	800aa34 <_printf_i+0x150>
 800aabe:	682b      	ldr	r3, [r5, #0]
 800aac0:	1d1a      	adds	r2, r3, #4
 800aac2:	602a      	str	r2, [r5, #0]
 800aac4:	681d      	ldr	r5, [r3, #0]
 800aac6:	6862      	ldr	r2, [r4, #4]
 800aac8:	2100      	movs	r1, #0
 800aaca:	4628      	mov	r0, r5
 800aacc:	f7f5 fb98 	bl	8000200 <memchr>
 800aad0:	b108      	cbz	r0, 800aad6 <_printf_i+0x1f2>
 800aad2:	1b40      	subs	r0, r0, r5
 800aad4:	6060      	str	r0, [r4, #4]
 800aad6:	6863      	ldr	r3, [r4, #4]
 800aad8:	6123      	str	r3, [r4, #16]
 800aada:	2300      	movs	r3, #0
 800aadc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae0:	e7a8      	b.n	800aa34 <_printf_i+0x150>
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	462a      	mov	r2, r5
 800aae6:	4649      	mov	r1, r9
 800aae8:	4640      	mov	r0, r8
 800aaea:	47d0      	blx	sl
 800aaec:	3001      	adds	r0, #1
 800aaee:	d0ab      	beq.n	800aa48 <_printf_i+0x164>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	079b      	lsls	r3, r3, #30
 800aaf4:	d413      	bmi.n	800ab1e <_printf_i+0x23a>
 800aaf6:	68e0      	ldr	r0, [r4, #12]
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	4298      	cmp	r0, r3
 800aafc:	bfb8      	it	lt
 800aafe:	4618      	movlt	r0, r3
 800ab00:	e7a4      	b.n	800aa4c <_printf_i+0x168>
 800ab02:	2301      	movs	r3, #1
 800ab04:	4632      	mov	r2, r6
 800ab06:	4649      	mov	r1, r9
 800ab08:	4640      	mov	r0, r8
 800ab0a:	47d0      	blx	sl
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d09b      	beq.n	800aa48 <_printf_i+0x164>
 800ab10:	3501      	adds	r5, #1
 800ab12:	68e3      	ldr	r3, [r4, #12]
 800ab14:	9903      	ldr	r1, [sp, #12]
 800ab16:	1a5b      	subs	r3, r3, r1
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	dcf2      	bgt.n	800ab02 <_printf_i+0x21e>
 800ab1c:	e7eb      	b.n	800aaf6 <_printf_i+0x212>
 800ab1e:	2500      	movs	r5, #0
 800ab20:	f104 0619 	add.w	r6, r4, #25
 800ab24:	e7f5      	b.n	800ab12 <_printf_i+0x22e>
 800ab26:	bf00      	nop
 800ab28:	0800c23d 	.word	0x0800c23d
 800ab2c:	0800c24e 	.word	0x0800c24e

0800ab30 <siscanf>:
 800ab30:	b40e      	push	{r1, r2, r3}
 800ab32:	b510      	push	{r4, lr}
 800ab34:	b09f      	sub	sp, #124	; 0x7c
 800ab36:	ac21      	add	r4, sp, #132	; 0x84
 800ab38:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ab3c:	f854 2b04 	ldr.w	r2, [r4], #4
 800ab40:	9201      	str	r2, [sp, #4]
 800ab42:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ab46:	9004      	str	r0, [sp, #16]
 800ab48:	9008      	str	r0, [sp, #32]
 800ab4a:	f7f5 fb41 	bl	80001d0 <strlen>
 800ab4e:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <siscanf+0x50>)
 800ab50:	9005      	str	r0, [sp, #20]
 800ab52:	9009      	str	r0, [sp, #36]	; 0x24
 800ab54:	930d      	str	r3, [sp, #52]	; 0x34
 800ab56:	480b      	ldr	r0, [pc, #44]	; (800ab84 <siscanf+0x54>)
 800ab58:	9a01      	ldr	r2, [sp, #4]
 800ab5a:	6800      	ldr	r0, [r0, #0]
 800ab5c:	9403      	str	r4, [sp, #12]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9311      	str	r3, [sp, #68]	; 0x44
 800ab62:	9316      	str	r3, [sp, #88]	; 0x58
 800ab64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab68:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ab6c:	a904      	add	r1, sp, #16
 800ab6e:	4623      	mov	r3, r4
 800ab70:	f000 f9e4 	bl	800af3c <__ssvfiscanf_r>
 800ab74:	b01f      	add	sp, #124	; 0x7c
 800ab76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab7a:	b003      	add	sp, #12
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	0800abab 	.word	0x0800abab
 800ab84:	2000005c 	.word	0x2000005c

0800ab88 <__sread>:
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab90:	f000 fc9e 	bl	800b4d0 <_read_r>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	bfab      	itete	ge
 800ab98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab9c:	181b      	addge	r3, r3, r0
 800ab9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aba2:	bfac      	ite	ge
 800aba4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aba6:	81a3      	strhlt	r3, [r4, #12]
 800aba8:	bd10      	pop	{r4, pc}

0800abaa <__seofread>:
 800abaa:	2000      	movs	r0, #0
 800abac:	4770      	bx	lr

0800abae <__swrite>:
 800abae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb2:	461f      	mov	r7, r3
 800abb4:	898b      	ldrh	r3, [r1, #12]
 800abb6:	05db      	lsls	r3, r3, #23
 800abb8:	4605      	mov	r5, r0
 800abba:	460c      	mov	r4, r1
 800abbc:	4616      	mov	r6, r2
 800abbe:	d505      	bpl.n	800abcc <__swrite+0x1e>
 800abc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc4:	2302      	movs	r3, #2
 800abc6:	2200      	movs	r2, #0
 800abc8:	f000 f902 	bl	800add0 <_lseek_r>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	4632      	mov	r2, r6
 800abda:	463b      	mov	r3, r7
 800abdc:	4628      	mov	r0, r5
 800abde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	f000 b89d 	b.w	800ad20 <_write_r>

0800abe6 <__sseek>:
 800abe6:	b510      	push	{r4, lr}
 800abe8:	460c      	mov	r4, r1
 800abea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abee:	f000 f8ef 	bl	800add0 <_lseek_r>
 800abf2:	1c43      	adds	r3, r0, #1
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	bf15      	itete	ne
 800abf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800abfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac02:	81a3      	strheq	r3, [r4, #12]
 800ac04:	bf18      	it	ne
 800ac06:	81a3      	strhne	r3, [r4, #12]
 800ac08:	bd10      	pop	{r4, pc}

0800ac0a <__sclose>:
 800ac0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0e:	f000 b8a1 	b.w	800ad54 <_close_r>

0800ac12 <strcpy>:
 800ac12:	4603      	mov	r3, r0
 800ac14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac18:	f803 2b01 	strb.w	r2, [r3], #1
 800ac1c:	2a00      	cmp	r2, #0
 800ac1e:	d1f9      	bne.n	800ac14 <strcpy+0x2>
 800ac20:	4770      	bx	lr
	...

0800ac24 <_strtoul_l.constprop.0>:
 800ac24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac28:	4f36      	ldr	r7, [pc, #216]	; (800ad04 <_strtoul_l.constprop.0+0xe0>)
 800ac2a:	4686      	mov	lr, r0
 800ac2c:	460d      	mov	r5, r1
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac34:	5de6      	ldrb	r6, [r4, r7]
 800ac36:	f016 0608 	ands.w	r6, r6, #8
 800ac3a:	d1f8      	bne.n	800ac2e <_strtoul_l.constprop.0+0xa>
 800ac3c:	2c2d      	cmp	r4, #45	; 0x2d
 800ac3e:	d12f      	bne.n	800aca0 <_strtoul_l.constprop.0+0x7c>
 800ac40:	782c      	ldrb	r4, [r5, #0]
 800ac42:	2601      	movs	r6, #1
 800ac44:	1c85      	adds	r5, r0, #2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d057      	beq.n	800acfa <_strtoul_l.constprop.0+0xd6>
 800ac4a:	2b10      	cmp	r3, #16
 800ac4c:	d109      	bne.n	800ac62 <_strtoul_l.constprop.0+0x3e>
 800ac4e:	2c30      	cmp	r4, #48	; 0x30
 800ac50:	d107      	bne.n	800ac62 <_strtoul_l.constprop.0+0x3e>
 800ac52:	7828      	ldrb	r0, [r5, #0]
 800ac54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac58:	2858      	cmp	r0, #88	; 0x58
 800ac5a:	d149      	bne.n	800acf0 <_strtoul_l.constprop.0+0xcc>
 800ac5c:	786c      	ldrb	r4, [r5, #1]
 800ac5e:	2310      	movs	r3, #16
 800ac60:	3502      	adds	r5, #2
 800ac62:	f04f 38ff 	mov.w	r8, #4294967295
 800ac66:	2700      	movs	r7, #0
 800ac68:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac6c:	fb03 f908 	mul.w	r9, r3, r8
 800ac70:	ea6f 0909 	mvn.w	r9, r9
 800ac74:	4638      	mov	r0, r7
 800ac76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ac7a:	f1bc 0f09 	cmp.w	ip, #9
 800ac7e:	d814      	bhi.n	800acaa <_strtoul_l.constprop.0+0x86>
 800ac80:	4664      	mov	r4, ip
 800ac82:	42a3      	cmp	r3, r4
 800ac84:	dd22      	ble.n	800accc <_strtoul_l.constprop.0+0xa8>
 800ac86:	2f00      	cmp	r7, #0
 800ac88:	db1d      	blt.n	800acc6 <_strtoul_l.constprop.0+0xa2>
 800ac8a:	4580      	cmp	r8, r0
 800ac8c:	d31b      	bcc.n	800acc6 <_strtoul_l.constprop.0+0xa2>
 800ac8e:	d101      	bne.n	800ac94 <_strtoul_l.constprop.0+0x70>
 800ac90:	45a1      	cmp	r9, r4
 800ac92:	db18      	blt.n	800acc6 <_strtoul_l.constprop.0+0xa2>
 800ac94:	fb00 4003 	mla	r0, r0, r3, r4
 800ac98:	2701      	movs	r7, #1
 800ac9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac9e:	e7ea      	b.n	800ac76 <_strtoul_l.constprop.0+0x52>
 800aca0:	2c2b      	cmp	r4, #43	; 0x2b
 800aca2:	bf04      	itt	eq
 800aca4:	782c      	ldrbeq	r4, [r5, #0]
 800aca6:	1c85      	addeq	r5, r0, #2
 800aca8:	e7cd      	b.n	800ac46 <_strtoul_l.constprop.0+0x22>
 800acaa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800acae:	f1bc 0f19 	cmp.w	ip, #25
 800acb2:	d801      	bhi.n	800acb8 <_strtoul_l.constprop.0+0x94>
 800acb4:	3c37      	subs	r4, #55	; 0x37
 800acb6:	e7e4      	b.n	800ac82 <_strtoul_l.constprop.0+0x5e>
 800acb8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800acbc:	f1bc 0f19 	cmp.w	ip, #25
 800acc0:	d804      	bhi.n	800accc <_strtoul_l.constprop.0+0xa8>
 800acc2:	3c57      	subs	r4, #87	; 0x57
 800acc4:	e7dd      	b.n	800ac82 <_strtoul_l.constprop.0+0x5e>
 800acc6:	f04f 37ff 	mov.w	r7, #4294967295
 800acca:	e7e6      	b.n	800ac9a <_strtoul_l.constprop.0+0x76>
 800accc:	2f00      	cmp	r7, #0
 800acce:	da07      	bge.n	800ace0 <_strtoul_l.constprop.0+0xbc>
 800acd0:	2322      	movs	r3, #34	; 0x22
 800acd2:	f8ce 3000 	str.w	r3, [lr]
 800acd6:	f04f 30ff 	mov.w	r0, #4294967295
 800acda:	b932      	cbnz	r2, 800acea <_strtoul_l.constprop.0+0xc6>
 800acdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace0:	b106      	cbz	r6, 800ace4 <_strtoul_l.constprop.0+0xc0>
 800ace2:	4240      	negs	r0, r0
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	d0f9      	beq.n	800acdc <_strtoul_l.constprop.0+0xb8>
 800ace8:	b107      	cbz	r7, 800acec <_strtoul_l.constprop.0+0xc8>
 800acea:	1e69      	subs	r1, r5, #1
 800acec:	6011      	str	r1, [r2, #0]
 800acee:	e7f5      	b.n	800acdc <_strtoul_l.constprop.0+0xb8>
 800acf0:	2430      	movs	r4, #48	; 0x30
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1b5      	bne.n	800ac62 <_strtoul_l.constprop.0+0x3e>
 800acf6:	2308      	movs	r3, #8
 800acf8:	e7b3      	b.n	800ac62 <_strtoul_l.constprop.0+0x3e>
 800acfa:	2c30      	cmp	r4, #48	; 0x30
 800acfc:	d0a9      	beq.n	800ac52 <_strtoul_l.constprop.0+0x2e>
 800acfe:	230a      	movs	r3, #10
 800ad00:	e7af      	b.n	800ac62 <_strtoul_l.constprop.0+0x3e>
 800ad02:	bf00      	nop
 800ad04:	0800c260 	.word	0x0800c260

0800ad08 <_strtoul_r>:
 800ad08:	f7ff bf8c 	b.w	800ac24 <_strtoul_l.constprop.0>

0800ad0c <strtoul>:
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	460a      	mov	r2, r1
 800ad10:	4601      	mov	r1, r0
 800ad12:	4802      	ldr	r0, [pc, #8]	; (800ad1c <strtoul+0x10>)
 800ad14:	6800      	ldr	r0, [r0, #0]
 800ad16:	f7ff bf85 	b.w	800ac24 <_strtoul_l.constprop.0>
 800ad1a:	bf00      	nop
 800ad1c:	2000005c 	.word	0x2000005c

0800ad20 <_write_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	; (800ad40 <_write_r+0x20>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7f7 fb15 	bl	800235e <_write>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_write_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_write_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20001024 	.word	0x20001024

0800ad44 <abort>:
 800ad44:	b508      	push	{r3, lr}
 800ad46:	2006      	movs	r0, #6
 800ad48:	f000 fc34 	bl	800b5b4 <raise>
 800ad4c:	2001      	movs	r0, #1
 800ad4e:	f7f7 faeb 	bl	8002328 <_exit>
	...

0800ad54 <_close_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d06      	ldr	r5, [pc, #24]	; (800ad70 <_close_r+0x1c>)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	602b      	str	r3, [r5, #0]
 800ad60:	f7f7 fb46 	bl	80023f0 <_close>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d102      	bne.n	800ad6e <_close_r+0x1a>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	b103      	cbz	r3, 800ad6e <_close_r+0x1a>
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}
 800ad70:	20001024 	.word	0x20001024

0800ad74 <__env_lock>:
 800ad74:	4801      	ldr	r0, [pc, #4]	; (800ad7c <__env_lock+0x8>)
 800ad76:	f7ff ba1d 	b.w	800a1b4 <__retarget_lock_acquire_recursive>
 800ad7a:	bf00      	nop
 800ad7c:	2000101c 	.word	0x2000101c

0800ad80 <__env_unlock>:
 800ad80:	4801      	ldr	r0, [pc, #4]	; (800ad88 <__env_unlock+0x8>)
 800ad82:	f7ff ba19 	b.w	800a1b8 <__retarget_lock_release_recursive>
 800ad86:	bf00      	nop
 800ad88:	2000101c 	.word	0x2000101c

0800ad8c <_fstat_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4d07      	ldr	r5, [pc, #28]	; (800adac <_fstat_r+0x20>)
 800ad90:	2300      	movs	r3, #0
 800ad92:	4604      	mov	r4, r0
 800ad94:	4608      	mov	r0, r1
 800ad96:	4611      	mov	r1, r2
 800ad98:	602b      	str	r3, [r5, #0]
 800ad9a:	f7f7 fb35 	bl	8002408 <_fstat>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	d102      	bne.n	800ada8 <_fstat_r+0x1c>
 800ada2:	682b      	ldr	r3, [r5, #0]
 800ada4:	b103      	cbz	r3, 800ada8 <_fstat_r+0x1c>
 800ada6:	6023      	str	r3, [r4, #0]
 800ada8:	bd38      	pop	{r3, r4, r5, pc}
 800adaa:	bf00      	nop
 800adac:	20001024 	.word	0x20001024

0800adb0 <_isatty_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d06      	ldr	r5, [pc, #24]	; (800adcc <_isatty_r+0x1c>)
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	4608      	mov	r0, r1
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	f7f7 fb34 	bl	8002428 <_isatty>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_isatty_r+0x1a>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_isatty_r+0x1a>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	20001024 	.word	0x20001024

0800add0 <_lseek_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d07      	ldr	r5, [pc, #28]	; (800adf0 <_lseek_r+0x20>)
 800add4:	4604      	mov	r4, r0
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	2200      	movs	r2, #0
 800addc:	602a      	str	r2, [r5, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f7f7 fb2d 	bl	800243e <_lseek>
 800ade4:	1c43      	adds	r3, r0, #1
 800ade6:	d102      	bne.n	800adee <_lseek_r+0x1e>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	b103      	cbz	r3, 800adee <_lseek_r+0x1e>
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	20001024 	.word	0x20001024

0800adf4 <memmove>:
 800adf4:	4288      	cmp	r0, r1
 800adf6:	b510      	push	{r4, lr}
 800adf8:	eb01 0402 	add.w	r4, r1, r2
 800adfc:	d902      	bls.n	800ae04 <memmove+0x10>
 800adfe:	4284      	cmp	r4, r0
 800ae00:	4623      	mov	r3, r4
 800ae02:	d807      	bhi.n	800ae14 <memmove+0x20>
 800ae04:	1e43      	subs	r3, r0, #1
 800ae06:	42a1      	cmp	r1, r4
 800ae08:	d008      	beq.n	800ae1c <memmove+0x28>
 800ae0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae12:	e7f8      	b.n	800ae06 <memmove+0x12>
 800ae14:	4402      	add	r2, r0
 800ae16:	4601      	mov	r1, r0
 800ae18:	428a      	cmp	r2, r1
 800ae1a:	d100      	bne.n	800ae1e <memmove+0x2a>
 800ae1c:	bd10      	pop	{r4, pc}
 800ae1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae26:	e7f7      	b.n	800ae18 <memmove+0x24>

0800ae28 <_realloc_r>:
 800ae28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2c:	4680      	mov	r8, r0
 800ae2e:	4614      	mov	r4, r2
 800ae30:	460e      	mov	r6, r1
 800ae32:	b921      	cbnz	r1, 800ae3e <_realloc_r+0x16>
 800ae34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	4611      	mov	r1, r2
 800ae3a:	f7fe ba19 	b.w	8009270 <_malloc_r>
 800ae3e:	b92a      	cbnz	r2, 800ae4c <_realloc_r+0x24>
 800ae40:	f7fe f9aa 	bl	8009198 <_free_r>
 800ae44:	4625      	mov	r5, r4
 800ae46:	4628      	mov	r0, r5
 800ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4c:	f000 fc8c 	bl	800b768 <_malloc_usable_size_r>
 800ae50:	4284      	cmp	r4, r0
 800ae52:	4607      	mov	r7, r0
 800ae54:	d802      	bhi.n	800ae5c <_realloc_r+0x34>
 800ae56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae5a:	d812      	bhi.n	800ae82 <_realloc_r+0x5a>
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	4640      	mov	r0, r8
 800ae60:	f7fe fa06 	bl	8009270 <_malloc_r>
 800ae64:	4605      	mov	r5, r0
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d0ed      	beq.n	800ae46 <_realloc_r+0x1e>
 800ae6a:	42bc      	cmp	r4, r7
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	4631      	mov	r1, r6
 800ae70:	bf28      	it	cs
 800ae72:	463a      	movcs	r2, r7
 800ae74:	f7fd ff08 	bl	8008c88 <memcpy>
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	f7fe f98c 	bl	8009198 <_free_r>
 800ae80:	e7e1      	b.n	800ae46 <_realloc_r+0x1e>
 800ae82:	4635      	mov	r5, r6
 800ae84:	e7df      	b.n	800ae46 <_realloc_r+0x1e>

0800ae86 <_sungetc_r>:
 800ae86:	b538      	push	{r3, r4, r5, lr}
 800ae88:	1c4b      	adds	r3, r1, #1
 800ae8a:	4614      	mov	r4, r2
 800ae8c:	d103      	bne.n	800ae96 <_sungetc_r+0x10>
 800ae8e:	f04f 35ff 	mov.w	r5, #4294967295
 800ae92:	4628      	mov	r0, r5
 800ae94:	bd38      	pop	{r3, r4, r5, pc}
 800ae96:	8993      	ldrh	r3, [r2, #12]
 800ae98:	f023 0320 	bic.w	r3, r3, #32
 800ae9c:	8193      	strh	r3, [r2, #12]
 800ae9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aea0:	6852      	ldr	r2, [r2, #4]
 800aea2:	b2cd      	uxtb	r5, r1
 800aea4:	b18b      	cbz	r3, 800aeca <_sungetc_r+0x44>
 800aea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	dd08      	ble.n	800aebe <_sungetc_r+0x38>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	1e5a      	subs	r2, r3, #1
 800aeb0:	6022      	str	r2, [r4, #0]
 800aeb2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aeb6:	6863      	ldr	r3, [r4, #4]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	6063      	str	r3, [r4, #4]
 800aebc:	e7e9      	b.n	800ae92 <_sungetc_r+0xc>
 800aebe:	4621      	mov	r1, r4
 800aec0:	f000 fc18 	bl	800b6f4 <__submore>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d0f1      	beq.n	800aeac <_sungetc_r+0x26>
 800aec8:	e7e1      	b.n	800ae8e <_sungetc_r+0x8>
 800aeca:	6921      	ldr	r1, [r4, #16]
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	b151      	cbz	r1, 800aee6 <_sungetc_r+0x60>
 800aed0:	4299      	cmp	r1, r3
 800aed2:	d208      	bcs.n	800aee6 <_sungetc_r+0x60>
 800aed4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800aed8:	42a9      	cmp	r1, r5
 800aeda:	d104      	bne.n	800aee6 <_sungetc_r+0x60>
 800aedc:	3b01      	subs	r3, #1
 800aede:	3201      	adds	r2, #1
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	6062      	str	r2, [r4, #4]
 800aee4:	e7d5      	b.n	800ae92 <_sungetc_r+0xc>
 800aee6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800aeea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeee:	6363      	str	r3, [r4, #52]	; 0x34
 800aef0:	2303      	movs	r3, #3
 800aef2:	63a3      	str	r3, [r4, #56]	; 0x38
 800aef4:	4623      	mov	r3, r4
 800aef6:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aefa:	6023      	str	r3, [r4, #0]
 800aefc:	2301      	movs	r3, #1
 800aefe:	e7dc      	b.n	800aeba <_sungetc_r+0x34>

0800af00 <__ssrefill_r>:
 800af00:	b510      	push	{r4, lr}
 800af02:	460c      	mov	r4, r1
 800af04:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800af06:	b169      	cbz	r1, 800af24 <__ssrefill_r+0x24>
 800af08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af0c:	4299      	cmp	r1, r3
 800af0e:	d001      	beq.n	800af14 <__ssrefill_r+0x14>
 800af10:	f7fe f942 	bl	8009198 <_free_r>
 800af14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af16:	6063      	str	r3, [r4, #4]
 800af18:	2000      	movs	r0, #0
 800af1a:	6360      	str	r0, [r4, #52]	; 0x34
 800af1c:	b113      	cbz	r3, 800af24 <__ssrefill_r+0x24>
 800af1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd10      	pop	{r4, pc}
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	6023      	str	r3, [r4, #0]
 800af28:	2300      	movs	r3, #0
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	f043 0320 	orr.w	r3, r3, #32
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	f04f 30ff 	mov.w	r0, #4294967295
 800af38:	e7f3      	b.n	800af22 <__ssrefill_r+0x22>
	...

0800af3c <__ssvfiscanf_r>:
 800af3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af40:	460c      	mov	r4, r1
 800af42:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800af46:	2100      	movs	r1, #0
 800af48:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800af4c:	49a6      	ldr	r1, [pc, #664]	; (800b1e8 <__ssvfiscanf_r+0x2ac>)
 800af4e:	91a0      	str	r1, [sp, #640]	; 0x280
 800af50:	f10d 0804 	add.w	r8, sp, #4
 800af54:	49a5      	ldr	r1, [pc, #660]	; (800b1ec <__ssvfiscanf_r+0x2b0>)
 800af56:	4fa6      	ldr	r7, [pc, #664]	; (800b1f0 <__ssvfiscanf_r+0x2b4>)
 800af58:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b1f4 <__ssvfiscanf_r+0x2b8>
 800af5c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800af60:	4606      	mov	r6, r0
 800af62:	91a1      	str	r1, [sp, #644]	; 0x284
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	7813      	ldrb	r3, [r2, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f000 815a 	beq.w	800b222 <__ssvfiscanf_r+0x2e6>
 800af6e:	5dd9      	ldrb	r1, [r3, r7]
 800af70:	f011 0108 	ands.w	r1, r1, #8
 800af74:	f102 0501 	add.w	r5, r2, #1
 800af78:	d019      	beq.n	800afae <__ssvfiscanf_r+0x72>
 800af7a:	6863      	ldr	r3, [r4, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dd0f      	ble.n	800afa0 <__ssvfiscanf_r+0x64>
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	781a      	ldrb	r2, [r3, #0]
 800af84:	5cba      	ldrb	r2, [r7, r2]
 800af86:	0712      	lsls	r2, r2, #28
 800af88:	d401      	bmi.n	800af8e <__ssvfiscanf_r+0x52>
 800af8a:	462a      	mov	r2, r5
 800af8c:	e7eb      	b.n	800af66 <__ssvfiscanf_r+0x2a>
 800af8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af90:	3201      	adds	r2, #1
 800af92:	9245      	str	r2, [sp, #276]	; 0x114
 800af94:	6862      	ldr	r2, [r4, #4]
 800af96:	3301      	adds	r3, #1
 800af98:	3a01      	subs	r2, #1
 800af9a:	6062      	str	r2, [r4, #4]
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	e7ec      	b.n	800af7a <__ssvfiscanf_r+0x3e>
 800afa0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800afa2:	4621      	mov	r1, r4
 800afa4:	4630      	mov	r0, r6
 800afa6:	4798      	blx	r3
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d0e9      	beq.n	800af80 <__ssvfiscanf_r+0x44>
 800afac:	e7ed      	b.n	800af8a <__ssvfiscanf_r+0x4e>
 800afae:	2b25      	cmp	r3, #37	; 0x25
 800afb0:	d012      	beq.n	800afd8 <__ssvfiscanf_r+0x9c>
 800afb2:	469a      	mov	sl, r3
 800afb4:	6863      	ldr	r3, [r4, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f340 8091 	ble.w	800b0de <__ssvfiscanf_r+0x1a2>
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	7813      	ldrb	r3, [r2, #0]
 800afc0:	4553      	cmp	r3, sl
 800afc2:	f040 812e 	bne.w	800b222 <__ssvfiscanf_r+0x2e6>
 800afc6:	6863      	ldr	r3, [r4, #4]
 800afc8:	3b01      	subs	r3, #1
 800afca:	6063      	str	r3, [r4, #4]
 800afcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800afce:	3201      	adds	r2, #1
 800afd0:	3301      	adds	r3, #1
 800afd2:	6022      	str	r2, [r4, #0]
 800afd4:	9345      	str	r3, [sp, #276]	; 0x114
 800afd6:	e7d8      	b.n	800af8a <__ssvfiscanf_r+0x4e>
 800afd8:	9141      	str	r1, [sp, #260]	; 0x104
 800afda:	9143      	str	r1, [sp, #268]	; 0x10c
 800afdc:	7853      	ldrb	r3, [r2, #1]
 800afde:	2b2a      	cmp	r3, #42	; 0x2a
 800afe0:	bf02      	ittt	eq
 800afe2:	2310      	moveq	r3, #16
 800afe4:	1c95      	addeq	r5, r2, #2
 800afe6:	9341      	streq	r3, [sp, #260]	; 0x104
 800afe8:	220a      	movs	r2, #10
 800afea:	46aa      	mov	sl, r5
 800afec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800aff0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800aff4:	2b09      	cmp	r3, #9
 800aff6:	d91d      	bls.n	800b034 <__ssvfiscanf_r+0xf8>
 800aff8:	487e      	ldr	r0, [pc, #504]	; (800b1f4 <__ssvfiscanf_r+0x2b8>)
 800affa:	2203      	movs	r2, #3
 800affc:	f7f5 f900 	bl	8000200 <memchr>
 800b000:	b140      	cbz	r0, 800b014 <__ssvfiscanf_r+0xd8>
 800b002:	2301      	movs	r3, #1
 800b004:	eba0 0009 	sub.w	r0, r0, r9
 800b008:	fa03 f000 	lsl.w	r0, r3, r0
 800b00c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b00e:	4318      	orrs	r0, r3
 800b010:	9041      	str	r0, [sp, #260]	; 0x104
 800b012:	4655      	mov	r5, sl
 800b014:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b018:	2b78      	cmp	r3, #120	; 0x78
 800b01a:	d806      	bhi.n	800b02a <__ssvfiscanf_r+0xee>
 800b01c:	2b57      	cmp	r3, #87	; 0x57
 800b01e:	d810      	bhi.n	800b042 <__ssvfiscanf_r+0x106>
 800b020:	2b25      	cmp	r3, #37	; 0x25
 800b022:	d0c6      	beq.n	800afb2 <__ssvfiscanf_r+0x76>
 800b024:	d856      	bhi.n	800b0d4 <__ssvfiscanf_r+0x198>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d064      	beq.n	800b0f4 <__ssvfiscanf_r+0x1b8>
 800b02a:	2303      	movs	r3, #3
 800b02c:	9347      	str	r3, [sp, #284]	; 0x11c
 800b02e:	230a      	movs	r3, #10
 800b030:	9342      	str	r3, [sp, #264]	; 0x108
 800b032:	e071      	b.n	800b118 <__ssvfiscanf_r+0x1dc>
 800b034:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b036:	fb02 1103 	mla	r1, r2, r3, r1
 800b03a:	3930      	subs	r1, #48	; 0x30
 800b03c:	9143      	str	r1, [sp, #268]	; 0x10c
 800b03e:	4655      	mov	r5, sl
 800b040:	e7d3      	b.n	800afea <__ssvfiscanf_r+0xae>
 800b042:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b046:	2a20      	cmp	r2, #32
 800b048:	d8ef      	bhi.n	800b02a <__ssvfiscanf_r+0xee>
 800b04a:	a101      	add	r1, pc, #4	; (adr r1, 800b050 <__ssvfiscanf_r+0x114>)
 800b04c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b050:	0800b103 	.word	0x0800b103
 800b054:	0800b02b 	.word	0x0800b02b
 800b058:	0800b02b 	.word	0x0800b02b
 800b05c:	0800b161 	.word	0x0800b161
 800b060:	0800b02b 	.word	0x0800b02b
 800b064:	0800b02b 	.word	0x0800b02b
 800b068:	0800b02b 	.word	0x0800b02b
 800b06c:	0800b02b 	.word	0x0800b02b
 800b070:	0800b02b 	.word	0x0800b02b
 800b074:	0800b02b 	.word	0x0800b02b
 800b078:	0800b02b 	.word	0x0800b02b
 800b07c:	0800b177 	.word	0x0800b177
 800b080:	0800b14d 	.word	0x0800b14d
 800b084:	0800b0db 	.word	0x0800b0db
 800b088:	0800b0db 	.word	0x0800b0db
 800b08c:	0800b0db 	.word	0x0800b0db
 800b090:	0800b02b 	.word	0x0800b02b
 800b094:	0800b151 	.word	0x0800b151
 800b098:	0800b02b 	.word	0x0800b02b
 800b09c:	0800b02b 	.word	0x0800b02b
 800b0a0:	0800b02b 	.word	0x0800b02b
 800b0a4:	0800b02b 	.word	0x0800b02b
 800b0a8:	0800b187 	.word	0x0800b187
 800b0ac:	0800b159 	.word	0x0800b159
 800b0b0:	0800b0fb 	.word	0x0800b0fb
 800b0b4:	0800b02b 	.word	0x0800b02b
 800b0b8:	0800b02b 	.word	0x0800b02b
 800b0bc:	0800b183 	.word	0x0800b183
 800b0c0:	0800b02b 	.word	0x0800b02b
 800b0c4:	0800b14d 	.word	0x0800b14d
 800b0c8:	0800b02b 	.word	0x0800b02b
 800b0cc:	0800b02b 	.word	0x0800b02b
 800b0d0:	0800b103 	.word	0x0800b103
 800b0d4:	3b45      	subs	r3, #69	; 0x45
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d8a7      	bhi.n	800b02a <__ssvfiscanf_r+0xee>
 800b0da:	2305      	movs	r3, #5
 800b0dc:	e01b      	b.n	800b116 <__ssvfiscanf_r+0x1da>
 800b0de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4798      	blx	r3
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f43f af68 	beq.w	800afbc <__ssvfiscanf_r+0x80>
 800b0ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f040 808d 	bne.w	800b20e <__ssvfiscanf_r+0x2d2>
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f8:	e08f      	b.n	800b21a <__ssvfiscanf_r+0x2de>
 800b0fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0fc:	f042 0220 	orr.w	r2, r2, #32
 800b100:	9241      	str	r2, [sp, #260]	; 0x104
 800b102:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b108:	9241      	str	r2, [sp, #260]	; 0x104
 800b10a:	2210      	movs	r2, #16
 800b10c:	2b6f      	cmp	r3, #111	; 0x6f
 800b10e:	9242      	str	r2, [sp, #264]	; 0x108
 800b110:	bf34      	ite	cc
 800b112:	2303      	movcc	r3, #3
 800b114:	2304      	movcs	r3, #4
 800b116:	9347      	str	r3, [sp, #284]	; 0x11c
 800b118:	6863      	ldr	r3, [r4, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	dd42      	ble.n	800b1a4 <__ssvfiscanf_r+0x268>
 800b11e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b120:	0659      	lsls	r1, r3, #25
 800b122:	d404      	bmi.n	800b12e <__ssvfiscanf_r+0x1f2>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	781a      	ldrb	r2, [r3, #0]
 800b128:	5cba      	ldrb	r2, [r7, r2]
 800b12a:	0712      	lsls	r2, r2, #28
 800b12c:	d441      	bmi.n	800b1b2 <__ssvfiscanf_r+0x276>
 800b12e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b130:	2b02      	cmp	r3, #2
 800b132:	dc50      	bgt.n	800b1d6 <__ssvfiscanf_r+0x29a>
 800b134:	466b      	mov	r3, sp
 800b136:	4622      	mov	r2, r4
 800b138:	a941      	add	r1, sp, #260	; 0x104
 800b13a:	4630      	mov	r0, r6
 800b13c:	f000 f876 	bl	800b22c <_scanf_chars>
 800b140:	2801      	cmp	r0, #1
 800b142:	d06e      	beq.n	800b222 <__ssvfiscanf_r+0x2e6>
 800b144:	2802      	cmp	r0, #2
 800b146:	f47f af20 	bne.w	800af8a <__ssvfiscanf_r+0x4e>
 800b14a:	e7cf      	b.n	800b0ec <__ssvfiscanf_r+0x1b0>
 800b14c:	220a      	movs	r2, #10
 800b14e:	e7dd      	b.n	800b10c <__ssvfiscanf_r+0x1d0>
 800b150:	2300      	movs	r3, #0
 800b152:	9342      	str	r3, [sp, #264]	; 0x108
 800b154:	2303      	movs	r3, #3
 800b156:	e7de      	b.n	800b116 <__ssvfiscanf_r+0x1da>
 800b158:	2308      	movs	r3, #8
 800b15a:	9342      	str	r3, [sp, #264]	; 0x108
 800b15c:	2304      	movs	r3, #4
 800b15e:	e7da      	b.n	800b116 <__ssvfiscanf_r+0x1da>
 800b160:	4629      	mov	r1, r5
 800b162:	4640      	mov	r0, r8
 800b164:	f000 f9c6 	bl	800b4f4 <__sccl>
 800b168:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b16e:	9341      	str	r3, [sp, #260]	; 0x104
 800b170:	4605      	mov	r5, r0
 800b172:	2301      	movs	r3, #1
 800b174:	e7cf      	b.n	800b116 <__ssvfiscanf_r+0x1da>
 800b176:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b17c:	9341      	str	r3, [sp, #260]	; 0x104
 800b17e:	2300      	movs	r3, #0
 800b180:	e7c9      	b.n	800b116 <__ssvfiscanf_r+0x1da>
 800b182:	2302      	movs	r3, #2
 800b184:	e7c7      	b.n	800b116 <__ssvfiscanf_r+0x1da>
 800b186:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b188:	06c3      	lsls	r3, r0, #27
 800b18a:	f53f aefe 	bmi.w	800af8a <__ssvfiscanf_r+0x4e>
 800b18e:	9b00      	ldr	r3, [sp, #0]
 800b190:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b192:	1d19      	adds	r1, r3, #4
 800b194:	9100      	str	r1, [sp, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f010 0f01 	tst.w	r0, #1
 800b19c:	bf14      	ite	ne
 800b19e:	801a      	strhne	r2, [r3, #0]
 800b1a0:	601a      	streq	r2, [r3, #0]
 800b1a2:	e6f2      	b.n	800af8a <__ssvfiscanf_r+0x4e>
 800b1a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4798      	blx	r3
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0b6      	beq.n	800b11e <__ssvfiscanf_r+0x1e2>
 800b1b0:	e79c      	b.n	800b0ec <__ssvfiscanf_r+0x1b0>
 800b1b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b1b4:	3201      	adds	r2, #1
 800b1b6:	9245      	str	r2, [sp, #276]	; 0x114
 800b1b8:	6862      	ldr	r2, [r4, #4]
 800b1ba:	3a01      	subs	r2, #1
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	6062      	str	r2, [r4, #4]
 800b1c0:	dd02      	ble.n	800b1c8 <__ssvfiscanf_r+0x28c>
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	e7ad      	b.n	800b124 <__ssvfiscanf_r+0x1e8>
 800b1c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	4798      	blx	r3
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d0a7      	beq.n	800b124 <__ssvfiscanf_r+0x1e8>
 800b1d4:	e78a      	b.n	800b0ec <__ssvfiscanf_r+0x1b0>
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	dc0e      	bgt.n	800b1f8 <__ssvfiscanf_r+0x2bc>
 800b1da:	466b      	mov	r3, sp
 800b1dc:	4622      	mov	r2, r4
 800b1de:	a941      	add	r1, sp, #260	; 0x104
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 f87d 	bl	800b2e0 <_scanf_i>
 800b1e6:	e7ab      	b.n	800b140 <__ssvfiscanf_r+0x204>
 800b1e8:	0800ae87 	.word	0x0800ae87
 800b1ec:	0800af01 	.word	0x0800af01
 800b1f0:	0800c260 	.word	0x0800c260
 800b1f4:	0800c232 	.word	0x0800c232
 800b1f8:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <__ssvfiscanf_r+0x2ec>)
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f43f aec5 	beq.w	800af8a <__ssvfiscanf_r+0x4e>
 800b200:	466b      	mov	r3, sp
 800b202:	4622      	mov	r2, r4
 800b204:	a941      	add	r1, sp, #260	; 0x104
 800b206:	4630      	mov	r0, r6
 800b208:	f3af 8000 	nop.w
 800b20c:	e798      	b.n	800b140 <__ssvfiscanf_r+0x204>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b214:	bf18      	it	ne
 800b216:	f04f 30ff 	movne.w	r0, #4294967295
 800b21a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b222:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b224:	e7f9      	b.n	800b21a <__ssvfiscanf_r+0x2de>
 800b226:	bf00      	nop
 800b228:	00000000 	.word	0x00000000

0800b22c <_scanf_chars>:
 800b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b230:	4615      	mov	r5, r2
 800b232:	688a      	ldr	r2, [r1, #8]
 800b234:	4680      	mov	r8, r0
 800b236:	460c      	mov	r4, r1
 800b238:	b932      	cbnz	r2, 800b248 <_scanf_chars+0x1c>
 800b23a:	698a      	ldr	r2, [r1, #24]
 800b23c:	2a00      	cmp	r2, #0
 800b23e:	bf0c      	ite	eq
 800b240:	2201      	moveq	r2, #1
 800b242:	f04f 32ff 	movne.w	r2, #4294967295
 800b246:	608a      	str	r2, [r1, #8]
 800b248:	6822      	ldr	r2, [r4, #0]
 800b24a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b2dc <_scanf_chars+0xb0>
 800b24e:	06d1      	lsls	r1, r2, #27
 800b250:	bf5f      	itttt	pl
 800b252:	681a      	ldrpl	r2, [r3, #0]
 800b254:	1d11      	addpl	r1, r2, #4
 800b256:	6019      	strpl	r1, [r3, #0]
 800b258:	6816      	ldrpl	r6, [r2, #0]
 800b25a:	2700      	movs	r7, #0
 800b25c:	69a0      	ldr	r0, [r4, #24]
 800b25e:	b188      	cbz	r0, 800b284 <_scanf_chars+0x58>
 800b260:	2801      	cmp	r0, #1
 800b262:	d107      	bne.n	800b274 <_scanf_chars+0x48>
 800b264:	682a      	ldr	r2, [r5, #0]
 800b266:	7811      	ldrb	r1, [r2, #0]
 800b268:	6962      	ldr	r2, [r4, #20]
 800b26a:	5c52      	ldrb	r2, [r2, r1]
 800b26c:	b952      	cbnz	r2, 800b284 <_scanf_chars+0x58>
 800b26e:	2f00      	cmp	r7, #0
 800b270:	d031      	beq.n	800b2d6 <_scanf_chars+0xaa>
 800b272:	e022      	b.n	800b2ba <_scanf_chars+0x8e>
 800b274:	2802      	cmp	r0, #2
 800b276:	d120      	bne.n	800b2ba <_scanf_chars+0x8e>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b280:	071b      	lsls	r3, r3, #28
 800b282:	d41a      	bmi.n	800b2ba <_scanf_chars+0x8e>
 800b284:	6823      	ldr	r3, [r4, #0]
 800b286:	06da      	lsls	r2, r3, #27
 800b288:	bf5e      	ittt	pl
 800b28a:	682b      	ldrpl	r3, [r5, #0]
 800b28c:	781b      	ldrbpl	r3, [r3, #0]
 800b28e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b292:	682a      	ldr	r2, [r5, #0]
 800b294:	686b      	ldr	r3, [r5, #4]
 800b296:	3201      	adds	r2, #1
 800b298:	602a      	str	r2, [r5, #0]
 800b29a:	68a2      	ldr	r2, [r4, #8]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	3a01      	subs	r2, #1
 800b2a0:	606b      	str	r3, [r5, #4]
 800b2a2:	3701      	adds	r7, #1
 800b2a4:	60a2      	str	r2, [r4, #8]
 800b2a6:	b142      	cbz	r2, 800b2ba <_scanf_chars+0x8e>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dcd7      	bgt.n	800b25c <_scanf_chars+0x30>
 800b2ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4798      	blx	r3
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d0d0      	beq.n	800b25c <_scanf_chars+0x30>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	f013 0310 	ands.w	r3, r3, #16
 800b2c0:	d105      	bne.n	800b2ce <_scanf_chars+0xa2>
 800b2c2:	68e2      	ldr	r2, [r4, #12]
 800b2c4:	3201      	adds	r2, #1
 800b2c6:	60e2      	str	r2, [r4, #12]
 800b2c8:	69a2      	ldr	r2, [r4, #24]
 800b2ca:	b102      	cbz	r2, 800b2ce <_scanf_chars+0xa2>
 800b2cc:	7033      	strb	r3, [r6, #0]
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	443b      	add	r3, r7
 800b2d2:	6123      	str	r3, [r4, #16]
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2da:	bf00      	nop
 800b2dc:	0800c260 	.word	0x0800c260

0800b2e0 <_scanf_i>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	4698      	mov	r8, r3
 800b2e6:	4b76      	ldr	r3, [pc, #472]	; (800b4c0 <_scanf_i+0x1e0>)
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	4682      	mov	sl, r0
 800b2ec:	4616      	mov	r6, r2
 800b2ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	ab03      	add	r3, sp, #12
 800b2f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b2fa:	4b72      	ldr	r3, [pc, #456]	; (800b4c4 <_scanf_i+0x1e4>)
 800b2fc:	69a1      	ldr	r1, [r4, #24]
 800b2fe:	4a72      	ldr	r2, [pc, #456]	; (800b4c8 <_scanf_i+0x1e8>)
 800b300:	2903      	cmp	r1, #3
 800b302:	bf18      	it	ne
 800b304:	461a      	movne	r2, r3
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	9201      	str	r2, [sp, #4]
 800b30a:	1e5a      	subs	r2, r3, #1
 800b30c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b310:	bf88      	it	hi
 800b312:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b316:	4627      	mov	r7, r4
 800b318:	bf82      	ittt	hi
 800b31a:	eb03 0905 	addhi.w	r9, r3, r5
 800b31e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b322:	60a3      	strhi	r3, [r4, #8]
 800b324:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b328:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b32c:	bf98      	it	ls
 800b32e:	f04f 0900 	movls.w	r9, #0
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	463d      	mov	r5, r7
 800b336:	f04f 0b00 	mov.w	fp, #0
 800b33a:	6831      	ldr	r1, [r6, #0]
 800b33c:	ab03      	add	r3, sp, #12
 800b33e:	7809      	ldrb	r1, [r1, #0]
 800b340:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b344:	2202      	movs	r2, #2
 800b346:	f7f4 ff5b 	bl	8000200 <memchr>
 800b34a:	b328      	cbz	r0, 800b398 <_scanf_i+0xb8>
 800b34c:	f1bb 0f01 	cmp.w	fp, #1
 800b350:	d159      	bne.n	800b406 <_scanf_i+0x126>
 800b352:	6862      	ldr	r2, [r4, #4]
 800b354:	b92a      	cbnz	r2, 800b362 <_scanf_i+0x82>
 800b356:	6822      	ldr	r2, [r4, #0]
 800b358:	2308      	movs	r3, #8
 800b35a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b35e:	6063      	str	r3, [r4, #4]
 800b360:	6022      	str	r2, [r4, #0]
 800b362:	6822      	ldr	r2, [r4, #0]
 800b364:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b368:	6022      	str	r2, [r4, #0]
 800b36a:	68a2      	ldr	r2, [r4, #8]
 800b36c:	1e51      	subs	r1, r2, #1
 800b36e:	60a1      	str	r1, [r4, #8]
 800b370:	b192      	cbz	r2, 800b398 <_scanf_i+0xb8>
 800b372:	6832      	ldr	r2, [r6, #0]
 800b374:	1c51      	adds	r1, r2, #1
 800b376:	6031      	str	r1, [r6, #0]
 800b378:	7812      	ldrb	r2, [r2, #0]
 800b37a:	f805 2b01 	strb.w	r2, [r5], #1
 800b37e:	6872      	ldr	r2, [r6, #4]
 800b380:	3a01      	subs	r2, #1
 800b382:	2a00      	cmp	r2, #0
 800b384:	6072      	str	r2, [r6, #4]
 800b386:	dc07      	bgt.n	800b398 <_scanf_i+0xb8>
 800b388:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b38c:	4631      	mov	r1, r6
 800b38e:	4650      	mov	r0, sl
 800b390:	4790      	blx	r2
 800b392:	2800      	cmp	r0, #0
 800b394:	f040 8085 	bne.w	800b4a2 <_scanf_i+0x1c2>
 800b398:	f10b 0b01 	add.w	fp, fp, #1
 800b39c:	f1bb 0f03 	cmp.w	fp, #3
 800b3a0:	d1cb      	bne.n	800b33a <_scanf_i+0x5a>
 800b3a2:	6863      	ldr	r3, [r4, #4]
 800b3a4:	b90b      	cbnz	r3, 800b3aa <_scanf_i+0xca>
 800b3a6:	230a      	movs	r3, #10
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	6863      	ldr	r3, [r4, #4]
 800b3ac:	4947      	ldr	r1, [pc, #284]	; (800b4cc <_scanf_i+0x1ec>)
 800b3ae:	6960      	ldr	r0, [r4, #20]
 800b3b0:	1ac9      	subs	r1, r1, r3
 800b3b2:	f000 f89f 	bl	800b4f4 <__sccl>
 800b3b6:	f04f 0b00 	mov.w	fp, #0
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	6822      	ldr	r2, [r4, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d03d      	beq.n	800b43e <_scanf_i+0x15e>
 800b3c2:	6831      	ldr	r1, [r6, #0]
 800b3c4:	6960      	ldr	r0, [r4, #20]
 800b3c6:	f891 c000 	ldrb.w	ip, [r1]
 800b3ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d035      	beq.n	800b43e <_scanf_i+0x15e>
 800b3d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b3d6:	d124      	bne.n	800b422 <_scanf_i+0x142>
 800b3d8:	0510      	lsls	r0, r2, #20
 800b3da:	d522      	bpl.n	800b422 <_scanf_i+0x142>
 800b3dc:	f10b 0b01 	add.w	fp, fp, #1
 800b3e0:	f1b9 0f00 	cmp.w	r9, #0
 800b3e4:	d003      	beq.n	800b3ee <_scanf_i+0x10e>
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3ec:	60a3      	str	r3, [r4, #8]
 800b3ee:	6873      	ldr	r3, [r6, #4]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	6073      	str	r3, [r6, #4]
 800b3f6:	dd1b      	ble.n	800b430 <_scanf_i+0x150>
 800b3f8:	6833      	ldr	r3, [r6, #0]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	6033      	str	r3, [r6, #0]
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	3b01      	subs	r3, #1
 800b402:	60a3      	str	r3, [r4, #8]
 800b404:	e7d9      	b.n	800b3ba <_scanf_i+0xda>
 800b406:	f1bb 0f02 	cmp.w	fp, #2
 800b40a:	d1ae      	bne.n	800b36a <_scanf_i+0x8a>
 800b40c:	6822      	ldr	r2, [r4, #0]
 800b40e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b412:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b416:	d1bf      	bne.n	800b398 <_scanf_i+0xb8>
 800b418:	2310      	movs	r3, #16
 800b41a:	6063      	str	r3, [r4, #4]
 800b41c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b420:	e7a2      	b.n	800b368 <_scanf_i+0x88>
 800b422:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b426:	6022      	str	r2, [r4, #0]
 800b428:	780b      	ldrb	r3, [r1, #0]
 800b42a:	f805 3b01 	strb.w	r3, [r5], #1
 800b42e:	e7de      	b.n	800b3ee <_scanf_i+0x10e>
 800b430:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b434:	4631      	mov	r1, r6
 800b436:	4650      	mov	r0, sl
 800b438:	4798      	blx	r3
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d0df      	beq.n	800b3fe <_scanf_i+0x11e>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	05db      	lsls	r3, r3, #23
 800b442:	d50d      	bpl.n	800b460 <_scanf_i+0x180>
 800b444:	42bd      	cmp	r5, r7
 800b446:	d909      	bls.n	800b45c <_scanf_i+0x17c>
 800b448:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b44c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b450:	4632      	mov	r2, r6
 800b452:	4650      	mov	r0, sl
 800b454:	4798      	blx	r3
 800b456:	f105 39ff 	add.w	r9, r5, #4294967295
 800b45a:	464d      	mov	r5, r9
 800b45c:	42bd      	cmp	r5, r7
 800b45e:	d02d      	beq.n	800b4bc <_scanf_i+0x1dc>
 800b460:	6822      	ldr	r2, [r4, #0]
 800b462:	f012 0210 	ands.w	r2, r2, #16
 800b466:	d113      	bne.n	800b490 <_scanf_i+0x1b0>
 800b468:	702a      	strb	r2, [r5, #0]
 800b46a:	6863      	ldr	r3, [r4, #4]
 800b46c:	9e01      	ldr	r6, [sp, #4]
 800b46e:	4639      	mov	r1, r7
 800b470:	4650      	mov	r0, sl
 800b472:	47b0      	blx	r6
 800b474:	6821      	ldr	r1, [r4, #0]
 800b476:	f8d8 3000 	ldr.w	r3, [r8]
 800b47a:	f011 0f20 	tst.w	r1, #32
 800b47e:	d013      	beq.n	800b4a8 <_scanf_i+0x1c8>
 800b480:	1d1a      	adds	r2, r3, #4
 800b482:	f8c8 2000 	str.w	r2, [r8]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6018      	str	r0, [r3, #0]
 800b48a:	68e3      	ldr	r3, [r4, #12]
 800b48c:	3301      	adds	r3, #1
 800b48e:	60e3      	str	r3, [r4, #12]
 800b490:	1bed      	subs	r5, r5, r7
 800b492:	44ab      	add	fp, r5
 800b494:	6925      	ldr	r5, [r4, #16]
 800b496:	445d      	add	r5, fp
 800b498:	6125      	str	r5, [r4, #16]
 800b49a:	2000      	movs	r0, #0
 800b49c:	b007      	add	sp, #28
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	f04f 0b00 	mov.w	fp, #0
 800b4a6:	e7ca      	b.n	800b43e <_scanf_i+0x15e>
 800b4a8:	1d1a      	adds	r2, r3, #4
 800b4aa:	f8c8 2000 	str.w	r2, [r8]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f011 0f01 	tst.w	r1, #1
 800b4b4:	bf14      	ite	ne
 800b4b6:	8018      	strhne	r0, [r3, #0]
 800b4b8:	6018      	streq	r0, [r3, #0]
 800b4ba:	e7e6      	b.n	800b48a <_scanf_i+0x1aa>
 800b4bc:	2001      	movs	r0, #1
 800b4be:	e7ed      	b.n	800b49c <_scanf_i+0x1bc>
 800b4c0:	0800bf68 	.word	0x0800bf68
 800b4c4:	0800ad09 	.word	0x0800ad09
 800b4c8:	0800b6f1 	.word	0x0800b6f1
 800b4cc:	0800c379 	.word	0x0800c379

0800b4d0 <_read_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4d07      	ldr	r5, [pc, #28]	; (800b4f0 <_read_r+0x20>)
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	2200      	movs	r2, #0
 800b4dc:	602a      	str	r2, [r5, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f7f6 ff2c 	bl	800233c <_read>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d102      	bne.n	800b4ee <_read_r+0x1e>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	b103      	cbz	r3, 800b4ee <_read_r+0x1e>
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	20001024 	.word	0x20001024

0800b4f4 <__sccl>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	780b      	ldrb	r3, [r1, #0]
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	2b5e      	cmp	r3, #94	; 0x5e
 800b4fc:	bf0b      	itete	eq
 800b4fe:	784b      	ldrbeq	r3, [r1, #1]
 800b500:	1c48      	addne	r0, r1, #1
 800b502:	1c88      	addeq	r0, r1, #2
 800b504:	2200      	movne	r2, #0
 800b506:	bf08      	it	eq
 800b508:	2201      	moveq	r2, #1
 800b50a:	1e61      	subs	r1, r4, #1
 800b50c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b510:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b514:	42a9      	cmp	r1, r5
 800b516:	d1fb      	bne.n	800b510 <__sccl+0x1c>
 800b518:	b90b      	cbnz	r3, 800b51e <__sccl+0x2a>
 800b51a:	3801      	subs	r0, #1
 800b51c:	bd70      	pop	{r4, r5, r6, pc}
 800b51e:	f082 0201 	eor.w	r2, r2, #1
 800b522:	54e2      	strb	r2, [r4, r3]
 800b524:	4605      	mov	r5, r0
 800b526:	4628      	mov	r0, r5
 800b528:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b52c:	292d      	cmp	r1, #45	; 0x2d
 800b52e:	d006      	beq.n	800b53e <__sccl+0x4a>
 800b530:	295d      	cmp	r1, #93	; 0x5d
 800b532:	d0f3      	beq.n	800b51c <__sccl+0x28>
 800b534:	b909      	cbnz	r1, 800b53a <__sccl+0x46>
 800b536:	4628      	mov	r0, r5
 800b538:	e7f0      	b.n	800b51c <__sccl+0x28>
 800b53a:	460b      	mov	r3, r1
 800b53c:	e7f1      	b.n	800b522 <__sccl+0x2e>
 800b53e:	786e      	ldrb	r6, [r5, #1]
 800b540:	2e5d      	cmp	r6, #93	; 0x5d
 800b542:	d0fa      	beq.n	800b53a <__sccl+0x46>
 800b544:	42b3      	cmp	r3, r6
 800b546:	dcf8      	bgt.n	800b53a <__sccl+0x46>
 800b548:	3502      	adds	r5, #2
 800b54a:	4619      	mov	r1, r3
 800b54c:	3101      	adds	r1, #1
 800b54e:	428e      	cmp	r6, r1
 800b550:	5462      	strb	r2, [r4, r1]
 800b552:	dcfb      	bgt.n	800b54c <__sccl+0x58>
 800b554:	1af1      	subs	r1, r6, r3
 800b556:	3901      	subs	r1, #1
 800b558:	1c58      	adds	r0, r3, #1
 800b55a:	42b3      	cmp	r3, r6
 800b55c:	bfa8      	it	ge
 800b55e:	2100      	movge	r1, #0
 800b560:	1843      	adds	r3, r0, r1
 800b562:	e7e0      	b.n	800b526 <__sccl+0x32>

0800b564 <_raise_r>:
 800b564:	291f      	cmp	r1, #31
 800b566:	b538      	push	{r3, r4, r5, lr}
 800b568:	4604      	mov	r4, r0
 800b56a:	460d      	mov	r5, r1
 800b56c:	d904      	bls.n	800b578 <_raise_r+0x14>
 800b56e:	2316      	movs	r3, #22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 30ff 	mov.w	r0, #4294967295
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b57a:	b112      	cbz	r2, 800b582 <_raise_r+0x1e>
 800b57c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b580:	b94b      	cbnz	r3, 800b596 <_raise_r+0x32>
 800b582:	4620      	mov	r0, r4
 800b584:	f000 f830 	bl	800b5e8 <_getpid_r>
 800b588:	462a      	mov	r2, r5
 800b58a:	4601      	mov	r1, r0
 800b58c:	4620      	mov	r0, r4
 800b58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b592:	f000 b817 	b.w	800b5c4 <_kill_r>
 800b596:	2b01      	cmp	r3, #1
 800b598:	d00a      	beq.n	800b5b0 <_raise_r+0x4c>
 800b59a:	1c59      	adds	r1, r3, #1
 800b59c:	d103      	bne.n	800b5a6 <_raise_r+0x42>
 800b59e:	2316      	movs	r3, #22
 800b5a0:	6003      	str	r3, [r0, #0]
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	e7e7      	b.n	800b576 <_raise_r+0x12>
 800b5a6:	2400      	movs	r4, #0
 800b5a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	4798      	blx	r3
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	e7e0      	b.n	800b576 <_raise_r+0x12>

0800b5b4 <raise>:
 800b5b4:	4b02      	ldr	r3, [pc, #8]	; (800b5c0 <raise+0xc>)
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	6818      	ldr	r0, [r3, #0]
 800b5ba:	f7ff bfd3 	b.w	800b564 <_raise_r>
 800b5be:	bf00      	nop
 800b5c0:	2000005c 	.word	0x2000005c

0800b5c4 <_kill_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d07      	ldr	r5, [pc, #28]	; (800b5e4 <_kill_r+0x20>)
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	602b      	str	r3, [r5, #0]
 800b5d2:	f7f6 fe99 	bl	8002308 <_kill>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	d102      	bne.n	800b5e0 <_kill_r+0x1c>
 800b5da:	682b      	ldr	r3, [r5, #0]
 800b5dc:	b103      	cbz	r3, 800b5e0 <_kill_r+0x1c>
 800b5de:	6023      	str	r3, [r4, #0]
 800b5e0:	bd38      	pop	{r3, r4, r5, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20001024 	.word	0x20001024

0800b5e8 <_getpid_r>:
 800b5e8:	f7f6 be86 	b.w	80022f8 <_getpid>

0800b5ec <_strtol_l.constprop.0>:
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f2:	d001      	beq.n	800b5f8 <_strtol_l.constprop.0+0xc>
 800b5f4:	2b24      	cmp	r3, #36	; 0x24
 800b5f6:	d906      	bls.n	800b606 <_strtol_l.constprop.0+0x1a>
 800b5f8:	f7fd f9fa 	bl	80089f0 <__errno>
 800b5fc:	2316      	movs	r3, #22
 800b5fe:	6003      	str	r3, [r0, #0]
 800b600:	2000      	movs	r0, #0
 800b602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b606:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b6ec <_strtol_l.constprop.0+0x100>
 800b60a:	460d      	mov	r5, r1
 800b60c:	462e      	mov	r6, r5
 800b60e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b612:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b616:	f017 0708 	ands.w	r7, r7, #8
 800b61a:	d1f7      	bne.n	800b60c <_strtol_l.constprop.0+0x20>
 800b61c:	2c2d      	cmp	r4, #45	; 0x2d
 800b61e:	d132      	bne.n	800b686 <_strtol_l.constprop.0+0x9a>
 800b620:	782c      	ldrb	r4, [r5, #0]
 800b622:	2701      	movs	r7, #1
 800b624:	1cb5      	adds	r5, r6, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d05b      	beq.n	800b6e2 <_strtol_l.constprop.0+0xf6>
 800b62a:	2b10      	cmp	r3, #16
 800b62c:	d109      	bne.n	800b642 <_strtol_l.constprop.0+0x56>
 800b62e:	2c30      	cmp	r4, #48	; 0x30
 800b630:	d107      	bne.n	800b642 <_strtol_l.constprop.0+0x56>
 800b632:	782c      	ldrb	r4, [r5, #0]
 800b634:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b638:	2c58      	cmp	r4, #88	; 0x58
 800b63a:	d14d      	bne.n	800b6d8 <_strtol_l.constprop.0+0xec>
 800b63c:	786c      	ldrb	r4, [r5, #1]
 800b63e:	2310      	movs	r3, #16
 800b640:	3502      	adds	r5, #2
 800b642:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b646:	f108 38ff 	add.w	r8, r8, #4294967295
 800b64a:	f04f 0c00 	mov.w	ip, #0
 800b64e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b652:	4666      	mov	r6, ip
 800b654:	fb03 8a19 	mls	sl, r3, r9, r8
 800b658:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b65c:	f1be 0f09 	cmp.w	lr, #9
 800b660:	d816      	bhi.n	800b690 <_strtol_l.constprop.0+0xa4>
 800b662:	4674      	mov	r4, lr
 800b664:	42a3      	cmp	r3, r4
 800b666:	dd24      	ble.n	800b6b2 <_strtol_l.constprop.0+0xc6>
 800b668:	f1bc 0f00 	cmp.w	ip, #0
 800b66c:	db1e      	blt.n	800b6ac <_strtol_l.constprop.0+0xc0>
 800b66e:	45b1      	cmp	r9, r6
 800b670:	d31c      	bcc.n	800b6ac <_strtol_l.constprop.0+0xc0>
 800b672:	d101      	bne.n	800b678 <_strtol_l.constprop.0+0x8c>
 800b674:	45a2      	cmp	sl, r4
 800b676:	db19      	blt.n	800b6ac <_strtol_l.constprop.0+0xc0>
 800b678:	fb06 4603 	mla	r6, r6, r3, r4
 800b67c:	f04f 0c01 	mov.w	ip, #1
 800b680:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b684:	e7e8      	b.n	800b658 <_strtol_l.constprop.0+0x6c>
 800b686:	2c2b      	cmp	r4, #43	; 0x2b
 800b688:	bf04      	itt	eq
 800b68a:	782c      	ldrbeq	r4, [r5, #0]
 800b68c:	1cb5      	addeq	r5, r6, #2
 800b68e:	e7ca      	b.n	800b626 <_strtol_l.constprop.0+0x3a>
 800b690:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b694:	f1be 0f19 	cmp.w	lr, #25
 800b698:	d801      	bhi.n	800b69e <_strtol_l.constprop.0+0xb2>
 800b69a:	3c37      	subs	r4, #55	; 0x37
 800b69c:	e7e2      	b.n	800b664 <_strtol_l.constprop.0+0x78>
 800b69e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b6a2:	f1be 0f19 	cmp.w	lr, #25
 800b6a6:	d804      	bhi.n	800b6b2 <_strtol_l.constprop.0+0xc6>
 800b6a8:	3c57      	subs	r4, #87	; 0x57
 800b6aa:	e7db      	b.n	800b664 <_strtol_l.constprop.0+0x78>
 800b6ac:	f04f 3cff 	mov.w	ip, #4294967295
 800b6b0:	e7e6      	b.n	800b680 <_strtol_l.constprop.0+0x94>
 800b6b2:	f1bc 0f00 	cmp.w	ip, #0
 800b6b6:	da05      	bge.n	800b6c4 <_strtol_l.constprop.0+0xd8>
 800b6b8:	2322      	movs	r3, #34	; 0x22
 800b6ba:	6003      	str	r3, [r0, #0]
 800b6bc:	4646      	mov	r6, r8
 800b6be:	b942      	cbnz	r2, 800b6d2 <_strtol_l.constprop.0+0xe6>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	e79e      	b.n	800b602 <_strtol_l.constprop.0+0x16>
 800b6c4:	b107      	cbz	r7, 800b6c8 <_strtol_l.constprop.0+0xdc>
 800b6c6:	4276      	negs	r6, r6
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	d0f9      	beq.n	800b6c0 <_strtol_l.constprop.0+0xd4>
 800b6cc:	f1bc 0f00 	cmp.w	ip, #0
 800b6d0:	d000      	beq.n	800b6d4 <_strtol_l.constprop.0+0xe8>
 800b6d2:	1e69      	subs	r1, r5, #1
 800b6d4:	6011      	str	r1, [r2, #0]
 800b6d6:	e7f3      	b.n	800b6c0 <_strtol_l.constprop.0+0xd4>
 800b6d8:	2430      	movs	r4, #48	; 0x30
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1b1      	bne.n	800b642 <_strtol_l.constprop.0+0x56>
 800b6de:	2308      	movs	r3, #8
 800b6e0:	e7af      	b.n	800b642 <_strtol_l.constprop.0+0x56>
 800b6e2:	2c30      	cmp	r4, #48	; 0x30
 800b6e4:	d0a5      	beq.n	800b632 <_strtol_l.constprop.0+0x46>
 800b6e6:	230a      	movs	r3, #10
 800b6e8:	e7ab      	b.n	800b642 <_strtol_l.constprop.0+0x56>
 800b6ea:	bf00      	nop
 800b6ec:	0800c260 	.word	0x0800c260

0800b6f0 <_strtol_r>:
 800b6f0:	f7ff bf7c 	b.w	800b5ec <_strtol_l.constprop.0>

0800b6f4 <__submore>:
 800b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b700:	4299      	cmp	r1, r3
 800b702:	d11d      	bne.n	800b740 <__submore+0x4c>
 800b704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b708:	f7fd fdb2 	bl	8009270 <_malloc_r>
 800b70c:	b918      	cbnz	r0, 800b716 <__submore+0x22>
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295
 800b712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b71a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b71c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b720:	6360      	str	r0, [r4, #52]	; 0x34
 800b722:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b726:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b72a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b72e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b732:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b736:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b73a:	6020      	str	r0, [r4, #0]
 800b73c:	2000      	movs	r0, #0
 800b73e:	e7e8      	b.n	800b712 <__submore+0x1e>
 800b740:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b742:	0077      	lsls	r7, r6, #1
 800b744:	463a      	mov	r2, r7
 800b746:	f7ff fb6f 	bl	800ae28 <_realloc_r>
 800b74a:	4605      	mov	r5, r0
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d0de      	beq.n	800b70e <__submore+0x1a>
 800b750:	eb00 0806 	add.w	r8, r0, r6
 800b754:	4601      	mov	r1, r0
 800b756:	4632      	mov	r2, r6
 800b758:	4640      	mov	r0, r8
 800b75a:	f7fd fa95 	bl	8008c88 <memcpy>
 800b75e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b762:	f8c4 8000 	str.w	r8, [r4]
 800b766:	e7e9      	b.n	800b73c <__submore+0x48>

0800b768 <_malloc_usable_size_r>:
 800b768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76c:	1f18      	subs	r0, r3, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfbc      	itt	lt
 800b772:	580b      	ldrlt	r3, [r1, r0]
 800b774:	18c0      	addlt	r0, r0, r3
 800b776:	4770      	bx	lr

0800b778 <trunc>:
 800b778:	ec51 0b10 	vmov	r0, r1, d0
 800b77c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b780:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b784:	2b13      	cmp	r3, #19
 800b786:	b5d0      	push	{r4, r6, r7, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	dc10      	bgt.n	800b7ae <trunc+0x36>
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfa5      	ittet	ge
 800b790:	4a11      	ldrge	r2, [pc, #68]	; (800b7d8 <trunc+0x60>)
 800b792:	fa42 f303 	asrge.w	r3, r2, r3
 800b796:	2100      	movlt	r1, #0
 800b798:	2100      	movge	r1, #0
 800b79a:	bfb9      	ittee	lt
 800b79c:	2000      	movlt	r0, #0
 800b79e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800b7a2:	2000      	movge	r0, #0
 800b7a4:	ea24 0103 	bicge.w	r1, r4, r3
 800b7a8:	ec41 0b10 	vmov	d0, r0, r1
 800b7ac:	bdd0      	pop	{r4, r6, r7, pc}
 800b7ae:	2b33      	cmp	r3, #51	; 0x33
 800b7b0:	dd08      	ble.n	800b7c4 <trunc+0x4c>
 800b7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7b6:	d1f7      	bne.n	800b7a8 <trunc+0x30>
 800b7b8:	ee10 2a10 	vmov	r2, s0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	f7f4 fd75 	bl	80002ac <__adddf3>
 800b7c2:	e7f1      	b.n	800b7a8 <trunc+0x30>
 800b7c4:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7cc:	fa23 f202 	lsr.w	r2, r3, r2
 800b7d0:	ea20 0602 	bic.w	r6, r0, r2
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	e7e7      	b.n	800b7a8 <trunc+0x30>
 800b7d8:	000fffff 	.word	0x000fffff

0800b7dc <_init>:
 800b7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7de:	bf00      	nop
 800b7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e2:	bc08      	pop	{r3}
 800b7e4:	469e      	mov	lr, r3
 800b7e6:	4770      	bx	lr

0800b7e8 <_fini>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	bf00      	nop
 800b7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ee:	bc08      	pop	{r3}
 800b7f0:	469e      	mov	lr, r3
 800b7f2:	4770      	bx	lr
 800b7f4:	0000      	movs	r0, r0
	...
