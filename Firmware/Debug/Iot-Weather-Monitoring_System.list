
Iot-Weather-Monitoring_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userconfig   00000000  08040960  08040960  00020108  2**0
                  CONTENTS
  3 .storage      00000000  08043008  08043008  00020108  2**0
                  CONTENTS
  4 .rodata       00000b30  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800aae0  0800aae0  00020108  2**0
                  CONTENTS
  6 .ARM          00000008  0800aae0  0800aae0  0001aae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800aae8  0800aae8  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  0800aae8  0800aae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0800aaf0  0800aaf0  0001aaf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000108  20000000  0800aaf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000aa8  20000108  0800ac00  00020108  2**2
                  ALLOC
 12 ._user_heap_stack 00017000  20000bb0  0800ac00  00020bb0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017b07  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a80  00000000  00000000  00037c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001460  00000000  00000000  0003b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012a8  00000000  00000000  0003cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e2e4  00000000  00000000  0003ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020349  00000000  00000000  0006c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001119d4  00000000  00000000  0008c3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0019ddc9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006388  00000000  00000000  0019de1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f98 	.word	0x08009f98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08009f98 	.word	0x08009f98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295
 80002be:	f000 b9bf 	b.w	8000640 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b974 	b.w	8000640 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468e      	mov	lr, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14d      	bne.n	800041a <__udivmoddi4+0xaa>
 800037e:	428a      	cmp	r2, r1
 8000380:	4694      	mov	ip, r2
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0xe8>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b152      	cbz	r2, 80003a0 <__udivmoddi4+0x30>
 800038a:	fa01 f302 	lsl.w	r3, r1, r2
 800038e:	f1c2 0120 	rsb	r1, r2, #32
 8000392:	fa20 f101 	lsr.w	r1, r0, r1
 8000396:	fa0c fc02 	lsl.w	ip, ip, r2
 800039a:	ea41 0e03 	orr.w	lr, r1, r3
 800039e:	4094      	lsls	r4, r2
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	0c21      	lsrs	r1, r4, #16
 80003a6:	fbbe f6f8 	udiv	r6, lr, r8
 80003aa:	fa1f f78c 	uxth.w	r7, ip
 80003ae:	fb08 e316 	mls	r3, r8, r6, lr
 80003b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003b6:	fb06 f107 	mul.w	r1, r6, r7
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003c6:	f080 811f 	bcs.w	8000608 <__udivmoddi4+0x298>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 811c 	bls.w	8000608 <__udivmoddi4+0x298>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb00 f707 	mul.w	r7, r0, r7
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x92>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f4:	f080 810a 	bcs.w	800060c <__udivmoddi4+0x29c>
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	f240 8107 	bls.w	800060c <__udivmoddi4+0x29c>
 80003fe:	4464      	add	r4, ip
 8000400:	3802      	subs	r0, #2
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	2600      	movs	r6, #0
 800040a:	b11d      	cbz	r5, 8000414 <__udivmoddi4+0xa4>
 800040c:	40d4      	lsrs	r4, r2
 800040e:	2300      	movs	r3, #0
 8000410:	e9c5 4300 	strd	r4, r3, [r5]
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0xc2>
 800041e:	2d00      	cmp	r5, #0
 8000420:	f000 80ef 	beq.w	8000602 <__udivmoddi4+0x292>
 8000424:	2600      	movs	r6, #0
 8000426:	e9c5 0100 	strd	r0, r1, [r5]
 800042a:	4630      	mov	r0, r6
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	fab3 f683 	clz	r6, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d14a      	bne.n	80004d0 <__udivmoddi4+0x160>
 800043a:	428b      	cmp	r3, r1
 800043c:	d302      	bcc.n	8000444 <__udivmoddi4+0xd4>
 800043e:	4282      	cmp	r2, r0
 8000440:	f200 80f9 	bhi.w	8000636 <__udivmoddi4+0x2c6>
 8000444:	1a84      	subs	r4, r0, r2
 8000446:	eb61 0303 	sbc.w	r3, r1, r3
 800044a:	2001      	movs	r0, #1
 800044c:	469e      	mov	lr, r3
 800044e:	2d00      	cmp	r5, #0
 8000450:	d0e0      	beq.n	8000414 <__udivmoddi4+0xa4>
 8000452:	e9c5 4e00 	strd	r4, lr, [r5]
 8000456:	e7dd      	b.n	8000414 <__udivmoddi4+0xa4>
 8000458:	b902      	cbnz	r2, 800045c <__udivmoddi4+0xec>
 800045a:	deff      	udf	#255	; 0xff
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	f040 8092 	bne.w	800058a <__udivmoddi4+0x21a>
 8000466:	eba1 010c 	sub.w	r1, r1, ip
 800046a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046e:	fa1f fe8c 	uxth.w	lr, ip
 8000472:	2601      	movs	r6, #1
 8000474:	0c20      	lsrs	r0, r4, #16
 8000476:	fbb1 f3f7 	udiv	r3, r1, r7
 800047a:	fb07 1113 	mls	r1, r7, r3, r1
 800047e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000482:	fb0e f003 	mul.w	r0, lr, r3
 8000486:	4288      	cmp	r0, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x12c>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x12a>
 8000494:	4288      	cmp	r0, r1
 8000496:	f200 80cb 	bhi.w	8000630 <__udivmoddi4+0x2c0>
 800049a:	4643      	mov	r3, r8
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1110 	mls	r1, r7, r0, r1
 80004a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ac:	fb0e fe00 	mul.w	lr, lr, r0
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x156>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004bc:	d202      	bcs.n	80004c4 <__udivmoddi4+0x154>
 80004be:	45a6      	cmp	lr, r4
 80004c0:	f200 80bb 	bhi.w	800063a <__udivmoddi4+0x2ca>
 80004c4:	4608      	mov	r0, r1
 80004c6:	eba4 040e 	sub.w	r4, r4, lr
 80004ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ce:	e79c      	b.n	800040a <__udivmoddi4+0x9a>
 80004d0:	f1c6 0720 	rsb	r7, r6, #32
 80004d4:	40b3      	lsls	r3, r6
 80004d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004da:	ea4c 0c03 	orr.w	ip, ip, r3
 80004de:	fa20 f407 	lsr.w	r4, r0, r7
 80004e2:	fa01 f306 	lsl.w	r3, r1, r6
 80004e6:	431c      	orrs	r4, r3
 80004e8:	40f9      	lsrs	r1, r7
 80004ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ee:	fa00 f306 	lsl.w	r3, r0, r6
 80004f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004f6:	0c20      	lsrs	r0, r4, #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	fb08 f00e 	mul.w	r0, r8, lr
 8000508:	4288      	cmp	r0, r1
 800050a:	fa02 f206 	lsl.w	r2, r2, r6
 800050e:	d90b      	bls.n	8000528 <__udivmoddi4+0x1b8>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f108 3aff 	add.w	sl, r8, #4294967295
 8000518:	f080 8088 	bcs.w	800062c <__udivmoddi4+0x2bc>
 800051c:	4288      	cmp	r0, r1
 800051e:	f240 8085 	bls.w	800062c <__udivmoddi4+0x2bc>
 8000522:	f1a8 0802 	sub.w	r8, r8, #2
 8000526:	4461      	add	r1, ip
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	b2a4      	uxth	r4, r4
 800052c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000530:	fb09 1110 	mls	r1, r9, r0, r1
 8000534:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	458e      	cmp	lr, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x1e2>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f100 34ff 	add.w	r4, r0, #4294967295
 8000548:	d26c      	bcs.n	8000624 <__udivmoddi4+0x2b4>
 800054a:	458e      	cmp	lr, r1
 800054c:	d96a      	bls.n	8000624 <__udivmoddi4+0x2b4>
 800054e:	3802      	subs	r0, #2
 8000550:	4461      	add	r1, ip
 8000552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000556:	fba0 9402 	umull	r9, r4, r0, r2
 800055a:	eba1 010e 	sub.w	r1, r1, lr
 800055e:	42a1      	cmp	r1, r4
 8000560:	46c8      	mov	r8, r9
 8000562:	46a6      	mov	lr, r4
 8000564:	d356      	bcc.n	8000614 <__udivmoddi4+0x2a4>
 8000566:	d053      	beq.n	8000610 <__udivmoddi4+0x2a0>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x212>
 800056a:	ebb3 0208 	subs.w	r2, r3, r8
 800056e:	eb61 010e 	sbc.w	r1, r1, lr
 8000572:	fa01 f707 	lsl.w	r7, r1, r7
 8000576:	fa22 f306 	lsr.w	r3, r2, r6
 800057a:	40f1      	lsrs	r1, r6
 800057c:	431f      	orrs	r7, r3
 800057e:	e9c5 7100 	strd	r7, r1, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	fa0c fc02 	lsl.w	ip, ip, r2
 8000594:	fa21 f303 	lsr.w	r3, r1, r3
 8000598:	4091      	lsls	r1, r2
 800059a:	4301      	orrs	r1, r0
 800059c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a0:	fa1f fe8c 	uxth.w	lr, ip
 80005a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005a8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005b2:	fb00 f60e 	mul.w	r6, r0, lr
 80005b6:	429e      	cmp	r6, r3
 80005b8:	fa04 f402 	lsl.w	r4, r4, r2
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x260>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005c6:	d22f      	bcs.n	8000628 <__udivmoddi4+0x2b8>
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d92d      	bls.n	8000628 <__udivmoddi4+0x2b8>
 80005cc:	3802      	subs	r0, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	b289      	uxth	r1, r1
 80005d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005d8:	fb07 3316 	mls	r3, r7, r6, r3
 80005dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e0:	fb06 f30e 	mul.w	r3, r6, lr
 80005e4:	428b      	cmp	r3, r1
 80005e6:	d908      	bls.n	80005fa <__udivmoddi4+0x28a>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80005f0:	d216      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d914      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005f6:	3e02      	subs	r6, #2
 80005f8:	4461      	add	r1, ip
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000600:	e738      	b.n	8000474 <__udivmoddi4+0x104>
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e705      	b.n	8000414 <__udivmoddi4+0xa4>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e3      	b.n	80003d4 <__udivmoddi4+0x64>
 800060c:	4618      	mov	r0, r3
 800060e:	e6f8      	b.n	8000402 <__udivmoddi4+0x92>
 8000610:	454b      	cmp	r3, r9
 8000612:	d2a9      	bcs.n	8000568 <__udivmoddi4+0x1f8>
 8000614:	ebb9 0802 	subs.w	r8, r9, r2
 8000618:	eb64 0e0c 	sbc.w	lr, r4, ip
 800061c:	3801      	subs	r0, #1
 800061e:	e7a3      	b.n	8000568 <__udivmoddi4+0x1f8>
 8000620:	4646      	mov	r6, r8
 8000622:	e7ea      	b.n	80005fa <__udivmoddi4+0x28a>
 8000624:	4620      	mov	r0, r4
 8000626:	e794      	b.n	8000552 <__udivmoddi4+0x1e2>
 8000628:	4640      	mov	r0, r8
 800062a:	e7d1      	b.n	80005d0 <__udivmoddi4+0x260>
 800062c:	46d0      	mov	r8, sl
 800062e:	e77b      	b.n	8000528 <__udivmoddi4+0x1b8>
 8000630:	3b02      	subs	r3, #2
 8000632:	4461      	add	r1, ip
 8000634:	e732      	b.n	800049c <__udivmoddi4+0x12c>
 8000636:	4630      	mov	r0, r6
 8000638:	e709      	b.n	800044e <__udivmoddi4+0xde>
 800063a:	4464      	add	r4, ip
 800063c:	3802      	subs	r0, #2
 800063e:	e742      	b.n	80004c6 <__udivmoddi4+0x156>

08000640 <__aeabi_idiv0>:
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <AplusAPP_Init>:
void _FlashWriteAppUserConfig(void);
void _InitUserConfig(void);


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void AplusAPP_Init(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
	// Initialize the debug log
	Debug_InitLog();
 800064a:	f000 f951 	bl	80008f0 <Debug_InitLog>
	printf("Debug log initialized\r\n");
 800064e:	4821      	ldr	r0, [pc, #132]	; (80006d4 <AplusAPP_Init+0x90>)
 8000650:	f007 fb00 	bl	8007c54 <puts>

	// Capture reset cause
	/*ResetCause_t reset_cause =*/ Get_Reset_Cause();
 8000654:	f000 f87c 	bl	8000750 <Get_Reset_Cause>

	// Initialize the watchdog timer
	Watchdog_Init();
 8000658:	f000 fabe 	bl	8000bd8 <Watchdog_Init>
	printf("Watchdog initialized\r\n");
 800065c:	481e      	ldr	r0, [pc, #120]	; (80006d8 <AplusAPP_Init+0x94>)
 800065e:	f007 faf9 	bl	8007c54 <puts>

	// Initialize the RTC.
	Timestamp_Init();
 8000662:	f000 fa1b 	bl	8000a9c <Timestamp_Init>
	printf("RTC initialized\r\n");
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <AplusAPP_Init+0x98>)
 8000668:	f007 faf4 	bl	8007c54 <puts>

	uint32_t new_timestamp = 1680554930;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <AplusAPP_Init+0x9c>)
 800066e:	60fb      	str	r3, [r7, #12]
	Timestamp_SetTimestamp(new_timestamp);
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f000 fa3d 	bl	8000af0 <Timestamp_SetTimestamp>

	// Initialize flash - where user configuration is stored
	Flash_Init();
 8000676:	f000 f967 	bl	8000948 <Flash_Init>
	printf("Flash initialized\r\n");
 800067a:	481a      	ldr	r0, [pc, #104]	; (80006e4 <AplusAPP_Init+0xa0>)
 800067c:	f007 faea 	bl	8007c54 <puts>

	// Read user configuration from flash
	_FlashReadAppUserConfig();
 8000680:	f000 f8d0 	bl	8000824 <_FlashReadAppUserConfig>
	printf("User configuration retrieved\r\n");
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <AplusAPP_Init+0xa4>)
 8000686:	f007 fae5 	bl	8007c54 <puts>
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <AplusAPP_Init+0xa8>)
 800068c:	685b      	ldr	r3, [r3, #4]

	 // Set current time from the last timestamp stored in flash.
	uint32_t timestamp;
	memcpy(&timestamp, &g_stUserConfig.au8Timestamp[0], 4);
 800068e:	607b      	str	r3, [r7, #4]
	if(timestamp>0) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d003      	beq.n	800069e <AplusAPP_Init+0x5a>
		Timestamp_SetTimestamp(timestamp);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fa29 	bl	8000af0 <Timestamp_SetTimestamp>
	}
	printf("Timestamp Initialized\r\n");
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <AplusAPP_Init+0xac>)
 80006a0:	f007 fad8 	bl	8007c54 <puts>

	int8_t s8Status = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	72fb      	strb	r3, [r7, #11]

	s8Status = Wifi_Init();
 80006a8:	f000 faba 	bl	8000c20 <Wifi_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	72fb      	strb	r3, [r7, #11]
	if (s8Status!=0) {
 80006b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <AplusAPP_Init+0x7c>
		printf("Wifi failed to initialize.\r\n");
 80006b8:	480e      	ldr	r0, [pc, #56]	; (80006f4 <AplusAPP_Init+0xb0>)
 80006ba:	f007 facb 	bl	8007c54 <puts>
		while(1) {}
 80006be:	e7fe      	b.n	80006be <AplusAPP_Init+0x7a>
	}
	printf("Wifi initialized.\r\n");
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <AplusAPP_Init+0xb4>)
 80006c2:	f007 fac7 	bl	8007c54 <puts>

	printf("Application init complete\r\n");
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <AplusAPP_Init+0xb8>)
 80006c8:	f007 fac4 	bl	8007c54 <puts>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08009fb0 	.word	0x08009fb0
 80006d8:	08009fc8 	.word	0x08009fc8
 80006dc:	08009fe0 	.word	0x08009fe0
 80006e0:	642b3bb2 	.word	0x642b3bb2
 80006e4:	08009ff4 	.word	0x08009ff4
 80006e8:	0800a008 	.word	0x0800a008
 80006ec:	20000124 	.word	0x20000124
 80006f0:	0800a028 	.word	0x0800a028
 80006f4:	0800a040 	.word	0x0800a040
 80006f8:	0800a05c 	.word	0x0800a05c
 80006fc:	0800a070 	.word	0x0800a070

08000700 <AplusAPP_Entry>:

void AplusAPP_Entry(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	static bool s_fCheckLink = true;

	printf("Entering main state machine\r\n");
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <AplusAPP_Entry+0x40>)
 8000708:	f007 faa4 	bl	8007c54 <puts>

	while(1) {
		// Feed the watchdog every time through this callback - if not, the device will reset after 8 seconds
		Watchdog_Feed();
 800070c:	f000 fa7e 	bl	8000c0c <Watchdog_Feed>

		if (s_fCheckLink==true) {
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <AplusAPP_Entry+0x44>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f9      	beq.n	800070c <AplusAPP_Entry+0xc>
			// Init vars.
			int8_t s8Status;

			// Attempt connect to stored SSID.
			s8Status = Wifi_Connect();
 8000718:	f000 fa9c 	bl	8000c54 <Wifi_Connect>
 800071c:	4603      	mov	r3, r0
 800071e:	71fb      	strb	r3, [r7, #7]
			if (s8Status!=0) {
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d003      	beq.n	8000730 <AplusAPP_Entry+0x30>
				printf("Wifi to connect.\r\n");
 8000728:	4807      	ldr	r0, [pc, #28]	; (8000748 <AplusAPP_Entry+0x48>)
 800072a:	f007 fa93 	bl	8007c54 <puts>
				while(1) {}
 800072e:	e7fe      	b.n	800072e <AplusAPP_Entry+0x2e>
			}
			printf("Wifi connected.\r\n");
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <AplusAPP_Entry+0x4c>)
 8000732:	f007 fa8f 	bl	8007c54 <puts>
			s_fCheckLink = false;
 8000736:	4b03      	ldr	r3, [pc, #12]	; (8000744 <AplusAPP_Entry+0x44>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
		Watchdog_Feed();
 800073c:	e7e6      	b.n	800070c <AplusAPP_Entry+0xc>
 800073e:	bf00      	nop
 8000740:	0800a08c 	.word	0x0800a08c
 8000744:	20000000 	.word	0x20000000
 8000748:	0800a0ac 	.word	0x0800a0ac
 800074c:	0800a0c0 	.word	0x0800a0c0

08000750 <Get_Reset_Cause>:


	}
}

ResetCause_t Get_Reset_Cause(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
    ResetCause_t cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) {
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <Get_Reset_Cause+0xb4>)
 8000758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800075c:	2b00      	cmp	r3, #0
 800075e:	da05      	bge.n	800076c <Get_Reset_Cause+0x1c>
        cause = RESET_CAUSE_LOW_POWER_RESET;
 8000760:	2301      	movs	r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Low Power Reset\r\n");
 8000764:	4828      	ldr	r0, [pc, #160]	; (8000808 <Get_Reset_Cause+0xb8>)
 8000766:	f007 fa75 	bl	8007c54 <puts>
 800076a:	e045      	b.n	80007f8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) {
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <Get_Reset_Cause+0xb4>)
 800076e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000772:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d005      	beq.n	8000786 <Get_Reset_Cause+0x36>
        cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800077a:	2302      	movs	r3, #2
 800077c:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Window Watchdog Reset\r\n");
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <Get_Reset_Cause+0xbc>)
 8000780:	f007 fa68 	bl	8007c54 <puts>
 8000784:	e038      	b.n	80007f8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) {
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <Get_Reset_Cause+0xb4>)
 8000788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800078c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d005      	beq.n	80007a0 <Get_Reset_Cause+0x50>
        cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000794:	2303      	movs	r3, #3
 8000796:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Independent Watchdog Reset\r\n");
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <Get_Reset_Cause+0xc0>)
 800079a:	f007 fa5b 	bl	8007c54 <puts>
 800079e:	e02b      	b.n	80007f8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) {
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <Get_Reset_Cause+0xb4>)
 80007a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d005      	beq.n	80007ba <Get_Reset_Cause+0x6a>
        cause = RESET_CAUSE_SOFTWARE_RESET;
 80007ae:	2304      	movs	r3, #4
 80007b0:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Software Reset\r\n");
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <Get_Reset_Cause+0xc4>)
 80007b4:	f007 fa4e 	bl	8007c54 <puts>
 80007b8:	e01e      	b.n	80007f8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) {
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <Get_Reset_Cause+0xb4>)
 80007bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <Get_Reset_Cause+0x84>
        cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 80007c8:	2306      	movs	r3, #6
 80007ca:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: External Reset Pin Reset\r\n");
 80007cc:	4812      	ldr	r0, [pc, #72]	; (8000818 <Get_Reset_Cause+0xc8>)
 80007ce:	f007 fa41 	bl	8007c54 <puts>
 80007d2:	e011      	b.n	80007f8 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) {
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <Get_Reset_Cause+0xb4>)
 80007d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <Get_Reset_Cause+0x9e>
        cause = RESET_CAUSE_BROWN_OUT_RESET;
 80007e2:	2307      	movs	r3, #7
 80007e4:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Brown Out Reset\r\n");
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <Get_Reset_Cause+0xcc>)
 80007e8:	f007 fa34 	bl	8007c54 <puts>
 80007ec:	e004      	b.n	80007f8 <Get_Reset_Cause+0xa8>
    } else {
        cause = RESET_CAUSE_UNKNOWN;
 80007ee:	2300      	movs	r3, #0
 80007f0:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Unknown\r\n");
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <Get_Reset_Cause+0xd0>)
 80007f4:	f007 fa2e 	bl	8007c54 <puts>
    }

    return cause;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	0800a0d4 	.word	0x0800a0d4
 800080c:	0800a0f4 	.word	0x0800a0f4
 8000810:	0800a118 	.word	0x0800a118
 8000814:	0800a144 	.word	0x0800a144
 8000818:	0800a164 	.word	0x0800a164
 800081c:	0800a18c 	.word	0x0800a18c
 8000820:	0800a1ac 	.word	0x0800a1ac

08000824 <_FlashReadAppUserConfig>:

void _FlashReadAppUserConfig(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	Flash_ReadFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_stUserConfig, sizeof(AplusUserConfig));
 8000828:	2208      	movs	r2, #8
 800082a:	4908      	ldr	r1, [pc, #32]	; (800084c <_FlashReadAppUserConfig+0x28>)
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <_FlashReadAppUserConfig+0x2c>)
 800082e:	f000 f892 	bl	8000956 <Flash_ReadFlash>

	if(g_stUserConfig.u16InitCode!=USER_CONFIG_INIT_CODE) {
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <_FlashReadAppUserConfig+0x28>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	f645 225a 	movw	r2, #23130	; 0x5a5a
 800083a:	4293      	cmp	r3, r2
 800083c:	d004      	beq.n	8000848 <_FlashReadAppUserConfig+0x24>
		printf("Init User Config\r\n");
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <_FlashReadAppUserConfig+0x30>)
 8000840:	f007 fa08 	bl	8007c54 <puts>
		_InitUserConfig();
 8000844:	f000 f82e 	bl	80008a4 <_InitUserConfig>
	}
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000124 	.word	0x20000124
 8000850:	08040960 	.word	0x08040960
 8000854:	0800a1c4 	.word	0x0800a1c4

08000858 <_FlashWriteAppUserConfig>:

void _FlashWriteAppUserConfig(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	// Set timestamp
	uint32_t timestamp;
	Timestamp_GetTimestamp(&timestamp);
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f983 	bl	8000b6c <Timestamp_GetTimestamp>
 8000866:	687b      	ldr	r3, [r7, #4]
	memcpy(&g_stUserConfig.au8Timestamp[0], &timestamp, 4);
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <_FlashWriteAppUserConfig+0x3c>)
 800086a:	6053      	str	r3, [r2, #4]

	printf("Erase Flash\r\n");
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <_FlashWriteAppUserConfig+0x40>)
 800086e:	f007 f9f1 	bl	8007c54 <puts>
	Flash_EraseFlash(USER_CONFIG_SPACE_ORIGIN, USER_CONFIG_SPACE_SIZE_BYTES);
 8000872:	f242 0148 	movw	r1, #8264	; 0x2048
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <_FlashWriteAppUserConfig+0x44>)
 8000878:	f000 f89c 	bl	80009b4 <Flash_EraseFlash>

	printf("Write Flash\r\n");
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <_FlashWriteAppUserConfig+0x48>)
 800087e:	f007 f9e9 	bl	8007c54 <puts>
	Flash_WriteFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_stUserConfig, sizeof(AplusUserConfig));
 8000882:	2208      	movs	r2, #8
 8000884:	4903      	ldr	r1, [pc, #12]	; (8000894 <_FlashWriteAppUserConfig+0x3c>)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <_FlashWriteAppUserConfig+0x44>)
 8000888:	f000 f8c4 	bl	8000a14 <Flash_WriteFlash>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000124 	.word	0x20000124
 8000898:	0800a1d8 	.word	0x0800a1d8
 800089c:	08040960 	.word	0x08040960
 80008a0:	0800a1e8 	.word	0x0800a1e8

080008a4 <_InitUserConfig>:

void _InitUserConfig(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	memset(&g_stUserConfig, 0, sizeof(AplusUserConfig));
 80008a8:	2208      	movs	r2, #8
 80008aa:	2100      	movs	r1, #0
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <_InitUserConfig+0x24>)
 80008ae:	f006 fe09 	bl	80074c4 <memset>

	g_stUserConfig.u16InitCode = USER_CONFIG_INIT_CODE;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <_InitUserConfig+0x24>)
 80008b4:	f645 225a 	movw	r2, #23130	; 0x5a5a
 80008b8:	801a      	strh	r2, [r3, #0]
	g_stUserConfig.u16CfgSize  = sizeof(AplusUserConfig);
 80008ba:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <_InitUserConfig+0x24>)
 80008bc:	2208      	movs	r2, #8
 80008be:	805a      	strh	r2, [r3, #2]

	_FlashWriteAppUserConfig();
 80008c0:	f7ff ffca 	bl	8000858 <_FlashWriteAppUserConfig>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000124 	.word	0x20000124

080008cc <__io_putchar>:

/** VARIABLES *****************************************************************/


/** LOCAL (PRIVATE) STRUCTURES AND ENUMERATIONS *******************************/
PUTCHAR_PROTOTYPE {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80008d4:	1d39      	adds	r1, r7, #4
 80008d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008da:	2201      	movs	r2, #1
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <__io_putchar+0x20>)
 80008de:	f005 ff70 	bl	80067c2 <HAL_UART_Transmit>

  return ch;
 80008e2:	687b      	ldr	r3, [r7, #4]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000af0 	.word	0x20000af0

080008f0 <Debug_InitLog>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Debug_InitLog() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	/* Initialize all configured peripherals */
	  hDiscoUart.Instance = DISCOVERY_COM1;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <Debug_InitLog+0x50>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <Debug_InitLog+0x54>)
 80008f8:	601a      	str	r2, [r3, #0]
	  hDiscoUart.Init.BaudRate = 115200;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <Debug_InitLog+0x50>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
	  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <Debug_InitLog+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
	  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <Debug_InitLog+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
	  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <Debug_InitLog+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
	  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <Debug_InitLog+0x50>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
	  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <Debug_InitLog+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
	  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <Debug_InitLog+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
	  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <Debug_InitLog+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
	  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <Debug_InitLog+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24

	  BSP_COM_Init(COM1, &hDiscoUart);
 8000932:	4903      	ldr	r1, [pc, #12]	; (8000940 <Debug_InitLog+0x50>)
 8000934:	2000      	movs	r0, #0
 8000936:	f001 faff 	bl	8001f38 <BSP_COM_Init>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000af0 	.word	0x20000af0
 8000944:	40013800 	.word	0x40013800

08000948 <Flash_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Flash_Init(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <Flash_ReadFlash>:

void Flash_ReadFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
 8000956:	b580      	push	{r7, lr}
 8000958:	b088      	sub	sp, #32
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint64_t data;

    for (i = 0; i < size; i += 8) {
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e01b      	b.n	80009a0 <Flash_ReadFlash+0x4a>
        // Read 8 bytes (double word) from the flash memory
        data = *(__IO uint64_t *)(byteAddress + i);
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	4413      	add	r3, r2
 800096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000972:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Copy the data to the buffer
        memcpy(&buffer[i], &data, (i + 8 <= size) ? 8 : (size - i));
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	18d0      	adds	r0, r2, r3
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	3308      	adds	r3, #8
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	d203      	bcs.n	800098e <Flash_ReadFlash+0x38>
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	e000      	b.n	8000990 <Flash_ReadFlash+0x3a>
 800098e:	2308      	movs	r3, #8
 8000990:	f107 0110 	add.w	r1, r7, #16
 8000994:	461a      	mov	r2, r3
 8000996:	f006 fd87 	bl	80074a8 <memcpy>
    for (i = 0; i < size; i += 8) {
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3308      	adds	r3, #8
 800099e:	61fb      	str	r3, [r7, #28]
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3df      	bcc.n	8000968 <Flash_ReadFlash+0x12>
    }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <Flash_EraseFlash>:


void Flash_EraseFlash(uint32_t byteAddress, uint32_t size) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	uint32_t pageError = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef eraseInitStruct;

	// Calculate the start page number
	uint32_t startPage = (byteAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80009c8:	0adb      	lsrs	r3, r3, #11
 80009ca:	61fb      	str	r3, [r7, #28]

	// Unlock the Flash memory
	HAL_FLASH_Unlock();
 80009cc:	f001 fd7e 	bl	80024cc <HAL_FLASH_Unlock>

	// Clear any existing error flags
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <Flash_EraseFlash+0x5c>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <Flash_EraseFlash+0x5c>)
 80009d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <Flash_EraseFlash+0x5c>)
 80009de:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80009e2:	611a      	str	r2, [r3, #16]

	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
	eraseInitStruct.Page = startPage;
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	613b      	str	r3, [r7, #16]
	eraseInitStruct.NbPages = (size/FLASH_PAGE_SIZE);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	0adb      	lsrs	r3, r3, #11
 80009f0:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 80009f2:	f107 0218 	add.w	r2, r7, #24
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fe49 	bl	8002694 <HAL_FLASHEx_Erase>
		// Handle erase error
	}

	// Lock the Flash memory
	HAL_FLASH_Lock();
 8000a02:	f001 fd85 	bl	8002510 <HAL_FLASH_Lock>
}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <Flash_WriteFlash>:

void Flash_WriteFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint64_t data;

    // Unlock the Flash memory
    HAL_FLASH_Unlock();
 8000a20:	f001 fd54 	bl	80024cc <HAL_FLASH_Unlock>

    // Clear any existing error flags
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <Flash_WriteFlash+0x84>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <Flash_WriteFlash+0x84>)
 8000a2a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <Flash_WriteFlash+0x84>)
 8000a32:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000a36:	611a      	str	r2, [r3, #16]

    for (i = 0; i < size; i += 8) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	e022      	b.n	8000a84 <Flash_WriteFlash+0x70>
        // Zero the data variable to ensure proper padding
        data = 0;
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	f04f 0300 	mov.w	r3, #0
 8000a46:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Read up to 8 bytes from the buffer
        memcpy(&data, &buffer[i], (i + 8 <= size) ? 8 : (size - i));
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	18d1      	adds	r1, r2, r3
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	3308      	adds	r3, #8
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d203      	bcs.n	8000a62 <Flash_WriteFlash+0x4e>
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	e000      	b.n	8000a64 <Flash_WriteFlash+0x50>
 8000a62:	2308      	movs	r3, #8
 8000a64:	f107 0010 	add.w	r0, r7, #16
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f006 fd1d 	bl	80074a8 <memcpy>

        // Write the double word to the flash memory
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, byteAddress + i, data) != HAL_OK) {
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	18d1      	adds	r1, r2, r3
 8000a74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 fcbb 	bl	80023f4 <HAL_FLASH_Program>
    for (i = 0; i < size; i += 8) {
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3308      	adds	r3, #8
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fa      	ldr	r2, [r7, #28]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d3d8      	bcc.n	8000a3e <Flash_WriteFlash+0x2a>
            // Handle write error
        }
    }

    // Lock the Flash memory
    HAL_FLASH_Lock();
 8000a8c:	f001 fd40 	bl	8002510 <HAL_FLASH_Lock>
}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40022000 	.word	0x40022000

08000a9c <Timestamp_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Timestamp_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	// Enable the RTC Clock
	__HAL_RCC_RTC_ENABLE();
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <Timestamp_Init+0x48>)
 8000aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <Timestamp_Init+0x48>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Configure the RTC
	hrtc.Instance = RTC;
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <Timestamp_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000abe:	227f      	movs	r2, #127	; 0x7f
 8000ac0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000ac4:	22ff      	movs	r2, #255	; 0xff
 8000ac6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]

	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <Timestamp_Init+0x4c>)
 8000adc:	f003 fc4a 	bl	8004374 <HAL_RTC_Init>
		/* Initialization Error */
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	20000140 	.word	0x20000140
 8000aec:	40002800 	.word	0x40002800

08000af0 <Timestamp_SetTimestamp>:

bool Timestamp_SetTimestamp(uint32_t timestamp) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	struct tm *tm;

	// Convert the epoch timestamp to tm struct
	tm = localtime((time_t *)&timestamp);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f006 fbb2 	bl	8007264 <localtime>
 8000b00:	6278      	str	r0, [r7, #36]	; 0x24

	// Populate the date and time structs
	date.Year = tm->tm_year - 100;
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	3b64      	subs	r3, #100	; 0x64
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date.Month = tm->tm_mon + 1;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date.Date = tm->tm_mday;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time.Hours = tm->tm_hour;
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	733b      	strb	r3, [r7, #12]
	time.Minutes = tm->tm_min;
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	737b      	strb	r3, [r7, #13]
	time.Seconds = tm->tm_sec;
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	73bb      	strb	r3, [r7, #14]

	// Set the RTC date and time
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <Timestamp_SetTimestamp+0x78>)
 8000b4a:	f003 fd91 	bl	8004670 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <Timestamp_SetTimestamp+0x78>)
 8000b58:	f003 fc91 	bl	800447e <HAL_RTC_SetTime>

	return true;
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000140 	.word	0x20000140

08000b6c <Timestamp_GetTimestamp>:

void Timestamp_GetTimestamp(uint32_t *timestamp) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b092      	sub	sp, #72	; 0x48
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	struct tm tm;

	// Read the current date and time from RTC
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000b74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <Timestamp_GetTimestamp+0x68>)
 8000b7e:	f003 fdfe 	bl	800477e <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000b82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <Timestamp_GetTimestamp+0x68>)
 8000b8c:	f003 fd14 	bl	80045b8 <HAL_RTC_GetTime>

	// Populate the tm struct
	tm.tm_year = date.Year + 100;  // Years since 1900
 8000b90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b94:	3364      	adds	r3, #100	; 0x64
 8000b96:	623b      	str	r3, [r7, #32]
	tm.tm_mon = date.Month - 1;
 8000b98:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
	tm.tm_mday = date.Date;
 8000ba0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ba4:	61bb      	str	r3, [r7, #24]
	tm.tm_hour = time.Hours;
 8000ba6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000baa:	617b      	str	r3, [r7, #20]
	tm.tm_min = time.Minutes;
 8000bac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000bb0:	613b      	str	r3, [r7, #16]
	tm.tm_sec = time.Seconds;
 8000bb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000bb6:	60fb      	str	r3, [r7, #12]

	*timestamp = mktime(&tm);
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 fd61 	bl	8007684 <mktime>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	3748      	adds	r7, #72	; 0x48
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000140 	.word	0x20000140

08000bd8 <Watchdog_Init>:
/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/

void Watchdog_Init(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <Watchdog_Init+0x2c>)
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <Watchdog_Init+0x30>)
 8000be0:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = WATCHDOG_PRESCALER;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <Watchdog_Init+0x2c>)
 8000be4:	2206      	movs	r2, #6
 8000be6:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = WATCHDOG_RELOAD;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <Watchdog_Init+0x2c>)
 8000bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bee:	609a      	str	r2, [r3, #8]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <Watchdog_Init+0x2c>)
 8000bf2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bf6:	60da      	str	r2, [r3, #12]


	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <Watchdog_Init+0x2c>)
 8000bfa:	f002 f881 	bl	8002d00 <HAL_IWDG_Init>
		/* Initialization Error */
	}
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000164 	.word	0x20000164
 8000c08:	40003000 	.word	0x40003000

08000c0c <Watchdog_Feed>:


void Watchdog_Feed(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <Watchdog_Feed+0x10>)
 8000c12:	f002 f8c4 	bl	8002d9e <HAL_IWDG_Refresh>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000164 	.word	0x20000164

08000c20 <Wifi_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
int8_t Wifi_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	// Init vars.
	WIFI_Status_t stmRet;

	// Initialize the WiFi info structure
	memset((uint8_t *)&s_stWiFiInfo, 0, sizeof(sWiFiInfo));
 8000c26:	2213      	movs	r2, #19
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4809      	ldr	r0, [pc, #36]	; (8000c50 <Wifi_Init+0x30>)
 8000c2c:	f006 fc4a 	bl	80074c4 <memset>

	// Initalize Wifi stack.
	stmRet = WIFI_Init();
 8000c30:	f000 ffea 	bl	8001c08 <WIFI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <Wifi_Init+0x24>
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	e000      	b.n	8000c46 <Wifi_Init+0x26>

	// Set Response.
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000012c 	.word	0x2000012c

08000c54 <Wifi_Connect>:

int8_t Wifi_Connect(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
//	memset(&s_stWiFiInfo.au8SubnetMask[0], 0, 4);
//	memset(&s_stWiFiInfo.au8Gateway[0], 0, 4);
//	memset(&s_stWiFiInfo.au8Dns[0], 0, 4);

	// Attempt connect with hardcode SSID and Password.
	stmRet = WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK);
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	490e      	ldr	r1, [pc, #56]	; (8000c98 <Wifi_Connect+0x44>)
 8000c5e:	480f      	ldr	r0, [pc, #60]	; (8000c9c <Wifi_Connect+0x48>)
 8000c60:	f000 fffe 	bl	8001c60 <WIFI_Connect>
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <Wifi_Connect+0x20>
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	e00c      	b.n	8000c8e <Wifi_Connect+0x3a>

	// Get network information
	stmRet = WIFI_GetIP_Address(&s_stWiFiInfo.au8IpAddr[0], sizeof(&s_stWiFiInfo.au8IpAddr[0]));
 8000c74:	2104      	movs	r1, #4
 8000c76:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <Wifi_Connect+0x4c>)
 8000c78:	f001 f814 	bl	8001ca4 <WIFI_GetIP_Address>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <Wifi_Connect+0x38>
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	e000      	b.n	8000c8e <Wifi_Connect+0x3a>
//	memcpy(&s_stWiFiInfo.au8SubnetMask[0], esWifiObj.NetSettings.IP_Mask, 4);
//	memcpy(&s_stWiFiInfo.au8Gateway[0], esWifiObj.NetSettings.Gateway_Addr, 4);
//	memcpy(&s_stWiFiInfo.au8Dns[0], esWifiObj.NetSettings.DNS1, 4);

	// Set Response.
	return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	0800a1f8 	.word	0x0800a1f8
 8000c9c:	0800a204 	.word	0x0800a204
 8000ca0:	2000012f 	.word	0x2000012f

08000ca4 <system_init>:

static void SystemClock_Config(void);
static void RTCClock_Config(void);
static void Timer_Config(void);

void system_init(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ca8:	f001 f9b2 	bl	8002010 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000cac:	f000 f806 	bl	8000cbc <SystemClock_Config>

	/* Configure the rtc clock */
	RTCClock_Config();
 8000cb0:	f000 f83e 	bl	8000d30 <RTCClock_Config>

	Timer_Config();
 8000cb4:	f000 f87a 	bl	8000dac <Timer_Config>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SystemClock_Config>:
  *            PLL_Q                          = 4
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b096      	sub	sp, #88	; 0x58
 8000cc0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cca:	2360      	movs	r3, #96	; 0x60
 8000ccc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cde:	2328      	movs	r3, #40	; 0x28
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cea:	2304      	movs	r3, #4
 8000cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 f883 	bl	8002dfc <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d000      	beq.n	8000cfe <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8000cfc:	e7fe      	b.n	8000cfc <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000cfe:	230f      	movs	r3, #15
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2303      	movs	r3, #3
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d16:	2104      	movs	r1, #4
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fc4b 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d000      	beq.n	8000d26 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8000d24:	e7fe      	b.n	8000d24 <SystemClock_Config+0x68>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3758      	adds	r7, #88	; 0x58
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <RTCClock_Config>:

static void RTCClock_Config(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0b4      	sub	sp, #208	; 0xd0
 8000d34:	af00      	add	r7, sp, #0
	// Enable the Power Clock and enable access to the RTC domain
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <RTCClock_Config+0x78>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <RTCClock_Config+0x78>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <RTCClock_Config+0x78>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
	HAL_PWR_EnableBkUpAccess();
 8000d4e:	f002 f837 	bl	8002dc0 <HAL_PWR_EnableBkUpAccess>

	// Enable the LSE (Low-Speed External) or LSI (Low-Speed Internal) oscillator
	// If your board has an external 32.768 kHz crystal, use LSE
	// Otherwise, use LSI
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d56:	2244      	movs	r2, #68	; 0x44
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f006 fbb2 	bl	80074c4 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000d60:	2304      	movs	r3, #4
 8000d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 f840 	bl	8002dfc <HAL_RCC_OscConfig>
		/* Initialization Error */
	}

	// Configure the RTC clock source
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2288      	movs	r2, #136	; 0x88
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 fb9e 	bl	80074c4 <memset>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8c:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fe2f 	bl	80039fc <HAL_RCCEx_PeriphCLKConfig>
		/* Initialization Error */
	}
}
 8000d9e:	bf00      	nop
 8000da0:	37d0      	adds	r7, #208	; 0xd0
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <Timer_Config>:
static void Timer_Config(void) {
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d102      	bne.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8000dca:	f000 ff0d 	bl	8001be8 <SPI_WIFI_ISR>
      break;
 8000dce:	e000      	b.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8000dd0:	bf00      	nop
    }
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <SPI3_IRQHandler>:

void SPI3_IRQHandler(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <SPI3_IRQHandler+0x10>)
 8000de2:	f004 fe13 	bl	8005a0c <HAL_SPI_IRQHandler>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000174 	.word	0x20000174

08000df0 <stm_start_init>:
#include "stm_start.h"

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void stm_start_init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	system_init();
 8000df4:	f7ff ff56 	bl	8000ca4 <system_init>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b2d      	cmp	r3, #45	; 0x2d
 8000e18:	d119      	bne.n	8000e4e <ParseNumber+0x52>
        minus = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3301      	adds	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
        done_count++;
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	3301      	adds	r3, #1
 8000e28:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000e2a:	e010      	b.n	8000e4e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	3b30      	subs	r3, #48	; 0x30
 8000e3e:	4413      	add	r3, r2
 8000e40:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3301      	adds	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
        done_count++;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b2f      	cmp	r3, #47	; 0x2f
 8000e54:	d903      	bls.n	8000e5e <ParseNumber+0x62>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b39      	cmp	r3, #57	; 0x39
 8000e5c:	d9e6      	bls.n	8000e2c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <ParseNumber+0x6e>
        *cnt = done_count;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	7bba      	ldrb	r2, [r7, #14]
 8000e68:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <ParseNumber+0x7a>
        return 0 - sum;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	425b      	negs	r3, r3
 8000e74:	e000      	b.n	8000e78 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8000e76:	68bb      	ldr	r3, [r7, #8]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d027      	beq.n	8000eea <ParseIP+0x66>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d024      	beq.n	8000eea <ParseIP+0x66>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d921      	bls.n	8000eea <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000ea6:	e019      	b.n	8000edc <ParseIP+0x58>
    uint8_t done_count = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8000eb2:	d00e      	beq.n	8000ed2 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8000eb4:	f107 0316 	add.w	r3, r7, #22
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f7ff ff9e 	bl	8000dfc <ParseNumber>
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	75fa      	strb	r2, [r7, #23]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8000ed2:	7dbb      	ldrb	r3, [r7, #22]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d803      	bhi.n	8000eea <ParseIP+0x66>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1de      	bne.n	8000ea8 <ParseIP+0x24>
   }
  }
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3302      	adds	r3, #2
 8000f06:	4940      	ldr	r1, [pc, #256]	; (8001008 <AT_ParseInfo+0x114>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 ff19 	bl	8007d40 <strtok>
 8000f0e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8000f10:	e071      	b.n	8000ff6 <AT_ParseInfo+0x102>
    switch (num++) {
 8000f12:	7afb      	ldrb	r3, [r7, #11]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	72fa      	strb	r2, [r7, #11]
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	d866      	bhi.n	8000fea <AT_ParseInfo+0xf6>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <AT_ParseInfo+0x30>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f41 	.word	0x08000f41
 8000f28:	08000f55 	.word	0x08000f55
 8000f2c:	08000f6d 	.word	0x08000f6d
 8000f30:	08000f85 	.word	0x08000f85
 8000f34:	08000f9d 	.word	0x08000f9d
 8000f38:	08000fb5 	.word	0x08000fb5
 8000f3c:	08000fc9 	.word	0x08000fc9
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	221f      	movs	r2, #31
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fed0 	bl	8007cec <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	77da      	strb	r2, [r3, #31]
      break;
 8000f52:	e04b      	b.n	8000fec <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3320      	adds	r3, #32
 8000f58:	2217      	movs	r2, #23
 8000f5a:	68f9      	ldr	r1, [r7, #12]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fec5 	bl	8007cec <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 8000f6a:	e03f      	b.n	8000fec <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3338      	adds	r3, #56	; 0x38
 8000f70:	220f      	movs	r2, #15
 8000f72:	68f9      	ldr	r1, [r7, #12]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 feb9 	bl	8007cec <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8000f82:	e033      	b.n	8000fec <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3348      	adds	r3, #72	; 0x48
 8000f88:	220f      	movs	r2, #15
 8000f8a:	68f9      	ldr	r1, [r7, #12]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f006 fead 	bl	8007cec <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8000f9a:	e027      	b.n	8000fec <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3358      	adds	r3, #88	; 0x58
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 fea1 	bl	8007cec <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8000fb2:	e01b      	b.n	8000fec <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff ff20 	bl	8000dfc <ParseNumber>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8000fc6:	e011      	b.n	8000fec <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8000fc8:	4910      	ldr	r1, [pc, #64]	; (800100c <AT_ParseInfo+0x118>)
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f006 feb8 	bl	8007d40 <strtok>
 8000fd0:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3368      	adds	r3, #104	; 0x68
 8000fd6:	221f      	movs	r2, #31
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 fe86 	bl	8007cec <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8000fe8:	e000      	b.n	8000fec <AT_ParseInfo+0xf8>

    default: break;
 8000fea:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8000fec:	4906      	ldr	r1, [pc, #24]	; (8001008 <AT_ParseInfo+0x114>)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f006 fea6 	bl	8007d40 <strtok>
 8000ff4:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d18a      	bne.n	8000f12 <AT_ParseInfo+0x1e>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0800a238 	.word	0x0800a238
 800100c:	0800a23c 	.word	0x0800a23c

08001010 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3302      	adds	r3, #2
 8001022:	4959      	ldr	r1, [pc, #356]	; (8001188 <AT_ParseConnSettings+0x178>)
 8001024:	4618      	mov	r0, r3
 8001026:	f006 fe8b 	bl	8007d40 <strtok>
 800102a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800102c:	e0a2      	b.n	8001174 <AT_ParseConnSettings+0x164>
    switch (num++) {
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	73fa      	strb	r2, [r7, #15]
 8001034:	2b0b      	cmp	r3, #11
 8001036:	f200 808c 	bhi.w	8001152 <AT_ParseConnSettings+0x142>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <AT_ParseConnSettings+0x30>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001071 	.word	0x08001071
 8001044:	08001087 	.word	0x08001087
 8001048:	0800109f 	.word	0x0800109f
 800104c:	080010b3 	.word	0x080010b3
 8001050:	080010c7 	.word	0x080010c7
 8001054:	080010db 	.word	0x080010db
 8001058:	080010eb 	.word	0x080010eb
 800105c:	080010fb 	.word	0x080010fb
 8001060:	0800110b 	.word	0x0800110b
 8001064:	0800111b 	.word	0x0800111b
 8001068:	0800112b 	.word	0x0800112b
 800106c:	0800113f 	.word	0x0800113f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2220      	movs	r2, #32
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	4618      	mov	r0, r3
 8001078:	f006 fe38 	bl	8007cec <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001084:	e066      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3321      	adds	r3, #33	; 0x21
 800108a:	2220      	movs	r2, #32
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	4618      	mov	r0, r3
 8001090:	f006 fe2c 	bl	8007cec <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 800109c:	e05a      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800109e:	2100      	movs	r1, #0
 80010a0:	68b8      	ldr	r0, [r7, #8]
 80010a2:	f7ff feab 	bl	8000dfc <ParseNumber>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80010b0:	e050      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 80010b2:	2100      	movs	r1, #0
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f7ff fea1 	bl	8000dfc <ParseNumber>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80010c4:	e046      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80010c6:	2100      	movs	r1, #0
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	f7ff fe97 	bl	8000dfc <ParseNumber>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80010d8:	e03c      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3348      	adds	r3, #72	; 0x48
 80010de:	2204      	movs	r2, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	68b8      	ldr	r0, [r7, #8]
 80010e4:	f7ff fece 	bl	8000e84 <ParseIP>
      break;
 80010e8:	e034      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	334c      	adds	r3, #76	; 0x4c
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	68b8      	ldr	r0, [r7, #8]
 80010f4:	f7ff fec6 	bl	8000e84 <ParseIP>
      break;
 80010f8:	e02c      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3350      	adds	r3, #80	; 0x50
 80010fe:	2204      	movs	r2, #4
 8001100:	4619      	mov	r1, r3
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f7ff febe 	bl	8000e84 <ParseIP>
      break;
 8001108:	e024      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3354      	adds	r3, #84	; 0x54
 800110e:	2204      	movs	r2, #4
 8001110:	4619      	mov	r1, r3
 8001112:	68b8      	ldr	r0, [r7, #8]
 8001114:	f7ff feb6 	bl	8000e84 <ParseIP>
      break;
 8001118:	e01c      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3358      	adds	r3, #88	; 0x58
 800111e:	2204      	movs	r2, #4
 8001120:	4619      	mov	r1, r3
 8001122:	68b8      	ldr	r0, [r7, #8]
 8001124:	f7ff feae 	bl	8000e84 <ParseIP>
      break;
 8001128:	e014      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800112a:	2100      	movs	r1, #0
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	f7ff fe65 	bl	8000dfc <ParseNumber>
 8001132:	4603      	mov	r3, r0
 8001134:	b2da      	uxtb	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800113c:	e00a      	b.n	8001154 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 800113e:	2100      	movs	r1, #0
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f7ff fe5b 	bl	8000dfc <ParseNumber>
 8001146:	4603      	mov	r3, r0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001150:	e000      	b.n	8001154 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001152:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <AT_ParseConnSettings+0x178>)
 8001156:	2000      	movs	r0, #0
 8001158:	f006 fdf2 	bl	8007d40 <strtok>
 800115c:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <AT_ParseConnSettings+0x164>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	3b01      	subs	r3, #1
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b2c      	cmp	r3, #44	; 0x2c
 800116c:	d102      	bne.n	8001174 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f af59 	bne.w	800102e <AT_ParseConnSettings+0x1e>
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	0800a238 	.word	0x0800a238

0800118c <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d056      	beq.n	8001258 <AT_ExecuteCommand+0xcc>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d051      	beq.n	8001258 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80011ba:	68b8      	ldr	r0, [r7, #8]
 80011bc:	f7ff f808 	bl	80001d0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b299      	uxth	r1, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80011ca:	461a      	mov	r2, r3
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	47a0      	blx	r4
 80011d0:	4603      	mov	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	dd3e      	ble.n	8001258 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80011e6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	4798      	blx	r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80011f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	dd27      	ble.n	800124a <AT_ExecuteCommand+0xbe>
 80011fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001202:	dc22      	bgt.n	800124a <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001204:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001208:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800120c:	d105      	bne.n	800121a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800120e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001212:	b29b      	uxth	r3, r3
 8001214:	3b01      	subs	r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800121a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001226:	490f      	ldr	r1, [pc, #60]	; (8001264 <AT_ExecuteCommand+0xd8>)
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f006 fd72 	bl	8007d12 <strstr>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	e010      	b.n	800125a <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001238:	490b      	ldr	r1, [pc, #44]	; (8001268 <AT_ExecuteCommand+0xdc>)
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f006 fd69 	bl	8007d12 <strstr>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001246:	2305      	movs	r3, #5
 8001248:	e007      	b.n	800125a <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800124a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800124e:	f113 0f04 	cmn.w	r3, #4
 8001252:	d101      	bne.n	8001258 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001254:	2306      	movs	r3, #6
 8001256:	e000      	b.n	800125a <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001258:	2304      	movs	r3, #4
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	0800a250 	.word	0x0800a250
 8001268:	0800a25c 	.word	0x0800a25c

0800126c <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001274:	2302      	movs	r3, #2
 8001276:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f247 5230 	movw	r2, #30000	; 0x7530
 800127e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01b      	beq.n	80012c4 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001292:	2000      	movs	r0, #0
 8001294:	4798      	blx	r3
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d113      	bne.n	80012c4 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012a2:	461a      	mov	r2, r3
 80012a4:	490a      	ldr	r1, [pc, #40]	; (80012d0 <ES_WIFI_Init+0x64>)
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff70 	bl	800118c <AT_ExecuteCommand>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d106      	bne.n	80012c4 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fe18 	bl	8000ef4 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800a26c 	.word	0x0800a26c

080012d4 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <ES_WIFI_RegisterBusIO+0x2c>
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d008      	beq.n	8001300 <ES_WIFI_RegisterBusIO+0x2c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <ES_WIFI_RegisterBusIO+0x2c>
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <ES_WIFI_RegisterBusIO+0x2c>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001300:	2302      	movs	r3, #2
 8001302:	e014      	b.n	800132e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	4932      	ldr	r1, [pc, #200]	; (800141c <ES_WIFI_Connect+0xe0>)
 8001354:	4618      	mov	r0, r3
 8001356:	f006 fc95 	bl	8007c84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001366:	461a      	mov	r2, r3
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff ff0f 	bl	800118c <AT_ExecuteCommand>
 800136e:	4603      	mov	r3, r0
 8001370:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d14b      	bne.n	8001410 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4927      	ldr	r1, [pc, #156]	; (8001420 <ES_WIFI_Connect+0xe4>)
 8001382:	4618      	mov	r0, r3
 8001384:	f006 fc7e 	bl	8007c84 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001394:	461a      	mov	r2, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff fef8 	bl	800118c <AT_ExecuteCommand>
 800139c:	4603      	mov	r3, r0
 800139e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d134      	bne.n	8001410 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	78fa      	ldrb	r2, [r7, #3]
 80013aa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013b4:	78fa      	ldrb	r2, [r7, #3]
 80013b6:	491b      	ldr	r1, [pc, #108]	; (8001424 <ES_WIFI_Connect+0xe8>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 fc63 	bl	8007c84 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013ca:	461a      	mov	r2, r3
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff fedd 	bl	800118c <AT_ExecuteCommand>
 80013d2:	4603      	mov	r3, r0
 80013d4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d119      	bne.n	8001410 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013e2:	4911      	ldr	r1, [pc, #68]	; (8001428 <ES_WIFI_Connect+0xec>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 fc4d 	bl	8007c84 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013f6:	461a      	mov	r2, r3
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fec7 	bl	800118c <AT_ExecuteCommand>
 80013fe:	4603      	mov	r3, r0
 8001400:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001410:	7dfb      	ldrb	r3, [r7, #23]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0800a284 	.word	0x0800a284
 8001420:	0800a28c 	.word	0x0800a28c
 8001424:	0800a294 	.word	0x0800a294
 8001428:	0800a29c 	.word	0x0800a29c

0800142c <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800143a:	4913      	ldr	r1, [pc, #76]	; (8001488 <ES_WIFI_IsConnected+0x5c>)
 800143c:	4618      	mov	r0, r3
 800143e:	f006 fc21 	bl	8007c84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800144e:	461a      	mov	r2, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fe9b 	bl	800118c <AT_ExecuteCommand>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10b      	bne.n	8001478 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8001466:	2b31      	cmp	r3, #49	; 0x31
 8001468:	bf0c      	ite	eq
 800146a:	2301      	moveq	r3, #1
 800146c:	2300      	movne	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	0800a2a0 	.word	0x0800a2a0

0800148c <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800149a:	4910      	ldr	r1, [pc, #64]	; (80014dc <ES_WIFI_GetNetworkSettings+0x50>)
 800149c:	4618      	mov	r0, r3
 800149e:	f006 fbf1 	bl	8007c84 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014ae:	461a      	mov	r2, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fe6b 	bl	800118c <AT_ExecuteCommand>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d108      	bne.n	80014d2 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	338d      	adds	r3, #141	; 0x8d
 80014ca:	4619      	mov	r1, r3
 80014cc:	4610      	mov	r0, r2
 80014ce:	f7ff fd9f 	bl	8001010 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	0800a2a8 	.word	0x0800a2a8

080014e0 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 80014e8:	4b57      	ldr	r3, [pc, #348]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	4a56      	ldr	r2, [pc, #344]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 80014ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
 80014f4:	4b54      	ldr	r3, [pc, #336]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a50      	ldr	r2, [pc, #320]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b4e      	ldr	r3, [pc, #312]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	4a44      	ldr	r2, [pc, #272]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153c:	4b42      	ldr	r3, [pc, #264]	; (8001648 <SPI_WIFI_MspInit+0x168>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154e:	483f      	ldr	r0, [pc, #252]	; (800164c <SPI_WIFI_MspInit+0x16c>)
 8001550:	f001 fba6 	bl	8002ca0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4837      	ldr	r0, [pc, #220]	; (800164c <SPI_WIFI_MspInit+0x16c>)
 800156e:	f001 f9d5 	bl	800291c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001572:	2302      	movs	r3, #2
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4831      	ldr	r0, [pc, #196]	; (8001650 <SPI_WIFI_MspInit+0x170>)
 800158c:	f001 f9c6 	bl	800291c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4828      	ldr	r0, [pc, #160]	; (8001650 <SPI_WIFI_MspInit+0x170>)
 80015ae:	f001 f9b5 	bl	800291c <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80015b2:	2201      	movs	r2, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	4826      	ldr	r0, [pc, #152]	; (8001650 <SPI_WIFI_MspInit+0x170>)
 80015b8:	f001 fb72 	bl	8002ca0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80015bc:	2301      	movs	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	481f      	ldr	r0, [pc, #124]	; (8001650 <SPI_WIFI_MspInit+0x170>)
 80015d4:	f001 f9a2 	bl	800291c <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80015d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80015e6:	2301      	movs	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80015ea:	2306      	movs	r3, #6
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4817      	ldr	r0, [pc, #92]	; (8001654 <SPI_WIFI_MspInit+0x174>)
 80015f6:	f001 f991 	bl	800291c <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80015fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001608:	2301      	movs	r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800160c:	2306      	movs	r3, #6
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	480f      	ldr	r0, [pc, #60]	; (8001654 <SPI_WIFI_MspInit+0x174>)
 8001618:	f001 f980 	bl	800291c <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800161c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800162a:	2301      	movs	r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800162e:	2306      	movs	r3, #6
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <SPI_WIFI_MspInit+0x174>)
 800163a:	f001 f96f 	bl	800291c <HAL_GPIO_Init>
}
 800163e:	bf00      	nop
 8001640:	3730      	adds	r7, #48	; 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400
 8001650:	48001000 	.word	0x48001000
 8001654:	48000800 	.word	0x48000800

08001658 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d145      	bne.n	80016f8 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <SPI_WIFI_Init+0xb4>)
 800166e:	4a28      	ldr	r2, [pc, #160]	; (8001710 <SPI_WIFI_Init+0xb8>)
 8001670:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001672:	4826      	ldr	r0, [pc, #152]	; (800170c <SPI_WIFI_Init+0xb4>)
 8001674:	f7ff ff34 	bl	80014e0 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <SPI_WIFI_Init+0xb4>)
 800167a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <SPI_WIFI_Init+0xb4>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <SPI_WIFI_Init+0xb4>)
 8001688:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800168c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <SPI_WIFI_Init+0xb4>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <SPI_WIFI_Init+0xb4>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <SPI_WIFI_Init+0xb4>)
 800169c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <SPI_WIFI_Init+0xb4>)
 80016a4:	2210      	movs	r2, #16
 80016a6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <SPI_WIFI_Init+0xb4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <SPI_WIFI_Init+0xb4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <SPI_WIFI_Init+0xb4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <SPI_WIFI_Init+0xb4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <SPI_WIFI_Init+0xb4>)
 80016c2:	f003 f97b 	bl	80049bc <HAL_SPI_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
 80016d0:	e018      	b.n	8001704 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2007      	movs	r0, #7
 80016d8:	f000 fe15 	bl	8002306 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80016dc:	2007      	movs	r0, #7
 80016de:	f000 fe2e 	bl	800233e <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2033      	movs	r0, #51	; 0x33
 80016e8:	f000 fe0d 	bl	8002306 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80016ec:	2033      	movs	r0, #51	; 0x33
 80016ee:	f000 fe26 	bl	800233e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f000 f9fe 	bl	8001af4 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 80016f8:	f000 f80c 	bl	8001714 <SPI_WIFI_ResetModule>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000174 	.word	0x20000174
 8001710:	40003c00 	.word	0x40003c00

08001714 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800171a:	f000 fce9 	bl	80020f0 <HAL_GetTick>
 800171e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172a:	4830      	ldr	r0, [pc, #192]	; (80017ec <SPI_WIFI_ResetModule+0xd8>)
 800172c:	f001 fab8 	bl	8002ca0 <HAL_GPIO_WritePin>
 8001730:	200a      	movs	r0, #10
 8001732:	f000 fce9 	bl	8002108 <HAL_Delay>
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	482b      	ldr	r0, [pc, #172]	; (80017ec <SPI_WIFI_ResetModule+0xd8>)
 800173e:	f001 faaf 	bl	8002ca0 <HAL_GPIO_WritePin>
 8001742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001746:	f000 fcdf 	bl	8002108 <HAL_Delay>
  WIFI_ENABLE_NSS();
 800174a:	2200      	movs	r2, #0
 800174c:	2101      	movs	r1, #1
 800174e:	4827      	ldr	r0, [pc, #156]	; (80017ec <SPI_WIFI_ResetModule+0xd8>)
 8001750:	f001 faa6 	bl	8002ca0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001754:	200f      	movs	r0, #15
 8001756:	f000 f9cd 	bl	8001af4 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 800175a:	e020      	b.n	800179e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	463a      	mov	r2, r7
 8001760:	18d1      	adds	r1, r2, r3
 8001762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001766:	2201      	movs	r2, #1
 8001768:	4821      	ldr	r0, [pc, #132]	; (80017f0 <SPI_WIFI_ResetModule+0xdc>)
 800176a:	f003 fa2f 	bl	8004bcc <HAL_SPI_Receive>
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	3302      	adds	r3, #2
 8001776:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001778:	f000 fcba 	bl	80020f0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001786:	d202      	bcs.n	800178e <SPI_WIFI_ResetModule+0x7a>
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800178e:	2201      	movs	r2, #1
 8001790:	2101      	movs	r1, #1
 8001792:	4816      	ldr	r0, [pc, #88]	; (80017ec <SPI_WIFI_ResetModule+0xd8>)
 8001794:	f001 fa84 	bl	8002ca0 <HAL_GPIO_WritePin>
      return -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	e021      	b.n	80017e2 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800179e:	2102      	movs	r1, #2
 80017a0:	4812      	ldr	r0, [pc, #72]	; (80017ec <SPI_WIFI_ResetModule+0xd8>)
 80017a2:	f001 fa65 	bl	8002c70 <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d0d7      	beq.n	800175c <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80017ac:	2201      	movs	r2, #1
 80017ae:	2101      	movs	r1, #1
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <SPI_WIFI_ResetModule+0xd8>)
 80017b2:	f001 fa75 	bl	8002ca0 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80017b6:	783b      	ldrb	r3, [r7, #0]
 80017b8:	2b15      	cmp	r3, #21
 80017ba:	d10e      	bne.n	80017da <SPI_WIFI_ResetModule+0xc6>
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b15      	cmp	r3, #21
 80017c0:	d10b      	bne.n	80017da <SPI_WIFI_ResetModule+0xc6>
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	2b0d      	cmp	r3, #13
 80017c6:	d108      	bne.n	80017da <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80017c8:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80017ca:	2b0a      	cmp	r3, #10
 80017cc:	d105      	bne.n	80017da <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80017ce:	793b      	ldrb	r3, [r7, #4]
 80017d0:	2b3e      	cmp	r3, #62	; 0x3e
 80017d2:	d102      	bne.n	80017da <SPI_WIFI_ResetModule+0xc6>
 80017d4:	797b      	ldrb	r3, [r7, #5]
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d002      	beq.n	80017e0 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e000      	b.n	80017e2 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	48001000 	.word	0x48001000
 80017f0:	20000174 	.word	0x20000174

080017f4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <SPI_WIFI_DeInit+0x10>)
 80017fa:	f003 f9ab 	bl	8004b54 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000174 	.word	0x20000174

08001808 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001810:	f000 fc6e 	bl	80020f0 <HAL_GetTick>
 8001814:	4603      	mov	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001818:	e00a      	b.n	8001830 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800181a:	f000 fc69 	bl	80020f0 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1ad2      	subs	r2, r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d902      	bls.n	8001830 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e007      	b.n	8001840 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001830:	2102      	movs	r1, #2
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <wait_cmddata_rdy_high+0x40>)
 8001834:	f001 fa1c 	bl	8002c70 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d1ed      	bne.n	800181a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	48001000 	.word	0x48001000

0800184c <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001854:	f000 fc4c 	bl	80020f0 <HAL_GetTick>
 8001858:	4603      	mov	r3, r0
 800185a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 800185c:	e00a      	b.n	8001874 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800185e:	f000 fc47 	bl	80020f0 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d902      	bls.n	8001874 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e004      	b.n	800187e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <wait_cmddata_rdy_rising_event+0x3c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d0f0      	beq.n	800185e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800187c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001e0 	.word	0x200001e0

0800188c <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001894:	f000 fc2c 	bl	80020f0 <HAL_GetTick>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 800189c:	e00a      	b.n	80018b4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800189e:	f000 fc27 	bl	80020f0 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d902      	bls.n	80018b4 <wait_spi_rx_event+0x28>
    {
      return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e004      	b.n	80018be <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <wait_spi_rx_event+0x3c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d0f0      	beq.n	800189e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80018bc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001d8 	.word	0x200001d8

080018cc <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80018d4:	f000 fc0c 	bl	80020f0 <HAL_GetTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80018dc:	e00a      	b.n	80018f4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80018de:	f000 fc07 	bl	80020f0 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d902      	bls.n	80018f4 <wait_spi_tx_event+0x28>
    {
      return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e004      	b.n	80018fe <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <wait_spi_tx_event+0x3c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d0f0      	beq.n	80018de <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80018fc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001dc 	.word	0x200001dc

0800190c <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	460b      	mov	r3, r1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 800191e:	2201      	movs	r2, #1
 8001920:	2101      	movs	r1, #1
 8001922:	4834      	ldr	r0, [pc, #208]	; (80019f4 <SPI_WIFI_ReceiveData+0xe8>)
 8001924:	f001 f9bc 	bl	8002ca0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f8e3 	bl	8001af4 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff8b 	bl	800184c <wait_cmddata_rdy_rising_event>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	da02      	bge.n	8001942 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800193c:	f06f 0302 	mvn.w	r3, #2
 8001940:	e054      	b.n	80019ec <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	482b      	ldr	r0, [pc, #172]	; (80019f4 <SPI_WIFI_ReceiveData+0xe8>)
 8001948:	f001 f9aa 	bl	8002ca0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800194c:	200f      	movs	r0, #15
 800194e:	f000 f8d1 	bl	8001af4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001952:	e03d      	b.n	80019d0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8001954:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	429a      	cmp	r2, r3
 800195c:	db02      	blt.n	8001964 <SPI_WIFI_ReceiveData+0x58>
 800195e:	897b      	ldrh	r3, [r7, #10]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d13c      	bne.n	80019de <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <SPI_WIFI_ReceiveData+0xec>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	2201      	movs	r2, #1
 8001970:	4619      	mov	r1, r3
 8001972:	4822      	ldr	r0, [pc, #136]	; (80019fc <SPI_WIFI_ReceiveData+0xf0>)
 8001974:	f003 fe9a 	bl	80056ac <HAL_SPI_Receive_IT>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800197e:	2201      	movs	r2, #1
 8001980:	2101      	movs	r1, #1
 8001982:	481c      	ldr	r0, [pc, #112]	; (80019f4 <SPI_WIFI_ReceiveData+0xe8>)
 8001984:	f001 f98c 	bl	8002ca0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	e02e      	b.n	80019ec <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff7b 	bl	800188c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001996:	7d3a      	ldrb	r2, [r7, #20]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3301      	adds	r3, #1
 80019a0:	7d7a      	ldrb	r2, [r7, #21]
 80019a2:	701a      	strb	r2, [r3, #0]
      length += 2;
 80019a4:	8afb      	ldrh	r3, [r7, #22]
 80019a6:	3302      	adds	r3, #2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3302      	adds	r3, #2
 80019b0:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80019b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019ba:	db09      	blt.n	80019d0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80019bc:	2201      	movs	r2, #1
 80019be:	2101      	movs	r1, #1
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <SPI_WIFI_ReceiveData+0xe8>)
 80019c2:	f001 f96d 	bl	8002ca0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80019c6:	f7ff fea5 	bl	8001714 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80019ca:	f06f 0303 	mvn.w	r3, #3
 80019ce:	e00d      	b.n	80019ec <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80019d0:	2102      	movs	r1, #2
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <SPI_WIFI_ReceiveData+0xe8>)
 80019d4:	f001 f94c 	bl	8002c70 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d0ba      	beq.n	8001954 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80019de:	2201      	movs	r2, #1
 80019e0:	2101      	movs	r1, #1
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <SPI_WIFI_ReceiveData+0xe8>)
 80019e4:	f001 f95c 	bl	8002ca0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80019e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	48001000 	.word	0x48001000
 80019f8:	200001d8 	.word	0x200001d8
 80019fc:	20000174 	.word	0x20000174

08001a00 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fef9 	bl	8001808 <wait_cmddata_rdy_high>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da02      	bge.n	8001a22 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e04f      	b.n	8001ac2 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <SPI_WIFI_SendData+0xcc>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4828      	ldr	r0, [pc, #160]	; (8001ad0 <SPI_WIFI_SendData+0xd0>)
 8001a2e:	f001 f937 	bl	8002ca0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f85e 	bl	8001af4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001a38:	897b      	ldrh	r3, [r7, #10]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d919      	bls.n	8001a72 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <SPI_WIFI_SendData+0xd4>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8001a44:	897b      	ldrh	r3, [r7, #10]
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <SPI_WIFI_SendData+0xd8>)
 8001a50:	f003 fd8a 	bl	8005568 <HAL_SPI_Transmit_IT>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	481c      	ldr	r0, [pc, #112]	; (8001ad0 <SPI_WIFI_SendData+0xd0>)
 8001a60:	f001 f91e 	bl	8002ca0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	e02b      	b.n	8001ac2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff2d 	bl	80018cc <wait_spi_tx_event>
  }

  if (len & 1)
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d020      	beq.n	8001abe <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001a88:	230a      	movs	r3, #10
 8001a8a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <SPI_WIFI_SendData+0xd4>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2201      	movs	r2, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <SPI_WIFI_SendData+0xd8>)
 8001a9c:	f003 fd64 	bl	8005568 <HAL_SPI_Transmit_IT>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <SPI_WIFI_SendData+0xd0>)
 8001aac:	f001 f8f8 	bl	8002ca0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e005      	b.n	8001ac2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff07 	bl	80018cc <wait_spi_tx_event>
  }
  return len;
 8001abe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200001e0 	.word	0x200001e0
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	200001dc 	.word	0x200001dc
 8001ad8:	20000174 	.word	0x20000174

08001adc <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb0f 	bl	8002108 <HAL_Delay>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <SPI_WIFI_DelayUs+0x94>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d122      	bne.n	8001b52 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <SPI_WIFI_DelayUs+0x98>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <SPI_WIFI_DelayUs+0x9c>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001b22:	f000 fae5 	bl	80020f0 <HAL_GetTick>
 8001b26:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8001b28:	e002      	b.n	8001b30 <SPI_WIFI_DelayUs+0x3c>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8001b36:	f000 fadb 	bl	80020f0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <SPI_WIFI_DelayUs+0x94>)
 8001b42:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <SPI_WIFI_DelayUs+0x94>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <SPI_WIFI_DelayUs+0x5e>
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <SPI_WIFI_DelayUs+0x94>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <SPI_WIFI_DelayUs+0x98>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <SPI_WIFI_DelayUs+0xa0>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	0c9a      	lsrs	r2, r3, #18
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <SPI_WIFI_DelayUs+0x94>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8001b72:	e002      	b.n	8001b7a <SPI_WIFI_DelayUs+0x86>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f9      	bne.n	8001b74 <SPI_WIFI_DelayUs+0x80>
  return;
 8001b80:	bf00      	nop
}
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200001e4 	.word	0x200001e4
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	10624dd3 	.word	0x10624dd3
 8001b94:	431bde83 	.word	0x431bde83

08001b98 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_SPI_RxCpltCallback+0x24>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_SPI_RxCpltCallback+0x24>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
  }
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200001d8 	.word	0x200001d8

08001bc0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_SPI_TxCpltCallback+0x24>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <HAL_SPI_TxCpltCallback+0x24>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200001dc 	.word	0x200001dc

08001be8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SPI_WIFI_ISR+0x1c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <SPI_WIFI_ISR+0x1c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
   }
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	200001e0 	.word	0x200001e0

08001c08 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <WIFI_Init+0x40>)
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <WIFI_Init+0x44>)
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <WIFI_Init+0x48>)
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <WIFI_Init+0x4c>)
 8001c1e:	490e      	ldr	r1, [pc, #56]	; (8001c58 <WIFI_Init+0x50>)
 8001c20:	480e      	ldr	r0, [pc, #56]	; (8001c5c <WIFI_Init+0x54>)
 8001c22:	f7ff fb57 	bl	80012d4 <ES_WIFI_RegisterBusIO>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d107      	bne.n	8001c3c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <WIFI_Init+0x54>)
 8001c2e:	f7ff fb1d 	bl	800126c <ES_WIFI_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	0800190d 	.word	0x0800190d
 8001c4c:	08001a01 	.word	0x08001a01
 8001c50:	08001add 	.word	0x08001add
 8001c54:	080017f5 	.word	0x080017f5
 8001c58:	08001659 	.word	0x08001659
 8001c5c:	200001e8 	.word	0x200001e8

08001c60 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <WIFI_Connect+0x40>)
 8001c7a:	f7ff fb5f 	bl	800133c <ES_WIFI_Connect>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001c84:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <WIFI_Connect+0x40>)
 8001c86:	f7ff fc01 	bl	800148c <ES_WIFI_GetNetworkSettings>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200001e8 	.word	0x200001e8

08001ca4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <WIFI_GetIP_Address+0x38>
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d90d      	bls.n	8001cdc <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001cc0:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <WIFI_GetIP_Address+0x44>)
 8001cc2:	f7ff fbb3 	bl	800142c <ES_WIFI_IsConnected>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <WIFI_GetIP_Address+0x38>
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <WIFI_GetIP_Address+0x44>)
 8001cce:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8001cd2:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001e8 	.word	0x200001e8

08001cec <main>:


/* Private functions ---------------------------------------------------------*/


int main(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

	/* Initializes MCU, drivers and middleware */
	stm_start_init();
 8001cf0:	f7ff f87e 	bl	8000df0 <stm_start_init>

	// Initialize specific functionality
	AplusAPP_Init();
 8001cf4:	f7fe fca6 	bl	8000644 <AplusAPP_Init>

	// Main processing loop
	AplusAPP_Entry();
 8001cf8:	f7fe fd02 	bl	8000700 <AplusAPP_Entry>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <HardFault_Handler+0x4>

08001d16 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <MemManage_Handler+0x4>

08001d1c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <BusFault_Handler+0x4>

08001d22 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <UsageFault_Handler+0x4>

08001d28 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001d56:	f000 f9b7 	bl	80020c8 <HAL_IncTick>
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d62:	2002      	movs	r0, #2
 8001d64:	f000 ffb4 	bl	8002cd0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_kill>:

int _kill(int pid, int sig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d86:	f005 fa43 	bl	8007210 <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2216      	movs	r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffe7 	bl	8001d7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dae:	e7fe      	b.n	8001dae <_exit+0x12>

08001db0 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	701a      	strb	r2, [r3, #0]

	return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_write>:

int _write(int file, char *ptr, int len)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e009      	b.n	8001df8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	60ba      	str	r2, [r7, #8]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fd6d 	bl	80008cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf1      	blt.n	8001de4 <_write+0x12>
	}
	return len;
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_sbrk+0x50>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x16>
		heap_end = &end;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <_sbrk+0x50>)
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <_sbrk+0x54>)
 8001e20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <_sbrk+0x50>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <_sbrk+0x50>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	466a      	mov	r2, sp
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d907      	bls.n	8001e46 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001e36:	f005 f9eb 	bl	8007210 <__errno>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	e006      	b.n	8001e54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <_sbrk+0x50>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <_sbrk+0x50>)
 8001e50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000aec 	.word	0x20000aec
 8001e60:	20000bb0 	.word	0x20000bb0

08001e64 <_close>:

int _close(int file)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8c:	605a      	str	r2, [r3, #4]
	return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_isatty>:

int _isatty(int file)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
	return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <SystemInit+0x64>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <SystemInit+0x64>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <SystemInit+0x68>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <SystemInit+0x68>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <SystemInit+0x68>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <SystemInit+0x68>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <SystemInit+0x68>)
 8001ef8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001efc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <SystemInit+0x68>)
 8001f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <SystemInit+0x68>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <SystemInit+0x68>)
 8001f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <SystemInit+0x68>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SystemInit+0x64>)
 8001f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f22:	609a      	str	r2, [r3, #8]
#endif
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00
 8001f34:	40021000 	.word	0x40021000

08001f38 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10b      	bne.n	8001f62 <BSP_COM_Init+0x2a>
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	4a2c      	ldr	r2, [pc, #176]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10b      	bne.n	8001f80 <BSP_COM_Init+0x48>
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10b      	bne.n	8001f9e <BSP_COM_Init+0x66>
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6613      	str	r3, [r2, #96]	; 0x60
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <BSP_COM_Init+0xc8>)
 8001f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8001f9e:	2340      	movs	r3, #64	; 0x40
 8001fa0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001fae:	2307      	movs	r3, #7
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <BSP_COM_Init+0xcc>)
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fcab 	bl	800291c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001fce:	2307      	movs	r3, #7
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <BSP_COM_Init+0xd0>)
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	f107 0214 	add.w	r2, r7, #20
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fc9b 	bl	800291c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4a08      	ldr	r2, [pc, #32]	; (800200c <BSP_COM_Init+0xd4>)
 8001fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	f004 fb8d 	bl	8006712 <HAL_UART_Init>
}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	20000010 	.word	0x20000010
 8002008:	20000014 	.word	0x20000014
 800200c:	2000000c 	.word	0x2000000c

08002010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201a:	2003      	movs	r0, #3
 800201c:	f000 f968 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002020:	200f      	movs	r0, #15
 8002022:	f000 f815 	bl	8002050 <HAL_InitTick>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	e001      	b.n	8002036 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002032:	f000 f805 	bl	8002040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002036:	79fb      	ldrb	r3, [r7, #7]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_InitTick+0x6c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_InitTick+0x70>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_InitTick+0x6c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f96d 	bl	800235a <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d809      	bhi.n	80020a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 f937 	bl	8002306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_InitTick+0x74>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e007      	b.n	80020b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e004      	b.n	80020b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e001      	b.n	80020b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000001c 	.word	0x2000001c
 80020c0:	20000008 	.word	0x20000008
 80020c4:	20000018 	.word	0x20000018

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000001c 	.word	0x2000001c
 80020ec:	20000b74 	.word	0x20000b74

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000b74 	.word	0x20000b74

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000001c 	.word	0x2000001c

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f7ff ff8e 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff29 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff3e 	bl	8002198 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff8e 	bl	8002244 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5d 	bl	80021f0 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff31 	bl	80021b4 <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d005      	beq.n	8002396 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e029      	b.n	80023ea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 020e 	bic.w	r2, r2, #14
 80023a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f003 021c 	and.w	r2, r3, #28
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
    }
  }
  return status;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_FLASH_Program+0xd0>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_FLASH_Program+0x1e>
 800240e:	2302      	movs	r3, #2
 8002410:	e053      	b.n	80024ba <HAL_FLASH_Program+0xc6>
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <HAL_FLASH_Program+0xd0>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002418:	f24c 3050 	movw	r0, #50000	; 0xc350
 800241c:	f000 f888 	bl	8002530 <FLASH_WaitForLastOperation>
 8002420:	4603      	mov	r3, r0
 8002422:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d143      	bne.n	80024b2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_FLASH_Program+0xd0>)
 800242c:	2200      	movs	r2, #0
 800242e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_FLASH_Program+0xd4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_FLASH_Program+0xd4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_FLASH_Program+0xd4>)
 8002442:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002446:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_FLASH_Program+0xd0>)
 800244a:	2202      	movs	r2, #2
 800244c:	771a      	strb	r2, [r3, #28]
 800244e:	e002      	b.n	8002456 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_FLASH_Program+0xd0>)
 8002452:	2200      	movs	r2, #0
 8002454:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800245c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002460:	68b8      	ldr	r0, [r7, #8]
 8002462:	f000 f8bb 	bl	80025dc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002466:	2301      	movs	r3, #1
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	e010      	b.n	800248e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d002      	beq.n	8002478 <HAL_FLASH_Program+0x84>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d10a      	bne.n	800248e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f000 f8d3 	bl	8002628 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d102      	bne.n	800248e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002488:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800248c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800248e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002492:	f000 f84d 	bl	8002530 <FLASH_WaitForLastOperation>
 8002496:	4603      	mov	r3, r0
 8002498:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_FLASH_Program+0xd4>)
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <HAL_FLASH_Program+0xd4>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80024ae:	f000 f9eb 	bl	8002888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <HAL_FLASH_Program+0xd0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]

  return status;
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000020 	.word	0x20000020
 80024c8:	40022000 	.word	0x40022000

080024cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_FLASH_Unlock+0x38>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	da0b      	bge.n	80024f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_FLASH_Unlock+0x38>)
 80024e0:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_FLASH_Unlock+0x3c>)
 80024e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_FLASH_Unlock+0x38>)
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_FLASH_Unlock+0x40>)
 80024e8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_FLASH_Unlock+0x38>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da01      	bge.n	80024f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80024f6:	79fb      	ldrb	r3, [r7, #7]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40022000 	.word	0x40022000
 8002508:	45670123 	.word	0x45670123
 800250c:	cdef89ab 	.word	0xcdef89ab

08002510 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_FLASH_Lock+0x1c>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_FLASH_Lock+0x1c>)
 800251a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800251e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40022000 	.word	0x40022000

08002530 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fdda 	bl	80020f0 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800253e:	e00d      	b.n	800255c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d009      	beq.n	800255c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002548:	f7ff fdd2 	bl	80020f0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d801      	bhi.n	800255c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e037      	b.n	80025cc <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <FLASH_WaitForLastOperation+0xa4>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1eb      	bne.n	8002540 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <FLASH_WaitForLastOperation+0xa4>)
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01e      	beq.n	80025b8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <FLASH_WaitForLastOperation+0xa8>)
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4313      	orrs	r3, r2
 8002582:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <FLASH_WaitForLastOperation+0xa8>)
 8002584:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <FLASH_WaitForLastOperation+0x70>
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <FLASH_WaitForLastOperation+0xa4>)
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800259a:	490e      	ldr	r1, [pc, #56]	; (80025d4 <FLASH_WaitForLastOperation+0xa4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	618b      	str	r3, [r1, #24]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <FLASH_WaitForLastOperation+0x84>
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <FLASH_WaitForLastOperation+0xa4>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80025b2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e009      	b.n	80025cc <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <FLASH_WaitForLastOperation+0xa4>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <FLASH_WaitForLastOperation+0xa4>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40022000 	.word	0x40022000
 80025d8:	20000020 	.word	0x20000020

080025dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <FLASH_Program_DoubleWord+0x48>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <FLASH_Program_DoubleWord+0x48>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80025fa:	f3bf 8f6f 	isb	sy
}
 80025fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	000a      	movs	r2, r1
 800260e:	2300      	movs	r3, #0
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	3104      	adds	r1, #4
 8002614:	4613      	mov	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40022000 	.word	0x40022000

08002628 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002632:	2340      	movs	r3, #64	; 0x40
 8002634:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <FLASH_Program_Fast+0x68>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <FLASH_Program_Fast+0x68>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264a:	f3ef 8310 	mrs	r3, PRIMASK
 800264e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002650:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002654:	b672      	cpsid	i
}
 8002656:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	3304      	adds	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]
    row_index--;
 800266c:	7ffb      	ldrb	r3, [r7, #31]
 800266e:	3b01      	subs	r3, #1
 8002670:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ef      	bne.n	8002658 <FLASH_Program_Fast+0x30>
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f383 8810 	msr	PRIMASK, r3
}
 8002682:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002684:	bf00      	nop
 8002686:	3724      	adds	r7, #36	; 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40022000 	.word	0x40022000

08002694 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_FLASHEx_Erase+0x16>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e087      	b.n	80027ba <HAL_FLASHEx_Erase+0x126>
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026b4:	f7ff ff3c 	bl	8002530 <FLASH_WaitForLastOperation>
 80026b8:	4603      	mov	r3, r0
 80026ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d177      	bne.n	80027b2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026c2:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80026c8:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80026d4:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 80026e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80026ec:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 80026ee:	2203      	movs	r2, #3
 80026f0:	771a      	strb	r2, [r3, #28]
 80026f2:	e016      	b.n	8002722 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	771a      	strb	r2, [r3, #28]
 80026fa:	e012      	b.n	8002722 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80026fc:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2e      	ldr	r2, [pc, #184]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 800270e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002712:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 8002716:	2202      	movs	r2, #2
 8002718:	771a      	strb	r2, [r3, #28]
 800271a:	e002      	b.n	8002722 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 800271e:	2200      	movs	r2, #0
 8002720:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d113      	bne.n	8002752 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f84c 	bl	80027cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002738:	f7ff fefa 	bl	8002530 <FLASH_WaitForLastOperation>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 8002746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800274a:	f023 0304 	bic.w	r3, r3, #4
 800274e:	6153      	str	r3, [r2, #20]
 8002750:	e02d      	b.n	80027ae <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	e01d      	b.n	800279e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4619      	mov	r1, r3
 8002768:	68b8      	ldr	r0, [r7, #8]
 800276a:	f000 f857 	bl	800281c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800276e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002772:	f7ff fedd 	bl	8002530 <FLASH_WaitForLastOperation>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_FLASHEx_Erase+0x134>)
 8002780:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002784:	f023 0302 	bic.w	r3, r3, #2
 8002788:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	601a      	str	r2, [r3, #0]
          break;
 8002796:	e00a      	b.n	80027ae <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3301      	adds	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d3d9      	bcc.n	8002762 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80027ae:	f000 f86b 	bl	8002888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_FLASHEx_Erase+0x130>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]

  return status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000020 	.word	0x20000020
 80027c8:	40022000 	.word	0x40022000

080027cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <FLASH_MassErase+0x4c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <FLASH_MassErase+0x4c>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <FLASH_MassErase+0x4c>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	4a07      	ldr	r2, [pc, #28]	; (8002818 <FLASH_MassErase+0x4c>)
 80027fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <FLASH_MassErase+0x4c>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <FLASH_MassErase+0x4c>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6153      	str	r3, [r2, #20]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40022000 	.word	0x40022000

0800281c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <FLASH_PageErase+0x68>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	4a13      	ldr	r2, [pc, #76]	; (8002884 <FLASH_PageErase+0x68>)
 8002836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800283a:	6153      	str	r3, [r2, #20]
 800283c:	e005      	b.n	800284a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <FLASH_PageErase+0x68>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <FLASH_PageErase+0x68>)
 8002844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002848:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <FLASH_PageErase+0x68>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <FLASH_PageErase+0x68>)
 800285c:	4313      	orrs	r3, r2
 800285e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <FLASH_PageErase+0x68>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <FLASH_PageErase+0x68>)
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <FLASH_PageErase+0x68>)
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <FLASH_PageErase+0x68>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002876:	6153      	str	r3, [r2, #20]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40022000 	.word	0x40022000

08002888 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <FLASH_FlushCaches+0x8c>)
 8002890:	7f1b      	ldrb	r3, [r3, #28]
 8002892:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d002      	beq.n	80028a0 <FLASH_FlushCaches+0x18>
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d117      	bne.n	80028d0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d002      	beq.n	80028dc <FLASH_FlushCaches+0x54>
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d111      	bne.n	8002900 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <FLASH_FlushCaches+0x90>)
 80028fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <FLASH_FlushCaches+0x8c>)
 8002902:	2200      	movs	r2, #0
 8002904:	771a      	strb	r2, [r3, #28]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000020 	.word	0x20000020
 8002918:	40022000 	.word	0x40022000

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292a:	e17f      	b.n	8002c2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8171 	beq.w	8002c26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d005      	beq.n	800295c <HAL_GPIO_Init+0x40>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d130      	bne.n	80029be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002992:	2201      	movs	r2, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 0201 	and.w	r2, r3, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d118      	bne.n	80029fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	6939      	ldr	r1, [r7, #16]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80ac 	beq.w	8002c26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b5f      	ldr	r3, [pc, #380]	; (8002c4c <HAL_GPIO_Init+0x330>)
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	4a5e      	ldr	r2, [pc, #376]	; (8002c4c <HAL_GPIO_Init+0x330>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_GPIO_Init+0x330>)
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae6:	4a5a      	ldr	r2, [pc, #360]	; (8002c50 <HAL_GPIO_Init+0x334>)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b10:	d025      	beq.n	8002b5e <HAL_GPIO_Init+0x242>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_GPIO_Init+0x338>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <HAL_GPIO_Init+0x23e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_GPIO_Init+0x33c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d019      	beq.n	8002b56 <HAL_GPIO_Init+0x23a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4d      	ldr	r2, [pc, #308]	; (8002c5c <HAL_GPIO_Init+0x340>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x236>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_GPIO_Init+0x344>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x232>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_GPIO_Init+0x348>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x22e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_GPIO_Init+0x34c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x22a>
 8002b42:	2306      	movs	r3, #6
 8002b44:	e00c      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b46:	2307      	movs	r3, #7
 8002b48:	e00a      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x244>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b70:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_GPIO_Init+0x334>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba2:	4a32      	ldr	r2, [pc, #200]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bcc:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f47f ae78 	bne.w	800292c <HAL_GPIO_Init+0x10>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000c00 	.word	0x48000c00
 8002c60:	48001000 	.word	0x48001000
 8002c64:	48001400 	.word	0x48001400
 8002c68:	48001800 	.word	0x48001800
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e001      	b.n	8002c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb0:	787b      	ldrb	r3, [r7, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f863 	bl	8000dba <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e041      	b.n	8002d96 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f245 5255 	movw	r2, #21845	; 0x5555
 8002d24:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
 8002d38:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002d3a:	f7ff f9d9 	bl	80020f0 <HAL_GetTick>
 8002d3e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d40:	e00f      	b.n	8002d62 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002d42:	f7ff f9d5 	bl	80020f0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b31      	cmp	r3, #49	; 0x31
 8002d4e:	d908      	bls.n	8002d62 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e019      	b.n	8002d96 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e8      	bne.n	8002d42 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d005      	beq.n	8002d8a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68d2      	ldr	r2, [r2, #12]
 8002d86:	611a      	str	r2, [r3, #16]
 8002d88:	e004      	b.n	8002d94 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002dae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40007000 	.word	0x40007000

08002de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000

08002dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e3ca      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0e:	4b97      	ldr	r3, [pc, #604]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e18:	4b94      	ldr	r3, [pc, #592]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80e4 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_RCC_OscConfig+0x4a>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	f040 808b 	bne.w	8002f54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	f040 8087 	bne.w	8002f54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x62>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e3a2      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	4b82      	ldr	r3, [pc, #520]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_RCC_OscConfig+0x7c>
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e76:	e005      	b.n	8002e84 <HAL_RCC_OscConfig+0x88>
 8002e78:	4b7c      	ldr	r3, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d223      	bcs.n	8002ed0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fd55 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e383      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9c:	4b73      	ldr	r3, [pc, #460]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a72      	ldr	r2, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ea2:	f043 0308 	orr.w	r3, r3, #8
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	496d      	ldr	r1, [pc, #436]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eba:	4b6c      	ldr	r3, [pc, #432]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	4968      	ldr	r1, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
 8002ece:	e025      	b.n	8002f1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed0:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a65      	ldr	r2, [pc, #404]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4960      	ldr	r1, [pc, #384]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	495b      	ldr	r1, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fd15 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e343      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f1c:	f000 fc4a 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b52      	ldr	r3, [pc, #328]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	4950      	ldr	r1, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <HAL_RCC_OscConfig+0x278>)
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f3c:	4b4e      	ldr	r3, [pc, #312]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f885 	bl	8002050 <HAL_InitTick>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d052      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	e327      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d032      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a42      	ldr	r2, [pc, #264]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f68:	f7ff f8c2 	bl	80020f0 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f70:	f7ff f8be 	bl	80020f0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e310      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f82:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4931      	ldr	r1, [pc, #196]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fac:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	492c      	ldr	r1, [pc, #176]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e01a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a29      	ldr	r2, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fce:	f7ff f88f 	bl	80020f0 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd6:	f7ff f88b 	bl	80020f0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e2dd      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x1da>
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ff6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d074      	beq.n	80030ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b08      	cmp	r3, #8
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x21a>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d10e      	bne.n	800302e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d10b      	bne.n	800302e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d064      	beq.n	80030ec <HAL_RCC_OscConfig+0x2f0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d160      	bne.n	80030ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e2ba      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x24a>
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x270>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x270>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e026      	b.n	8003094 <HAL_RCC_OscConfig+0x298>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304e:	d115      	bne.n	800307c <HAL_RCC_OscConfig+0x280>
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a05      	ldr	r2, [pc, #20]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x298>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	0800a6d4 	.word	0x0800a6d4
 8003074:	20000008 	.word	0x20000008
 8003078:	20000018 	.word	0x20000018
 800307c:	4ba0      	ldr	r3, [pc, #640]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a9f      	ldr	r2, [pc, #636]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b9d      	ldr	r3, [pc, #628]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a9c      	ldr	r2, [pc, #624]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7ff f828 	bl	80020f0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7ff f824 	bl	80020f0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e276      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b6:	4b92      	ldr	r3, [pc, #584]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2a8>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7ff f814 	bl	80020f0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7ff f810 	bl	80020f0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e262      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030de:	4b88      	ldr	r3, [pc, #544]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x2d0>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d060      	beq.n	80031bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x310>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d119      	bne.n	800313a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d116      	bne.n	800313a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	4b7c      	ldr	r3, [pc, #496]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_OscConfig+0x328>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e23f      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b76      	ldr	r3, [pc, #472]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	4973      	ldr	r1, [pc, #460]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003138:	e040      	b.n	80031bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d023      	beq.n	800318a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003142:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fe ffcf 	bl	80020f0 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7fe ffcb 	bl	80020f0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e21d      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003168:	4b65      	ldr	r3, [pc, #404]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	495f      	ldr	r1, [pc, #380]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
 8003188:	e018      	b.n	80031bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318a:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5c      	ldr	r2, [pc, #368]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe ffab 	bl	80020f0 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe ffa7 	bl	80020f0 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1f9      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b0:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d03c      	beq.n	8003242 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe ff86 	bl	80020f0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fe ff82 	bl	80020f0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1d4      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ef      	beq.n	80031e8 <HAL_RCC_OscConfig+0x3ec>
 8003208:	e01b      	b.n	8003242 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	4a3b      	ldr	r2, [pc, #236]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe ff69 	bl	80020f0 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe ff65 	bl	80020f0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1b7      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003234:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80a6 	beq.w	800339c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d118      	bne.n	80032ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003294:	f7fe ff2c 	bl	80020f0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fe ff28 	bl	80020f0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e17a      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d108      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4d8>
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d2:	e029      	b.n	8003328 <HAL_RCC_OscConfig+0x52c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d115      	bne.n	8003308 <HAL_RCC_OscConfig+0x50c>
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a03      	ldr	r2, [pc, #12]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x52c>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	40007000 	.word	0x40007000
 8003308:	4b9c      	ldr	r3, [pc, #624]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a9b      	ldr	r2, [pc, #620]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003318:	4b98      	ldr	r3, [pc, #608]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a97      	ldr	r2, [pc, #604]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d016      	beq.n	800335e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe fede 	bl	80020f0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003336:	e00a      	b.n	800334e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fe feda 	bl	80020f0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e12a      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334e:	4b8b      	ldr	r3, [pc, #556]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ed      	beq.n	8003338 <HAL_RCC_OscConfig+0x53c>
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe fec7 	bl	80020f0 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe fec3 	bl	80020f0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e113      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800337c:	4b7f      	ldr	r3, [pc, #508]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ed      	bne.n	8003366 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b7a      	ldr	r3, [pc, #488]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	4a79      	ldr	r2, [pc, #484]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80fe 	beq.w	80035a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	f040 80d0 	bne.w	8003550 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033b0:	4b72      	ldr	r3, [pc, #456]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0203 	and.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d130      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	3b01      	subs	r3, #1
 80033d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d127      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d11f      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f0:	2a07      	cmp	r2, #7
 80033f2:	bf14      	ite	ne
 80033f4:	2201      	movne	r2, #1
 80033f6:	2200      	moveq	r2, #0
 80033f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d113      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d109      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d06e      	beq.n	8003504 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b0c      	cmp	r3, #12
 800342a:	d069      	beq.n	8003500 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ad      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003448:	4b4c      	ldr	r3, [pc, #304]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4b      	ldr	r2, [pc, #300]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800344e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003452:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003454:	f7fe fe4c 	bl	80020f0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fe48 	bl	80020f0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e09a      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346e:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347a:	4b40      	ldr	r3, [pc, #256]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	4b40      	ldr	r3, [pc, #256]	; (8003580 <HAL_RCC_OscConfig+0x784>)
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800348a:	3a01      	subs	r2, #1
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003494:	0212      	lsls	r2, r2, #8
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800349c:	0852      	lsrs	r2, r2, #1
 800349e:	3a01      	subs	r2, #1
 80034a0:	0552      	lsls	r2, r2, #21
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034a8:	0852      	lsrs	r2, r2, #1
 80034aa:	3a01      	subs	r2, #1
 80034ac:	0652      	lsls	r2, r2, #25
 80034ae:	4311      	orrs	r1, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034b4:	0912      	lsrs	r2, r2, #4
 80034b6:	0452      	lsls	r2, r2, #17
 80034b8:	430a      	orrs	r2, r1
 80034ba:	4930      	ldr	r1, [pc, #192]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2d      	ldr	r2, [pc, #180]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a2a      	ldr	r2, [pc, #168]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034d8:	f7fe fe0a 	bl	80020f0 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fe06 	bl	80020f0 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e058      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034fe:	e050      	b.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04f      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d148      	bne.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a16      	ldr	r2, [pc, #88]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003528:	f7fe fde2 	bl	80020f0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fdde 	bl	80020f0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e030      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x734>
 800354e:	e028      	b.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d023      	beq.n	800359e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800355c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe fdc5 	bl	80020f0 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	e00c      	b.n	8003584 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe fdc1 	bl	80020f0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d905      	bls.n	8003584 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e013      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
 800357c:	40021000 	.word	0x40021000
 8003580:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x7b0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ec      	bne.n	800356a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x7b0>)
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4905      	ldr	r1, [pc, #20]	; (80035ac <HAL_RCC_OscConfig+0x7b0>)
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_OscConfig+0x7b4>)
 8003598:	4013      	ands	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
 800359c:	e001      	b.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	feeefffc 	.word	0xfeeefffc

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0e7      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d910      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4970      	ldr	r1, [pc, #448]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0cf      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003610:	429a      	cmp	r2, r3
 8003612:	d908      	bls.n	8003626 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4960      	ldr	r1, [pc, #384]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04c      	beq.n	80036cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	4b5a      	ldr	r3, [pc, #360]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d121      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0a6      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e09a      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800366a:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e08e      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e086      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4943      	ldr	r1, [pc, #268]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fe fd28 	bl	80020f0 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fe fd24 	bl	80020f0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e06e      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d208      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	492b      	ldr	r1, [pc, #172]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d210      	bcs.n	800372a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 0207 	bic.w	r2, r3, #7
 8003710:	4923      	ldr	r1, [pc, #140]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e036      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	4918      	ldr	r1, [pc, #96]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4910      	ldr	r1, [pc, #64]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003768:	f000 f824 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1f4>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1f8>)
 8003786:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1fc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fc5f 	bl	8002050 <HAL_InitTick>
 8003792:	4603      	mov	r3, r0
 8003794:	72fb      	strb	r3, [r7, #11]

  return status;
 8003796:	7afb      	ldrb	r3, [r7, #11]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	0800a6d4 	.word	0x0800a6d4
 80037ac:	20000008 	.word	0x20000008
 80037b0:	20000018 	.word	0x20000018

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x34>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d121      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d11e      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e005      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003810:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003824:	e00a      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d102      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e004      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d101      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003838:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800383a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d134      	bne.n	80038ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0xa6>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d003      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xac>
 8003858:	e005      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003862:	617b      	str	r3, [r7, #20]
      break;
 8003864:	e002      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	617b      	str	r3, [r7, #20]
      break;
 800386a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	3301      	adds	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	fb03 f202 	mul.w	r2, r3, r2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	0e5b      	lsrs	r3, r3, #25
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	3301      	adds	r3, #1
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ac:	69bb      	ldr	r3, [r7, #24]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	0800a6ec 	.word	0x0800a6ec
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000008 	.word	0x20000008

080038e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038e8:	f7ff fff0 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCC_GetPCLK1Freq+0x28>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	0800a6e4 	.word	0x0800a6e4

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003914:	f7ff ffda 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0adb      	lsrs	r3, r3, #11
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	0800a6e4 	.word	0x0800a6e4

0800393c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003954:	f7ff fa44 	bl	8002de0 <HAL_PWREx_GetVoltageRange>
 8003958:	6178      	str	r0, [r7, #20]
 800395a:	e014      	b.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003974:	f7ff fa34 	bl	8002de0 <HAL_PWREx_GetVoltageRange>
 8003978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d10b      	bne.n	80039a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d919      	bls.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2ba0      	cmp	r3, #160	; 0xa0
 8003998:	d902      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800399a:	2302      	movs	r3, #2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e013      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a0:	2301      	movs	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	e010      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d902      	bls.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039ac:	2303      	movs	r3, #3
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e00a      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d102      	bne.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b8:	2302      	movs	r3, #2
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e004      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b70      	cmp	r3, #112	; 0x70
 80039c2:	d101      	bne.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039c4:	2301      	movs	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 0207 	bic.w	r2, r3, #7
 80039d0:	4909      	ldr	r1, [pc, #36]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a04:	2300      	movs	r3, #0
 8003a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a08:	2300      	movs	r3, #0
 8003a0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d041      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a26:	d824      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a32:	d81e      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a40:	4b86      	ldr	r3, [pc, #536]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a85      	ldr	r2, [pc, #532]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a4c:	e015      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fabb 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3320      	adds	r3, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fba6 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	74fb      	strb	r3, [r7, #19]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8e:	4973      	ldr	r1, [pc, #460]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d041      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab0:	d02a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab6:	d824      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac2:	d81e      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003acc:	d010      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ad0:	4b62      	ldr	r3, [pc, #392]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a61      	ldr	r2, [pc, #388]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003adc:	e015      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa73 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aee:	e00c      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3320      	adds	r3, #32
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fb5e 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	74fb      	strb	r3, [r7, #19]
      break;
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b10:	4b52      	ldr	r3, [pc, #328]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b1e:	494f      	ldr	r1, [pc, #316]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b26:	e001      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a0 	beq.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3a      	ldr	r2, [pc, #232]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7c:	f7fe fab8 	bl	80020f0 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b82:	e009      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fe fab4 	bl	80020f0 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	74fb      	strb	r3, [r7, #19]
        break;
 8003b96:	e005      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d15c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01f      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d019      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fe fa73 	bl	80020f0 <HAL_GetTick>
 8003c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe fa6f 	bl	80020f0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d902      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	74fb      	strb	r3, [r7, #19]
            break;
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ec      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c52:	e009      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	74bb      	strb	r3, [r7, #18]
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c68:	7c7b      	ldrb	r3, [r7, #17]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b9e      	ldr	r3, [pc, #632]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	4a9d      	ldr	r2, [pc, #628]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c86:	4b98      	ldr	r3, [pc, #608]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 0203 	bic.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	4994      	ldr	r1, [pc, #592]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca8:	4b8f      	ldr	r3, [pc, #572]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 020c 	bic.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	498c      	ldr	r1, [pc, #560]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cca:	4b87      	ldr	r3, [pc, #540]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4983      	ldr	r1, [pc, #524]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cec:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	497b      	ldr	r1, [pc, #492]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	4972      	ldr	r1, [pc, #456]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d30:	4b6d      	ldr	r3, [pc, #436]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	496a      	ldr	r1, [pc, #424]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d52:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	4961      	ldr	r1, [pc, #388]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d74:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	4959      	ldr	r1, [pc, #356]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d96:	4b54      	ldr	r3, [pc, #336]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	4950      	ldr	r1, [pc, #320]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	4948      	ldr	r1, [pc, #288]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dda:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	493f      	ldr	r1, [pc, #252]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0a:	4937      	ldr	r1, [pc, #220]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e26:	60d3      	str	r3, [r2, #12]
 8003e28:	e011      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f8c8 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d028      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e84:	60d3      	str	r3, [r2, #12]
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2101      	movs	r1, #1
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f899 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	4908      	ldr	r1, [pc, #32]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed6:	d109      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a02      	ldr	r2, [pc, #8]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee2:	60d3      	str	r3, [r2, #12]
 8003ee4:	e014      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f867 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2a:	4928      	ldr	r1, [pc, #160]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3a:	d10d      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2102      	movs	r1, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f844 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	74bb      	strb	r3, [r7, #18]
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3320      	adds	r3, #32
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f925 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f96:	490d      	ldr	r1, [pc, #52]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fba:	4904      	ldr	r1, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fde:	4b75      	ldr	r3, [pc, #468]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d018      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0203 	and.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d10d      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004002:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
       ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d047      	beq.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e044      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d018      	beq.n	8004056 <RCCEx_PLLSAI1_Config+0x86>
 8004024:	2b03      	cmp	r3, #3
 8004026:	d825      	bhi.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <RCCEx_PLLSAI1_Config+0x62>
 800402c:	2b02      	cmp	r3, #2
 800402e:	d009      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x74>
 8004030:	e020      	b.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004032:	4b60      	ldr	r3, [pc, #384]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11d      	bne.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e01a      	b.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004044:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d116      	bne.n	800407e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004054:	e013      	b.n	800407e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004056:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004062:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004072:	e006      	b.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e004      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004082:	bf00      	nop
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	430b      	orrs	r3, r1
 80040a0:	4944      	ldr	r1, [pc, #272]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d17d      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a40      	ldr	r2, [pc, #256]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fe f81a 	bl	80020f0 <HAL_GetTick>
 80040bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040be:	e009      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c0:	f7fe f816 	bl	80020f0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d902      	bls.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	73fb      	strb	r3, [r7, #15]
        break;
 80040d2:	e005      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ef      	bne.n	80040c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d160      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d111      	bne.n	8004110 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ec:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	0211      	lsls	r1, r2, #8
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	0912      	lsrs	r2, r2, #4
 8004104:	0452      	lsls	r2, r2, #17
 8004106:	430a      	orrs	r2, r1
 8004108:	492a      	ldr	r1, [pc, #168]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	610b      	str	r3, [r1, #16]
 800410e:	e027      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d112      	bne.n	800413c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800411e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6892      	ldr	r2, [r2, #8]
 8004126:	0211      	lsls	r1, r2, #8
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6912      	ldr	r2, [r2, #16]
 800412c:	0852      	lsrs	r2, r2, #1
 800412e:	3a01      	subs	r2, #1
 8004130:	0552      	lsls	r2, r2, #21
 8004132:	430a      	orrs	r2, r1
 8004134:	491f      	ldr	r1, [pc, #124]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]
 800413a:	e011      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004144:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6892      	ldr	r2, [r2, #8]
 800414c:	0211      	lsls	r1, r2, #8
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6952      	ldr	r2, [r2, #20]
 8004152:	0852      	lsrs	r2, r2, #1
 8004154:	3a01      	subs	r2, #1
 8004156:	0652      	lsls	r2, r2, #25
 8004158:	430a      	orrs	r2, r1
 800415a:	4916      	ldr	r1, [pc, #88]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fd ffc0 	bl	80020f0 <HAL_GetTick>
 8004170:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004172:	e009      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004174:	f7fd ffbc 	bl	80020f0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d902      	bls.n	8004188 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	73fb      	strb	r3, [r7, #15]
          break;
 8004186:	e005      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ef      	beq.n	8004174 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	4904      	ldr	r1, [pc, #16]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000

080041b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041c6:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0203 	and.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10d      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
       ||
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041ea:	4b61      	ldr	r3, [pc, #388]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
       ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d047      	beq.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
 8004202:	e044      	b.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d018      	beq.n	800423e <RCCEx_PLLSAI2_Config+0x86>
 800420c:	2b03      	cmp	r3, #3
 800420e:	d825      	bhi.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
 8004210:	2b01      	cmp	r3, #1
 8004212:	d002      	beq.n	800421a <RCCEx_PLLSAI2_Config+0x62>
 8004214:	2b02      	cmp	r3, #2
 8004216:	d009      	beq.n	800422c <RCCEx_PLLSAI2_Config+0x74>
 8004218:	e020      	b.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800421a:	4b55      	ldr	r3, [pc, #340]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d11d      	bne.n	8004262 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422a:	e01a      	b.n	8004262 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800422c:	4b50      	ldr	r3, [pc, #320]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d116      	bne.n	8004266 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423c:	e013      	b.n	8004266 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800423e:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800424a:	4b49      	ldr	r3, [pc, #292]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800425a:	e006      	b.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e004      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800426a:	bf00      	nop
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004272:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	430b      	orrs	r3, r1
 8004288:	4939      	ldr	r1, [pc, #228]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d167      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a35      	ldr	r2, [pc, #212]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a0:	f7fd ff26 	bl	80020f0 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042a6:	e009      	b.n	80042bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a8:	f7fd ff22 	bl	80020f0 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ba:	e005      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042bc:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ef      	bne.n	80042a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d14a      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d111      	bne.n	80042f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6892      	ldr	r2, [r2, #8]
 80042e4:	0211      	lsls	r1, r2, #8
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	0912      	lsrs	r2, r2, #4
 80042ec:	0452      	lsls	r2, r2, #17
 80042ee:	430a      	orrs	r2, r1
 80042f0:	491f      	ldr	r1, [pc, #124]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	614b      	str	r3, [r1, #20]
 80042f6:	e011      	b.n	800431c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042f8:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6892      	ldr	r2, [r2, #8]
 8004308:	0211      	lsls	r1, r2, #8
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6912      	ldr	r2, [r2, #16]
 800430e:	0852      	lsrs	r2, r2, #1
 8004310:	3a01      	subs	r2, #1
 8004312:	0652      	lsls	r2, r2, #25
 8004314:	430a      	orrs	r2, r1
 8004316:	4916      	ldr	r1, [pc, #88]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a13      	ldr	r2, [pc, #76]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fd fee2 	bl	80020f0 <HAL_GetTick>
 800432c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800432e:	e009      	b.n	8004344 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004330:	f7fd fede 	bl	80020f0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d902      	bls.n	8004344 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	73fb      	strb	r3, [r7, #15]
          break;
 8004342:	e005      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ef      	beq.n	8004330 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4904      	ldr	r1, [pc, #16]	; (8004370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000

08004374 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d06c      	beq.n	8004460 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f865 	bl	800446a <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	22ca      	movs	r2, #202	; 0xca
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2253      	movs	r2, #83	; 0x53
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fa53 	bl	8004864 <RTC_EnterInitMode>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d14b      	bne.n	8004460 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043da:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68d2      	ldr	r2, [r2, #12]
 8004402:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6919      	ldr	r1, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	041a      	lsls	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fa57 	bl	80048cc <RTC_ExitInitMode>
 800441e:	4603      	mov	r3, r0
 8004420:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11b      	bne.n	8004460 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0203 	bic.w	r2, r2, #3
 8004436:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800447e:	b590      	push	{r4, r7, lr}
 8004480:	b087      	sub	sp, #28
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_RTC_SetTime+0x1a>
 8004494:	2302      	movs	r3, #2
 8004496:	e08b      	b.n	80045b0 <HAL_RTC_SetTime+0x132>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	22ca      	movs	r2, #202	; 0xca
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2253      	movs	r2, #83	; 0x53
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f9d3 	bl	8004864 <RTC_EnterInitMode>
 80044be:	4603      	mov	r3, r0
 80044c0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d163      	bne.n	8004590 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d126      	bne.n	800451c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa2e 	bl	8004948 <RTC_ByteToBcd2>
 80044ec:	4603      	mov	r3, r0
 80044ee:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fa27 	bl	8004948 <RTC_ByteToBcd2>
 80044fa:	4603      	mov	r3, r0
 80044fc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044fe:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	789b      	ldrb	r3, [r3, #2]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fa1f 	bl	8004948 <RTC_ByteToBcd2>
 800450a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800450c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	78db      	ldrb	r3, [r3, #3]
 8004514:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e018      	b.n	800454e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	785b      	ldrb	r3, [r3, #1]
 800453a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800453c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004542:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	78db      	ldrb	r3, [r3, #3]
 8004548:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004558:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800455c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800456c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6899      	ldr	r1, [r3, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f9a0 	bl	80048cc <RTC_ExitInitMode>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	22ff      	movs	r2, #255	; 0xff
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd90      	pop	{r4, r7, pc}

080045b8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80045e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	0d9b      	lsrs	r3, r3, #22
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11a      	bne.n	8004666 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 f9a7 	bl	8004988 <RTC_Bcd2ToByte>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f99e 	bl	8004988 <RTC_Bcd2ToByte>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	789b      	ldrb	r3, [r3, #2]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f995 	bl	8004988 <RTC_Bcd2ToByte>
 800465e:	4603      	mov	r3, r0
 8004660:	461a      	mov	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_RTC_SetDate+0x1a>
 8004686:	2302      	movs	r3, #2
 8004688:	e075      	b.n	8004776 <HAL_RTC_SetDate+0x106>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10e      	bne.n	80046be <HAL_RTC_SetDate+0x4e>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	f023 0310 	bic.w	r3, r3, #16
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	330a      	adds	r3, #10
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11c      	bne.n	80046fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	78db      	ldrb	r3, [r3, #3]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f93d 	bl	8004948 <RTC_ByteToBcd2>
 80046ce:	4603      	mov	r3, r0
 80046d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f936 	bl	8004948 <RTC_ByteToBcd2>
 80046dc:	4603      	mov	r3, r0
 80046de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	789b      	ldrb	r3, [r3, #2]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f92e 	bl	8004948 <RTC_ByteToBcd2>
 80046ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e00e      	b.n	800471c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	78db      	ldrb	r3, [r3, #3]
 8004702:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800470a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004710:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	22ca      	movs	r2, #202	; 0xca
 8004722:	625a      	str	r2, [r3, #36]	; 0x24
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2253      	movs	r2, #83	; 0x53
 800472a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f899 	bl	8004864 <RTC_EnterInitMode>
 8004732:	4603      	mov	r3, r0
 8004734:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10c      	bne.n	8004756 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004746:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800474a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f8bd 	bl	80048cc <RTC_ExitInitMode>
 8004752:	4603      	mov	r3, r0
 8004754:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	22ff      	movs	r2, #255	; 0xff
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d103      	bne.n	800476c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
}
 8004776:	4618      	mov	r0, r3
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}

0800477e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004794:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004798:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0b5b      	lsrs	r3, r3, #13
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11a      	bne.n	800480e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	78db      	ldrb	r3, [r3, #3]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f8d3 	bl	8004988 <RTC_Bcd2ToByte>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	785b      	ldrb	r3, [r3, #1]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f8ca 	bl	8004988 <RTC_Bcd2ToByte>
 80047f4:	4603      	mov	r3, r0
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	789b      	ldrb	r3, [r3, #2]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f8c1 	bl	8004988 <RTC_Bcd2ToByte>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800482e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004830:	f7fd fc5e 	bl	80020f0 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004836:	e009      	b.n	800484c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004838:	f7fd fc5a 	bl	80020f0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004846:	d901      	bls.n	800484c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e007      	b.n	800485c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ee      	beq.n	8004838 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d120      	bne.n	80048c0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f04f 32ff 	mov.w	r2, #4294967295
 8004886:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004888:	f7fd fc32 	bl	80020f0 <HAL_GetTick>
 800488c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800488e:	e00d      	b.n	80048ac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004890:	f7fd fc2e 	bl	80020f0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800489e:	d905      	bls.n	80048ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2203      	movs	r2, #3
 80048a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <RTC_EnterInitMode+0x5c>
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d1e7      	bne.n	8004890 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <RTC_ExitInitMode+0x78>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <RTC_ExitInitMode+0x78>)
 80048de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <RTC_ExitInitMode+0x78>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10c      	bne.n	800490a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff91 	bl	8004818 <HAL_RTC_WaitForSynchro>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01e      	beq.n	800493a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2203      	movs	r2, #3
 8004900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e017      	b.n	800493a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <RTC_ExitInitMode+0x78>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <RTC_ExitInitMode+0x78>)
 8004910:	f023 0320 	bic.w	r3, r3, #32
 8004914:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff7e 	bl	8004818 <HAL_RTC_WaitForSynchro>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2203      	movs	r2, #3
 8004926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <RTC_ExitInitMode+0x78>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4a04      	ldr	r2, [pc, #16]	; (8004944 <RTC_ExitInitMode+0x78>)
 8004934:	f043 0320 	orr.w	r3, r3, #32
 8004938:	6093      	str	r3, [r2, #8]
  }

  return status;
 800493a:	7bfb      	ldrb	r3, [r7, #15]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40002800 	.word	0x40002800

08004948 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800495a:	e005      	b.n	8004968 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004962:	7afb      	ldrb	r3, [r7, #11]
 8004964:	3b0a      	subs	r3, #10
 8004966:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004968:	7afb      	ldrb	r3, [r7, #11]
 800496a:	2b09      	cmp	r3, #9
 800496c:	d8f6      	bhi.n	800495c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	b2da      	uxtb	r2, r3
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	4313      	orrs	r3, r2
 800497a:	b2db      	uxtb	r3, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	0092      	lsls	r2, r2, #2
 800499c:	4413      	add	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	4413      	add	r3, r2
 80049ae:	b2db      	uxtb	r3, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0be      	b.n	8004b4c <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049de:	d009      	beq.n	80049f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	e005      	b.n	80049f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8cb 	bl	8004ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a24:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a2e:	d902      	bls.n	8004a36 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e002      	b.n	8004a3c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a44:	d007      	beq.n	8004a56 <HAL_SPI_Init+0x9a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a4e:	d002      	beq.n	8004a56 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	ea42 0103 	orr.w	r1, r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab4:	d11b      	bne.n	8004aee <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ac6:	d903      	bls.n	8004ad0 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ace:	e002      	b.n	8004ad6 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d107      	bne.n	8004aee <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	0c1b      	lsrs	r3, r3, #16
 8004af4:	f003 0204 	and.w	r2, r3, #4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b14:	ea42 0103 	orr.w	r1, r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2e:	d105      	bne.n	8004b3c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e01a      	b.n	8004b9c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f81a 	bl	8004bb8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf2:	d112      	bne.n	8004c1a <HAL_SPI_Receive+0x4e>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10e      	bne.n	8004c1a <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f9c4 	bl	8004f9e <HAL_SPI_TransmitReceive>
 8004c16:	4603      	mov	r3, r0
 8004c18:	e1bd      	b.n	8004f96 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_SPI_Receive+0x5c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e1b6      	b.n	8004f96 <HAL_SPI_Receive+0x3ca>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c30:	f7fd fa5e 	bl	80020f0 <HAL_GetTick>
 8004c34:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d003      	beq.n	8004c4a <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
 8004c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004c48:	e19b      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_Receive+0x8a>
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8004c5c:	e191      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2204      	movs	r2, #4
 8004c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d118      	bne.n	8004cdc <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc8:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ce4:	d908      	bls.n	8004cf8 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e007      	b.n	8004d08 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d10:	d10f      	bne.n	8004d32 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d007      	beq.n	8004d50 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d58:	d869      	bhi.n	8004e2e <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d5a:	e031      	b.n	8004dc0 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d117      	bne.n	8004d9a <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f103 020c 	add.w	r2, r3, #12
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d98:	e012      	b.n	8004dc0 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9a:	f7fd f9a9 	bl	80020f0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d803      	bhi.n	8004db2 <HAL_SPI_Receive+0x1e6>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d102      	bne.n	8004db8 <HAL_SPI_Receive+0x1ec>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004dbe:	e0e0      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1c7      	bne.n	8004d5c <HAL_SPI_Receive+0x190>
 8004dcc:	e035      	b.n	8004e3a <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d115      	bne.n	8004e08 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	b292      	uxth	r2, r2
 8004de8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	1c9a      	adds	r2, r3, #2
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e06:	e012      	b.n	8004e2e <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e08:	f7fd f972 	bl	80020f0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d803      	bhi.n	8004e20 <HAL_SPI_Receive+0x254>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d102      	bne.n	8004e26 <HAL_SPI_Receive+0x25a>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004e2c:	e0a9      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1c9      	bne.n	8004dce <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e42:	d178      	bne.n	8004f36 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e52:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f001 f9ba 	bl	80061d8 <SPI_WaitFlagStateUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8004e70:	e087      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e7a:	d907      	bls.n	8004e8c <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	b292      	uxth	r2, r2
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	e008      	b.n	8004e9e <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f103 020c 	add.w	r2, r3, #12
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f001 f995 	bl	80061d8 <SPI_WaitFlagStateUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d009      	beq.n	8004ec8 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	f043 0202 	orr.w	r2, r3, #2
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8004ec6:	e05c      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ed0:	d105      	bne.n	8004ede <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	e02b      	b.n	8004f36 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004eee:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ef8:	d11d      	bne.n	8004f36 <HAL_SPI_Receive+0x36a>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d119      	bne.n	8004f36 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f001 f963 	bl	80061d8 <SPI_WaitFlagStateUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1c:	f043 0202 	orr.w	r2, r3, #2
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004f2a:	e02a      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f001 fa6a 	bl	8006414 <SPI_EndRxTransaction>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d10a      	bne.n	8004f70 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	f043 0202 	orr.w	r2, r3, #2
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004f6e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f7e:	e000      	b.n	8004f82 <HAL_SPI_Receive+0x3b6>
  }

error :
 8004f80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3728      	adds	r7, #40	; 0x28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b092      	sub	sp, #72	; 0x48
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x2e>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e2c8      	b.n	800555e <HAL_SPI_TransmitReceive+0x5c0>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd4:	f7fd f88c 	bl	80020f0 <HAL_GetTick>
 8004fd8:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fe0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005006:	2b01      	cmp	r3, #1
 8005008:	d00f      	beq.n	800502a <HAL_SPI_TransmitReceive+0x8c>
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005010:	d107      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x84>
 800501a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800501e:	2b04      	cmp	r3, #4
 8005020:	d003      	beq.n	800502a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8005022:	2302      	movs	r3, #2
 8005024:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005028:	e28f      	b.n	800554a <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_SPI_TransmitReceive+0x9e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_SPI_TransmitReceive+0x9e>
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005042:	e282      	b.n	800554a <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b04      	cmp	r3, #4
 800504e:	d003      	beq.n	8005058 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2205      	movs	r2, #5
 8005054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509a:	d10f      	bne.n	80050bc <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ba:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050c4:	d802      	bhi.n	80050cc <HAL_SPI_TransmitReceive+0x12e>
 80050c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d908      	bls.n	80050de <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050da:	605a      	str	r2, [r3, #4]
 80050dc:	e007      	b.n	80050ee <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d007      	beq.n	800510c <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800510a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005114:	f240 80a4 	bls.w	8005260 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x18a>
 8005120:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005122:	2b01      	cmp	r3, #1
 8005124:	f040 808e 	bne.w	8005244 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	881a      	ldrh	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514c:	e07a      	b.n	8005244 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d13f      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x23e>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03a      	beq.n	80051dc <HAL_SPI_TransmitReceive+0x23e>
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d137      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	881a      	ldrh	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	1c9a      	adds	r2, r3, #2
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d11e      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x23e>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	d119      	bne.n	80051dc <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10c      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x22e>
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051da:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d11c      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x286>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	b292      	uxth	r2, r2
 8005202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005220:	2301      	movs	r3, #1
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005224:	f7fc ff64 	bl	80020f0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005230:	429a      	cmp	r2, r3
 8005232:	d807      	bhi.n	8005244 <HAL_SPI_TransmitReceive+0x2a6>
 8005234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d003      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8005242:	e182      	b.n	800554a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	f47f af7f 	bne.w	800514e <HAL_SPI_TransmitReceive+0x1b0>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	f47f af78 	bne.w	800514e <HAL_SPI_TransmitReceive+0x1b0>
 800525e:	e103      	b.n	8005468 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x2d2>
 8005268:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800526a:	2b01      	cmp	r3, #1
 800526c:	f040 80ef 	bne.w	800544e <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d912      	bls.n	80052a0 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	881a      	ldrh	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b02      	subs	r3, #2
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800529e:	e0d6      	b.n	800544e <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c6:	e0c2      	b.n	800544e <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d158      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x3ea>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d053      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x3ea>
 80052e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d150      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d912      	bls.n	8005316 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	881a      	ldrh	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	1c9a      	adds	r2, r3, #2
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b02      	subs	r3, #2
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005314:	e012      	b.n	800533c <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	7812      	ldrb	r2, [r2, #0]
 8005322:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11e      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x3ea>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005352:	d119      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x3da>
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005376:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005386:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d148      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x48a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d042      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d923      	bls.n	80053f6 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	b292      	uxth	r2, r2
 80053ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b02      	subs	r3, #2
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d81f      	bhi.n	8005424 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	e016      	b.n	8005424 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f103 020c 	add.w	r2, r3, #12
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	7812      	ldrb	r2, [r2, #0]
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005424:	2301      	movs	r3, #1
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005428:	f7fc fe62 	bl	80020f0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005434:	429a      	cmp	r2, r3
 8005436:	d803      	bhi.n	8005440 <HAL_SPI_TransmitReceive+0x4a2>
 8005438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d102      	bne.n	8005446 <HAL_SPI_TransmitReceive+0x4a8>
 8005440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800544c:	e07d      	b.n	800554a <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	f47f af37 	bne.w	80052c8 <HAL_SPI_TransmitReceive+0x32a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	f47f af30 	bne.w	80052c8 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005470:	d146      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005478:	2201      	movs	r2, #1
 800547a:	2101      	movs	r1, #1
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 feab 	bl	80061d8 <SPI_WaitFlagStateUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548c:	f043 0202 	orr.w	r2, r3, #2
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 800549a:	e056      	b.n	800554a <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054a4:	d105      	bne.n	80054b2 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	e026      	b.n	8005500 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054c2:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d119      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d2:	2201      	movs	r2, #1
 80054d4:	2101      	movs	r1, #1
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fe7e 	bl	80061d8 <SPI_WaitFlagStateUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e6:	f043 0202 	orr.w	r2, r3, #2
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 80054f4:	e029      	b.n	800554a <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b10      	cmp	r3, #16
 800550c:	d10d      	bne.n	800552a <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	f043 0202 	orr.w	r2, r3, #2
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005522:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800552c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 ffc8 	bl	80064c4 <SPI_EndRxTxTransaction>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	661a      	str	r2, [r3, #96]	; 0x60
 8005546:	e000      	b.n	800554a <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8005548:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800555a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800555e:	4618      	mov	r0, r3
 8005560:	3740      	adds	r7, #64	; 0x40
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_SPI_Transmit_IT+0x20>
 8005584:	2302      	movs	r3, #2
 8005586:	e087      	b.n	8005698 <HAL_SPI_Transmit_IT+0x130>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_SPI_Transmit_IT+0x34>
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055a0:	e075      	b.n	800568e <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
 80055b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055b2:	e06c      	b.n	800568e <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2203      	movs	r2, #3
 80055b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	88fa      	ldrh	r2, [r7, #6]
 80055d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055f8:	d903      	bls.n	8005602 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <HAL_SPI_Transmit_IT+0x13c>)
 80055fe:	651a      	str	r2, [r3, #80]	; 0x50
 8005600:	e002      	b.n	8005608 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a28      	ldr	r2, [pc, #160]	; (80056a8 <HAL_SPI_Transmit_IT+0x140>)
 8005606:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005610:	d10f      	bne.n	8005632 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005620:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005630:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563a:	d10f      	bne.n	800565c <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800565a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800566a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d008      	beq.n	800568c <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e000      	b.n	800568e <HAL_SPI_Transmit_IT+0x126>
  }

error :
 800568c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	08006179 	.word	0x08006179
 80056a8:	08006119 	.word	0x08006119

080056ac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d110      	bne.n	80056e8 <HAL_SPI_Receive_IT+0x3c>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ce:	d10b      	bne.n	80056e8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2204      	movs	r2, #4
 80056d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f8bc 	bl	800585c <HAL_SPI_TransmitReceive_IT>
 80056e4:	4603      	mov	r3, r0
 80056e6:	e0b1      	b.n	800584c <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_SPI_Receive_IT+0x4a>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0aa      	b.n	800584c <HAL_SPI_Receive_IT+0x1a0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d002      	beq.n	8005710 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800570a:	2302      	movs	r3, #2
 800570c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800570e:	e098      	b.n	8005842 <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_SPI_Receive_IT+0x70>
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005720:	e08f      	b.n	8005842 <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2204      	movs	r2, #4
 8005726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005766:	d90b      	bls.n	8005780 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005776:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a36      	ldr	r2, [pc, #216]	; (8005854 <HAL_SPI_Receive_IT+0x1a8>)
 800577c:	64da      	str	r2, [r3, #76]	; 0x4c
 800577e:	e00a      	b.n	8005796 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800578e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4a31      	ldr	r2, [pc, #196]	; (8005858 <HAL_SPI_Receive_IT+0x1ac>)
 8005794:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579e:	d10f      	bne.n	80057c0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057be:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c8:	d11f      	bne.n	800580a <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057d8:	d806      	bhi.n	80057e8 <HAL_SPI_Receive_IT+0x13c>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d102      	bne.n	80057e8 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2202      	movs	r2, #2
 80057e6:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	e002      	b.n	8005810 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800581e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	d008      	beq.n	8005840 <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e000      	b.n	8005842 <HAL_SPI_Receive_IT+0x196>
  }

error :
 8005840:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	08006091 	.word	0x08006091
 8005858:	08005fd1 	.word	0x08005fd1

0800585c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_SPI_TransmitReceive_IT+0x20>
 8005878:	2302      	movs	r3, #2
 800587a:	e0b9      	b.n	80059f0 <HAL_SPI_TransmitReceive_IT+0x194>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800588a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005892:	7dbb      	ldrb	r3, [r7, #22]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d00d      	beq.n	80058b4 <HAL_SPI_TransmitReceive_IT+0x58>
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589e:	d106      	bne.n	80058ae <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d102      	bne.n	80058ae <HAL_SPI_TransmitReceive_IT+0x52>
 80058a8:	7dbb      	ldrb	r3, [r7, #22]
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
 80058b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058b2:	e098      	b.n	80059e6 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80058c0:	887b      	ldrh	r3, [r7, #2]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058ca:	e08c      	b.n	80059e6 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d003      	beq.n	80058e0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2205      	movs	r2, #5
 80058dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	887a      	ldrh	r2, [r7, #2]
 80058f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	887a      	ldrh	r2, [r7, #2]
 800590a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005916:	d906      	bls.n	8005926 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a38      	ldr	r2, [pc, #224]	; (80059fc <HAL_SPI_TransmitReceive_IT+0x1a0>)
 800591c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a37      	ldr	r2, [pc, #220]	; (8005a00 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
 8005924:	e005      	b.n	8005932 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a36      	ldr	r2, [pc, #216]	; (8005a04 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 800592a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a36      	ldr	r2, [pc, #216]	; (8005a08 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 8005930:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593a:	d11f      	bne.n	800597c <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800594a:	d806      	bhi.n	800595a <HAL_SPI_TransmitReceive_IT+0xfe>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	2b02      	cmp	r3, #2
 8005952:	d102      	bne.n	800595a <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2202      	movs	r2, #2
 8005958:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e002      	b.n	8005982 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800598a:	d802      	bhi.n	8005992 <HAL_SPI_TransmitReceive_IT+0x136>
 800598c:	887b      	ldrh	r3, [r7, #2]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d908      	bls.n	80059a4 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059a0:	605a      	str	r2, [r3, #4]
 80059a2:	e007      	b.n	80059b4 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80059c2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d008      	beq.n	80059e4 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e000      	b.n	80059e6 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 80059e4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	08005e59 	.word	0x08005e59
 8005a00:	08005f09 	.word	0x08005f09
 8005a04:	08005c61 	.word	0x08005c61
 8005a08:	08005d9d 	.word	0x08005d9d

08005a0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	099b      	lsrs	r3, r3, #6
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	099b      	lsrs	r3, r3, #6
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
    return;
 8005a4e:	e0d7      	b.n	8005c00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_SPI_IRQHandler+0x66>
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	09db      	lsrs	r3, r3, #7
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
    return;
 8005a70:	e0c6      	b.n	8005c00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_SPI_IRQHandler+0x8c>
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	099b      	lsrs	r3, r3, #6
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80b4 	beq.w	8005c00 <HAL_SPI_IRQHandler+0x1f4>
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80ad 	beq.w	8005c00 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d023      	beq.n	8005afa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d011      	beq.n	8005ae2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac2:	f043 0204 	orr.w	r2, r3, #4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	e00b      	b.n	8005afa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	693b      	ldr	r3, [r7, #16]
        return;
 8005af8:	e082      	b.n	8005c00 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d014      	beq.n	8005b30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0a:	f043 0201 	orr.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00c      	beq.n	8005b56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	f043 0208 	orr.w	r2, r3, #8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04f      	beq.n	8005bfe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_SPI_IRQHandler+0x17e>
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d034      	beq.n	8005bf4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0203 	bic.w	r2, r2, #3
 8005b98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d011      	beq.n	8005bc6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <HAL_SPI_IRQHandler+0x1fc>)
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fc fbdf 	bl	8002372 <HAL_DMA_Abort_IT>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d016      	beq.n	8005bfc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	4a0d      	ldr	r2, [pc, #52]	; (8005c08 <HAL_SPI_IRQHandler+0x1fc>)
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fc fbc9 	bl	8002372 <HAL_DMA_Abort_IT>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005bf2:	e003      	b.n	8005bfc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f813 	bl	8005c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005bfa:	e000      	b.n	8005bfe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005bfc:	bf00      	nop
    return;
 8005bfe:	bf00      	nop
  }
}
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	08005c35 	.word	0x08005c35

08005c0c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff ffe5 	bl	8005c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d923      	bls.n	8005cbc <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	b292      	uxth	r2, r2
 8005c80:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	1c9a      	adds	r2, r3, #2
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b02      	subs	r3, #2
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d11f      	bne.n	8005cea <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e016      	b.n	8005cea <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f103 020c 	add.w	r2, r3, #12
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d120      	bne.n	8005d38 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	d10b      	bne.n	8005d18 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d0e:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a0b      	ldr	r2, [pc, #44]	; (8005d40 <SPI_2linesRxISR_8BIT+0xe0>)
 8005d14:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8005d16:	e00f      	b.n	8005d38 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d26:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fc0c 	bl	8006550 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	08005d45 	.word	0x08005d45

08005d44 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8005d60:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d66:	1e5a      	subs	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10f      	bne.n	8005d94 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fbde 	bl	8006550 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d912      	bls.n	8005dd4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	881a      	ldrh	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	1c9a      	adds	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b02      	subs	r3, #2
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dd2:	e012      	b.n	8005dfa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d126      	bne.n	8005e52 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0c:	d110      	bne.n	8005e30 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e1c:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e2c:	605a      	str	r2, [r3, #4]
      return;
 8005e2e:	e010      	b.n	8005e52 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e3e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fb7f 	bl	8006550 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	b292      	uxth	r2, r2
 8005e6c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	1c9a      	adds	r2, r3, #2
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d118      	bne.n	8005ec8 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9e:	d103      	bne.n	8005ea8 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a0b      	ldr	r2, [pc, #44]	; (8005ed0 <SPI_2linesRxISR_16BIT+0x78>)
 8005ea4:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8005ea6:	e00f      	b.n	8005ec8 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fb44 	bl	8006550 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	08005ed5 	.word	0x08005ed5

08005ed4 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8005ee8:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef8:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb28 	bl	8006550 <SPI_CloseRxTx_ISR>
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	881a      	ldrh	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	1c9a      	adds	r2, r3, #2
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d126      	bne.n	8005f8c <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f46:	d110      	bne.n	8005f6a <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f56:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f66:	605a      	str	r2, [r3, #4]
      return;
 8005f68:	e010      	b.n	8005f8c <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f78:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fae2 	bl	8006550 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8005fae:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb4:	1e5a      	subs	r2, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fb20 	bl	8006608 <SPI_CloseRx_ISR>
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f103 020c 	add.w	r2, r3, #12
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d10c      	bne.n	800602c <SPI_RxISR_8BIT+0x5c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601a:	d107      	bne.n	800602c <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800602a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006040:	d103      	bne.n	800604a <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a04      	ldr	r2, [pc, #16]	; (8006058 <SPI_RxISR_8BIT+0x88>)
 8006046:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006048:	e002      	b.n	8006050 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fadc 	bl	8006608 <SPI_CloseRx_ISR>
  }
}
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08005f93 	.word	0x08005f93

0800605c <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006070:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006080:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fac0 	bl	8006608 <SPI_CloseRx_ISR>
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	b292      	uxth	r2, r2
 80060a4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	1c9a      	adds	r2, r3, #2
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10c      	bne.n	80060e8 <SPI_RxISR_16BIT+0x58>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d6:	d107      	bne.n	80060e8 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060e6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fc:	d103      	bne.n	8006106 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <SPI_RxISR_16BIT+0x84>)
 8006102:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006104:	e002      	b.n	800610c <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa7e 	bl	8006608 <SPI_CloseRx_ISR>
  }
}
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	0800605d 	.word	0x0800605d

08006118 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10f      	bne.n	8006170 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006158:	d107      	bne.n	800616a <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006168:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa92 	bl	8006694 <SPI_CloseTx_ISR>
  }
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	1c9a      	adds	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b6:	d107      	bne.n	80061c8 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061c6:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fa63 	bl	8006694 <SPI_CloseTx_ISR>
  }
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061e8:	f7fb ff82 	bl	80020f0 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061f8:	f7fb ff7a 	bl	80020f0 <HAL_GetTick>
 80061fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061fe:	4b39      	ldr	r3, [pc, #228]	; (80062e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	015b      	lsls	r3, r3, #5
 8006204:	0d1b      	lsrs	r3, r3, #20
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800620e:	e054      	b.n	80062ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d050      	beq.n	80062ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006218:	f7fb ff6a 	bl	80020f0 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	429a      	cmp	r2, r3
 8006226:	d902      	bls.n	800622e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d13d      	bne.n	80062aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800623c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006246:	d111      	bne.n	800626c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006250:	d004      	beq.n	800625c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625a:	d107      	bne.n	800626c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800626a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006274:	d10f      	bne.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e017      	b.n	80062da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d19b      	bne.n	8006210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000008 	.word	0x20000008

080062e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062fa:	f7fb fef9 	bl	80020f0 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	4413      	add	r3, r2
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800630a:	f7fb fef1 	bl	80020f0 <HAL_GetTick>
 800630e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	330c      	adds	r3, #12
 8006316:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006318:	4b3d      	ldr	r3, [pc, #244]	; (8006410 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	00da      	lsls	r2, r3, #3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	0d1b      	lsrs	r3, r3, #20
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006330:	e060      	b.n	80063f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006338:	d107      	bne.n	800634a <SPI_WaitFifoStateUntilTimeout+0x62>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006348:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d050      	beq.n	80063f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006352:	f7fb fecd 	bl	80020f0 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635e:	429a      	cmp	r2, r3
 8006360:	d902      	bls.n	8006368 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d13d      	bne.n	80063e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006376:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006380:	d111      	bne.n	80063a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638a:	d004      	beq.n	8006396 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d107      	bne.n	80063a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ae:	d10f      	bne.n	80063d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e010      	b.n	8006406 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d196      	bne.n	8006332 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3728      	adds	r7, #40	; 0x28
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000008 	.word	0x20000008

08006414 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006428:	d111      	bne.n	800644e <SPI_EndRxTransaction+0x3a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006432:	d004      	beq.n	800643e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d107      	bne.n	800644e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	2180      	movs	r1, #128	; 0x80
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff febd 	bl	80061d8 <SPI_WaitFlagStateUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	f043 0220 	orr.w	r2, r3, #32
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e023      	b.n	80064bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800647c:	d11d      	bne.n	80064ba <SPI_EndRxTransaction+0xa6>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006486:	d004      	beq.n	8006492 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006490:	d113      	bne.n	80064ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff ff22 	bl	80062e8 <SPI_WaitFifoStateUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e000      	b.n	80064bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ff03 	bl	80062e8 <SPI_WaitFifoStateUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e027      	b.n	8006548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff fe68 	bl	80061d8 <SPI_WaitFlagStateUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	f043 0220 	orr.w	r2, r3, #32
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e014      	b.n	8006548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff fedc 	bl	80062e8 <SPI_WaitFifoStateUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653a:	f043 0220 	orr.w	r2, r3, #32
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e000      	b.n	8006548 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006558:	f7fb fdca 	bl	80020f0 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0220 	bic.w	r2, r2, #32
 800656c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	2164      	movs	r1, #100	; 0x64
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ffa6 	bl	80064c4 <SPI_EndRxTxTransaction>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b10      	cmp	r3, #16
 8006596:	d112      	bne.n	80065be <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a4:	f043 0202 	orr.w	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80065b4:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fb32 	bl	8005c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80065bc:	e020      	b.n	8006600 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d115      	bne.n	80065f2 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d107      	bne.n	80065e2 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fb fadc 	bl	8001b98 <HAL_SPI_RxCpltCallback>
}
 80065e0:	e00e      	b.n	8006600 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fb0e 	bl	8005c0c <HAL_SPI_TxRxCpltCallback>
}
 80065f0:	e006      	b.n	8006600 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fb10 	bl	8005c20 <HAL_SPI_ErrorCallback>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800661e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006620:	f7fb fd66 	bl	80020f0 <HAL_GetTick>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	2164      	movs	r1, #100	; 0x64
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fef2 	bl	8006414 <SPI_EndRxTransaction>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b10      	cmp	r3, #16
 8006656:	d10e      	bne.n	8006676 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665c:	f043 0202 	orr.w	r2, r3, #2
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800666c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff fad6 	bl	8005c20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006674:	e00a      	b.n	800668c <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667a:	2b00      	cmp	r3, #0
 800667c:	d103      	bne.n	8006686 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb fa8a 	bl	8001b98 <HAL_SPI_RxCpltCallback>
}
 8006684:	e002      	b.n	800668c <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff faca 	bl	8005c20 <HAL_SPI_ErrorCallback>
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800669c:	f7fb fd28 	bl	80020f0 <HAL_GetTick>
 80066a0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066b0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	2164      	movs	r1, #100	; 0x64
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff ff04 	bl	80064c4 <SPI_EndRxTxTransaction>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fa8f 	bl	8005c20 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006702:	e002      	b.n	800670a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fb fa5b 	bl	8001bc0 <HAL_SPI_TxCpltCallback>
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e040      	b.n	80067a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f83a 	bl	80067ae <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2224      	movs	r2, #36	; 0x24
 800673e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8cb 	bl	80068ec <UART_SetConfig>
 8006756:	4603      	mov	r3, r0
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e022      	b.n	80067a6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb77 	bl	8006e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800677c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800678c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0201 	orr.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fbfe 	bl	8006fa0 <UART_CheckIdleState>
 80067a4:	4603      	mov	r3, r0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08a      	sub	sp, #40	; 0x28
 80067c6:	af02      	add	r7, sp, #8
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	f040 8082 	bne.w	80068e0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_UART_Transmit+0x26>
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e07a      	b.n	80068e2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Transmit+0x38>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e073      	b.n	80068e2 <HAL_UART_Transmit+0x120>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2221      	movs	r2, #33	; 0x21
 800680e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006810:	f7fb fc6e 	bl	80020f0 <HAL_GetTick>
 8006814:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	88fa      	ldrh	r2, [r7, #6]
 8006822:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682e:	d108      	bne.n	8006842 <HAL_UART_Transmit+0x80>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	e003      	b.n	800684a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006852:	e02d      	b.n	80068b0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fbe7 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e039      	b.n	80068e2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	881a      	ldrh	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006880:	b292      	uxth	r2, r2
 8006882:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	3302      	adds	r3, #2
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	e008      	b.n	800689e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	b292      	uxth	r2, r2
 8006896:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	3301      	adds	r3, #1
 800689c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1cb      	bne.n	8006854 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2200      	movs	r2, #0
 80068c4:	2140      	movs	r1, #64	; 0x40
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fbb3 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e005      	b.n	80068e2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	e000      	b.n	80068e2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80068e0:	2302      	movs	r3, #2
  }
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f0:	b08a      	sub	sp, #40	; 0x28
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	431a      	orrs	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	431a      	orrs	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	4313      	orrs	r3, r2
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4ba4      	ldr	r3, [pc, #656]	; (8006bac <UART_SetConfig+0x2c0>)
 800691c:	4013      	ands	r3, r2
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006924:	430b      	orrs	r3, r1
 8006926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a99      	ldr	r2, [pc, #612]	; (8006bb0 <UART_SetConfig+0x2c4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006954:	4313      	orrs	r3, r2
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006968:	430a      	orrs	r2, r1
 800696a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a90      	ldr	r2, [pc, #576]	; (8006bb4 <UART_SetConfig+0x2c8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d126      	bne.n	80069c4 <UART_SetConfig+0xd8>
 8006976:	4b90      	ldr	r3, [pc, #576]	; (8006bb8 <UART_SetConfig+0x2cc>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b03      	cmp	r3, #3
 8006982:	d81b      	bhi.n	80069bc <UART_SetConfig+0xd0>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0xa0>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069ad 	.word	0x080069ad
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069b5 	.word	0x080069b5
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a2:	e116      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 80069a4:	2302      	movs	r3, #2
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069aa:	e112      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 80069ac:	2304      	movs	r3, #4
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b2:	e10e      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 80069b4:	2308      	movs	r3, #8
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ba:	e10a      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c2:	e106      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a7c      	ldr	r2, [pc, #496]	; (8006bbc <UART_SetConfig+0x2d0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d138      	bne.n	8006a40 <UART_SetConfig+0x154>
 80069ce:	4b7a      	ldr	r3, [pc, #488]	; (8006bb8 <UART_SetConfig+0x2cc>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d4:	f003 030c 	and.w	r3, r3, #12
 80069d8:	2b0c      	cmp	r3, #12
 80069da:	d82d      	bhi.n	8006a38 <UART_SetConfig+0x14c>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0xf8>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a19 	.word	0x08006a19
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006a39 	.word	0x08006a39
 80069f0:	08006a39 	.word	0x08006a39
 80069f4:	08006a29 	.word	0x08006a29
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a39 	.word	0x08006a39
 8006a00:	08006a39 	.word	0x08006a39
 8006a04:	08006a21 	.word	0x08006a21
 8006a08:	08006a39 	.word	0x08006a39
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1e:	e0d8      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e0d4      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e0d0      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a36:	e0cc      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3e:	e0c8      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a5e      	ldr	r2, [pc, #376]	; (8006bc0 <UART_SetConfig+0x2d4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d125      	bne.n	8006a96 <UART_SetConfig+0x1aa>
 8006a4a:	4b5b      	ldr	r3, [pc, #364]	; (8006bb8 <UART_SetConfig+0x2cc>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d016      	beq.n	8006a86 <UART_SetConfig+0x19a>
 8006a58:	2b30      	cmp	r3, #48	; 0x30
 8006a5a:	d818      	bhi.n	8006a8e <UART_SetConfig+0x1a2>
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d00a      	beq.n	8006a76 <UART_SetConfig+0x18a>
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d814      	bhi.n	8006a8e <UART_SetConfig+0x1a2>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <UART_SetConfig+0x182>
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d008      	beq.n	8006a7e <UART_SetConfig+0x192>
 8006a6c:	e00f      	b.n	8006a8e <UART_SetConfig+0x1a2>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a74:	e0ad      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a76:	2302      	movs	r3, #2
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7c:	e0a9      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a7e:	2304      	movs	r3, #4
 8006a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a84:	e0a5      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a86:	2308      	movs	r3, #8
 8006a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8c:	e0a1      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a8e:	2310      	movs	r3, #16
 8006a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a94:	e09d      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a4a      	ldr	r2, [pc, #296]	; (8006bc4 <UART_SetConfig+0x2d8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d125      	bne.n	8006aec <UART_SetConfig+0x200>
 8006aa0:	4b45      	ldr	r3, [pc, #276]	; (8006bb8 <UART_SetConfig+0x2cc>)
 8006aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8006aac:	d016      	beq.n	8006adc <UART_SetConfig+0x1f0>
 8006aae:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab0:	d818      	bhi.n	8006ae4 <UART_SetConfig+0x1f8>
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d00a      	beq.n	8006acc <UART_SetConfig+0x1e0>
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d814      	bhi.n	8006ae4 <UART_SetConfig+0x1f8>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <UART_SetConfig+0x1d8>
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d008      	beq.n	8006ad4 <UART_SetConfig+0x1e8>
 8006ac2:	e00f      	b.n	8006ae4 <UART_SetConfig+0x1f8>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aca:	e082      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006acc:	2302      	movs	r3, #2
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e07e      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e07a      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006adc:	2308      	movs	r3, #8
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e076      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e072      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a35      	ldr	r2, [pc, #212]	; (8006bc8 <UART_SetConfig+0x2dc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d12a      	bne.n	8006b4c <UART_SetConfig+0x260>
 8006af6:	4b30      	ldr	r3, [pc, #192]	; (8006bb8 <UART_SetConfig+0x2cc>)
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b04:	d01a      	beq.n	8006b3c <UART_SetConfig+0x250>
 8006b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0a:	d81b      	bhi.n	8006b44 <UART_SetConfig+0x258>
 8006b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b10:	d00c      	beq.n	8006b2c <UART_SetConfig+0x240>
 8006b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b16:	d815      	bhi.n	8006b44 <UART_SetConfig+0x258>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <UART_SetConfig+0x238>
 8006b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b20:	d008      	beq.n	8006b34 <UART_SetConfig+0x248>
 8006b22:	e00f      	b.n	8006b44 <UART_SetConfig+0x258>
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e052      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e04e      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b34:	2304      	movs	r3, #4
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e04a      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e046      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b44:	2310      	movs	r3, #16
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e042      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <UART_SetConfig+0x2c4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d13a      	bne.n	8006bcc <UART_SetConfig+0x2e0>
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <UART_SetConfig+0x2cc>)
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b64:	d01a      	beq.n	8006b9c <UART_SetConfig+0x2b0>
 8006b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6a:	d81b      	bhi.n	8006ba4 <UART_SetConfig+0x2b8>
 8006b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b70:	d00c      	beq.n	8006b8c <UART_SetConfig+0x2a0>
 8006b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b76:	d815      	bhi.n	8006ba4 <UART_SetConfig+0x2b8>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <UART_SetConfig+0x298>
 8006b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b80:	d008      	beq.n	8006b94 <UART_SetConfig+0x2a8>
 8006b82:	e00f      	b.n	8006ba4 <UART_SetConfig+0x2b8>
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e022      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e01e      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b94:	2304      	movs	r3, #4
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e01a      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e016      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006baa:	e012      	b.n	8006bd2 <UART_SetConfig+0x2e6>
 8006bac:	efff69f3 	.word	0xefff69f3
 8006bb0:	40008000 	.word	0x40008000
 8006bb4:	40013800 	.word	0x40013800
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40004400 	.word	0x40004400
 8006bc0:	40004800 	.word	0x40004800
 8006bc4:	40004c00 	.word	0x40004c00
 8006bc8:	40005000 	.word	0x40005000
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a9f      	ldr	r2, [pc, #636]	; (8006e54 <UART_SetConfig+0x568>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d17a      	bne.n	8006cd2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d824      	bhi.n	8006c2e <UART_SetConfig+0x342>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x300>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c2f 	.word	0x08006c2f
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c2f 	.word	0x08006c2f
 8006bfc:	08006c1f 	.word	0x08006c1f
 8006c00:	08006c2f 	.word	0x08006c2f
 8006c04:	08006c2f 	.word	0x08006c2f
 8006c08:	08006c2f 	.word	0x08006c2f
 8006c0c:	08006c27 	.word	0x08006c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fc fe68 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8006c14:	61f8      	str	r0, [r7, #28]
        break;
 8006c16:	e010      	b.n	8006c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c18:	4b8f      	ldr	r3, [pc, #572]	; (8006e58 <UART_SetConfig+0x56c>)
 8006c1a:	61fb      	str	r3, [r7, #28]
        break;
 8006c1c:	e00d      	b.n	8006c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7fc fdc9 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8006c22:	61f8      	str	r0, [r7, #28]
        break;
 8006c24:	e009      	b.n	8006c3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2a:	61fb      	str	r3, [r7, #28]
        break;
 8006c2c:	e005      	b.n	8006c3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80fb 	beq.w	8006e38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	4413      	add	r3, r2
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d305      	bcc.n	8006c5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d903      	bls.n	8006c66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c64:	e0e8      	b.n	8006e38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	461c      	mov	r4, r3
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	022b      	lsls	r3, r5, #8
 8006c78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c7c:	0222      	lsls	r2, r4, #8
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	6849      	ldr	r1, [r1, #4]
 8006c82:	0849      	lsrs	r1, r1, #1
 8006c84:	2000      	movs	r0, #0
 8006c86:	4688      	mov	r8, r1
 8006c88:	4681      	mov	r9, r0
 8006c8a:	eb12 0a08 	adds.w	sl, r2, r8
 8006c8e:	eb43 0b09 	adc.w	fp, r3, r9
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	603b      	str	r3, [r7, #0]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca0:	4650      	mov	r0, sl
 8006ca2:	4659      	mov	r1, fp
 8006ca4:	f7f9 fb4c 	bl	8000340 <__aeabi_uldivmod>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4613      	mov	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb6:	d308      	bcc.n	8006cca <UART_SetConfig+0x3de>
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbe:	d204      	bcs.n	8006cca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	60da      	str	r2, [r3, #12]
 8006cc8:	e0b6      	b.n	8006e38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cd0:	e0b2      	b.n	8006e38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cda:	d15e      	bne.n	8006d9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d828      	bhi.n	8006d36 <UART_SetConfig+0x44a>
 8006ce4:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <UART_SetConfig+0x400>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d21 	.word	0x08006d21
 8006cf8:	08006d37 	.word	0x08006d37
 8006cfc:	08006d27 	.word	0x08006d27
 8006d00:	08006d37 	.word	0x08006d37
 8006d04:	08006d37 	.word	0x08006d37
 8006d08:	08006d37 	.word	0x08006d37
 8006d0c:	08006d2f 	.word	0x08006d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d10:	f7fc fde8 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8006d14:	61f8      	str	r0, [r7, #28]
        break;
 8006d16:	e014      	b.n	8006d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d18:	f7fc fdfa 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8006d1c:	61f8      	str	r0, [r7, #28]
        break;
 8006d1e:	e010      	b.n	8006d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d20:	4b4d      	ldr	r3, [pc, #308]	; (8006e58 <UART_SetConfig+0x56c>)
 8006d22:	61fb      	str	r3, [r7, #28]
        break;
 8006d24:	e00d      	b.n	8006d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d26:	f7fc fd45 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8006d2a:	61f8      	str	r0, [r7, #28]
        break;
 8006d2c:	e009      	b.n	8006d42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d32:	61fb      	str	r3, [r7, #28]
        break;
 8006d34:	e005      	b.n	8006d42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d077      	beq.n	8006e38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	005a      	lsls	r2, r3, #1
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	441a      	add	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b0f      	cmp	r3, #15
 8006d62:	d916      	bls.n	8006d92 <UART_SetConfig+0x4a6>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6a:	d212      	bcs.n	8006d92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f023 030f 	bic.w	r3, r3, #15
 8006d74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	8afa      	ldrh	r2, [r7, #22]
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	e052      	b.n	8006e38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d98:	e04e      	b.n	8006e38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d827      	bhi.n	8006df2 <UART_SetConfig+0x506>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x4bc>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006ddd 	.word	0x08006ddd
 8006db4:	08006df3 	.word	0x08006df3
 8006db8:	08006de3 	.word	0x08006de3
 8006dbc:	08006df3 	.word	0x08006df3
 8006dc0:	08006df3 	.word	0x08006df3
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006deb 	.word	0x08006deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fc fd8a 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8006dd0:	61f8      	str	r0, [r7, #28]
        break;
 8006dd2:	e014      	b.n	8006dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd4:	f7fc fd9c 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8006dd8:	61f8      	str	r0, [r7, #28]
        break;
 8006dda:	e010      	b.n	8006dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ddc:	4b1e      	ldr	r3, [pc, #120]	; (8006e58 <UART_SetConfig+0x56c>)
 8006dde:	61fb      	str	r3, [r7, #28]
        break;
 8006de0:	e00d      	b.n	8006dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de2:	f7fc fce7 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8006de6:	61f8      	str	r0, [r7, #28]
        break;
 8006de8:	e009      	b.n	8006dfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dee:	61fb      	str	r3, [r7, #28]
        break;
 8006df0:	e005      	b.n	8006dfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d019      	beq.n	8006e38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	085a      	lsrs	r2, r3, #1
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b0f      	cmp	r3, #15
 8006e1c:	d909      	bls.n	8006e32 <UART_SetConfig+0x546>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e24:	d205      	bcs.n	8006e32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
 8006e30:	e002      	b.n	8006e38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3728      	adds	r7, #40	; 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e52:	bf00      	nop
 8006e54:	40008000 	.word	0x40008000
 8006e58:	00f42400 	.word	0x00f42400

08006e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5a:	d10a      	bne.n	8006f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb0:	f7fb f89e 	bl	80020f0 <HAL_GetTick>
 8006fb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d10e      	bne.n	8006fe2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f82d 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e023      	b.n	800702a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d10e      	bne.n	800700e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f817 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e00d      	b.n	800702a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b09c      	sub	sp, #112	; 0x70
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	4613      	mov	r3, r2
 8007040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007042:	e0a5      	b.n	8007190 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	f000 80a1 	beq.w	8007190 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704e:	f7fb f84f 	bl	80020f0 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <UART_WaitOnFlagUntilTimeout+0x32>
 800705e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007060:	2b00      	cmp	r3, #0
 8007062:	d13e      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007078:	667b      	str	r3, [r7, #100]	; 0x64
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007084:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e6      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	663b      	str	r3, [r7, #96]	; 0x60
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80070b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e5      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e067      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d04f      	beq.n	8007190 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070fe:	d147      	bne.n	8007190 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007108:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800711e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
 800712a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800712e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e6      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	613b      	str	r3, [r7, #16]
   return(result);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	66bb      	str	r3, [r7, #104]	; 0x68
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800715c:	623a      	str	r2, [r7, #32]
 800715e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	69f9      	ldr	r1, [r7, #28]
 8007162:	6a3a      	ldr	r2, [r7, #32]
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	61bb      	str	r3, [r7, #24]
   return(result);
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2220      	movs	r2, #32
 800717a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e010      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69da      	ldr	r2, [r3, #28]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4013      	ands	r3, r2
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	429a      	cmp	r2, r3
 800719e:	bf0c      	ite	eq
 80071a0:	2301      	moveq	r3, #1
 80071a2:	2300      	movne	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	f43f af4a 	beq.w	8007044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3770      	adds	r7, #112	; 0x70
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80071bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80071c0:	f7fa fe84 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80071c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80071c6:	e003      	b.n	80071d0 <LoopCopyDataInit>

080071c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80071ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80071cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80071ce:	3104      	adds	r1, #4

080071d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80071d0:	480a      	ldr	r0, [pc, #40]	; (80071fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <LoopForever+0xe>)
	adds	r2, r0, r1
 80071d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80071d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80071d8:	d3f6      	bcc.n	80071c8 <CopyDataInit>
	ldr	r2, =_sbss
 80071da:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <LoopForever+0x12>)
	b	LoopFillZerobss
 80071dc:	e002      	b.n	80071e4 <LoopFillZerobss>

080071de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80071de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80071e0:	f842 3b04 	str.w	r3, [r2], #4

080071e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80071e4:	4b08      	ldr	r3, [pc, #32]	; (8007208 <LoopForever+0x16>)
	cmp	r2, r3
 80071e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80071e8:	d3f9      	bcc.n	80071de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80071ea:	f000 f817 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80071ee:	f7fa fd7d 	bl	8001cec <main>

080071f2 <LoopForever>:

LoopForever:
    b LoopForever
 80071f2:	e7fe      	b.n	80071f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80071f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80071f8:	0800aaf8 	.word	0x0800aaf8
	ldr	r0, =_sdata
 80071fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007200:	20000108 	.word	0x20000108
	ldr	r2, =_sbss
 8007204:	20000108 	.word	0x20000108
	ldr	r3, = _ebss
 8007208:	20000bb0 	.word	0x20000bb0

0800720c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800720c:	e7fe      	b.n	800720c <ADC1_2_IRQHandler>
	...

08007210 <__errno>:
 8007210:	4b01      	ldr	r3, [pc, #4]	; (8007218 <__errno+0x8>)
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000040 	.word	0x20000040

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	; (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	; (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	; (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	; (8007260 <__libc_init_array+0x44>)
 8007230:	f002 feb2 	bl	8009f98 <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	0800aae8 	.word	0x0800aae8
 8007258:	0800aae8 	.word	0x0800aae8
 800725c:	0800aae8 	.word	0x0800aae8
 8007260:	0800aaec 	.word	0x0800aaec

08007264 <localtime>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <localtime+0x30>)
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800726c:	4604      	mov	r4, r0
 800726e:	b953      	cbnz	r3, 8007286 <localtime+0x22>
 8007270:	2024      	movs	r0, #36	; 0x24
 8007272:	f000 f909 	bl	8007488 <malloc>
 8007276:	4602      	mov	r2, r0
 8007278:	63e8      	str	r0, [r5, #60]	; 0x3c
 800727a:	b920      	cbnz	r0, 8007286 <localtime+0x22>
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <localtime+0x34>)
 800727e:	4807      	ldr	r0, [pc, #28]	; (800729c <localtime+0x38>)
 8007280:	2132      	movs	r1, #50	; 0x32
 8007282:	f001 f8b5 	bl	80083f0 <__assert_func>
 8007286:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8007288:	4620      	mov	r0, r4
 800728a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800728e:	f000 b807 	b.w	80072a0 <localtime_r>
 8007292:	bf00      	nop
 8007294:	20000040 	.word	0x20000040
 8007298:	0800a720 	.word	0x0800a720
 800729c:	0800a737 	.word	0x0800a737

080072a0 <localtime_r>:
 80072a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80072a4:	4680      	mov	r8, r0
 80072a6:	9101      	str	r1, [sp, #4]
 80072a8:	f001 fae2 	bl	8008870 <__gettzinfo>
 80072ac:	9901      	ldr	r1, [sp, #4]
 80072ae:	4605      	mov	r5, r0
 80072b0:	4640      	mov	r0, r8
 80072b2:	f001 fae1 	bl	8008878 <gmtime_r>
 80072b6:	6943      	ldr	r3, [r0, #20]
 80072b8:	0799      	lsls	r1, r3, #30
 80072ba:	4604      	mov	r4, r0
 80072bc:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80072c0:	d105      	bne.n	80072ce <localtime_r+0x2e>
 80072c2:	2264      	movs	r2, #100	; 0x64
 80072c4:	fb97 f3f2 	sdiv	r3, r7, r2
 80072c8:	fb02 7313 	mls	r3, r2, r3, r7
 80072cc:	bb73      	cbnz	r3, 800732c <localtime_r+0x8c>
 80072ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80072d2:	fb97 f6f3 	sdiv	r6, r7, r3
 80072d6:	fb03 7616 	mls	r6, r3, r6, r7
 80072da:	fab6 f386 	clz	r3, r6
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	4e67      	ldr	r6, [pc, #412]	; (8007480 <localtime_r+0x1e0>)
 80072e2:	2230      	movs	r2, #48	; 0x30
 80072e4:	fb02 6603 	mla	r6, r2, r3, r6
 80072e8:	f000 fe30 	bl	8007f4c <__tz_lock>
 80072ec:	f000 fe3a 	bl	8007f64 <_tzset_unlocked>
 80072f0:	4b64      	ldr	r3, [pc, #400]	; (8007484 <localtime_r+0x1e4>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	b34b      	cbz	r3, 800734a <localtime_r+0xaa>
 80072f6:	686b      	ldr	r3, [r5, #4]
 80072f8:	42bb      	cmp	r3, r7
 80072fa:	d119      	bne.n	8007330 <localtime_r+0x90>
 80072fc:	682f      	ldr	r7, [r5, #0]
 80072fe:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007302:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8007306:	b9df      	cbnz	r7, 8007340 <localtime_r+0xa0>
 8007308:	4282      	cmp	r2, r0
 800730a:	eb73 0101 	sbcs.w	r1, r3, r1
 800730e:	da23      	bge.n	8007358 <localtime_r+0xb8>
 8007310:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8007314:	4282      	cmp	r2, r0
 8007316:	eb73 0701 	sbcs.w	r7, r3, r1
 800731a:	bfb4      	ite	lt
 800731c:	2701      	movlt	r7, #1
 800731e:	2700      	movge	r7, #0
 8007320:	4282      	cmp	r2, r0
 8007322:	418b      	sbcs	r3, r1
 8007324:	6227      	str	r7, [r4, #32]
 8007326:	db19      	blt.n	800735c <localtime_r+0xbc>
 8007328:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800732a:	e018      	b.n	800735e <localtime_r+0xbe>
 800732c:	2301      	movs	r3, #1
 800732e:	e7d7      	b.n	80072e0 <localtime_r+0x40>
 8007330:	4638      	mov	r0, r7
 8007332:	f000 fd61 	bl	8007df8 <__tzcalc_limits>
 8007336:	2800      	cmp	r0, #0
 8007338:	d1e0      	bne.n	80072fc <localtime_r+0x5c>
 800733a:	f04f 33ff 	mov.w	r3, #4294967295
 800733e:	e004      	b.n	800734a <localtime_r+0xaa>
 8007340:	4282      	cmp	r2, r0
 8007342:	eb73 0101 	sbcs.w	r1, r3, r1
 8007346:	da02      	bge.n	800734e <localtime_r+0xae>
 8007348:	2300      	movs	r3, #0
 800734a:	6223      	str	r3, [r4, #32]
 800734c:	e7ec      	b.n	8007328 <localtime_r+0x88>
 800734e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8007352:	4282      	cmp	r2, r0
 8007354:	418b      	sbcs	r3, r1
 8007356:	daf7      	bge.n	8007348 <localtime_r+0xa8>
 8007358:	2301      	movs	r3, #1
 800735a:	6223      	str	r3, [r4, #32]
 800735c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800735e:	6861      	ldr	r1, [r4, #4]
 8007360:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8007364:	203c      	movs	r0, #60	; 0x3c
 8007366:	fb93 f5f2 	sdiv	r5, r3, r2
 800736a:	fb02 3315 	mls	r3, r2, r5, r3
 800736e:	fb93 f2f0 	sdiv	r2, r3, r0
 8007372:	fb00 3012 	mls	r0, r0, r2, r3
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	1a89      	subs	r1, r1, r2
 800737a:	68a2      	ldr	r2, [r4, #8]
 800737c:	6061      	str	r1, [r4, #4]
 800737e:	1a1b      	subs	r3, r3, r0
 8007380:	1b52      	subs	r2, r2, r5
 8007382:	2b3b      	cmp	r3, #59	; 0x3b
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	60a2      	str	r2, [r4, #8]
 8007388:	dd35      	ble.n	80073f6 <localtime_r+0x156>
 800738a:	3101      	adds	r1, #1
 800738c:	6061      	str	r1, [r4, #4]
 800738e:	3b3c      	subs	r3, #60	; 0x3c
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	6863      	ldr	r3, [r4, #4]
 8007394:	2b3b      	cmp	r3, #59	; 0x3b
 8007396:	dd34      	ble.n	8007402 <localtime_r+0x162>
 8007398:	3201      	adds	r2, #1
 800739a:	60a2      	str	r2, [r4, #8]
 800739c:	3b3c      	subs	r3, #60	; 0x3c
 800739e:	6063      	str	r3, [r4, #4]
 80073a0:	68a3      	ldr	r3, [r4, #8]
 80073a2:	2b17      	cmp	r3, #23
 80073a4:	dd33      	ble.n	800740e <localtime_r+0x16e>
 80073a6:	69e2      	ldr	r2, [r4, #28]
 80073a8:	3201      	adds	r2, #1
 80073aa:	61e2      	str	r2, [r4, #28]
 80073ac:	69a2      	ldr	r2, [r4, #24]
 80073ae:	3201      	adds	r2, #1
 80073b0:	2a06      	cmp	r2, #6
 80073b2:	bfc8      	it	gt
 80073b4:	2200      	movgt	r2, #0
 80073b6:	61a2      	str	r2, [r4, #24]
 80073b8:	68e2      	ldr	r2, [r4, #12]
 80073ba:	3b18      	subs	r3, #24
 80073bc:	3201      	adds	r2, #1
 80073be:	60a3      	str	r3, [r4, #8]
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	60e2      	str	r2, [r4, #12]
 80073c4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80073c8:	428a      	cmp	r2, r1
 80073ca:	dd0e      	ble.n	80073ea <localtime_r+0x14a>
 80073cc:	2b0b      	cmp	r3, #11
 80073ce:	eba2 0201 	sub.w	r2, r2, r1
 80073d2:	60e2      	str	r2, [r4, #12]
 80073d4:	f103 0201 	add.w	r2, r3, #1
 80073d8:	bf09      	itett	eq
 80073da:	6963      	ldreq	r3, [r4, #20]
 80073dc:	6122      	strne	r2, [r4, #16]
 80073de:	2200      	moveq	r2, #0
 80073e0:	3301      	addeq	r3, #1
 80073e2:	bf02      	ittt	eq
 80073e4:	6122      	streq	r2, [r4, #16]
 80073e6:	6163      	streq	r3, [r4, #20]
 80073e8:	61e2      	streq	r2, [r4, #28]
 80073ea:	f000 fdb5 	bl	8007f58 <__tz_unlock>
 80073ee:	4620      	mov	r0, r4
 80073f0:	b002      	add	sp, #8
 80073f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dacb      	bge.n	8007392 <localtime_r+0xf2>
 80073fa:	3901      	subs	r1, #1
 80073fc:	6061      	str	r1, [r4, #4]
 80073fe:	333c      	adds	r3, #60	; 0x3c
 8007400:	e7c6      	b.n	8007390 <localtime_r+0xf0>
 8007402:	2b00      	cmp	r3, #0
 8007404:	dacc      	bge.n	80073a0 <localtime_r+0x100>
 8007406:	3a01      	subs	r2, #1
 8007408:	60a2      	str	r2, [r4, #8]
 800740a:	333c      	adds	r3, #60	; 0x3c
 800740c:	e7c7      	b.n	800739e <localtime_r+0xfe>
 800740e:	2b00      	cmp	r3, #0
 8007410:	daeb      	bge.n	80073ea <localtime_r+0x14a>
 8007412:	69e2      	ldr	r2, [r4, #28]
 8007414:	3a01      	subs	r2, #1
 8007416:	61e2      	str	r2, [r4, #28]
 8007418:	69a2      	ldr	r2, [r4, #24]
 800741a:	3a01      	subs	r2, #1
 800741c:	bf48      	it	mi
 800741e:	2206      	movmi	r2, #6
 8007420:	61a2      	str	r2, [r4, #24]
 8007422:	68e2      	ldr	r2, [r4, #12]
 8007424:	3318      	adds	r3, #24
 8007426:	3a01      	subs	r2, #1
 8007428:	60e2      	str	r2, [r4, #12]
 800742a:	60a3      	str	r3, [r4, #8]
 800742c:	2a00      	cmp	r2, #0
 800742e:	d1dc      	bne.n	80073ea <localtime_r+0x14a>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	3b01      	subs	r3, #1
 8007434:	d405      	bmi.n	8007442 <localtime_r+0x1a2>
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800743e:	60e3      	str	r3, [r4, #12]
 8007440:	e7d3      	b.n	80073ea <localtime_r+0x14a>
 8007442:	230b      	movs	r3, #11
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	6963      	ldr	r3, [r4, #20]
 8007448:	1e5a      	subs	r2, r3, #1
 800744a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800744e:	6162      	str	r2, [r4, #20]
 8007450:	079a      	lsls	r2, r3, #30
 8007452:	d105      	bne.n	8007460 <localtime_r+0x1c0>
 8007454:	2164      	movs	r1, #100	; 0x64
 8007456:	fb93 f2f1 	sdiv	r2, r3, r1
 800745a:	fb01 3212 	mls	r2, r1, r2, r3
 800745e:	b962      	cbnz	r2, 800747a <localtime_r+0x1da>
 8007460:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007464:	fb93 f1f2 	sdiv	r1, r3, r2
 8007468:	fb02 3311 	mls	r3, r2, r1, r3
 800746c:	fab3 f383 	clz	r3, r3
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8007476:	61e3      	str	r3, [r4, #28]
 8007478:	e7de      	b.n	8007438 <localtime_r+0x198>
 800747a:	2301      	movs	r3, #1
 800747c:	e7f9      	b.n	8007472 <localtime_r+0x1d2>
 800747e:	bf00      	nop
 8007480:	0800a7f4 	.word	0x0800a7f4
 8007484:	20000b9c 	.word	0x20000b9c

08007488 <malloc>:
 8007488:	4b02      	ldr	r3, [pc, #8]	; (8007494 <malloc+0xc>)
 800748a:	4601      	mov	r1, r0
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	f000 baff 	b.w	8007a90 <_malloc_r>
 8007492:	bf00      	nop
 8007494:	20000040 	.word	0x20000040

08007498 <free>:
 8007498:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <free+0xc>)
 800749a:	4601      	mov	r1, r0
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	f000 ba8b 	b.w	80079b8 <_free_r>
 80074a2:	bf00      	nop
 80074a4:	20000040 	.word	0x20000040

080074a8 <memcpy>:
 80074a8:	440a      	add	r2, r1
 80074aa:	4291      	cmp	r1, r2
 80074ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b0:	d100      	bne.n	80074b4 <memcpy+0xc>
 80074b2:	4770      	bx	lr
 80074b4:	b510      	push	{r4, lr}
 80074b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074be:	4291      	cmp	r1, r2
 80074c0:	d1f9      	bne.n	80074b6 <memcpy+0xe>
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <memset>:
 80074c4:	4402      	add	r2, r0
 80074c6:	4603      	mov	r3, r0
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d100      	bne.n	80074ce <memset+0xa>
 80074cc:	4770      	bx	lr
 80074ce:	f803 1b01 	strb.w	r1, [r3], #1
 80074d2:	e7f9      	b.n	80074c8 <memset+0x4>

080074d4 <validate_structure>:
 80074d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074d6:	6801      	ldr	r1, [r0, #0]
 80074d8:	293b      	cmp	r1, #59	; 0x3b
 80074da:	4604      	mov	r4, r0
 80074dc:	d911      	bls.n	8007502 <validate_structure+0x2e>
 80074de:	223c      	movs	r2, #60	; 0x3c
 80074e0:	4668      	mov	r0, sp
 80074e2:	f000 ffa3 	bl	800842c <div>
 80074e6:	9a01      	ldr	r2, [sp, #4]
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	9900      	ldr	r1, [sp, #0]
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	440b      	add	r3, r1
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	bfbb      	ittet	lt
 80074f4:	323c      	addlt	r2, #60	; 0x3c
 80074f6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80074fa:	6022      	strge	r2, [r4, #0]
 80074fc:	6022      	strlt	r2, [r4, #0]
 80074fe:	bfb8      	it	lt
 8007500:	6063      	strlt	r3, [r4, #4]
 8007502:	6861      	ldr	r1, [r4, #4]
 8007504:	293b      	cmp	r1, #59	; 0x3b
 8007506:	d911      	bls.n	800752c <validate_structure+0x58>
 8007508:	223c      	movs	r2, #60	; 0x3c
 800750a:	4668      	mov	r0, sp
 800750c:	f000 ff8e 	bl	800842c <div>
 8007510:	9a01      	ldr	r2, [sp, #4]
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	9900      	ldr	r1, [sp, #0]
 8007516:	2a00      	cmp	r2, #0
 8007518:	440b      	add	r3, r1
 800751a:	60a3      	str	r3, [r4, #8]
 800751c:	bfbb      	ittet	lt
 800751e:	323c      	addlt	r2, #60	; 0x3c
 8007520:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007524:	6062      	strge	r2, [r4, #4]
 8007526:	6062      	strlt	r2, [r4, #4]
 8007528:	bfb8      	it	lt
 800752a:	60a3      	strlt	r3, [r4, #8]
 800752c:	68a1      	ldr	r1, [r4, #8]
 800752e:	2917      	cmp	r1, #23
 8007530:	d911      	bls.n	8007556 <validate_structure+0x82>
 8007532:	2218      	movs	r2, #24
 8007534:	4668      	mov	r0, sp
 8007536:	f000 ff79 	bl	800842c <div>
 800753a:	9a01      	ldr	r2, [sp, #4]
 800753c:	68e3      	ldr	r3, [r4, #12]
 800753e:	9900      	ldr	r1, [sp, #0]
 8007540:	2a00      	cmp	r2, #0
 8007542:	440b      	add	r3, r1
 8007544:	60e3      	str	r3, [r4, #12]
 8007546:	bfbb      	ittet	lt
 8007548:	3218      	addlt	r2, #24
 800754a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800754e:	60a2      	strge	r2, [r4, #8]
 8007550:	60a2      	strlt	r2, [r4, #8]
 8007552:	bfb8      	it	lt
 8007554:	60e3      	strlt	r3, [r4, #12]
 8007556:	6921      	ldr	r1, [r4, #16]
 8007558:	290b      	cmp	r1, #11
 800755a:	d911      	bls.n	8007580 <validate_structure+0xac>
 800755c:	220c      	movs	r2, #12
 800755e:	4668      	mov	r0, sp
 8007560:	f000 ff64 	bl	800842c <div>
 8007564:	9a01      	ldr	r2, [sp, #4]
 8007566:	6963      	ldr	r3, [r4, #20]
 8007568:	9900      	ldr	r1, [sp, #0]
 800756a:	2a00      	cmp	r2, #0
 800756c:	440b      	add	r3, r1
 800756e:	6163      	str	r3, [r4, #20]
 8007570:	bfbb      	ittet	lt
 8007572:	320c      	addlt	r2, #12
 8007574:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007578:	6122      	strge	r2, [r4, #16]
 800757a:	6122      	strlt	r2, [r4, #16]
 800757c:	bfb8      	it	lt
 800757e:	6163      	strlt	r3, [r4, #20]
 8007580:	6963      	ldr	r3, [r4, #20]
 8007582:	0798      	lsls	r0, r3, #30
 8007584:	d120      	bne.n	80075c8 <validate_structure+0xf4>
 8007586:	2164      	movs	r1, #100	; 0x64
 8007588:	fb93 f2f1 	sdiv	r2, r3, r1
 800758c:	fb01 3212 	mls	r2, r1, r2, r3
 8007590:	b9e2      	cbnz	r2, 80075cc <validate_structure+0xf8>
 8007592:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007596:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800759a:	fb93 f1f2 	sdiv	r1, r3, r2
 800759e:	fb02 3311 	mls	r3, r2, r1, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf14      	ite	ne
 80075a6:	231c      	movne	r3, #28
 80075a8:	231d      	moveq	r3, #29
 80075aa:	68e2      	ldr	r2, [r4, #12]
 80075ac:	2a00      	cmp	r2, #0
 80075ae:	dc0f      	bgt.n	80075d0 <validate_structure+0xfc>
 80075b0:	4f33      	ldr	r7, [pc, #204]	; (8007680 <validate_structure+0x1ac>)
 80075b2:	260b      	movs	r6, #11
 80075b4:	2064      	movs	r0, #100	; 0x64
 80075b6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80075ba:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80075be:	f1bc 0f00 	cmp.w	ip, #0
 80075c2:	dd31      	ble.n	8007628 <validate_structure+0x154>
 80075c4:	b003      	add	sp, #12
 80075c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c8:	231c      	movs	r3, #28
 80075ca:	e7ee      	b.n	80075aa <validate_structure+0xd6>
 80075cc:	231d      	movs	r3, #29
 80075ce:	e7ec      	b.n	80075aa <validate_structure+0xd6>
 80075d0:	4e2b      	ldr	r6, [pc, #172]	; (8007680 <validate_structure+0x1ac>)
 80075d2:	2700      	movs	r7, #0
 80075d4:	2064      	movs	r0, #100	; 0x64
 80075d6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80075da:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80075de:	2a01      	cmp	r2, #1
 80075e0:	bf14      	ite	ne
 80075e2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80075e6:	469c      	moveq	ip, r3
 80075e8:	4561      	cmp	r1, ip
 80075ea:	ddeb      	ble.n	80075c4 <validate_structure+0xf0>
 80075ec:	3201      	adds	r2, #1
 80075ee:	eba1 010c 	sub.w	r1, r1, ip
 80075f2:	2a0c      	cmp	r2, #12
 80075f4:	60e1      	str	r1, [r4, #12]
 80075f6:	6122      	str	r2, [r4, #16]
 80075f8:	d1ef      	bne.n	80075da <validate_structure+0x106>
 80075fa:	6963      	ldr	r3, [r4, #20]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	0791      	lsls	r1, r2, #30
 8007600:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8007604:	d137      	bne.n	8007676 <validate_structure+0x1a2>
 8007606:	fb92 f1f0 	sdiv	r1, r2, r0
 800760a:	fb00 2211 	mls	r2, r0, r1, r2
 800760e:	2a00      	cmp	r2, #0
 8007610:	d133      	bne.n	800767a <validate_structure+0x1a6>
 8007612:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8007616:	fb93 f2f5 	sdiv	r2, r3, r5
 800761a:	fb05 3312 	mls	r3, r5, r2, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	bf14      	ite	ne
 8007622:	231c      	movne	r3, #28
 8007624:	231d      	moveq	r3, #29
 8007626:	e7d8      	b.n	80075da <validate_structure+0x106>
 8007628:	6921      	ldr	r1, [r4, #16]
 800762a:	3901      	subs	r1, #1
 800762c:	6121      	str	r1, [r4, #16]
 800762e:	3101      	adds	r1, #1
 8007630:	d114      	bne.n	800765c <validate_structure+0x188>
 8007632:	6963      	ldr	r3, [r4, #20]
 8007634:	1e5a      	subs	r2, r3, #1
 8007636:	0791      	lsls	r1, r2, #30
 8007638:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800763c:	d117      	bne.n	800766e <validate_structure+0x19a>
 800763e:	fb92 f1f0 	sdiv	r1, r2, r0
 8007642:	fb00 2211 	mls	r2, r0, r1, r2
 8007646:	b9a2      	cbnz	r2, 8007672 <validate_structure+0x19e>
 8007648:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800764c:	fb93 f2f5 	sdiv	r2, r3, r5
 8007650:	fb05 3312 	mls	r3, r5, r2, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	231c      	movne	r3, #28
 800765a:	231d      	moveq	r3, #29
 800765c:	6922      	ldr	r2, [r4, #16]
 800765e:	2a01      	cmp	r2, #1
 8007660:	bf14      	ite	ne
 8007662:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8007666:	461a      	moveq	r2, r3
 8007668:	4462      	add	r2, ip
 800766a:	60e2      	str	r2, [r4, #12]
 800766c:	e7a5      	b.n	80075ba <validate_structure+0xe6>
 800766e:	231c      	movs	r3, #28
 8007670:	e7f4      	b.n	800765c <validate_structure+0x188>
 8007672:	231d      	movs	r3, #29
 8007674:	e7f2      	b.n	800765c <validate_structure+0x188>
 8007676:	231c      	movs	r3, #28
 8007678:	e7af      	b.n	80075da <validate_structure+0x106>
 800767a:	231d      	movs	r3, #29
 800767c:	e7ad      	b.n	80075da <validate_structure+0x106>
 800767e:	bf00      	nop
 8007680:	0800a794 	.word	0x0800a794

08007684 <mktime>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	b085      	sub	sp, #20
 800768a:	4607      	mov	r7, r0
 800768c:	f001 f8f0 	bl	8008870 <__gettzinfo>
 8007690:	4681      	mov	r9, r0
 8007692:	4638      	mov	r0, r7
 8007694:	f7ff ff1e 	bl	80074d4 <validate_structure>
 8007698:	e9d7 4000 	ldrd	r4, r0, [r7]
 800769c:	233c      	movs	r3, #60	; 0x3c
 800769e:	fb03 4400 	mla	r4, r3, r0, r4
 80076a2:	68b8      	ldr	r0, [r7, #8]
 80076a4:	4abc      	ldr	r2, [pc, #752]	; (8007998 <mktime+0x314>)
 80076a6:	697e      	ldr	r6, [r7, #20]
 80076a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80076ac:	fb03 4400 	mla	r4, r3, r0, r4
 80076b0:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80076b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076b8:	3d01      	subs	r5, #1
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	4415      	add	r5, r2
 80076be:	dd11      	ble.n	80076e4 <mktime+0x60>
 80076c0:	07b1      	lsls	r1, r6, #30
 80076c2:	d10f      	bne.n	80076e4 <mktime+0x60>
 80076c4:	2264      	movs	r2, #100	; 0x64
 80076c6:	fb96 f3f2 	sdiv	r3, r6, r2
 80076ca:	fb02 6313 	mls	r3, r2, r3, r6
 80076ce:	b943      	cbnz	r3, 80076e2 <mktime+0x5e>
 80076d0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80076d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80076d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80076dc:	fb02 3311 	mls	r3, r2, r1, r3
 80076e0:	b903      	cbnz	r3, 80076e4 <mktime+0x60>
 80076e2:	3501      	adds	r5, #1
 80076e4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80076e8:	3310      	adds	r3, #16
 80076ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80076ee:	4293      	cmp	r3, r2
 80076f0:	61fd      	str	r5, [r7, #28]
 80076f2:	f200 815d 	bhi.w	80079b0 <mktime+0x32c>
 80076f6:	2e46      	cmp	r6, #70	; 0x46
 80076f8:	dd71      	ble.n	80077de <mktime+0x15a>
 80076fa:	2346      	movs	r3, #70	; 0x46
 80076fc:	f240 1c6d 	movw	ip, #365	; 0x16d
 8007700:	2164      	movs	r1, #100	; 0x64
 8007702:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007706:	079a      	lsls	r2, r3, #30
 8007708:	d163      	bne.n	80077d2 <mktime+0x14e>
 800770a:	fb93 f2f1 	sdiv	r2, r3, r1
 800770e:	fb01 3212 	mls	r2, r1, r2, r3
 8007712:	2a00      	cmp	r2, #0
 8007714:	d160      	bne.n	80077d8 <mktime+0x154>
 8007716:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800771a:	fb92 fef0 	sdiv	lr, r2, r0
 800771e:	fb00 221e 	mls	r2, r0, lr, r2
 8007722:	2a00      	cmp	r2, #0
 8007724:	bf14      	ite	ne
 8007726:	4662      	movne	r2, ip
 8007728:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800772c:	3301      	adds	r3, #1
 800772e:	429e      	cmp	r6, r3
 8007730:	4415      	add	r5, r2
 8007732:	d1e8      	bne.n	8007706 <mktime+0x82>
 8007734:	4b99      	ldr	r3, [pc, #612]	; (800799c <mktime+0x318>)
 8007736:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800773a:	fbc5 4803 	smlal	r4, r8, r5, r3
 800773e:	f000 fc05 	bl	8007f4c <__tz_lock>
 8007742:	f000 fc0f 	bl	8007f64 <_tzset_unlocked>
 8007746:	4b96      	ldr	r3, [pc, #600]	; (80079a0 <mktime+0x31c>)
 8007748:	f8d3 b000 	ldr.w	fp, [r3]
 800774c:	f1bb 0f00 	cmp.w	fp, #0
 8007750:	d039      	beq.n	80077c6 <mktime+0x142>
 8007752:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8007756:	6978      	ldr	r0, [r7, #20]
 8007758:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800775c:	f1bb 0f01 	cmp.w	fp, #1
 8007760:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8007764:	46da      	mov	sl, fp
 8007766:	bfa8      	it	ge
 8007768:	f04f 0a01 	movge.w	sl, #1
 800776c:	4283      	cmp	r3, r0
 800776e:	d178      	bne.n	8007862 <mktime+0x1de>
 8007770:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8007774:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8007778:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800777c:	1a5b      	subs	r3, r3, r1
 800777e:	9302      	str	r3, [sp, #8]
 8007780:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8007784:	9303      	str	r3, [sp, #12]
 8007786:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800778a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	ebb3 0c02 	subs.w	ip, r3, r2
 8007794:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8007798:	4564      	cmp	r4, ip
 800779a:	eb78 0300 	sbcs.w	r3, r8, r0
 800779e:	da66      	bge.n	800786e <mktime+0x1ea>
 80077a0:	f8d9 3000 	ldr.w	r3, [r9]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d06f      	beq.n	8007888 <mktime+0x204>
 80077a8:	9b02      	ldr	r3, [sp, #8]
 80077aa:	429c      	cmp	r4, r3
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	eb78 0303 	sbcs.w	r3, r8, r3
 80077b2:	db03      	blt.n	80077bc <mktime+0x138>
 80077b4:	4564      	cmp	r4, ip
 80077b6:	eb78 0300 	sbcs.w	r3, r8, r0
 80077ba:	db6b      	blt.n	8007894 <mktime+0x210>
 80077bc:	f1bb 0f00 	cmp.w	fp, #0
 80077c0:	f04f 0b00 	mov.w	fp, #0
 80077c4:	da6b      	bge.n	800789e <mktime+0x21a>
 80077c6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 80077ca:	190c      	adds	r4, r1, r4
 80077cc:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80077d0:	e0a9      	b.n	8007926 <mktime+0x2a2>
 80077d2:	f240 126d 	movw	r2, #365	; 0x16d
 80077d6:	e7a9      	b.n	800772c <mktime+0xa8>
 80077d8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80077dc:	e7a6      	b.n	800772c <mktime+0xa8>
 80077de:	d0a9      	beq.n	8007734 <mktime+0xb0>
 80077e0:	2345      	movs	r3, #69	; 0x45
 80077e2:	f240 1c6d 	movw	ip, #365	; 0x16d
 80077e6:	2164      	movs	r1, #100	; 0x64
 80077e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80077ec:	e012      	b.n	8007814 <mktime+0x190>
 80077ee:	bb62      	cbnz	r2, 800784a <mktime+0x1c6>
 80077f0:	fb93 f2f1 	sdiv	r2, r3, r1
 80077f4:	fb01 3212 	mls	r2, r1, r2, r3
 80077f8:	bb52      	cbnz	r2, 8007850 <mktime+0x1cc>
 80077fa:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80077fe:	fb92 fef0 	sdiv	lr, r2, r0
 8007802:	fb00 221e 	mls	r2, r0, lr, r2
 8007806:	2a00      	cmp	r2, #0
 8007808:	bf14      	ite	ne
 800780a:	4662      	movne	r2, ip
 800780c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007810:	1aad      	subs	r5, r5, r2
 8007812:	3b01      	subs	r3, #1
 8007814:	429e      	cmp	r6, r3
 8007816:	f003 0203 	and.w	r2, r3, #3
 800781a:	dbe8      	blt.n	80077ee <mktime+0x16a>
 800781c:	b9da      	cbnz	r2, 8007856 <mktime+0x1d2>
 800781e:	2264      	movs	r2, #100	; 0x64
 8007820:	fb96 f3f2 	sdiv	r3, r6, r2
 8007824:	fb02 6313 	mls	r3, r2, r3, r6
 8007828:	b9c3      	cbnz	r3, 800785c <mktime+0x1d8>
 800782a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800782e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007832:	fb93 f1f2 	sdiv	r1, r3, r2
 8007836:	fb02 3311 	mls	r3, r2, r1, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	f240 136d 	movw	r3, #365	; 0x16d
 8007840:	bf08      	it	eq
 8007842:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007846:	1aed      	subs	r5, r5, r3
 8007848:	e774      	b.n	8007734 <mktime+0xb0>
 800784a:	f240 126d 	movw	r2, #365	; 0x16d
 800784e:	e7df      	b.n	8007810 <mktime+0x18c>
 8007850:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007854:	e7dc      	b.n	8007810 <mktime+0x18c>
 8007856:	f240 136d 	movw	r3, #365	; 0x16d
 800785a:	e7f4      	b.n	8007846 <mktime+0x1c2>
 800785c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8007860:	e7f1      	b.n	8007846 <mktime+0x1c2>
 8007862:	f000 fac9 	bl	8007df8 <__tzcalc_limits>
 8007866:	2800      	cmp	r0, #0
 8007868:	d182      	bne.n	8007770 <mktime+0xec>
 800786a:	46d3      	mov	fp, sl
 800786c:	e050      	b.n	8007910 <mktime+0x28c>
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	1a5b      	subs	r3, r3, r1
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8007878:	eb6e 0e03 	sbc.w	lr, lr, r3
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	429c      	cmp	r4, r3
 8007880:	eb78 030e 	sbcs.w	r3, r8, lr
 8007884:	dbf1      	blt.n	800786a <mktime+0x1e6>
 8007886:	e78b      	b.n	80077a0 <mktime+0x11c>
 8007888:	9b02      	ldr	r3, [sp, #8]
 800788a:	429c      	cmp	r4, r3
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	eb78 0303 	sbcs.w	r3, r8, r3
 8007892:	db8f      	blt.n	80077b4 <mktime+0x130>
 8007894:	f1bb 0f00 	cmp.w	fp, #0
 8007898:	db3e      	blt.n	8007918 <mktime+0x294>
 800789a:	f04f 0b01 	mov.w	fp, #1
 800789e:	ea8a 0a0b 	eor.w	sl, sl, fp
 80078a2:	f1ba 0f01 	cmp.w	sl, #1
 80078a6:	d133      	bne.n	8007910 <mktime+0x28c>
 80078a8:	f1bb 0f00 	cmp.w	fp, #0
 80078ac:	d04e      	beq.n	800794c <mktime+0x2c8>
 80078ae:	1a52      	subs	r2, r2, r1
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	1914      	adds	r4, r2, r4
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4638      	mov	r0, r7
 80078be:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80078c2:	f7ff fe07 	bl	80074d4 <validate_structure>
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	ebb2 020a 	subs.w	r2, r2, sl
 80078cc:	d020      	beq.n	8007910 <mktime+0x28c>
 80078ce:	2a01      	cmp	r2, #1
 80078d0:	dc3e      	bgt.n	8007950 <mktime+0x2cc>
 80078d2:	1c90      	adds	r0, r2, #2
 80078d4:	bfd8      	it	le
 80078d6:	2201      	movle	r2, #1
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	18d3      	adds	r3, r2, r3
 80078dc:	4415      	add	r5, r2
 80078de:	d540      	bpl.n	8007962 <mktime+0x2de>
 80078e0:	1e73      	subs	r3, r6, #1
 80078e2:	0799      	lsls	r1, r3, #30
 80078e4:	d137      	bne.n	8007956 <mktime+0x2d2>
 80078e6:	2264      	movs	r2, #100	; 0x64
 80078e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80078ec:	fb02 3311 	mls	r3, r2, r1, r3
 80078f0:	bba3      	cbnz	r3, 800795c <mktime+0x2d8>
 80078f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80078f6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80078fa:	fb96 f2f3 	sdiv	r2, r6, r3
 80078fe:	fb03 6612 	mls	r6, r3, r2, r6
 8007902:	2e00      	cmp	r6, #0
 8007904:	f240 136d 	movw	r3, #365	; 0x16d
 8007908:	bf18      	it	ne
 800790a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	f1bb 0f01 	cmp.w	fp, #1
 8007914:	f47f af57 	bne.w	80077c6 <mktime+0x142>
 8007918:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800791c:	190c      	adds	r4, r1, r4
 800791e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8007922:	f04f 0b01 	mov.w	fp, #1
 8007926:	f000 fb17 	bl	8007f58 <__tz_unlock>
 800792a:	3504      	adds	r5, #4
 800792c:	2307      	movs	r3, #7
 800792e:	fb95 f3f3 	sdiv	r3, r5, r3
 8007932:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007936:	1aed      	subs	r5, r5, r3
 8007938:	bf48      	it	mi
 800793a:	3507      	addmi	r5, #7
 800793c:	f8c7 b020 	str.w	fp, [r7, #32]
 8007940:	61bd      	str	r5, [r7, #24]
 8007942:	4620      	mov	r0, r4
 8007944:	4641      	mov	r1, r8
 8007946:	b005      	add	sp, #20
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	1a8a      	subs	r2, r1, r2
 800794e:	e7af      	b.n	80078b0 <mktime+0x22c>
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	e7c0      	b.n	80078d8 <mktime+0x254>
 8007956:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800795a:	e7d8      	b.n	800790e <mktime+0x28a>
 800795c:	f240 136d 	movw	r3, #365	; 0x16d
 8007960:	e7d5      	b.n	800790e <mktime+0x28a>
 8007962:	07b2      	lsls	r2, r6, #30
 8007964:	d11e      	bne.n	80079a4 <mktime+0x320>
 8007966:	2164      	movs	r1, #100	; 0x64
 8007968:	fb96 f2f1 	sdiv	r2, r6, r1
 800796c:	fb01 6212 	mls	r2, r1, r2, r6
 8007970:	b9da      	cbnz	r2, 80079aa <mktime+0x326>
 8007972:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007976:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800797a:	fb96 f1f2 	sdiv	r1, r6, r2
 800797e:	fb02 6611 	mls	r6, r2, r1, r6
 8007982:	2e00      	cmp	r6, #0
 8007984:	f240 126d 	movw	r2, #365	; 0x16d
 8007988:	bf08      	it	eq
 800798a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800798e:	4293      	cmp	r3, r2
 8007990:	bfa8      	it	ge
 8007992:	1a9b      	subge	r3, r3, r2
 8007994:	e7bb      	b.n	800790e <mktime+0x28a>
 8007996:	bf00      	nop
 8007998:	0800a7c4 	.word	0x0800a7c4
 800799c:	00015180 	.word	0x00015180
 80079a0:	20000b9c 	.word	0x20000b9c
 80079a4:	f240 126d 	movw	r2, #365	; 0x16d
 80079a8:	e7f1      	b.n	800798e <mktime+0x30a>
 80079aa:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80079ae:	e7ee      	b.n	800798e <mktime+0x30a>
 80079b0:	f04f 34ff 	mov.w	r4, #4294967295
 80079b4:	46a0      	mov	r8, r4
 80079b6:	e7c4      	b.n	8007942 <mktime+0x2be>

080079b8 <_free_r>:
 80079b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ba:	2900      	cmp	r1, #0
 80079bc:	d044      	beq.n	8007a48 <_free_r+0x90>
 80079be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c2:	9001      	str	r0, [sp, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f1a1 0404 	sub.w	r4, r1, #4
 80079ca:	bfb8      	it	lt
 80079cc:	18e4      	addlt	r4, r4, r3
 80079ce:	f001 f869 	bl	8008aa4 <__malloc_lock>
 80079d2:	4a1e      	ldr	r2, [pc, #120]	; (8007a4c <_free_r+0x94>)
 80079d4:	9801      	ldr	r0, [sp, #4]
 80079d6:	6813      	ldr	r3, [r2, #0]
 80079d8:	b933      	cbnz	r3, 80079e8 <_free_r+0x30>
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	6014      	str	r4, [r2, #0]
 80079de:	b003      	add	sp, #12
 80079e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e4:	f001 b864 	b.w	8008ab0 <__malloc_unlock>
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d908      	bls.n	80079fe <_free_r+0x46>
 80079ec:	6825      	ldr	r5, [r4, #0]
 80079ee:	1961      	adds	r1, r4, r5
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf01      	itttt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	1949      	addeq	r1, r1, r5
 80079fa:	6021      	streq	r1, [r4, #0]
 80079fc:	e7ed      	b.n	80079da <_free_r+0x22>
 80079fe:	461a      	mov	r2, r3
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	b10b      	cbz	r3, 8007a08 <_free_r+0x50>
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d9fa      	bls.n	80079fe <_free_r+0x46>
 8007a08:	6811      	ldr	r1, [r2, #0]
 8007a0a:	1855      	adds	r5, r2, r1
 8007a0c:	42a5      	cmp	r5, r4
 8007a0e:	d10b      	bne.n	8007a28 <_free_r+0x70>
 8007a10:	6824      	ldr	r4, [r4, #0]
 8007a12:	4421      	add	r1, r4
 8007a14:	1854      	adds	r4, r2, r1
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	6011      	str	r1, [r2, #0]
 8007a1a:	d1e0      	bne.n	80079de <_free_r+0x26>
 8007a1c:	681c      	ldr	r4, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	6053      	str	r3, [r2, #4]
 8007a22:	4421      	add	r1, r4
 8007a24:	6011      	str	r1, [r2, #0]
 8007a26:	e7da      	b.n	80079de <_free_r+0x26>
 8007a28:	d902      	bls.n	8007a30 <_free_r+0x78>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	6003      	str	r3, [r0, #0]
 8007a2e:	e7d6      	b.n	80079de <_free_r+0x26>
 8007a30:	6825      	ldr	r5, [r4, #0]
 8007a32:	1961      	adds	r1, r4, r5
 8007a34:	428b      	cmp	r3, r1
 8007a36:	bf04      	itt	eq
 8007a38:	6819      	ldreq	r1, [r3, #0]
 8007a3a:	685b      	ldreq	r3, [r3, #4]
 8007a3c:	6063      	str	r3, [r4, #4]
 8007a3e:	bf04      	itt	eq
 8007a40:	1949      	addeq	r1, r1, r5
 8007a42:	6021      	streq	r1, [r4, #0]
 8007a44:	6054      	str	r4, [r2, #4]
 8007a46:	e7ca      	b.n	80079de <_free_r+0x26>
 8007a48:	b003      	add	sp, #12
 8007a4a:	bd30      	pop	{r4, r5, pc}
 8007a4c:	20000b78 	.word	0x20000b78

08007a50 <sbrk_aligned>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4e0e      	ldr	r6, [pc, #56]	; (8007a8c <sbrk_aligned+0x3c>)
 8007a54:	460c      	mov	r4, r1
 8007a56:	6831      	ldr	r1, [r6, #0]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	b911      	cbnz	r1, 8007a62 <sbrk_aligned+0x12>
 8007a5c:	f000 f902 	bl	8007c64 <_sbrk_r>
 8007a60:	6030      	str	r0, [r6, #0]
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 f8fd 	bl	8007c64 <_sbrk_r>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d00a      	beq.n	8007a84 <sbrk_aligned+0x34>
 8007a6e:	1cc4      	adds	r4, r0, #3
 8007a70:	f024 0403 	bic.w	r4, r4, #3
 8007a74:	42a0      	cmp	r0, r4
 8007a76:	d007      	beq.n	8007a88 <sbrk_aligned+0x38>
 8007a78:	1a21      	subs	r1, r4, r0
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f8f2 	bl	8007c64 <_sbrk_r>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d101      	bne.n	8007a88 <sbrk_aligned+0x38>
 8007a84:	f04f 34ff 	mov.w	r4, #4294967295
 8007a88:	4620      	mov	r0, r4
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	20000b7c 	.word	0x20000b7c

08007a90 <_malloc_r>:
 8007a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a94:	1ccd      	adds	r5, r1, #3
 8007a96:	f025 0503 	bic.w	r5, r5, #3
 8007a9a:	3508      	adds	r5, #8
 8007a9c:	2d0c      	cmp	r5, #12
 8007a9e:	bf38      	it	cc
 8007aa0:	250c      	movcc	r5, #12
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	db01      	blt.n	8007aac <_malloc_r+0x1c>
 8007aa8:	42a9      	cmp	r1, r5
 8007aaa:	d905      	bls.n	8007ab8 <_malloc_r+0x28>
 8007aac:	230c      	movs	r3, #12
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	2600      	movs	r6, #0
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	4e2e      	ldr	r6, [pc, #184]	; (8007b74 <_malloc_r+0xe4>)
 8007aba:	f000 fff3 	bl	8008aa4 <__malloc_lock>
 8007abe:	6833      	ldr	r3, [r6, #0]
 8007ac0:	461c      	mov	r4, r3
 8007ac2:	bb34      	cbnz	r4, 8007b12 <_malloc_r+0x82>
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	f7ff ffc2 	bl	8007a50 <sbrk_aligned>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	4604      	mov	r4, r0
 8007ad0:	d14d      	bne.n	8007b6e <_malloc_r+0xde>
 8007ad2:	6834      	ldr	r4, [r6, #0]
 8007ad4:	4626      	mov	r6, r4
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d140      	bne.n	8007b5c <_malloc_r+0xcc>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	4631      	mov	r1, r6
 8007ade:	4638      	mov	r0, r7
 8007ae0:	eb04 0803 	add.w	r8, r4, r3
 8007ae4:	f000 f8be 	bl	8007c64 <_sbrk_r>
 8007ae8:	4580      	cmp	r8, r0
 8007aea:	d13a      	bne.n	8007b62 <_malloc_r+0xd2>
 8007aec:	6821      	ldr	r1, [r4, #0]
 8007aee:	3503      	adds	r5, #3
 8007af0:	1a6d      	subs	r5, r5, r1
 8007af2:	f025 0503 	bic.w	r5, r5, #3
 8007af6:	3508      	adds	r5, #8
 8007af8:	2d0c      	cmp	r5, #12
 8007afa:	bf38      	it	cc
 8007afc:	250c      	movcc	r5, #12
 8007afe:	4629      	mov	r1, r5
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ffa5 	bl	8007a50 <sbrk_aligned>
 8007b06:	3001      	adds	r0, #1
 8007b08:	d02b      	beq.n	8007b62 <_malloc_r+0xd2>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	442b      	add	r3, r5
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	e00e      	b.n	8007b30 <_malloc_r+0xa0>
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	1b52      	subs	r2, r2, r5
 8007b16:	d41e      	bmi.n	8007b56 <_malloc_r+0xc6>
 8007b18:	2a0b      	cmp	r2, #11
 8007b1a:	d916      	bls.n	8007b4a <_malloc_r+0xba>
 8007b1c:	1961      	adds	r1, r4, r5
 8007b1e:	42a3      	cmp	r3, r4
 8007b20:	6025      	str	r5, [r4, #0]
 8007b22:	bf18      	it	ne
 8007b24:	6059      	strne	r1, [r3, #4]
 8007b26:	6863      	ldr	r3, [r4, #4]
 8007b28:	bf08      	it	eq
 8007b2a:	6031      	streq	r1, [r6, #0]
 8007b2c:	5162      	str	r2, [r4, r5]
 8007b2e:	604b      	str	r3, [r1, #4]
 8007b30:	4638      	mov	r0, r7
 8007b32:	f104 060b 	add.w	r6, r4, #11
 8007b36:	f000 ffbb 	bl	8008ab0 <__malloc_unlock>
 8007b3a:	f026 0607 	bic.w	r6, r6, #7
 8007b3e:	1d23      	adds	r3, r4, #4
 8007b40:	1af2      	subs	r2, r6, r3
 8007b42:	d0b6      	beq.n	8007ab2 <_malloc_r+0x22>
 8007b44:	1b9b      	subs	r3, r3, r6
 8007b46:	50a3      	str	r3, [r4, r2]
 8007b48:	e7b3      	b.n	8007ab2 <_malloc_r+0x22>
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	bf0c      	ite	eq
 8007b50:	6032      	streq	r2, [r6, #0]
 8007b52:	605a      	strne	r2, [r3, #4]
 8007b54:	e7ec      	b.n	8007b30 <_malloc_r+0xa0>
 8007b56:	4623      	mov	r3, r4
 8007b58:	6864      	ldr	r4, [r4, #4]
 8007b5a:	e7b2      	b.n	8007ac2 <_malloc_r+0x32>
 8007b5c:	4634      	mov	r4, r6
 8007b5e:	6876      	ldr	r6, [r6, #4]
 8007b60:	e7b9      	b.n	8007ad6 <_malloc_r+0x46>
 8007b62:	230c      	movs	r3, #12
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	4638      	mov	r0, r7
 8007b68:	f000 ffa2 	bl	8008ab0 <__malloc_unlock>
 8007b6c:	e7a1      	b.n	8007ab2 <_malloc_r+0x22>
 8007b6e:	6025      	str	r5, [r4, #0]
 8007b70:	e7de      	b.n	8007b30 <_malloc_r+0xa0>
 8007b72:	bf00      	nop
 8007b74:	20000b78 	.word	0x20000b78

08007b78 <_puts_r>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	b118      	cbz	r0, 8007b88 <_puts_r+0x10>
 8007b80:	6983      	ldr	r3, [r0, #24]
 8007b82:	b90b      	cbnz	r3, 8007b88 <_puts_r+0x10>
 8007b84:	f000 fd80 	bl	8008688 <__sinit>
 8007b88:	69ab      	ldr	r3, [r5, #24]
 8007b8a:	68ac      	ldr	r4, [r5, #8]
 8007b8c:	b913      	cbnz	r3, 8007b94 <_puts_r+0x1c>
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fd7a 	bl	8008688 <__sinit>
 8007b94:	4b2c      	ldr	r3, [pc, #176]	; (8007c48 <_puts_r+0xd0>)
 8007b96:	429c      	cmp	r4, r3
 8007b98:	d120      	bne.n	8007bdc <_puts_r+0x64>
 8007b9a:	686c      	ldr	r4, [r5, #4]
 8007b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d405      	bmi.n	8007bae <_puts_r+0x36>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	0598      	lsls	r0, r3, #22
 8007ba6:	d402      	bmi.n	8007bae <_puts_r+0x36>
 8007ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007baa:	f000 ff13 	bl	80089d4 <__retarget_lock_acquire_recursive>
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	0719      	lsls	r1, r3, #28
 8007bb2:	d51d      	bpl.n	8007bf0 <_puts_r+0x78>
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	b1db      	cbz	r3, 8007bf0 <_puts_r+0x78>
 8007bb8:	3e01      	subs	r6, #1
 8007bba:	68a3      	ldr	r3, [r4, #8]
 8007bbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	bb39      	cbnz	r1, 8007c16 <_puts_r+0x9e>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da38      	bge.n	8007c3c <_puts_r+0xc4>
 8007bca:	4622      	mov	r2, r4
 8007bcc:	210a      	movs	r1, #10
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fb4e 	bl	8008270 <__swbuf_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d011      	beq.n	8007bfc <_puts_r+0x84>
 8007bd8:	250a      	movs	r5, #10
 8007bda:	e011      	b.n	8007c00 <_puts_r+0x88>
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <_puts_r+0xd4>)
 8007bde:	429c      	cmp	r4, r3
 8007be0:	d101      	bne.n	8007be6 <_puts_r+0x6e>
 8007be2:	68ac      	ldr	r4, [r5, #8]
 8007be4:	e7da      	b.n	8007b9c <_puts_r+0x24>
 8007be6:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <_puts_r+0xd8>)
 8007be8:	429c      	cmp	r4, r3
 8007bea:	bf08      	it	eq
 8007bec:	68ec      	ldreq	r4, [r5, #12]
 8007bee:	e7d5      	b.n	8007b9c <_puts_r+0x24>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 fb8e 	bl	8008314 <__swsetup_r>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d0dd      	beq.n	8007bb8 <_puts_r+0x40>
 8007bfc:	f04f 35ff 	mov.w	r5, #4294967295
 8007c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c02:	07da      	lsls	r2, r3, #31
 8007c04:	d405      	bmi.n	8007c12 <_puts_r+0x9a>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	059b      	lsls	r3, r3, #22
 8007c0a:	d402      	bmi.n	8007c12 <_puts_r+0x9a>
 8007c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0e:	f000 fee3 	bl	80089d8 <__retarget_lock_release_recursive>
 8007c12:	4628      	mov	r0, r5
 8007c14:	bd70      	pop	{r4, r5, r6, pc}
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	da04      	bge.n	8007c24 <_puts_r+0xac>
 8007c1a:	69a2      	ldr	r2, [r4, #24]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	dc06      	bgt.n	8007c2e <_puts_r+0xb6>
 8007c20:	290a      	cmp	r1, #10
 8007c22:	d004      	beq.n	8007c2e <_puts_r+0xb6>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	6022      	str	r2, [r4, #0]
 8007c2a:	7019      	strb	r1, [r3, #0]
 8007c2c:	e7c5      	b.n	8007bba <_puts_r+0x42>
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 fb1d 	bl	8008270 <__swbuf_r>
 8007c36:	3001      	adds	r0, #1
 8007c38:	d1bf      	bne.n	8007bba <_puts_r+0x42>
 8007c3a:	e7df      	b.n	8007bfc <_puts_r+0x84>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	250a      	movs	r5, #10
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	6022      	str	r2, [r4, #0]
 8007c44:	701d      	strb	r5, [r3, #0]
 8007c46:	e7db      	b.n	8007c00 <_puts_r+0x88>
 8007c48:	0800a94c 	.word	0x0800a94c
 8007c4c:	0800a96c 	.word	0x0800a96c
 8007c50:	0800a92c 	.word	0x0800a92c

08007c54 <puts>:
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <puts+0xc>)
 8007c56:	4601      	mov	r1, r0
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f7ff bf8d 	b.w	8007b78 <_puts_r>
 8007c5e:	bf00      	nop
 8007c60:	20000040 	.word	0x20000040

08007c64 <_sbrk_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_sbrk_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7fa f8cc 	bl	8001e0c <_sbrk>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_sbrk_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_sbrk_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20000bac 	.word	0x20000bac

08007c84 <siprintf>:
 8007c84:	b40e      	push	{r1, r2, r3}
 8007c86:	b500      	push	{lr}
 8007c88:	b09c      	sub	sp, #112	; 0x70
 8007c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8007c8c:	9002      	str	r0, [sp, #8]
 8007c8e:	9006      	str	r0, [sp, #24]
 8007c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c94:	4809      	ldr	r0, [pc, #36]	; (8007cbc <siprintf+0x38>)
 8007c96:	9107      	str	r1, [sp, #28]
 8007c98:	9104      	str	r1, [sp, #16]
 8007c9a:	4909      	ldr	r1, [pc, #36]	; (8007cc0 <siprintf+0x3c>)
 8007c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca0:	9105      	str	r1, [sp, #20]
 8007ca2:	6800      	ldr	r0, [r0, #0]
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	a902      	add	r1, sp, #8
 8007ca8:	f000 ff64 	bl	8008b74 <_svfiprintf_r>
 8007cac:	9b02      	ldr	r3, [sp, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	b01c      	add	sp, #112	; 0x70
 8007cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb8:	b003      	add	sp, #12
 8007cba:	4770      	bx	lr
 8007cbc:	20000040 	.word	0x20000040
 8007cc0:	ffff0208 	.word	0xffff0208

08007cc4 <strncmp>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	b17a      	cbz	r2, 8007ce8 <strncmp+0x24>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	3901      	subs	r1, #1
 8007ccc:	1884      	adds	r4, r0, r2
 8007cce:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007cd2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007cd6:	4290      	cmp	r0, r2
 8007cd8:	d101      	bne.n	8007cde <strncmp+0x1a>
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	d101      	bne.n	8007ce2 <strncmp+0x1e>
 8007cde:	1a80      	subs	r0, r0, r2
 8007ce0:	bd10      	pop	{r4, pc}
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d1f3      	bne.n	8007cce <strncmp+0xa>
 8007ce6:	e7fa      	b.n	8007cde <strncmp+0x1a>
 8007ce8:	4610      	mov	r0, r2
 8007cea:	e7f9      	b.n	8007ce0 <strncmp+0x1c>

08007cec <strncpy>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	3901      	subs	r1, #1
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	b132      	cbz	r2, 8007d02 <strncpy+0x16>
 8007cf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007cf8:	f803 4b01 	strb.w	r4, [r3], #1
 8007cfc:	3a01      	subs	r2, #1
 8007cfe:	2c00      	cmp	r4, #0
 8007d00:	d1f7      	bne.n	8007cf2 <strncpy+0x6>
 8007d02:	441a      	add	r2, r3
 8007d04:	2100      	movs	r1, #0
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d100      	bne.n	8007d0c <strncpy+0x20>
 8007d0a:	bd10      	pop	{r4, pc}
 8007d0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007d10:	e7f9      	b.n	8007d06 <strncpy+0x1a>

08007d12 <strstr>:
 8007d12:	780a      	ldrb	r2, [r1, #0]
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	b96a      	cbnz	r2, 8007d34 <strstr+0x22>
 8007d18:	bd70      	pop	{r4, r5, r6, pc}
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d109      	bne.n	8007d32 <strstr+0x20>
 8007d1e:	460c      	mov	r4, r1
 8007d20:	4605      	mov	r5, r0
 8007d22:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0f6      	beq.n	8007d18 <strstr+0x6>
 8007d2a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007d2e:	429e      	cmp	r6, r3
 8007d30:	d0f7      	beq.n	8007d22 <strstr+0x10>
 8007d32:	3001      	adds	r0, #1
 8007d34:	7803      	ldrb	r3, [r0, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1ef      	bne.n	8007d1a <strstr+0x8>
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	e7ec      	b.n	8007d18 <strstr+0x6>
	...

08007d40 <strtok>:
 8007d40:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <strtok+0x5c>)
 8007d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d44:	681e      	ldr	r6, [r3, #0]
 8007d46:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007d48:	4605      	mov	r5, r0
 8007d4a:	b9fc      	cbnz	r4, 8007d8c <strtok+0x4c>
 8007d4c:	2050      	movs	r0, #80	; 0x50
 8007d4e:	9101      	str	r1, [sp, #4]
 8007d50:	f7ff fb9a 	bl	8007488 <malloc>
 8007d54:	9901      	ldr	r1, [sp, #4]
 8007d56:	65b0      	str	r0, [r6, #88]	; 0x58
 8007d58:	4602      	mov	r2, r0
 8007d5a:	b920      	cbnz	r0, 8007d66 <strtok+0x26>
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <strtok+0x60>)
 8007d5e:	4811      	ldr	r0, [pc, #68]	; (8007da4 <strtok+0x64>)
 8007d60:	2157      	movs	r1, #87	; 0x57
 8007d62:	f000 fb45 	bl	80083f0 <__assert_func>
 8007d66:	e9c0 4400 	strd	r4, r4, [r0]
 8007d6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007d6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007d72:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007d76:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007d7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007d7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007d82:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007d86:	6184      	str	r4, [r0, #24]
 8007d88:	7704      	strb	r4, [r0, #28]
 8007d8a:	6244      	str	r4, [r0, #36]	; 0x24
 8007d8c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4628      	mov	r0, r5
 8007d92:	b002      	add	sp, #8
 8007d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d98:	f000 b806 	b.w	8007da8 <__strtok_r>
 8007d9c:	20000040 	.word	0x20000040
 8007da0:	0800a720 	.word	0x0800a720
 8007da4:	0800a854 	.word	0x0800a854

08007da8 <__strtok_r>:
 8007da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007daa:	b908      	cbnz	r0, 8007db0 <__strtok_r+0x8>
 8007dac:	6810      	ldr	r0, [r2, #0]
 8007dae:	b188      	cbz	r0, 8007dd4 <__strtok_r+0x2c>
 8007db0:	4604      	mov	r4, r0
 8007db2:	4620      	mov	r0, r4
 8007db4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007db8:	460f      	mov	r7, r1
 8007dba:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007dbe:	b91e      	cbnz	r6, 8007dc8 <__strtok_r+0x20>
 8007dc0:	b965      	cbnz	r5, 8007ddc <__strtok_r+0x34>
 8007dc2:	6015      	str	r5, [r2, #0]
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	e005      	b.n	8007dd4 <__strtok_r+0x2c>
 8007dc8:	42b5      	cmp	r5, r6
 8007dca:	d1f6      	bne.n	8007dba <__strtok_r+0x12>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f0      	bne.n	8007db2 <__strtok_r+0xa>
 8007dd0:	6014      	str	r4, [r2, #0]
 8007dd2:	7003      	strb	r3, [r0, #0]
 8007dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd6:	461c      	mov	r4, r3
 8007dd8:	e00c      	b.n	8007df4 <__strtok_r+0x4c>
 8007dda:	b915      	cbnz	r5, 8007de2 <__strtok_r+0x3a>
 8007ddc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007de0:	460e      	mov	r6, r1
 8007de2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007de6:	42ab      	cmp	r3, r5
 8007de8:	d1f7      	bne.n	8007dda <__strtok_r+0x32>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0f3      	beq.n	8007dd6 <__strtok_r+0x2e>
 8007dee:	2300      	movs	r3, #0
 8007df0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007df4:	6014      	str	r4, [r2, #0]
 8007df6:	e7ed      	b.n	8007dd4 <__strtok_r+0x2c>

08007df8 <__tzcalc_limits>:
 8007df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	f000 fd37 	bl	8008870 <__gettzinfo>
 8007e02:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007e06:	429d      	cmp	r5, r3
 8007e08:	f340 8099 	ble.w	8007f3e <__tzcalc_limits+0x146>
 8007e0c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8007e10:	18ac      	adds	r4, r5, r2
 8007e12:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8007e16:	f240 126d 	movw	r2, #365	; 0x16d
 8007e1a:	10a4      	asrs	r4, r4, #2
 8007e1c:	fb02 4403 	mla	r4, r2, r3, r4
 8007e20:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007e24:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8007e28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e2c:	441c      	add	r4, r3
 8007e2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007e32:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8007e36:	fb95 fcf3 	sdiv	ip, r5, r3
 8007e3a:	fb03 5c1c 	mls	ip, r3, ip, r5
 8007e3e:	186a      	adds	r2, r5, r1
 8007e40:	fabc f68c 	clz	r6, ip
 8007e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e48:	f005 0303 	and.w	r3, r5, #3
 8007e4c:	4414      	add	r4, r2
 8007e4e:	2264      	movs	r2, #100	; 0x64
 8007e50:	6045      	str	r5, [r0, #4]
 8007e52:	fb95 f7f2 	sdiv	r7, r5, r2
 8007e56:	0976      	lsrs	r6, r6, #5
 8007e58:	fb02 5717 	mls	r7, r2, r7, r5
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	f04f 0a07 	mov.w	sl, #7
 8007e68:	7a0d      	ldrb	r5, [r1, #8]
 8007e6a:	694b      	ldr	r3, [r1, #20]
 8007e6c:	2d4a      	cmp	r5, #74	; 0x4a
 8007e6e:	d12d      	bne.n	8007ecc <__tzcalc_limits+0xd4>
 8007e70:	9a00      	ldr	r2, [sp, #0]
 8007e72:	eb04 0e03 	add.w	lr, r4, r3
 8007e76:	b902      	cbnz	r2, 8007e7a <__tzcalc_limits+0x82>
 8007e78:	b917      	cbnz	r7, 8007e80 <__tzcalc_limits+0x88>
 8007e7a:	f1bc 0f00 	cmp.w	ip, #0
 8007e7e:	d123      	bne.n	8007ec8 <__tzcalc_limits+0xd0>
 8007e80:	2b3b      	cmp	r3, #59	; 0x3b
 8007e82:	bfd4      	ite	le
 8007e84:	2300      	movle	r3, #0
 8007e86:	2301      	movgt	r3, #1
 8007e88:	4473      	add	r3, lr
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	698d      	ldr	r5, [r1, #24]
 8007e8e:	4a2d      	ldr	r2, [pc, #180]	; (8007f44 <__tzcalc_limits+0x14c>)
 8007e90:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8007e94:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8007e98:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007e9a:	18ed      	adds	r5, r5, r3
 8007e9c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8007ea0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8007ea4:	3128      	adds	r1, #40	; 0x28
 8007ea6:	458b      	cmp	fp, r1
 8007ea8:	d1de      	bne.n	8007e68 <__tzcalc_limits+0x70>
 8007eaa:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8007eae:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8007eb2:	428c      	cmp	r4, r1
 8007eb4:	eb72 0303 	sbcs.w	r3, r2, r3
 8007eb8:	bfb4      	ite	lt
 8007eba:	2301      	movlt	r3, #1
 8007ebc:	2300      	movge	r3, #0
 8007ebe:	6003      	str	r3, [r0, #0]
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	b003      	add	sp, #12
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e7dd      	b.n	8007e88 <__tzcalc_limits+0x90>
 8007ecc:	2d44      	cmp	r5, #68	; 0x44
 8007ece:	d101      	bne.n	8007ed4 <__tzcalc_limits+0xdc>
 8007ed0:	4423      	add	r3, r4
 8007ed2:	e7db      	b.n	8007e8c <__tzcalc_limits+0x94>
 8007ed4:	9a00      	ldr	r2, [sp, #0]
 8007ed6:	bb62      	cbnz	r2, 8007f32 <__tzcalc_limits+0x13a>
 8007ed8:	2f00      	cmp	r7, #0
 8007eda:	bf0c      	ite	eq
 8007edc:	4635      	moveq	r5, r6
 8007ede:	2501      	movne	r5, #1
 8007ee0:	68ca      	ldr	r2, [r1, #12]
 8007ee2:	9201      	str	r2, [sp, #4]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <__tzcalc_limits+0x150>)
 8007ee6:	f04f 0930 	mov.w	r9, #48	; 0x30
 8007eea:	fb09 2505 	mla	r5, r9, r5, r2
 8007eee:	46a6      	mov	lr, r4
 8007ef0:	f04f 0800 	mov.w	r8, #0
 8007ef4:	3d04      	subs	r5, #4
 8007ef6:	9a01      	ldr	r2, [sp, #4]
 8007ef8:	f108 0801 	add.w	r8, r8, #1
 8007efc:	4542      	cmp	r2, r8
 8007efe:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8007f02:	dc18      	bgt.n	8007f36 <__tzcalc_limits+0x13e>
 8007f04:	f10e 0504 	add.w	r5, lr, #4
 8007f08:	fb95 f8fa 	sdiv	r8, r5, sl
 8007f0c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8007f10:	eba5 0808 	sub.w	r8, r5, r8
 8007f14:	ebb3 0808 	subs.w	r8, r3, r8
 8007f18:	690b      	ldr	r3, [r1, #16]
 8007f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f1e:	bf48      	it	mi
 8007f20:	f108 0807 	addmi.w	r8, r8, #7
 8007f24:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f28:	4443      	add	r3, r8
 8007f2a:	454b      	cmp	r3, r9
 8007f2c:	da05      	bge.n	8007f3a <__tzcalc_limits+0x142>
 8007f2e:	4473      	add	r3, lr
 8007f30:	e7ac      	b.n	8007e8c <__tzcalc_limits+0x94>
 8007f32:	4635      	mov	r5, r6
 8007f34:	e7d4      	b.n	8007ee0 <__tzcalc_limits+0xe8>
 8007f36:	44ce      	add	lr, r9
 8007f38:	e7dd      	b.n	8007ef6 <__tzcalc_limits+0xfe>
 8007f3a:	3b07      	subs	r3, #7
 8007f3c:	e7f5      	b.n	8007f2a <__tzcalc_limits+0x132>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e7bf      	b.n	8007ec2 <__tzcalc_limits+0xca>
 8007f42:	bf00      	nop
 8007f44:	00015180 	.word	0x00015180
 8007f48:	0800a7f4 	.word	0x0800a7f4

08007f4c <__tz_lock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__tz_lock+0x8>)
 8007f4e:	f000 bd40 	b.w	80089d2 <__retarget_lock_acquire>
 8007f52:	bf00      	nop
 8007f54:	20000ba8 	.word	0x20000ba8

08007f58 <__tz_unlock>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__tz_unlock+0x8>)
 8007f5a:	f000 bd3c 	b.w	80089d6 <__retarget_lock_release>
 8007f5e:	bf00      	nop
 8007f60:	20000ba8 	.word	0x20000ba8

08007f64 <_tzset_unlocked>:
 8007f64:	4b01      	ldr	r3, [pc, #4]	; (8007f6c <_tzset_unlocked+0x8>)
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	f000 b802 	b.w	8007f70 <_tzset_unlocked_r>
 8007f6c:	20000040 	.word	0x20000040

08007f70 <_tzset_unlocked_r>:
 8007f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	b08d      	sub	sp, #52	; 0x34
 8007f76:	4607      	mov	r7, r0
 8007f78:	f000 fc7a 	bl	8008870 <__gettzinfo>
 8007f7c:	49b0      	ldr	r1, [pc, #704]	; (8008240 <_tzset_unlocked_r+0x2d0>)
 8007f7e:	4eb1      	ldr	r6, [pc, #708]	; (8008244 <_tzset_unlocked_r+0x2d4>)
 8007f80:	4605      	mov	r5, r0
 8007f82:	4638      	mov	r0, r7
 8007f84:	f000 fc6c 	bl	8008860 <_getenv_r>
 8007f88:	4604      	mov	r4, r0
 8007f8a:	b970      	cbnz	r0, 8007faa <_tzset_unlocked_r+0x3a>
 8007f8c:	4bae      	ldr	r3, [pc, #696]	; (8008248 <_tzset_unlocked_r+0x2d8>)
 8007f8e:	4aaf      	ldr	r2, [pc, #700]	; (800824c <_tzset_unlocked_r+0x2dc>)
 8007f90:	6018      	str	r0, [r3, #0]
 8007f92:	4baf      	ldr	r3, [pc, #700]	; (8008250 <_tzset_unlocked_r+0x2e0>)
 8007f94:	6018      	str	r0, [r3, #0]
 8007f96:	4baf      	ldr	r3, [pc, #700]	; (8008254 <_tzset_unlocked_r+0x2e4>)
 8007f98:	6830      	ldr	r0, [r6, #0]
 8007f9a:	e9c3 2200 	strd	r2, r2, [r3]
 8007f9e:	f7ff fa7b 	bl	8007498 <free>
 8007fa2:	6034      	str	r4, [r6, #0]
 8007fa4:	b00d      	add	sp, #52	; 0x34
 8007fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007faa:	6831      	ldr	r1, [r6, #0]
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d162      	bne.n	8008076 <_tzset_unlocked_r+0x106>
 8007fb0:	6830      	ldr	r0, [r6, #0]
 8007fb2:	f7ff fa71 	bl	8007498 <free>
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7f8 f90a 	bl	80001d0 <strlen>
 8007fbc:	1c41      	adds	r1, r0, #1
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f7ff fd66 	bl	8007a90 <_malloc_r>
 8007fc4:	6030      	str	r0, [r6, #0]
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d15a      	bne.n	8008080 <_tzset_unlocked_r+0x110>
 8007fca:	7823      	ldrb	r3, [r4, #0]
 8007fcc:	4aa2      	ldr	r2, [pc, #648]	; (8008258 <_tzset_unlocked_r+0x2e8>)
 8007fce:	49a3      	ldr	r1, [pc, #652]	; (800825c <_tzset_unlocked_r+0x2ec>)
 8007fd0:	2b3a      	cmp	r3, #58	; 0x3a
 8007fd2:	bf08      	it	eq
 8007fd4:	3401      	addeq	r4, #1
 8007fd6:	ae0a      	add	r6, sp, #40	; 0x28
 8007fd8:	4633      	mov	r3, r6
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f001 f9b8 	bl	8009350 <siscanf>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	dddf      	ble.n	8007fa4 <_tzset_unlocked_r+0x34>
 8007fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe6:	18e7      	adds	r7, r4, r3
 8007fe8:	5ce3      	ldrb	r3, [r4, r3]
 8007fea:	2b2d      	cmp	r3, #45	; 0x2d
 8007fec:	d14c      	bne.n	8008088 <_tzset_unlocked_r+0x118>
 8007fee:	3701      	adds	r7, #1
 8007ff0:	f04f 38ff 	mov.w	r8, #4294967295
 8007ff4:	f10d 0a20 	add.w	sl, sp, #32
 8007ff8:	f10d 0b1e 	add.w	fp, sp, #30
 8007ffc:	2400      	movs	r4, #0
 8007ffe:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8008002:	4997      	ldr	r1, [pc, #604]	; (8008260 <_tzset_unlocked_r+0x2f0>)
 8008004:	9603      	str	r6, [sp, #12]
 8008006:	f8cd b000 	str.w	fp, [sp]
 800800a:	4633      	mov	r3, r6
 800800c:	aa07      	add	r2, sp, #28
 800800e:	4638      	mov	r0, r7
 8008010:	f8ad 401e 	strh.w	r4, [sp, #30]
 8008014:	f8ad 4020 	strh.w	r4, [sp, #32]
 8008018:	f001 f99a 	bl	8009350 <siscanf>
 800801c:	42a0      	cmp	r0, r4
 800801e:	ddc1      	ble.n	8007fa4 <_tzset_unlocked_r+0x34>
 8008020:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008024:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008028:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800826c <_tzset_unlocked_r+0x2fc>
 800802c:	213c      	movs	r1, #60	; 0x3c
 800802e:	fb01 3302 	mla	r3, r1, r2, r3
 8008032:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008036:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800803a:	fb01 3302 	mla	r3, r1, r2, r3
 800803e:	fb08 f303 	mul.w	r3, r8, r3
 8008042:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8008254 <_tzset_unlocked_r+0x2e4>
 8008046:	62ab      	str	r3, [r5, #40]	; 0x28
 8008048:	4b83      	ldr	r3, [pc, #524]	; (8008258 <_tzset_unlocked_r+0x2e8>)
 800804a:	f8c8 3000 	str.w	r3, [r8]
 800804e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008050:	4982      	ldr	r1, [pc, #520]	; (800825c <_tzset_unlocked_r+0x2ec>)
 8008052:	441f      	add	r7, r3
 8008054:	464a      	mov	r2, r9
 8008056:	4633      	mov	r3, r6
 8008058:	4638      	mov	r0, r7
 800805a:	f001 f979 	bl	8009350 <siscanf>
 800805e:	42a0      	cmp	r0, r4
 8008060:	dc18      	bgt.n	8008094 <_tzset_unlocked_r+0x124>
 8008062:	f8d8 3000 	ldr.w	r3, [r8]
 8008066:	f8c8 3004 	str.w	r3, [r8, #4]
 800806a:	4b77      	ldr	r3, [pc, #476]	; (8008248 <_tzset_unlocked_r+0x2d8>)
 800806c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	4b77      	ldr	r3, [pc, #476]	; (8008250 <_tzset_unlocked_r+0x2e0>)
 8008072:	601c      	str	r4, [r3, #0]
 8008074:	e796      	b.n	8007fa4 <_tzset_unlocked_r+0x34>
 8008076:	f7f8 f8b3 	bl	80001e0 <strcmp>
 800807a:	2800      	cmp	r0, #0
 800807c:	d198      	bne.n	8007fb0 <_tzset_unlocked_r+0x40>
 800807e:	e791      	b.n	8007fa4 <_tzset_unlocked_r+0x34>
 8008080:	4621      	mov	r1, r4
 8008082:	f001 f9d6 	bl	8009432 <strcpy>
 8008086:	e7a0      	b.n	8007fca <_tzset_unlocked_r+0x5a>
 8008088:	2b2b      	cmp	r3, #43	; 0x2b
 800808a:	bf08      	it	eq
 800808c:	3701      	addeq	r7, #1
 800808e:	f04f 0801 	mov.w	r8, #1
 8008092:	e7af      	b.n	8007ff4 <_tzset_unlocked_r+0x84>
 8008094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008096:	f8c8 9004 	str.w	r9, [r8, #4]
 800809a:	18fc      	adds	r4, r7, r3
 800809c:	5cfb      	ldrb	r3, [r7, r3]
 800809e:	2b2d      	cmp	r3, #45	; 0x2d
 80080a0:	f040 808b 	bne.w	80081ba <_tzset_unlocked_r+0x24a>
 80080a4:	3401      	adds	r4, #1
 80080a6:	f04f 37ff 	mov.w	r7, #4294967295
 80080aa:	2300      	movs	r3, #0
 80080ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80080b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80080b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80080b8:	930a      	str	r3, [sp, #40]	; 0x28
 80080ba:	e9cd a602 	strd	sl, r6, [sp, #8]
 80080be:	e9cd b600 	strd	fp, r6, [sp]
 80080c2:	4967      	ldr	r1, [pc, #412]	; (8008260 <_tzset_unlocked_r+0x2f0>)
 80080c4:	4633      	mov	r3, r6
 80080c6:	aa07      	add	r2, sp, #28
 80080c8:	4620      	mov	r0, r4
 80080ca:	f001 f941 	bl	8009350 <siscanf>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	dc78      	bgt.n	80081c4 <_tzset_unlocked_r+0x254>
 80080d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80080d4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80080d8:	652b      	str	r3, [r5, #80]	; 0x50
 80080da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080dc:	462f      	mov	r7, r5
 80080de:	441c      	add	r4, r3
 80080e0:	f04f 0900 	mov.w	r9, #0
 80080e4:	7823      	ldrb	r3, [r4, #0]
 80080e6:	2b2c      	cmp	r3, #44	; 0x2c
 80080e8:	bf08      	it	eq
 80080ea:	3401      	addeq	r4, #1
 80080ec:	f894 8000 	ldrb.w	r8, [r4]
 80080f0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80080f4:	d178      	bne.n	80081e8 <_tzset_unlocked_r+0x278>
 80080f6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80080fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80080fe:	ab09      	add	r3, sp, #36	; 0x24
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4958      	ldr	r1, [pc, #352]	; (8008264 <_tzset_unlocked_r+0x2f4>)
 8008104:	9603      	str	r6, [sp, #12]
 8008106:	4633      	mov	r3, r6
 8008108:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800810c:	4620      	mov	r0, r4
 800810e:	f001 f91f 	bl	8009350 <siscanf>
 8008112:	2803      	cmp	r0, #3
 8008114:	f47f af46 	bne.w	8007fa4 <_tzset_unlocked_r+0x34>
 8008118:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800811c:	1e4b      	subs	r3, r1, #1
 800811e:	2b0b      	cmp	r3, #11
 8008120:	f63f af40 	bhi.w	8007fa4 <_tzset_unlocked_r+0x34>
 8008124:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8008128:	1e53      	subs	r3, r2, #1
 800812a:	2b04      	cmp	r3, #4
 800812c:	f63f af3a 	bhi.w	8007fa4 <_tzset_unlocked_r+0x34>
 8008130:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8008134:	2b06      	cmp	r3, #6
 8008136:	f63f af35 	bhi.w	8007fa4 <_tzset_unlocked_r+0x34>
 800813a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800813e:	f887 8008 	strb.w	r8, [r7, #8]
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008146:	eb04 0803 	add.w	r8, r4, r3
 800814a:	2302      	movs	r3, #2
 800814c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008150:	2300      	movs	r3, #0
 8008152:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008156:	f8ad 3020 	strh.w	r3, [sp, #32]
 800815a:	930a      	str	r3, [sp, #40]	; 0x28
 800815c:	f898 3000 	ldrb.w	r3, [r8]
 8008160:	2b2f      	cmp	r3, #47	; 0x2f
 8008162:	d109      	bne.n	8008178 <_tzset_unlocked_r+0x208>
 8008164:	e9cd a602 	strd	sl, r6, [sp, #8]
 8008168:	e9cd b600 	strd	fp, r6, [sp]
 800816c:	493e      	ldr	r1, [pc, #248]	; (8008268 <_tzset_unlocked_r+0x2f8>)
 800816e:	4633      	mov	r3, r6
 8008170:	aa07      	add	r2, sp, #28
 8008172:	4640      	mov	r0, r8
 8008174:	f001 f8ec 	bl	8009350 <siscanf>
 8008178:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800817c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008180:	213c      	movs	r1, #60	; 0x3c
 8008182:	fb01 3302 	mla	r3, r1, r2, r3
 8008186:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800818a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800818e:	fb01 3302 	mla	r3, r1, r2, r3
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008196:	3728      	adds	r7, #40	; 0x28
 8008198:	4444      	add	r4, r8
 800819a:	f1b9 0f00 	cmp.w	r9, #0
 800819e:	d020      	beq.n	80081e2 <_tzset_unlocked_r+0x272>
 80081a0:	6868      	ldr	r0, [r5, #4]
 80081a2:	f7ff fe29 	bl	8007df8 <__tzcalc_limits>
 80081a6:	4b28      	ldr	r3, [pc, #160]	; (8008248 <_tzset_unlocked_r+0x2d8>)
 80081a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	4a27      	ldr	r2, [pc, #156]	; (8008250 <_tzset_unlocked_r+0x2e0>)
 80081b2:	bf18      	it	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	e6f4      	b.n	8007fa4 <_tzset_unlocked_r+0x34>
 80081ba:	2b2b      	cmp	r3, #43	; 0x2b
 80081bc:	bf08      	it	eq
 80081be:	3401      	addeq	r4, #1
 80081c0:	2701      	movs	r7, #1
 80081c2:	e772      	b.n	80080aa <_tzset_unlocked_r+0x13a>
 80081c4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80081c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80081cc:	213c      	movs	r1, #60	; 0x3c
 80081ce:	fb01 3302 	mla	r3, r1, r2, r3
 80081d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80081d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80081da:	fb01 3302 	mla	r3, r1, r2, r3
 80081de:	437b      	muls	r3, r7
 80081e0:	e77a      	b.n	80080d8 <_tzset_unlocked_r+0x168>
 80081e2:	f04f 0901 	mov.w	r9, #1
 80081e6:	e77d      	b.n	80080e4 <_tzset_unlocked_r+0x174>
 80081e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80081ec:	bf06      	itte	eq
 80081ee:	3401      	addeq	r4, #1
 80081f0:	4643      	moveq	r3, r8
 80081f2:	2344      	movne	r3, #68	; 0x44
 80081f4:	220a      	movs	r2, #10
 80081f6:	a90b      	add	r1, sp, #44	; 0x2c
 80081f8:	4620      	mov	r0, r4
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	f001 f996 	bl	800952c <strtoul>
 8008200:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800820a:	45a0      	cmp	r8, r4
 800820c:	d114      	bne.n	8008238 <_tzset_unlocked_r+0x2c8>
 800820e:	234d      	movs	r3, #77	; 0x4d
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	d107      	bne.n	8008226 <_tzset_unlocked_r+0x2b6>
 8008216:	722b      	strb	r3, [r5, #8]
 8008218:	2103      	movs	r1, #3
 800821a:	2302      	movs	r3, #2
 800821c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8008220:	f8c5 9014 	str.w	r9, [r5, #20]
 8008224:	e791      	b.n	800814a <_tzset_unlocked_r+0x1da>
 8008226:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800822a:	220b      	movs	r2, #11
 800822c:	2301      	movs	r3, #1
 800822e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8008232:	2300      	movs	r3, #0
 8008234:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008236:	e788      	b.n	800814a <_tzset_unlocked_r+0x1da>
 8008238:	b280      	uxth	r0, r0
 800823a:	723b      	strb	r3, [r7, #8]
 800823c:	6178      	str	r0, [r7, #20]
 800823e:	e784      	b.n	800814a <_tzset_unlocked_r+0x1da>
 8008240:	0800a8b1 	.word	0x0800a8b1
 8008244:	20000b98 	.word	0x20000b98
 8008248:	20000ba0 	.word	0x20000ba0
 800824c:	0800a8b4 	.word	0x0800a8b4
 8008250:	20000b9c 	.word	0x20000b9c
 8008254:	200000a4 	.word	0x200000a4
 8008258:	20000b8b 	.word	0x20000b8b
 800825c:	0800a8b8 	.word	0x0800a8b8
 8008260:	0800a8db 	.word	0x0800a8db
 8008264:	0800a8c7 	.word	0x0800a8c7
 8008268:	0800a8da 	.word	0x0800a8da
 800826c:	20000b80 	.word	0x20000b80

08008270 <__swbuf_r>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	460e      	mov	r6, r1
 8008274:	4614      	mov	r4, r2
 8008276:	4605      	mov	r5, r0
 8008278:	b118      	cbz	r0, 8008282 <__swbuf_r+0x12>
 800827a:	6983      	ldr	r3, [r0, #24]
 800827c:	b90b      	cbnz	r3, 8008282 <__swbuf_r+0x12>
 800827e:	f000 fa03 	bl	8008688 <__sinit>
 8008282:	4b21      	ldr	r3, [pc, #132]	; (8008308 <__swbuf_r+0x98>)
 8008284:	429c      	cmp	r4, r3
 8008286:	d12b      	bne.n	80082e0 <__swbuf_r+0x70>
 8008288:	686c      	ldr	r4, [r5, #4]
 800828a:	69a3      	ldr	r3, [r4, #24]
 800828c:	60a3      	str	r3, [r4, #8]
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	071a      	lsls	r2, r3, #28
 8008292:	d52f      	bpl.n	80082f4 <__swbuf_r+0x84>
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	b36b      	cbz	r3, 80082f4 <__swbuf_r+0x84>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	6820      	ldr	r0, [r4, #0]
 800829c:	1ac0      	subs	r0, r0, r3
 800829e:	6963      	ldr	r3, [r4, #20]
 80082a0:	b2f6      	uxtb	r6, r6
 80082a2:	4283      	cmp	r3, r0
 80082a4:	4637      	mov	r7, r6
 80082a6:	dc04      	bgt.n	80082b2 <__swbuf_r+0x42>
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f958 	bl	8008560 <_fflush_r>
 80082b0:	bb30      	cbnz	r0, 8008300 <__swbuf_r+0x90>
 80082b2:	68a3      	ldr	r3, [r4, #8]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	60a3      	str	r3, [r4, #8]
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	701e      	strb	r6, [r3, #0]
 80082c0:	6963      	ldr	r3, [r4, #20]
 80082c2:	3001      	adds	r0, #1
 80082c4:	4283      	cmp	r3, r0
 80082c6:	d004      	beq.n	80082d2 <__swbuf_r+0x62>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	07db      	lsls	r3, r3, #31
 80082cc:	d506      	bpl.n	80082dc <__swbuf_r+0x6c>
 80082ce:	2e0a      	cmp	r6, #10
 80082d0:	d104      	bne.n	80082dc <__swbuf_r+0x6c>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 f943 	bl	8008560 <_fflush_r>
 80082da:	b988      	cbnz	r0, 8008300 <__swbuf_r+0x90>
 80082dc:	4638      	mov	r0, r7
 80082de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e0:	4b0a      	ldr	r3, [pc, #40]	; (800830c <__swbuf_r+0x9c>)
 80082e2:	429c      	cmp	r4, r3
 80082e4:	d101      	bne.n	80082ea <__swbuf_r+0x7a>
 80082e6:	68ac      	ldr	r4, [r5, #8]
 80082e8:	e7cf      	b.n	800828a <__swbuf_r+0x1a>
 80082ea:	4b09      	ldr	r3, [pc, #36]	; (8008310 <__swbuf_r+0xa0>)
 80082ec:	429c      	cmp	r4, r3
 80082ee:	bf08      	it	eq
 80082f0:	68ec      	ldreq	r4, [r5, #12]
 80082f2:	e7ca      	b.n	800828a <__swbuf_r+0x1a>
 80082f4:	4621      	mov	r1, r4
 80082f6:	4628      	mov	r0, r5
 80082f8:	f000 f80c 	bl	8008314 <__swsetup_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d0cb      	beq.n	8008298 <__swbuf_r+0x28>
 8008300:	f04f 37ff 	mov.w	r7, #4294967295
 8008304:	e7ea      	b.n	80082dc <__swbuf_r+0x6c>
 8008306:	bf00      	nop
 8008308:	0800a94c 	.word	0x0800a94c
 800830c:	0800a96c 	.word	0x0800a96c
 8008310:	0800a92c 	.word	0x0800a92c

08008314 <__swsetup_r>:
 8008314:	4b32      	ldr	r3, [pc, #200]	; (80083e0 <__swsetup_r+0xcc>)
 8008316:	b570      	push	{r4, r5, r6, lr}
 8008318:	681d      	ldr	r5, [r3, #0]
 800831a:	4606      	mov	r6, r0
 800831c:	460c      	mov	r4, r1
 800831e:	b125      	cbz	r5, 800832a <__swsetup_r+0x16>
 8008320:	69ab      	ldr	r3, [r5, #24]
 8008322:	b913      	cbnz	r3, 800832a <__swsetup_r+0x16>
 8008324:	4628      	mov	r0, r5
 8008326:	f000 f9af 	bl	8008688 <__sinit>
 800832a:	4b2e      	ldr	r3, [pc, #184]	; (80083e4 <__swsetup_r+0xd0>)
 800832c:	429c      	cmp	r4, r3
 800832e:	d10f      	bne.n	8008350 <__swsetup_r+0x3c>
 8008330:	686c      	ldr	r4, [r5, #4]
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008338:	0719      	lsls	r1, r3, #28
 800833a:	d42c      	bmi.n	8008396 <__swsetup_r+0x82>
 800833c:	06dd      	lsls	r5, r3, #27
 800833e:	d411      	bmi.n	8008364 <__swsetup_r+0x50>
 8008340:	2309      	movs	r3, #9
 8008342:	6033      	str	r3, [r6, #0]
 8008344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	e03e      	b.n	80083ce <__swsetup_r+0xba>
 8008350:	4b25      	ldr	r3, [pc, #148]	; (80083e8 <__swsetup_r+0xd4>)
 8008352:	429c      	cmp	r4, r3
 8008354:	d101      	bne.n	800835a <__swsetup_r+0x46>
 8008356:	68ac      	ldr	r4, [r5, #8]
 8008358:	e7eb      	b.n	8008332 <__swsetup_r+0x1e>
 800835a:	4b24      	ldr	r3, [pc, #144]	; (80083ec <__swsetup_r+0xd8>)
 800835c:	429c      	cmp	r4, r3
 800835e:	bf08      	it	eq
 8008360:	68ec      	ldreq	r4, [r5, #12]
 8008362:	e7e6      	b.n	8008332 <__swsetup_r+0x1e>
 8008364:	0758      	lsls	r0, r3, #29
 8008366:	d512      	bpl.n	800838e <__swsetup_r+0x7a>
 8008368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800836a:	b141      	cbz	r1, 800837e <__swsetup_r+0x6a>
 800836c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008370:	4299      	cmp	r1, r3
 8008372:	d002      	beq.n	800837a <__swsetup_r+0x66>
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff fb1f 	bl	80079b8 <_free_r>
 800837a:	2300      	movs	r3, #0
 800837c:	6363      	str	r3, [r4, #52]	; 0x34
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008384:	81a3      	strh	r3, [r4, #12]
 8008386:	2300      	movs	r3, #0
 8008388:	6063      	str	r3, [r4, #4]
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	f043 0308 	orr.w	r3, r3, #8
 8008394:	81a3      	strh	r3, [r4, #12]
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	b94b      	cbnz	r3, 80083ae <__swsetup_r+0x9a>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a4:	d003      	beq.n	80083ae <__swsetup_r+0x9a>
 80083a6:	4621      	mov	r1, r4
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 fb3b 	bl	8008a24 <__smakebuf_r>
 80083ae:	89a0      	ldrh	r0, [r4, #12]
 80083b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083b4:	f010 0301 	ands.w	r3, r0, #1
 80083b8:	d00a      	beq.n	80083d0 <__swsetup_r+0xbc>
 80083ba:	2300      	movs	r3, #0
 80083bc:	60a3      	str	r3, [r4, #8]
 80083be:	6963      	ldr	r3, [r4, #20]
 80083c0:	425b      	negs	r3, r3
 80083c2:	61a3      	str	r3, [r4, #24]
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	b943      	cbnz	r3, 80083da <__swsetup_r+0xc6>
 80083c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083cc:	d1ba      	bne.n	8008344 <__swsetup_r+0x30>
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	0781      	lsls	r1, r0, #30
 80083d2:	bf58      	it	pl
 80083d4:	6963      	ldrpl	r3, [r4, #20]
 80083d6:	60a3      	str	r3, [r4, #8]
 80083d8:	e7f4      	b.n	80083c4 <__swsetup_r+0xb0>
 80083da:	2000      	movs	r0, #0
 80083dc:	e7f7      	b.n	80083ce <__swsetup_r+0xba>
 80083de:	bf00      	nop
 80083e0:	20000040 	.word	0x20000040
 80083e4:	0800a94c 	.word	0x0800a94c
 80083e8:	0800a96c 	.word	0x0800a96c
 80083ec:	0800a92c 	.word	0x0800a92c

080083f0 <__assert_func>:
 80083f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083f2:	4614      	mov	r4, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	4b09      	ldr	r3, [pc, #36]	; (800841c <__assert_func+0x2c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4605      	mov	r5, r0
 80083fc:	68d8      	ldr	r0, [r3, #12]
 80083fe:	b14c      	cbz	r4, 8008414 <__assert_func+0x24>
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <__assert_func+0x30>)
 8008402:	9100      	str	r1, [sp, #0]
 8008404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008408:	4906      	ldr	r1, [pc, #24]	; (8008424 <__assert_func+0x34>)
 800840a:	462b      	mov	r3, r5
 800840c:	f000 f9ba 	bl	8008784 <fiprintf>
 8008410:	f001 f8a8 	bl	8009564 <abort>
 8008414:	4b04      	ldr	r3, [pc, #16]	; (8008428 <__assert_func+0x38>)
 8008416:	461c      	mov	r4, r3
 8008418:	e7f3      	b.n	8008402 <__assert_func+0x12>
 800841a:	bf00      	nop
 800841c:	20000040 	.word	0x20000040
 8008420:	0800a8ed 	.word	0x0800a8ed
 8008424:	0800a8fa 	.word	0x0800a8fa
 8008428:	0800a928 	.word	0x0800a928

0800842c <div>:
 800842c:	2900      	cmp	r1, #0
 800842e:	b510      	push	{r4, lr}
 8008430:	fb91 f4f2 	sdiv	r4, r1, r2
 8008434:	fb02 1314 	mls	r3, r2, r4, r1
 8008438:	db06      	blt.n	8008448 <div+0x1c>
 800843a:	2b00      	cmp	r3, #0
 800843c:	da01      	bge.n	8008442 <div+0x16>
 800843e:	3401      	adds	r4, #1
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	e9c0 4300 	strd	r4, r3, [r0]
 8008446:	bd10      	pop	{r4, pc}
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfc4      	itt	gt
 800844c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8008450:	189b      	addgt	r3, r3, r2
 8008452:	e7f6      	b.n	8008442 <div+0x16>

08008454 <__sflush_r>:
 8008454:	898a      	ldrh	r2, [r1, #12]
 8008456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845a:	4605      	mov	r5, r0
 800845c:	0710      	lsls	r0, r2, #28
 800845e:	460c      	mov	r4, r1
 8008460:	d458      	bmi.n	8008514 <__sflush_r+0xc0>
 8008462:	684b      	ldr	r3, [r1, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dc05      	bgt.n	8008474 <__sflush_r+0x20>
 8008468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	dc02      	bgt.n	8008474 <__sflush_r+0x20>
 800846e:	2000      	movs	r0, #0
 8008470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008476:	2e00      	cmp	r6, #0
 8008478:	d0f9      	beq.n	800846e <__sflush_r+0x1a>
 800847a:	2300      	movs	r3, #0
 800847c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008480:	682f      	ldr	r7, [r5, #0]
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	d032      	beq.n	80084ec <__sflush_r+0x98>
 8008486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	075a      	lsls	r2, r3, #29
 800848c:	d505      	bpl.n	800849a <__sflush_r+0x46>
 800848e:	6863      	ldr	r3, [r4, #4]
 8008490:	1ac0      	subs	r0, r0, r3
 8008492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008494:	b10b      	cbz	r3, 800849a <__sflush_r+0x46>
 8008496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008498:	1ac0      	subs	r0, r0, r3
 800849a:	2300      	movs	r3, #0
 800849c:	4602      	mov	r2, r0
 800849e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084a0:	6a21      	ldr	r1, [r4, #32]
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b0      	blx	r6
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	d106      	bne.n	80084ba <__sflush_r+0x66>
 80084ac:	6829      	ldr	r1, [r5, #0]
 80084ae:	291d      	cmp	r1, #29
 80084b0:	d82c      	bhi.n	800850c <__sflush_r+0xb8>
 80084b2:	4a2a      	ldr	r2, [pc, #168]	; (800855c <__sflush_r+0x108>)
 80084b4:	40ca      	lsrs	r2, r1
 80084b6:	07d6      	lsls	r6, r2, #31
 80084b8:	d528      	bpl.n	800850c <__sflush_r+0xb8>
 80084ba:	2200      	movs	r2, #0
 80084bc:	6062      	str	r2, [r4, #4]
 80084be:	04d9      	lsls	r1, r3, #19
 80084c0:	6922      	ldr	r2, [r4, #16]
 80084c2:	6022      	str	r2, [r4, #0]
 80084c4:	d504      	bpl.n	80084d0 <__sflush_r+0x7c>
 80084c6:	1c42      	adds	r2, r0, #1
 80084c8:	d101      	bne.n	80084ce <__sflush_r+0x7a>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	b903      	cbnz	r3, 80084d0 <__sflush_r+0x7c>
 80084ce:	6560      	str	r0, [r4, #84]	; 0x54
 80084d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084d2:	602f      	str	r7, [r5, #0]
 80084d4:	2900      	cmp	r1, #0
 80084d6:	d0ca      	beq.n	800846e <__sflush_r+0x1a>
 80084d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084dc:	4299      	cmp	r1, r3
 80084de:	d002      	beq.n	80084e6 <__sflush_r+0x92>
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7ff fa69 	bl	80079b8 <_free_r>
 80084e6:	2000      	movs	r0, #0
 80084e8:	6360      	str	r0, [r4, #52]	; 0x34
 80084ea:	e7c1      	b.n	8008470 <__sflush_r+0x1c>
 80084ec:	6a21      	ldr	r1, [r4, #32]
 80084ee:	2301      	movs	r3, #1
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b0      	blx	r6
 80084f4:	1c41      	adds	r1, r0, #1
 80084f6:	d1c7      	bne.n	8008488 <__sflush_r+0x34>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0c4      	beq.n	8008488 <__sflush_r+0x34>
 80084fe:	2b1d      	cmp	r3, #29
 8008500:	d001      	beq.n	8008506 <__sflush_r+0xb2>
 8008502:	2b16      	cmp	r3, #22
 8008504:	d101      	bne.n	800850a <__sflush_r+0xb6>
 8008506:	602f      	str	r7, [r5, #0]
 8008508:	e7b1      	b.n	800846e <__sflush_r+0x1a>
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	e7ad      	b.n	8008470 <__sflush_r+0x1c>
 8008514:	690f      	ldr	r7, [r1, #16]
 8008516:	2f00      	cmp	r7, #0
 8008518:	d0a9      	beq.n	800846e <__sflush_r+0x1a>
 800851a:	0793      	lsls	r3, r2, #30
 800851c:	680e      	ldr	r6, [r1, #0]
 800851e:	bf08      	it	eq
 8008520:	694b      	ldreq	r3, [r1, #20]
 8008522:	600f      	str	r7, [r1, #0]
 8008524:	bf18      	it	ne
 8008526:	2300      	movne	r3, #0
 8008528:	eba6 0807 	sub.w	r8, r6, r7
 800852c:	608b      	str	r3, [r1, #8]
 800852e:	f1b8 0f00 	cmp.w	r8, #0
 8008532:	dd9c      	ble.n	800846e <__sflush_r+0x1a>
 8008534:	6a21      	ldr	r1, [r4, #32]
 8008536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008538:	4643      	mov	r3, r8
 800853a:	463a      	mov	r2, r7
 800853c:	4628      	mov	r0, r5
 800853e:	47b0      	blx	r6
 8008540:	2800      	cmp	r0, #0
 8008542:	dc06      	bgt.n	8008552 <__sflush_r+0xfe>
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	e78e      	b.n	8008470 <__sflush_r+0x1c>
 8008552:	4407      	add	r7, r0
 8008554:	eba8 0800 	sub.w	r8, r8, r0
 8008558:	e7e9      	b.n	800852e <__sflush_r+0xda>
 800855a:	bf00      	nop
 800855c:	20400001 	.word	0x20400001

08008560 <_fflush_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	690b      	ldr	r3, [r1, #16]
 8008564:	4605      	mov	r5, r0
 8008566:	460c      	mov	r4, r1
 8008568:	b913      	cbnz	r3, 8008570 <_fflush_r+0x10>
 800856a:	2500      	movs	r5, #0
 800856c:	4628      	mov	r0, r5
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	b118      	cbz	r0, 800857a <_fflush_r+0x1a>
 8008572:	6983      	ldr	r3, [r0, #24]
 8008574:	b90b      	cbnz	r3, 800857a <_fflush_r+0x1a>
 8008576:	f000 f887 	bl	8008688 <__sinit>
 800857a:	4b14      	ldr	r3, [pc, #80]	; (80085cc <_fflush_r+0x6c>)
 800857c:	429c      	cmp	r4, r3
 800857e:	d11b      	bne.n	80085b8 <_fflush_r+0x58>
 8008580:	686c      	ldr	r4, [r5, #4]
 8008582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0ef      	beq.n	800856a <_fflush_r+0xa>
 800858a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800858c:	07d0      	lsls	r0, r2, #31
 800858e:	d404      	bmi.n	800859a <_fflush_r+0x3a>
 8008590:	0599      	lsls	r1, r3, #22
 8008592:	d402      	bmi.n	800859a <_fflush_r+0x3a>
 8008594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008596:	f000 fa1d 	bl	80089d4 <__retarget_lock_acquire_recursive>
 800859a:	4628      	mov	r0, r5
 800859c:	4621      	mov	r1, r4
 800859e:	f7ff ff59 	bl	8008454 <__sflush_r>
 80085a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085a4:	07da      	lsls	r2, r3, #31
 80085a6:	4605      	mov	r5, r0
 80085a8:	d4e0      	bmi.n	800856c <_fflush_r+0xc>
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	059b      	lsls	r3, r3, #22
 80085ae:	d4dd      	bmi.n	800856c <_fflush_r+0xc>
 80085b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085b2:	f000 fa11 	bl	80089d8 <__retarget_lock_release_recursive>
 80085b6:	e7d9      	b.n	800856c <_fflush_r+0xc>
 80085b8:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <_fflush_r+0x70>)
 80085ba:	429c      	cmp	r4, r3
 80085bc:	d101      	bne.n	80085c2 <_fflush_r+0x62>
 80085be:	68ac      	ldr	r4, [r5, #8]
 80085c0:	e7df      	b.n	8008582 <_fflush_r+0x22>
 80085c2:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <_fflush_r+0x74>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	bf08      	it	eq
 80085c8:	68ec      	ldreq	r4, [r5, #12]
 80085ca:	e7da      	b.n	8008582 <_fflush_r+0x22>
 80085cc:	0800a94c 	.word	0x0800a94c
 80085d0:	0800a96c 	.word	0x0800a96c
 80085d4:	0800a92c 	.word	0x0800a92c

080085d8 <std>:
 80085d8:	2300      	movs	r3, #0
 80085da:	b510      	push	{r4, lr}
 80085dc:	4604      	mov	r4, r0
 80085de:	e9c0 3300 	strd	r3, r3, [r0]
 80085e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085e6:	6083      	str	r3, [r0, #8]
 80085e8:	8181      	strh	r1, [r0, #12]
 80085ea:	6643      	str	r3, [r0, #100]	; 0x64
 80085ec:	81c2      	strh	r2, [r0, #14]
 80085ee:	6183      	str	r3, [r0, #24]
 80085f0:	4619      	mov	r1, r3
 80085f2:	2208      	movs	r2, #8
 80085f4:	305c      	adds	r0, #92	; 0x5c
 80085f6:	f7fe ff65 	bl	80074c4 <memset>
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <std+0x38>)
 80085fc:	6263      	str	r3, [r4, #36]	; 0x24
 80085fe:	4b05      	ldr	r3, [pc, #20]	; (8008614 <std+0x3c>)
 8008600:	62a3      	str	r3, [r4, #40]	; 0x28
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <std+0x40>)
 8008604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <std+0x44>)
 8008608:	6224      	str	r4, [r4, #32]
 800860a:	6323      	str	r3, [r4, #48]	; 0x30
 800860c:	bd10      	pop	{r4, pc}
 800860e:	bf00      	nop
 8008610:	080093a9 	.word	0x080093a9
 8008614:	080093cf 	.word	0x080093cf
 8008618:	08009407 	.word	0x08009407
 800861c:	0800942b 	.word	0x0800942b

08008620 <_cleanup_r>:
 8008620:	4901      	ldr	r1, [pc, #4]	; (8008628 <_cleanup_r+0x8>)
 8008622:	f000 b8c1 	b.w	80087a8 <_fwalk_reent>
 8008626:	bf00      	nop
 8008628:	08008561 	.word	0x08008561

0800862c <__sfmoreglue>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	2268      	movs	r2, #104	; 0x68
 8008630:	1e4d      	subs	r5, r1, #1
 8008632:	4355      	muls	r5, r2
 8008634:	460e      	mov	r6, r1
 8008636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800863a:	f7ff fa29 	bl	8007a90 <_malloc_r>
 800863e:	4604      	mov	r4, r0
 8008640:	b140      	cbz	r0, 8008654 <__sfmoreglue+0x28>
 8008642:	2100      	movs	r1, #0
 8008644:	e9c0 1600 	strd	r1, r6, [r0]
 8008648:	300c      	adds	r0, #12
 800864a:	60a0      	str	r0, [r4, #8]
 800864c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008650:	f7fe ff38 	bl	80074c4 <memset>
 8008654:	4620      	mov	r0, r4
 8008656:	bd70      	pop	{r4, r5, r6, pc}

08008658 <__sfp_lock_acquire>:
 8008658:	4801      	ldr	r0, [pc, #4]	; (8008660 <__sfp_lock_acquire+0x8>)
 800865a:	f000 b9bb 	b.w	80089d4 <__retarget_lock_acquire_recursive>
 800865e:	bf00      	nop
 8008660:	20000ba6 	.word	0x20000ba6

08008664 <__sfp_lock_release>:
 8008664:	4801      	ldr	r0, [pc, #4]	; (800866c <__sfp_lock_release+0x8>)
 8008666:	f000 b9b7 	b.w	80089d8 <__retarget_lock_release_recursive>
 800866a:	bf00      	nop
 800866c:	20000ba6 	.word	0x20000ba6

08008670 <__sinit_lock_acquire>:
 8008670:	4801      	ldr	r0, [pc, #4]	; (8008678 <__sinit_lock_acquire+0x8>)
 8008672:	f000 b9af 	b.w	80089d4 <__retarget_lock_acquire_recursive>
 8008676:	bf00      	nop
 8008678:	20000ba7 	.word	0x20000ba7

0800867c <__sinit_lock_release>:
 800867c:	4801      	ldr	r0, [pc, #4]	; (8008684 <__sinit_lock_release+0x8>)
 800867e:	f000 b9ab 	b.w	80089d8 <__retarget_lock_release_recursive>
 8008682:	bf00      	nop
 8008684:	20000ba7 	.word	0x20000ba7

08008688 <__sinit>:
 8008688:	b510      	push	{r4, lr}
 800868a:	4604      	mov	r4, r0
 800868c:	f7ff fff0 	bl	8008670 <__sinit_lock_acquire>
 8008690:	69a3      	ldr	r3, [r4, #24]
 8008692:	b11b      	cbz	r3, 800869c <__sinit+0x14>
 8008694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008698:	f7ff bff0 	b.w	800867c <__sinit_lock_release>
 800869c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086a0:	6523      	str	r3, [r4, #80]	; 0x50
 80086a2:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <__sinit+0x68>)
 80086a4:	4a13      	ldr	r2, [pc, #76]	; (80086f4 <__sinit+0x6c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80086aa:	42a3      	cmp	r3, r4
 80086ac:	bf04      	itt	eq
 80086ae:	2301      	moveq	r3, #1
 80086b0:	61a3      	streq	r3, [r4, #24]
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 f820 	bl	80086f8 <__sfp>
 80086b8:	6060      	str	r0, [r4, #4]
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 f81c 	bl	80086f8 <__sfp>
 80086c0:	60a0      	str	r0, [r4, #8]
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 f818 	bl	80086f8 <__sfp>
 80086c8:	2200      	movs	r2, #0
 80086ca:	60e0      	str	r0, [r4, #12]
 80086cc:	2104      	movs	r1, #4
 80086ce:	6860      	ldr	r0, [r4, #4]
 80086d0:	f7ff ff82 	bl	80085d8 <std>
 80086d4:	68a0      	ldr	r0, [r4, #8]
 80086d6:	2201      	movs	r2, #1
 80086d8:	2109      	movs	r1, #9
 80086da:	f7ff ff7d 	bl	80085d8 <std>
 80086de:	68e0      	ldr	r0, [r4, #12]
 80086e0:	2202      	movs	r2, #2
 80086e2:	2112      	movs	r1, #18
 80086e4:	f7ff ff78 	bl	80085d8 <std>
 80086e8:	2301      	movs	r3, #1
 80086ea:	61a3      	str	r3, [r4, #24]
 80086ec:	e7d2      	b.n	8008694 <__sinit+0xc>
 80086ee:	bf00      	nop
 80086f0:	0800a71c 	.word	0x0800a71c
 80086f4:	08008621 	.word	0x08008621

080086f8 <__sfp>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	4607      	mov	r7, r0
 80086fc:	f7ff ffac 	bl	8008658 <__sfp_lock_acquire>
 8008700:	4b1e      	ldr	r3, [pc, #120]	; (800877c <__sfp+0x84>)
 8008702:	681e      	ldr	r6, [r3, #0]
 8008704:	69b3      	ldr	r3, [r6, #24]
 8008706:	b913      	cbnz	r3, 800870e <__sfp+0x16>
 8008708:	4630      	mov	r0, r6
 800870a:	f7ff ffbd 	bl	8008688 <__sinit>
 800870e:	3648      	adds	r6, #72	; 0x48
 8008710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008714:	3b01      	subs	r3, #1
 8008716:	d503      	bpl.n	8008720 <__sfp+0x28>
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	b30b      	cbz	r3, 8008760 <__sfp+0x68>
 800871c:	6836      	ldr	r6, [r6, #0]
 800871e:	e7f7      	b.n	8008710 <__sfp+0x18>
 8008720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008724:	b9d5      	cbnz	r5, 800875c <__sfp+0x64>
 8008726:	4b16      	ldr	r3, [pc, #88]	; (8008780 <__sfp+0x88>)
 8008728:	60e3      	str	r3, [r4, #12]
 800872a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800872e:	6665      	str	r5, [r4, #100]	; 0x64
 8008730:	f000 f94e 	bl	80089d0 <__retarget_lock_init_recursive>
 8008734:	f7ff ff96 	bl	8008664 <__sfp_lock_release>
 8008738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800873c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008740:	6025      	str	r5, [r4, #0]
 8008742:	61a5      	str	r5, [r4, #24]
 8008744:	2208      	movs	r2, #8
 8008746:	4629      	mov	r1, r5
 8008748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800874c:	f7fe feba 	bl	80074c4 <memset>
 8008750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008758:	4620      	mov	r0, r4
 800875a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800875c:	3468      	adds	r4, #104	; 0x68
 800875e:	e7d9      	b.n	8008714 <__sfp+0x1c>
 8008760:	2104      	movs	r1, #4
 8008762:	4638      	mov	r0, r7
 8008764:	f7ff ff62 	bl	800862c <__sfmoreglue>
 8008768:	4604      	mov	r4, r0
 800876a:	6030      	str	r0, [r6, #0]
 800876c:	2800      	cmp	r0, #0
 800876e:	d1d5      	bne.n	800871c <__sfp+0x24>
 8008770:	f7ff ff78 	bl	8008664 <__sfp_lock_release>
 8008774:	230c      	movs	r3, #12
 8008776:	603b      	str	r3, [r7, #0]
 8008778:	e7ee      	b.n	8008758 <__sfp+0x60>
 800877a:	bf00      	nop
 800877c:	0800a71c 	.word	0x0800a71c
 8008780:	ffff0001 	.word	0xffff0001

08008784 <fiprintf>:
 8008784:	b40e      	push	{r1, r2, r3}
 8008786:	b503      	push	{r0, r1, lr}
 8008788:	4601      	mov	r1, r0
 800878a:	ab03      	add	r3, sp, #12
 800878c:	4805      	ldr	r0, [pc, #20]	; (80087a4 <fiprintf+0x20>)
 800878e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008792:	6800      	ldr	r0, [r0, #0]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	f000 fb17 	bl	8008dc8 <_vfiprintf_r>
 800879a:	b002      	add	sp, #8
 800879c:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a0:	b003      	add	sp, #12
 80087a2:	4770      	bx	lr
 80087a4:	20000040 	.word	0x20000040

080087a8 <_fwalk_reent>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	4606      	mov	r6, r0
 80087ae:	4688      	mov	r8, r1
 80087b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087b4:	2700      	movs	r7, #0
 80087b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087ba:	f1b9 0901 	subs.w	r9, r9, #1
 80087be:	d505      	bpl.n	80087cc <_fwalk_reent+0x24>
 80087c0:	6824      	ldr	r4, [r4, #0]
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	d1f7      	bne.n	80087b6 <_fwalk_reent+0xe>
 80087c6:	4638      	mov	r0, r7
 80087c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087cc:	89ab      	ldrh	r3, [r5, #12]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d907      	bls.n	80087e2 <_fwalk_reent+0x3a>
 80087d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087d6:	3301      	adds	r3, #1
 80087d8:	d003      	beq.n	80087e2 <_fwalk_reent+0x3a>
 80087da:	4629      	mov	r1, r5
 80087dc:	4630      	mov	r0, r6
 80087de:	47c0      	blx	r8
 80087e0:	4307      	orrs	r7, r0
 80087e2:	3568      	adds	r5, #104	; 0x68
 80087e4:	e7e9      	b.n	80087ba <_fwalk_reent+0x12>
	...

080087e8 <_findenv_r>:
 80087e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800885c <_findenv_r+0x74>
 80087f0:	4607      	mov	r7, r0
 80087f2:	4689      	mov	r9, r1
 80087f4:	4616      	mov	r6, r2
 80087f6:	f000 fecd 	bl	8009594 <__env_lock>
 80087fa:	f8da 4000 	ldr.w	r4, [sl]
 80087fe:	b134      	cbz	r4, 800880e <_findenv_r+0x26>
 8008800:	464b      	mov	r3, r9
 8008802:	4698      	mov	r8, r3
 8008804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008808:	b13a      	cbz	r2, 800881a <_findenv_r+0x32>
 800880a:	2a3d      	cmp	r2, #61	; 0x3d
 800880c:	d1f9      	bne.n	8008802 <_findenv_r+0x1a>
 800880e:	4638      	mov	r0, r7
 8008810:	f000 fec6 	bl	80095a0 <__env_unlock>
 8008814:	2000      	movs	r0, #0
 8008816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881a:	eba8 0809 	sub.w	r8, r8, r9
 800881e:	46a3      	mov	fp, r4
 8008820:	f854 0b04 	ldr.w	r0, [r4], #4
 8008824:	2800      	cmp	r0, #0
 8008826:	d0f2      	beq.n	800880e <_findenv_r+0x26>
 8008828:	4642      	mov	r2, r8
 800882a:	4649      	mov	r1, r9
 800882c:	f7ff fa4a 	bl	8007cc4 <strncmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	d1f4      	bne.n	800881e <_findenv_r+0x36>
 8008834:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008838:	eb03 0508 	add.w	r5, r3, r8
 800883c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8008840:	2b3d      	cmp	r3, #61	; 0x3d
 8008842:	d1ec      	bne.n	800881e <_findenv_r+0x36>
 8008844:	f8da 3000 	ldr.w	r3, [sl]
 8008848:	ebab 0303 	sub.w	r3, fp, r3
 800884c:	109b      	asrs	r3, r3, #2
 800884e:	4638      	mov	r0, r7
 8008850:	6033      	str	r3, [r6, #0]
 8008852:	f000 fea5 	bl	80095a0 <__env_unlock>
 8008856:	1c68      	adds	r0, r5, #1
 8008858:	e7dd      	b.n	8008816 <_findenv_r+0x2e>
 800885a:	bf00      	nop
 800885c:	20000004 	.word	0x20000004

08008860 <_getenv_r>:
 8008860:	b507      	push	{r0, r1, r2, lr}
 8008862:	aa01      	add	r2, sp, #4
 8008864:	f7ff ffc0 	bl	80087e8 <_findenv_r>
 8008868:	b003      	add	sp, #12
 800886a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008870 <__gettzinfo>:
 8008870:	4800      	ldr	r0, [pc, #0]	; (8008874 <__gettzinfo+0x4>)
 8008872:	4770      	bx	lr
 8008874:	200000b0 	.word	0x200000b0

08008878 <gmtime_r>:
 8008878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8008880:	460c      	mov	r4, r1
 8008882:	4a4f      	ldr	r2, [pc, #316]	; (80089c0 <gmtime_r+0x148>)
 8008884:	2300      	movs	r3, #0
 8008886:	4630      	mov	r0, r6
 8008888:	4639      	mov	r1, r7
 800888a:	f7f7 fd09 	bl	80002a0 <__aeabi_ldivmod>
 800888e:	4639      	mov	r1, r7
 8008890:	4605      	mov	r5, r0
 8008892:	4a4b      	ldr	r2, [pc, #300]	; (80089c0 <gmtime_r+0x148>)
 8008894:	4630      	mov	r0, r6
 8008896:	2300      	movs	r3, #0
 8008898:	f7f7 fd02 	bl	80002a0 <__aeabi_ldivmod>
 800889c:	2a00      	cmp	r2, #0
 800889e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80088a2:	bfb7      	itett	lt
 80088a4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80088a8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80088ac:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80088b0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80088b4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80088b8:	fbb2 f1f0 	udiv	r1, r2, r0
 80088bc:	fb00 2211 	mls	r2, r0, r1, r2
 80088c0:	203c      	movs	r0, #60	; 0x3c
 80088c2:	60a1      	str	r1, [r4, #8]
 80088c4:	fbb2 f1f0 	udiv	r1, r2, r0
 80088c8:	fb00 2211 	mls	r2, r0, r1, r2
 80088cc:	6061      	str	r1, [r4, #4]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	2107      	movs	r1, #7
 80088d2:	1cda      	adds	r2, r3, #3
 80088d4:	fb92 f1f1 	sdiv	r1, r2, r1
 80088d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80088dc:	1a52      	subs	r2, r2, r1
 80088de:	bf48      	it	mi
 80088e0:	3207      	addmi	r2, #7
 80088e2:	4d38      	ldr	r5, [pc, #224]	; (80089c4 <gmtime_r+0x14c>)
 80088e4:	4838      	ldr	r0, [pc, #224]	; (80089c8 <gmtime_r+0x150>)
 80088e6:	61a2      	str	r2, [r4, #24]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfb7      	itett	lt
 80088ec:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80088f0:	fb93 f5f5 	sdivge	r5, r3, r5
 80088f4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80088f8:	fb92 f5f5 	sdivlt	r5, r2, r5
 80088fc:	fb00 3005 	mla	r0, r0, r5, r3
 8008900:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8008904:	fbb0 f2f2 	udiv	r2, r0, r2
 8008908:	4402      	add	r2, r0
 800890a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800890e:	fbb0 f1f3 	udiv	r1, r0, r3
 8008912:	1a52      	subs	r2, r2, r1
 8008914:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008918:	492c      	ldr	r1, [pc, #176]	; (80089cc <gmtime_r+0x154>)
 800891a:	fbb0 f1f1 	udiv	r1, r0, r1
 800891e:	2764      	movs	r7, #100	; 0x64
 8008920:	1a52      	subs	r2, r2, r1
 8008922:	fbb2 f1fc 	udiv	r1, r2, ip
 8008926:	fbb2 f3f3 	udiv	r3, r2, r3
 800892a:	fbb1 f6f7 	udiv	r6, r1, r7
 800892e:	1af3      	subs	r3, r6, r3
 8008930:	4403      	add	r3, r0
 8008932:	fb0c 3311 	mls	r3, ip, r1, r3
 8008936:	2299      	movs	r2, #153	; 0x99
 8008938:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800893c:	f10e 0e02 	add.w	lr, lr, #2
 8008940:	f103 0c01 	add.w	ip, r3, #1
 8008944:	fbbe f0f2 	udiv	r0, lr, r2
 8008948:	4342      	muls	r2, r0
 800894a:	3202      	adds	r2, #2
 800894c:	f04f 0805 	mov.w	r8, #5
 8008950:	fbb2 f2f8 	udiv	r2, r2, r8
 8008954:	ebac 0c02 	sub.w	ip, ip, r2
 8008958:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800895c:	4596      	cmp	lr, r2
 800895e:	bf94      	ite	ls
 8008960:	2202      	movls	r2, #2
 8008962:	f06f 0209 	mvnhi.w	r2, #9
 8008966:	4410      	add	r0, r2
 8008968:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800896c:	fb02 1505 	mla	r5, r2, r5, r1
 8008970:	2801      	cmp	r0, #1
 8008972:	bf98      	it	ls
 8008974:	3501      	addls	r5, #1
 8008976:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800897a:	d30d      	bcc.n	8008998 <gmtime_r+0x120>
 800897c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008980:	61e3      	str	r3, [r4, #28]
 8008982:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8008986:	2300      	movs	r3, #0
 8008988:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800898c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8008990:	6223      	str	r3, [r4, #32]
 8008992:	4620      	mov	r0, r4
 8008994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008998:	078a      	lsls	r2, r1, #30
 800899a:	d102      	bne.n	80089a2 <gmtime_r+0x12a>
 800899c:	fb07 1616 	mls	r6, r7, r6, r1
 80089a0:	b95e      	cbnz	r6, 80089ba <gmtime_r+0x142>
 80089a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80089a6:	fbb1 f6f2 	udiv	r6, r1, r2
 80089aa:	fb02 1216 	mls	r2, r2, r6, r1
 80089ae:	fab2 f282 	clz	r2, r2
 80089b2:	0952      	lsrs	r2, r2, #5
 80089b4:	333b      	adds	r3, #59	; 0x3b
 80089b6:	4413      	add	r3, r2
 80089b8:	e7e2      	b.n	8008980 <gmtime_r+0x108>
 80089ba:	2201      	movs	r2, #1
 80089bc:	e7fa      	b.n	80089b4 <gmtime_r+0x13c>
 80089be:	bf00      	nop
 80089c0:	00015180 	.word	0x00015180
 80089c4:	00023ab1 	.word	0x00023ab1
 80089c8:	fffdc54f 	.word	0xfffdc54f
 80089cc:	00023ab0 	.word	0x00023ab0

080089d0 <__retarget_lock_init_recursive>:
 80089d0:	4770      	bx	lr

080089d2 <__retarget_lock_acquire>:
 80089d2:	4770      	bx	lr

080089d4 <__retarget_lock_acquire_recursive>:
 80089d4:	4770      	bx	lr

080089d6 <__retarget_lock_release>:
 80089d6:	4770      	bx	lr

080089d8 <__retarget_lock_release_recursive>:
 80089d8:	4770      	bx	lr

080089da <__swhatbuf_r>:
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	460e      	mov	r6, r1
 80089de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e2:	2900      	cmp	r1, #0
 80089e4:	b096      	sub	sp, #88	; 0x58
 80089e6:	4614      	mov	r4, r2
 80089e8:	461d      	mov	r5, r3
 80089ea:	da08      	bge.n	80089fe <__swhatbuf_r+0x24>
 80089ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	602a      	str	r2, [r5, #0]
 80089f4:	061a      	lsls	r2, r3, #24
 80089f6:	d410      	bmi.n	8008a1a <__swhatbuf_r+0x40>
 80089f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fc:	e00e      	b.n	8008a1c <__swhatbuf_r+0x42>
 80089fe:	466a      	mov	r2, sp
 8008a00:	f000 fdd4 	bl	80095ac <_fstat_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	dbf1      	blt.n	80089ec <__swhatbuf_r+0x12>
 8008a08:	9a01      	ldr	r2, [sp, #4]
 8008a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a12:	425a      	negs	r2, r3
 8008a14:	415a      	adcs	r2, r3
 8008a16:	602a      	str	r2, [r5, #0]
 8008a18:	e7ee      	b.n	80089f8 <__swhatbuf_r+0x1e>
 8008a1a:	2340      	movs	r3, #64	; 0x40
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	b016      	add	sp, #88	; 0x58
 8008a22:	bd70      	pop	{r4, r5, r6, pc}

08008a24 <__smakebuf_r>:
 8008a24:	898b      	ldrh	r3, [r1, #12]
 8008a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a28:	079d      	lsls	r5, r3, #30
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	d507      	bpl.n	8008a40 <__smakebuf_r+0x1c>
 8008a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	6163      	str	r3, [r4, #20]
 8008a3c:	b002      	add	sp, #8
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	ab01      	add	r3, sp, #4
 8008a42:	466a      	mov	r2, sp
 8008a44:	f7ff ffc9 	bl	80089da <__swhatbuf_r>
 8008a48:	9900      	ldr	r1, [sp, #0]
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7ff f81f 	bl	8007a90 <_malloc_r>
 8008a52:	b948      	cbnz	r0, 8008a68 <__smakebuf_r+0x44>
 8008a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a58:	059a      	lsls	r2, r3, #22
 8008a5a:	d4ef      	bmi.n	8008a3c <__smakebuf_r+0x18>
 8008a5c:	f023 0303 	bic.w	r3, r3, #3
 8008a60:	f043 0302 	orr.w	r3, r3, #2
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	e7e3      	b.n	8008a30 <__smakebuf_r+0xc>
 8008a68:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <__smakebuf_r+0x7c>)
 8008a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	6020      	str	r0, [r4, #0]
 8008a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	9b00      	ldr	r3, [sp, #0]
 8008a78:	6163      	str	r3, [r4, #20]
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	6120      	str	r0, [r4, #16]
 8008a7e:	b15b      	cbz	r3, 8008a98 <__smakebuf_r+0x74>
 8008a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a84:	4630      	mov	r0, r6
 8008a86:	f000 fda3 	bl	80095d0 <_isatty_r>
 8008a8a:	b128      	cbz	r0, 8008a98 <__smakebuf_r+0x74>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	89a0      	ldrh	r0, [r4, #12]
 8008a9a:	4305      	orrs	r5, r0
 8008a9c:	81a5      	strh	r5, [r4, #12]
 8008a9e:	e7cd      	b.n	8008a3c <__smakebuf_r+0x18>
 8008aa0:	08008621 	.word	0x08008621

08008aa4 <__malloc_lock>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__malloc_lock+0x8>)
 8008aa6:	f7ff bf95 	b.w	80089d4 <__retarget_lock_acquire_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20000ba5 	.word	0x20000ba5

08008ab0 <__malloc_unlock>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__malloc_unlock+0x8>)
 8008ab2:	f7ff bf91 	b.w	80089d8 <__retarget_lock_release_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20000ba5 	.word	0x20000ba5

08008abc <__ssputs_r>:
 8008abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	688e      	ldr	r6, [r1, #8]
 8008ac2:	429e      	cmp	r6, r3
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	4690      	mov	r8, r2
 8008aca:	461f      	mov	r7, r3
 8008acc:	d838      	bhi.n	8008b40 <__ssputs_r+0x84>
 8008ace:	898a      	ldrh	r2, [r1, #12]
 8008ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ad4:	d032      	beq.n	8008b3c <__ssputs_r+0x80>
 8008ad6:	6825      	ldr	r5, [r4, #0]
 8008ad8:	6909      	ldr	r1, [r1, #16]
 8008ada:	eba5 0901 	sub.w	r9, r5, r1
 8008ade:	6965      	ldr	r5, [r4, #20]
 8008ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ae8:	3301      	adds	r3, #1
 8008aea:	444b      	add	r3, r9
 8008aec:	106d      	asrs	r5, r5, #1
 8008aee:	429d      	cmp	r5, r3
 8008af0:	bf38      	it	cc
 8008af2:	461d      	movcc	r5, r3
 8008af4:	0553      	lsls	r3, r2, #21
 8008af6:	d531      	bpl.n	8008b5c <__ssputs_r+0xa0>
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7fe ffc9 	bl	8007a90 <_malloc_r>
 8008afe:	4606      	mov	r6, r0
 8008b00:	b950      	cbnz	r0, 8008b18 <__ssputs_r+0x5c>
 8008b02:	230c      	movs	r3, #12
 8008b04:	f8ca 3000 	str.w	r3, [sl]
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b18:	6921      	ldr	r1, [r4, #16]
 8008b1a:	464a      	mov	r2, r9
 8008b1c:	f7fe fcc4 	bl	80074a8 <memcpy>
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	6126      	str	r6, [r4, #16]
 8008b2e:	6165      	str	r5, [r4, #20]
 8008b30:	444e      	add	r6, r9
 8008b32:	eba5 0509 	sub.w	r5, r5, r9
 8008b36:	6026      	str	r6, [r4, #0]
 8008b38:	60a5      	str	r5, [r4, #8]
 8008b3a:	463e      	mov	r6, r7
 8008b3c:	42be      	cmp	r6, r7
 8008b3e:	d900      	bls.n	8008b42 <__ssputs_r+0x86>
 8008b40:	463e      	mov	r6, r7
 8008b42:	6820      	ldr	r0, [r4, #0]
 8008b44:	4632      	mov	r2, r6
 8008b46:	4641      	mov	r1, r8
 8008b48:	f000 fd64 	bl	8009614 <memmove>
 8008b4c:	68a3      	ldr	r3, [r4, #8]
 8008b4e:	1b9b      	subs	r3, r3, r6
 8008b50:	60a3      	str	r3, [r4, #8]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	4433      	add	r3, r6
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e7db      	b.n	8008b14 <__ssputs_r+0x58>
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	f000 fd73 	bl	8009648 <_realloc_r>
 8008b62:	4606      	mov	r6, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d1e1      	bne.n	8008b2c <__ssputs_r+0x70>
 8008b68:	6921      	ldr	r1, [r4, #16]
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	f7fe ff24 	bl	80079b8 <_free_r>
 8008b70:	e7c7      	b.n	8008b02 <__ssputs_r+0x46>
	...

08008b74 <_svfiprintf_r>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	4698      	mov	r8, r3
 8008b7a:	898b      	ldrh	r3, [r1, #12]
 8008b7c:	061b      	lsls	r3, r3, #24
 8008b7e:	b09d      	sub	sp, #116	; 0x74
 8008b80:	4607      	mov	r7, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	d50e      	bpl.n	8008ba6 <_svfiprintf_r+0x32>
 8008b88:	690b      	ldr	r3, [r1, #16]
 8008b8a:	b963      	cbnz	r3, 8008ba6 <_svfiprintf_r+0x32>
 8008b8c:	2140      	movs	r1, #64	; 0x40
 8008b8e:	f7fe ff7f 	bl	8007a90 <_malloc_r>
 8008b92:	6028      	str	r0, [r5, #0]
 8008b94:	6128      	str	r0, [r5, #16]
 8008b96:	b920      	cbnz	r0, 8008ba2 <_svfiprintf_r+0x2e>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e0d1      	b.n	8008d46 <_svfiprintf_r+0x1d2>
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	616b      	str	r3, [r5, #20]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8008baa:	2320      	movs	r3, #32
 8008bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb4:	2330      	movs	r3, #48	; 0x30
 8008bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d60 <_svfiprintf_r+0x1ec>
 8008bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bbe:	f04f 0901 	mov.w	r9, #1
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bca:	b10a      	cbz	r2, 8008bd0 <_svfiprintf_r+0x5c>
 8008bcc:	2a25      	cmp	r2, #37	; 0x25
 8008bce:	d1f9      	bne.n	8008bc4 <_svfiprintf_r+0x50>
 8008bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd4:	d00b      	beq.n	8008bee <_svfiprintf_r+0x7a>
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f7ff ff6d 	bl	8008abc <__ssputs_r>
 8008be2:	3001      	adds	r0, #1
 8008be4:	f000 80aa 	beq.w	8008d3c <_svfiprintf_r+0x1c8>
 8008be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bea:	445a      	add	r2, fp
 8008bec:	9209      	str	r2, [sp, #36]	; 0x24
 8008bee:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 80a2 	beq.w	8008d3c <_svfiprintf_r+0x1c8>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c02:	f10a 0a01 	add.w	sl, sl, #1
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	9307      	str	r3, [sp, #28]
 8008c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c10:	4654      	mov	r4, sl
 8008c12:	2205      	movs	r2, #5
 8008c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c18:	4851      	ldr	r0, [pc, #324]	; (8008d60 <_svfiprintf_r+0x1ec>)
 8008c1a:	f7f7 faf1 	bl	8000200 <memchr>
 8008c1e:	9a04      	ldr	r2, [sp, #16]
 8008c20:	b9d8      	cbnz	r0, 8008c5a <_svfiprintf_r+0xe6>
 8008c22:	06d0      	lsls	r0, r2, #27
 8008c24:	bf44      	itt	mi
 8008c26:	2320      	movmi	r3, #32
 8008c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c2c:	0711      	lsls	r1, r2, #28
 8008c2e:	bf44      	itt	mi
 8008c30:	232b      	movmi	r3, #43	; 0x2b
 8008c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3c:	d015      	beq.n	8008c6a <_svfiprintf_r+0xf6>
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	4654      	mov	r4, sl
 8008c42:	2000      	movs	r0, #0
 8008c44:	f04f 0c0a 	mov.w	ip, #10
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c4e:	3b30      	subs	r3, #48	; 0x30
 8008c50:	2b09      	cmp	r3, #9
 8008c52:	d94e      	bls.n	8008cf2 <_svfiprintf_r+0x17e>
 8008c54:	b1b0      	cbz	r0, 8008c84 <_svfiprintf_r+0x110>
 8008c56:	9207      	str	r2, [sp, #28]
 8008c58:	e014      	b.n	8008c84 <_svfiprintf_r+0x110>
 8008c5a:	eba0 0308 	sub.w	r3, r0, r8
 8008c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	46a2      	mov	sl, r4
 8008c68:	e7d2      	b.n	8008c10 <_svfiprintf_r+0x9c>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d19      	adds	r1, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9103      	str	r1, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfbb      	ittet	lt
 8008c76:	425b      	neglt	r3, r3
 8008c78:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7c:	9307      	strge	r3, [sp, #28]
 8008c7e:	9307      	strlt	r3, [sp, #28]
 8008c80:	bfb8      	it	lt
 8008c82:	9204      	strlt	r2, [sp, #16]
 8008c84:	7823      	ldrb	r3, [r4, #0]
 8008c86:	2b2e      	cmp	r3, #46	; 0x2e
 8008c88:	d10c      	bne.n	8008ca4 <_svfiprintf_r+0x130>
 8008c8a:	7863      	ldrb	r3, [r4, #1]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d135      	bne.n	8008cfc <_svfiprintf_r+0x188>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	9203      	str	r2, [sp, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfb8      	it	lt
 8008c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca0:	3402      	adds	r4, #2
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d70 <_svfiprintf_r+0x1fc>
 8008ca8:	7821      	ldrb	r1, [r4, #0]
 8008caa:	2203      	movs	r2, #3
 8008cac:	4650      	mov	r0, sl
 8008cae:	f7f7 faa7 	bl	8000200 <memchr>
 8008cb2:	b140      	cbz	r0, 8008cc6 <_svfiprintf_r+0x152>
 8008cb4:	2340      	movs	r3, #64	; 0x40
 8008cb6:	eba0 000a 	sub.w	r0, r0, sl
 8008cba:	fa03 f000 	lsl.w	r0, r3, r0
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	4303      	orrs	r3, r0
 8008cc2:	3401      	adds	r4, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cca:	4826      	ldr	r0, [pc, #152]	; (8008d64 <_svfiprintf_r+0x1f0>)
 8008ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd0:	2206      	movs	r2, #6
 8008cd2:	f7f7 fa95 	bl	8000200 <memchr>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d038      	beq.n	8008d4c <_svfiprintf_r+0x1d8>
 8008cda:	4b23      	ldr	r3, [pc, #140]	; (8008d68 <_svfiprintf_r+0x1f4>)
 8008cdc:	bb1b      	cbnz	r3, 8008d26 <_svfiprintf_r+0x1b2>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	f023 0307 	bic.w	r3, r3, #7
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	4433      	add	r3, r6
 8008cee:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf0:	e767      	b.n	8008bc2 <_svfiprintf_r+0x4e>
 8008cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	e7a5      	b.n	8008c48 <_svfiprintf_r+0xd4>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9305      	str	r3, [sp, #20]
 8008d02:	4619      	mov	r1, r3
 8008d04:	f04f 0c0a 	mov.w	ip, #10
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0e:	3a30      	subs	r2, #48	; 0x30
 8008d10:	2a09      	cmp	r2, #9
 8008d12:	d903      	bls.n	8008d1c <_svfiprintf_r+0x1a8>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0c5      	beq.n	8008ca4 <_svfiprintf_r+0x130>
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	e7c3      	b.n	8008ca4 <_svfiprintf_r+0x130>
 8008d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d20:	4604      	mov	r4, r0
 8008d22:	2301      	movs	r3, #1
 8008d24:	e7f0      	b.n	8008d08 <_svfiprintf_r+0x194>
 8008d26:	ab03      	add	r3, sp, #12
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <_svfiprintf_r+0x1f8>)
 8008d2e:	a904      	add	r1, sp, #16
 8008d30:	4638      	mov	r0, r7
 8008d32:	f3af 8000 	nop.w
 8008d36:	1c42      	adds	r2, r0, #1
 8008d38:	4606      	mov	r6, r0
 8008d3a:	d1d6      	bne.n	8008cea <_svfiprintf_r+0x176>
 8008d3c:	89ab      	ldrh	r3, [r5, #12]
 8008d3e:	065b      	lsls	r3, r3, #25
 8008d40:	f53f af2c 	bmi.w	8008b9c <_svfiprintf_r+0x28>
 8008d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d46:	b01d      	add	sp, #116	; 0x74
 8008d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4c:	ab03      	add	r3, sp, #12
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <_svfiprintf_r+0x1f8>)
 8008d54:	a904      	add	r1, sp, #16
 8008d56:	4638      	mov	r0, r7
 8008d58:	f000 f9d4 	bl	8009104 <_printf_i>
 8008d5c:	e7eb      	b.n	8008d36 <_svfiprintf_r+0x1c2>
 8008d5e:	bf00      	nop
 8008d60:	0800a98c 	.word	0x0800a98c
 8008d64:	0800a996 	.word	0x0800a996
 8008d68:	00000000 	.word	0x00000000
 8008d6c:	08008abd 	.word	0x08008abd
 8008d70:	0800a992 	.word	0x0800a992

08008d74 <__sfputc_r>:
 8008d74:	6893      	ldr	r3, [r2, #8]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	b410      	push	{r4}
 8008d7c:	6093      	str	r3, [r2, #8]
 8008d7e:	da08      	bge.n	8008d92 <__sfputc_r+0x1e>
 8008d80:	6994      	ldr	r4, [r2, #24]
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	db01      	blt.n	8008d8a <__sfputc_r+0x16>
 8008d86:	290a      	cmp	r1, #10
 8008d88:	d103      	bne.n	8008d92 <__sfputc_r+0x1e>
 8008d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8e:	f7ff ba6f 	b.w	8008270 <__swbuf_r>
 8008d92:	6813      	ldr	r3, [r2, #0]
 8008d94:	1c58      	adds	r0, r3, #1
 8008d96:	6010      	str	r0, [r2, #0]
 8008d98:	7019      	strb	r1, [r3, #0]
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <__sfputs_r>:
 8008da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	18d5      	adds	r5, r2, r3
 8008dac:	42ac      	cmp	r4, r5
 8008dae:	d101      	bne.n	8008db4 <__sfputs_r+0x12>
 8008db0:	2000      	movs	r0, #0
 8008db2:	e007      	b.n	8008dc4 <__sfputs_r+0x22>
 8008db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db8:	463a      	mov	r2, r7
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff ffda 	bl	8008d74 <__sfputc_r>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d1f3      	bne.n	8008dac <__sfputs_r+0xa>
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dc8 <_vfiprintf_r>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	460d      	mov	r5, r1
 8008dce:	b09d      	sub	sp, #116	; 0x74
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	4698      	mov	r8, r3
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	b118      	cbz	r0, 8008de0 <_vfiprintf_r+0x18>
 8008dd8:	6983      	ldr	r3, [r0, #24]
 8008dda:	b90b      	cbnz	r3, 8008de0 <_vfiprintf_r+0x18>
 8008ddc:	f7ff fc54 	bl	8008688 <__sinit>
 8008de0:	4b89      	ldr	r3, [pc, #548]	; (8009008 <_vfiprintf_r+0x240>)
 8008de2:	429d      	cmp	r5, r3
 8008de4:	d11b      	bne.n	8008e1e <_vfiprintf_r+0x56>
 8008de6:	6875      	ldr	r5, [r6, #4]
 8008de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dea:	07d9      	lsls	r1, r3, #31
 8008dec:	d405      	bmi.n	8008dfa <_vfiprintf_r+0x32>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	059a      	lsls	r2, r3, #22
 8008df2:	d402      	bmi.n	8008dfa <_vfiprintf_r+0x32>
 8008df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008df6:	f7ff fded 	bl	80089d4 <__retarget_lock_acquire_recursive>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	071b      	lsls	r3, r3, #28
 8008dfe:	d501      	bpl.n	8008e04 <_vfiprintf_r+0x3c>
 8008e00:	692b      	ldr	r3, [r5, #16]
 8008e02:	b9eb      	cbnz	r3, 8008e40 <_vfiprintf_r+0x78>
 8008e04:	4629      	mov	r1, r5
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7ff fa84 	bl	8008314 <__swsetup_r>
 8008e0c:	b1c0      	cbz	r0, 8008e40 <_vfiprintf_r+0x78>
 8008e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e10:	07dc      	lsls	r4, r3, #31
 8008e12:	d50e      	bpl.n	8008e32 <_vfiprintf_r+0x6a>
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	b01d      	add	sp, #116	; 0x74
 8008e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1e:	4b7b      	ldr	r3, [pc, #492]	; (800900c <_vfiprintf_r+0x244>)
 8008e20:	429d      	cmp	r5, r3
 8008e22:	d101      	bne.n	8008e28 <_vfiprintf_r+0x60>
 8008e24:	68b5      	ldr	r5, [r6, #8]
 8008e26:	e7df      	b.n	8008de8 <_vfiprintf_r+0x20>
 8008e28:	4b79      	ldr	r3, [pc, #484]	; (8009010 <_vfiprintf_r+0x248>)
 8008e2a:	429d      	cmp	r5, r3
 8008e2c:	bf08      	it	eq
 8008e2e:	68f5      	ldreq	r5, [r6, #12]
 8008e30:	e7da      	b.n	8008de8 <_vfiprintf_r+0x20>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	0598      	lsls	r0, r3, #22
 8008e36:	d4ed      	bmi.n	8008e14 <_vfiprintf_r+0x4c>
 8008e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e3a:	f7ff fdcd 	bl	80089d8 <__retarget_lock_release_recursive>
 8008e3e:	e7e9      	b.n	8008e14 <_vfiprintf_r+0x4c>
 8008e40:	2300      	movs	r3, #0
 8008e42:	9309      	str	r3, [sp, #36]	; 0x24
 8008e44:	2320      	movs	r3, #32
 8008e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e4e:	2330      	movs	r3, #48	; 0x30
 8008e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009014 <_vfiprintf_r+0x24c>
 8008e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e58:	f04f 0901 	mov.w	r9, #1
 8008e5c:	4623      	mov	r3, r4
 8008e5e:	469a      	mov	sl, r3
 8008e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e64:	b10a      	cbz	r2, 8008e6a <_vfiprintf_r+0xa2>
 8008e66:	2a25      	cmp	r2, #37	; 0x25
 8008e68:	d1f9      	bne.n	8008e5e <_vfiprintf_r+0x96>
 8008e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e6e:	d00b      	beq.n	8008e88 <_vfiprintf_r+0xc0>
 8008e70:	465b      	mov	r3, fp
 8008e72:	4622      	mov	r2, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	4630      	mov	r0, r6
 8008e78:	f7ff ff93 	bl	8008da2 <__sfputs_r>
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	f000 80aa 	beq.w	8008fd6 <_vfiprintf_r+0x20e>
 8008e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e84:	445a      	add	r2, fp
 8008e86:	9209      	str	r2, [sp, #36]	; 0x24
 8008e88:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 80a2 	beq.w	8008fd6 <_vfiprintf_r+0x20e>
 8008e92:	2300      	movs	r3, #0
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e9c:	f10a 0a01 	add.w	sl, sl, #1
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eaa:	4654      	mov	r4, sl
 8008eac:	2205      	movs	r2, #5
 8008eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb2:	4858      	ldr	r0, [pc, #352]	; (8009014 <_vfiprintf_r+0x24c>)
 8008eb4:	f7f7 f9a4 	bl	8000200 <memchr>
 8008eb8:	9a04      	ldr	r2, [sp, #16]
 8008eba:	b9d8      	cbnz	r0, 8008ef4 <_vfiprintf_r+0x12c>
 8008ebc:	06d1      	lsls	r1, r2, #27
 8008ebe:	bf44      	itt	mi
 8008ec0:	2320      	movmi	r3, #32
 8008ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec6:	0713      	lsls	r3, r2, #28
 8008ec8:	bf44      	itt	mi
 8008eca:	232b      	movmi	r3, #43	; 0x2b
 8008ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed6:	d015      	beq.n	8008f04 <_vfiprintf_r+0x13c>
 8008ed8:	9a07      	ldr	r2, [sp, #28]
 8008eda:	4654      	mov	r4, sl
 8008edc:	2000      	movs	r0, #0
 8008ede:	f04f 0c0a 	mov.w	ip, #10
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee8:	3b30      	subs	r3, #48	; 0x30
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	d94e      	bls.n	8008f8c <_vfiprintf_r+0x1c4>
 8008eee:	b1b0      	cbz	r0, 8008f1e <_vfiprintf_r+0x156>
 8008ef0:	9207      	str	r2, [sp, #28]
 8008ef2:	e014      	b.n	8008f1e <_vfiprintf_r+0x156>
 8008ef4:	eba0 0308 	sub.w	r3, r0, r8
 8008ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8008efc:	4313      	orrs	r3, r2
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	46a2      	mov	sl, r4
 8008f02:	e7d2      	b.n	8008eaa <_vfiprintf_r+0xe2>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	1d19      	adds	r1, r3, #4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	9103      	str	r1, [sp, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bfbb      	ittet	lt
 8008f10:	425b      	neglt	r3, r3
 8008f12:	f042 0202 	orrlt.w	r2, r2, #2
 8008f16:	9307      	strge	r3, [sp, #28]
 8008f18:	9307      	strlt	r3, [sp, #28]
 8008f1a:	bfb8      	it	lt
 8008f1c:	9204      	strlt	r2, [sp, #16]
 8008f1e:	7823      	ldrb	r3, [r4, #0]
 8008f20:	2b2e      	cmp	r3, #46	; 0x2e
 8008f22:	d10c      	bne.n	8008f3e <_vfiprintf_r+0x176>
 8008f24:	7863      	ldrb	r3, [r4, #1]
 8008f26:	2b2a      	cmp	r3, #42	; 0x2a
 8008f28:	d135      	bne.n	8008f96 <_vfiprintf_r+0x1ce>
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	9203      	str	r2, [sp, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfb8      	it	lt
 8008f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f3a:	3402      	adds	r4, #2
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009024 <_vfiprintf_r+0x25c>
 8008f42:	7821      	ldrb	r1, [r4, #0]
 8008f44:	2203      	movs	r2, #3
 8008f46:	4650      	mov	r0, sl
 8008f48:	f7f7 f95a 	bl	8000200 <memchr>
 8008f4c:	b140      	cbz	r0, 8008f60 <_vfiprintf_r+0x198>
 8008f4e:	2340      	movs	r3, #64	; 0x40
 8008f50:	eba0 000a 	sub.w	r0, r0, sl
 8008f54:	fa03 f000 	lsl.w	r0, r3, r0
 8008f58:	9b04      	ldr	r3, [sp, #16]
 8008f5a:	4303      	orrs	r3, r0
 8008f5c:	3401      	adds	r4, #1
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f64:	482c      	ldr	r0, [pc, #176]	; (8009018 <_vfiprintf_r+0x250>)
 8008f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f6a:	2206      	movs	r2, #6
 8008f6c:	f7f7 f948 	bl	8000200 <memchr>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d03f      	beq.n	8008ff4 <_vfiprintf_r+0x22c>
 8008f74:	4b29      	ldr	r3, [pc, #164]	; (800901c <_vfiprintf_r+0x254>)
 8008f76:	bb1b      	cbnz	r3, 8008fc0 <_vfiprintf_r+0x1f8>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	3307      	adds	r3, #7
 8008f7c:	f023 0307 	bic.w	r3, r3, #7
 8008f80:	3308      	adds	r3, #8
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f86:	443b      	add	r3, r7
 8008f88:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8a:	e767      	b.n	8008e5c <_vfiprintf_r+0x94>
 8008f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f90:	460c      	mov	r4, r1
 8008f92:	2001      	movs	r0, #1
 8008f94:	e7a5      	b.n	8008ee2 <_vfiprintf_r+0x11a>
 8008f96:	2300      	movs	r3, #0
 8008f98:	3401      	adds	r4, #1
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f04f 0c0a 	mov.w	ip, #10
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa8:	3a30      	subs	r2, #48	; 0x30
 8008faa:	2a09      	cmp	r2, #9
 8008fac:	d903      	bls.n	8008fb6 <_vfiprintf_r+0x1ee>
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0c5      	beq.n	8008f3e <_vfiprintf_r+0x176>
 8008fb2:	9105      	str	r1, [sp, #20]
 8008fb4:	e7c3      	b.n	8008f3e <_vfiprintf_r+0x176>
 8008fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fba:	4604      	mov	r4, r0
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e7f0      	b.n	8008fa2 <_vfiprintf_r+0x1da>
 8008fc0:	ab03      	add	r3, sp, #12
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4b16      	ldr	r3, [pc, #88]	; (8009020 <_vfiprintf_r+0x258>)
 8008fc8:	a904      	add	r1, sp, #16
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f3af 8000 	nop.w
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	1c78      	adds	r0, r7, #1
 8008fd4:	d1d6      	bne.n	8008f84 <_vfiprintf_r+0x1bc>
 8008fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fd8:	07d9      	lsls	r1, r3, #31
 8008fda:	d405      	bmi.n	8008fe8 <_vfiprintf_r+0x220>
 8008fdc:	89ab      	ldrh	r3, [r5, #12]
 8008fde:	059a      	lsls	r2, r3, #22
 8008fe0:	d402      	bmi.n	8008fe8 <_vfiprintf_r+0x220>
 8008fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fe4:	f7ff fcf8 	bl	80089d8 <__retarget_lock_release_recursive>
 8008fe8:	89ab      	ldrh	r3, [r5, #12]
 8008fea:	065b      	lsls	r3, r3, #25
 8008fec:	f53f af12 	bmi.w	8008e14 <_vfiprintf_r+0x4c>
 8008ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ff2:	e711      	b.n	8008e18 <_vfiprintf_r+0x50>
 8008ff4:	ab03      	add	r3, sp, #12
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <_vfiprintf_r+0x258>)
 8008ffc:	a904      	add	r1, sp, #16
 8008ffe:	4630      	mov	r0, r6
 8009000:	f000 f880 	bl	8009104 <_printf_i>
 8009004:	e7e4      	b.n	8008fd0 <_vfiprintf_r+0x208>
 8009006:	bf00      	nop
 8009008:	0800a94c 	.word	0x0800a94c
 800900c:	0800a96c 	.word	0x0800a96c
 8009010:	0800a92c 	.word	0x0800a92c
 8009014:	0800a98c 	.word	0x0800a98c
 8009018:	0800a996 	.word	0x0800a996
 800901c:	00000000 	.word	0x00000000
 8009020:	08008da3 	.word	0x08008da3
 8009024:	0800a992 	.word	0x0800a992

08009028 <_printf_common>:
 8009028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	4616      	mov	r6, r2
 800902e:	4699      	mov	r9, r3
 8009030:	688a      	ldr	r2, [r1, #8]
 8009032:	690b      	ldr	r3, [r1, #16]
 8009034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009038:	4293      	cmp	r3, r2
 800903a:	bfb8      	it	lt
 800903c:	4613      	movlt	r3, r2
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009044:	4607      	mov	r7, r0
 8009046:	460c      	mov	r4, r1
 8009048:	b10a      	cbz	r2, 800904e <_printf_common+0x26>
 800904a:	3301      	adds	r3, #1
 800904c:	6033      	str	r3, [r6, #0]
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	0699      	lsls	r1, r3, #26
 8009052:	bf42      	ittt	mi
 8009054:	6833      	ldrmi	r3, [r6, #0]
 8009056:	3302      	addmi	r3, #2
 8009058:	6033      	strmi	r3, [r6, #0]
 800905a:	6825      	ldr	r5, [r4, #0]
 800905c:	f015 0506 	ands.w	r5, r5, #6
 8009060:	d106      	bne.n	8009070 <_printf_common+0x48>
 8009062:	f104 0a19 	add.w	sl, r4, #25
 8009066:	68e3      	ldr	r3, [r4, #12]
 8009068:	6832      	ldr	r2, [r6, #0]
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	42ab      	cmp	r3, r5
 800906e:	dc26      	bgt.n	80090be <_printf_common+0x96>
 8009070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009074:	1e13      	subs	r3, r2, #0
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	bf18      	it	ne
 800907a:	2301      	movne	r3, #1
 800907c:	0692      	lsls	r2, r2, #26
 800907e:	d42b      	bmi.n	80090d8 <_printf_common+0xb0>
 8009080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009084:	4649      	mov	r1, r9
 8009086:	4638      	mov	r0, r7
 8009088:	47c0      	blx	r8
 800908a:	3001      	adds	r0, #1
 800908c:	d01e      	beq.n	80090cc <_printf_common+0xa4>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	68e5      	ldr	r5, [r4, #12]
 8009092:	6832      	ldr	r2, [r6, #0]
 8009094:	f003 0306 	and.w	r3, r3, #6
 8009098:	2b04      	cmp	r3, #4
 800909a:	bf08      	it	eq
 800909c:	1aad      	subeq	r5, r5, r2
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	6922      	ldr	r2, [r4, #16]
 80090a2:	bf0c      	ite	eq
 80090a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090a8:	2500      	movne	r5, #0
 80090aa:	4293      	cmp	r3, r2
 80090ac:	bfc4      	itt	gt
 80090ae:	1a9b      	subgt	r3, r3, r2
 80090b0:	18ed      	addgt	r5, r5, r3
 80090b2:	2600      	movs	r6, #0
 80090b4:	341a      	adds	r4, #26
 80090b6:	42b5      	cmp	r5, r6
 80090b8:	d11a      	bne.n	80090f0 <_printf_common+0xc8>
 80090ba:	2000      	movs	r0, #0
 80090bc:	e008      	b.n	80090d0 <_printf_common+0xa8>
 80090be:	2301      	movs	r3, #1
 80090c0:	4652      	mov	r2, sl
 80090c2:	4649      	mov	r1, r9
 80090c4:	4638      	mov	r0, r7
 80090c6:	47c0      	blx	r8
 80090c8:	3001      	adds	r0, #1
 80090ca:	d103      	bne.n	80090d4 <_printf_common+0xac>
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d4:	3501      	adds	r5, #1
 80090d6:	e7c6      	b.n	8009066 <_printf_common+0x3e>
 80090d8:	18e1      	adds	r1, r4, r3
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	2030      	movs	r0, #48	; 0x30
 80090de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090e2:	4422      	add	r2, r4
 80090e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090ec:	3302      	adds	r3, #2
 80090ee:	e7c7      	b.n	8009080 <_printf_common+0x58>
 80090f0:	2301      	movs	r3, #1
 80090f2:	4622      	mov	r2, r4
 80090f4:	4649      	mov	r1, r9
 80090f6:	4638      	mov	r0, r7
 80090f8:	47c0      	blx	r8
 80090fa:	3001      	adds	r0, #1
 80090fc:	d0e6      	beq.n	80090cc <_printf_common+0xa4>
 80090fe:	3601      	adds	r6, #1
 8009100:	e7d9      	b.n	80090b6 <_printf_common+0x8e>
	...

08009104 <_printf_i>:
 8009104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009108:	7e0f      	ldrb	r7, [r1, #24]
 800910a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800910c:	2f78      	cmp	r7, #120	; 0x78
 800910e:	4691      	mov	r9, r2
 8009110:	4680      	mov	r8, r0
 8009112:	460c      	mov	r4, r1
 8009114:	469a      	mov	sl, r3
 8009116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800911a:	d807      	bhi.n	800912c <_printf_i+0x28>
 800911c:	2f62      	cmp	r7, #98	; 0x62
 800911e:	d80a      	bhi.n	8009136 <_printf_i+0x32>
 8009120:	2f00      	cmp	r7, #0
 8009122:	f000 80d8 	beq.w	80092d6 <_printf_i+0x1d2>
 8009126:	2f58      	cmp	r7, #88	; 0x58
 8009128:	f000 80a3 	beq.w	8009272 <_printf_i+0x16e>
 800912c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009134:	e03a      	b.n	80091ac <_printf_i+0xa8>
 8009136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800913a:	2b15      	cmp	r3, #21
 800913c:	d8f6      	bhi.n	800912c <_printf_i+0x28>
 800913e:	a101      	add	r1, pc, #4	; (adr r1, 8009144 <_printf_i+0x40>)
 8009140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009144:	0800919d 	.word	0x0800919d
 8009148:	080091b1 	.word	0x080091b1
 800914c:	0800912d 	.word	0x0800912d
 8009150:	0800912d 	.word	0x0800912d
 8009154:	0800912d 	.word	0x0800912d
 8009158:	0800912d 	.word	0x0800912d
 800915c:	080091b1 	.word	0x080091b1
 8009160:	0800912d 	.word	0x0800912d
 8009164:	0800912d 	.word	0x0800912d
 8009168:	0800912d 	.word	0x0800912d
 800916c:	0800912d 	.word	0x0800912d
 8009170:	080092bd 	.word	0x080092bd
 8009174:	080091e1 	.word	0x080091e1
 8009178:	0800929f 	.word	0x0800929f
 800917c:	0800912d 	.word	0x0800912d
 8009180:	0800912d 	.word	0x0800912d
 8009184:	080092df 	.word	0x080092df
 8009188:	0800912d 	.word	0x0800912d
 800918c:	080091e1 	.word	0x080091e1
 8009190:	0800912d 	.word	0x0800912d
 8009194:	0800912d 	.word	0x0800912d
 8009198:	080092a7 	.word	0x080092a7
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	1d1a      	adds	r2, r3, #4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	602a      	str	r2, [r5, #0]
 80091a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091ac:	2301      	movs	r3, #1
 80091ae:	e0a3      	b.n	80092f8 <_printf_i+0x1f4>
 80091b0:	6820      	ldr	r0, [r4, #0]
 80091b2:	6829      	ldr	r1, [r5, #0]
 80091b4:	0606      	lsls	r6, r0, #24
 80091b6:	f101 0304 	add.w	r3, r1, #4
 80091ba:	d50a      	bpl.n	80091d2 <_printf_i+0xce>
 80091bc:	680e      	ldr	r6, [r1, #0]
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	2e00      	cmp	r6, #0
 80091c2:	da03      	bge.n	80091cc <_printf_i+0xc8>
 80091c4:	232d      	movs	r3, #45	; 0x2d
 80091c6:	4276      	negs	r6, r6
 80091c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091cc:	485e      	ldr	r0, [pc, #376]	; (8009348 <_printf_i+0x244>)
 80091ce:	230a      	movs	r3, #10
 80091d0:	e019      	b.n	8009206 <_printf_i+0x102>
 80091d2:	680e      	ldr	r6, [r1, #0]
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091da:	bf18      	it	ne
 80091dc:	b236      	sxthne	r6, r6
 80091de:	e7ef      	b.n	80091c0 <_printf_i+0xbc>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	6820      	ldr	r0, [r4, #0]
 80091e4:	1d19      	adds	r1, r3, #4
 80091e6:	6029      	str	r1, [r5, #0]
 80091e8:	0601      	lsls	r1, r0, #24
 80091ea:	d501      	bpl.n	80091f0 <_printf_i+0xec>
 80091ec:	681e      	ldr	r6, [r3, #0]
 80091ee:	e002      	b.n	80091f6 <_printf_i+0xf2>
 80091f0:	0646      	lsls	r6, r0, #25
 80091f2:	d5fb      	bpl.n	80091ec <_printf_i+0xe8>
 80091f4:	881e      	ldrh	r6, [r3, #0]
 80091f6:	4854      	ldr	r0, [pc, #336]	; (8009348 <_printf_i+0x244>)
 80091f8:	2f6f      	cmp	r7, #111	; 0x6f
 80091fa:	bf0c      	ite	eq
 80091fc:	2308      	moveq	r3, #8
 80091fe:	230a      	movne	r3, #10
 8009200:	2100      	movs	r1, #0
 8009202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009206:	6865      	ldr	r5, [r4, #4]
 8009208:	60a5      	str	r5, [r4, #8]
 800920a:	2d00      	cmp	r5, #0
 800920c:	bfa2      	ittt	ge
 800920e:	6821      	ldrge	r1, [r4, #0]
 8009210:	f021 0104 	bicge.w	r1, r1, #4
 8009214:	6021      	strge	r1, [r4, #0]
 8009216:	b90e      	cbnz	r6, 800921c <_printf_i+0x118>
 8009218:	2d00      	cmp	r5, #0
 800921a:	d04d      	beq.n	80092b8 <_printf_i+0x1b4>
 800921c:	4615      	mov	r5, r2
 800921e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009222:	fb03 6711 	mls	r7, r3, r1, r6
 8009226:	5dc7      	ldrb	r7, [r0, r7]
 8009228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800922c:	4637      	mov	r7, r6
 800922e:	42bb      	cmp	r3, r7
 8009230:	460e      	mov	r6, r1
 8009232:	d9f4      	bls.n	800921e <_printf_i+0x11a>
 8009234:	2b08      	cmp	r3, #8
 8009236:	d10b      	bne.n	8009250 <_printf_i+0x14c>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	07de      	lsls	r6, r3, #31
 800923c:	d508      	bpl.n	8009250 <_printf_i+0x14c>
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	6861      	ldr	r1, [r4, #4]
 8009242:	4299      	cmp	r1, r3
 8009244:	bfde      	ittt	le
 8009246:	2330      	movle	r3, #48	; 0x30
 8009248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800924c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009250:	1b52      	subs	r2, r2, r5
 8009252:	6122      	str	r2, [r4, #16]
 8009254:	f8cd a000 	str.w	sl, [sp]
 8009258:	464b      	mov	r3, r9
 800925a:	aa03      	add	r2, sp, #12
 800925c:	4621      	mov	r1, r4
 800925e:	4640      	mov	r0, r8
 8009260:	f7ff fee2 	bl	8009028 <_printf_common>
 8009264:	3001      	adds	r0, #1
 8009266:	d14c      	bne.n	8009302 <_printf_i+0x1fe>
 8009268:	f04f 30ff 	mov.w	r0, #4294967295
 800926c:	b004      	add	sp, #16
 800926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009272:	4835      	ldr	r0, [pc, #212]	; (8009348 <_printf_i+0x244>)
 8009274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009278:	6829      	ldr	r1, [r5, #0]
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009280:	6029      	str	r1, [r5, #0]
 8009282:	061d      	lsls	r5, r3, #24
 8009284:	d514      	bpl.n	80092b0 <_printf_i+0x1ac>
 8009286:	07df      	lsls	r7, r3, #31
 8009288:	bf44      	itt	mi
 800928a:	f043 0320 	orrmi.w	r3, r3, #32
 800928e:	6023      	strmi	r3, [r4, #0]
 8009290:	b91e      	cbnz	r6, 800929a <_printf_i+0x196>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	f023 0320 	bic.w	r3, r3, #32
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	2310      	movs	r3, #16
 800929c:	e7b0      	b.n	8009200 <_printf_i+0xfc>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	f043 0320 	orr.w	r3, r3, #32
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	2378      	movs	r3, #120	; 0x78
 80092a8:	4828      	ldr	r0, [pc, #160]	; (800934c <_printf_i+0x248>)
 80092aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092ae:	e7e3      	b.n	8009278 <_printf_i+0x174>
 80092b0:	0659      	lsls	r1, r3, #25
 80092b2:	bf48      	it	mi
 80092b4:	b2b6      	uxthmi	r6, r6
 80092b6:	e7e6      	b.n	8009286 <_printf_i+0x182>
 80092b8:	4615      	mov	r5, r2
 80092ba:	e7bb      	b.n	8009234 <_printf_i+0x130>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	6826      	ldr	r6, [r4, #0]
 80092c0:	6961      	ldr	r1, [r4, #20]
 80092c2:	1d18      	adds	r0, r3, #4
 80092c4:	6028      	str	r0, [r5, #0]
 80092c6:	0635      	lsls	r5, r6, #24
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	d501      	bpl.n	80092d0 <_printf_i+0x1cc>
 80092cc:	6019      	str	r1, [r3, #0]
 80092ce:	e002      	b.n	80092d6 <_printf_i+0x1d2>
 80092d0:	0670      	lsls	r0, r6, #25
 80092d2:	d5fb      	bpl.n	80092cc <_printf_i+0x1c8>
 80092d4:	8019      	strh	r1, [r3, #0]
 80092d6:	2300      	movs	r3, #0
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	4615      	mov	r5, r2
 80092dc:	e7ba      	b.n	8009254 <_printf_i+0x150>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	1d1a      	adds	r2, r3, #4
 80092e2:	602a      	str	r2, [r5, #0]
 80092e4:	681d      	ldr	r5, [r3, #0]
 80092e6:	6862      	ldr	r2, [r4, #4]
 80092e8:	2100      	movs	r1, #0
 80092ea:	4628      	mov	r0, r5
 80092ec:	f7f6 ff88 	bl	8000200 <memchr>
 80092f0:	b108      	cbz	r0, 80092f6 <_printf_i+0x1f2>
 80092f2:	1b40      	subs	r0, r0, r5
 80092f4:	6060      	str	r0, [r4, #4]
 80092f6:	6863      	ldr	r3, [r4, #4]
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	2300      	movs	r3, #0
 80092fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009300:	e7a8      	b.n	8009254 <_printf_i+0x150>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	462a      	mov	r2, r5
 8009306:	4649      	mov	r1, r9
 8009308:	4640      	mov	r0, r8
 800930a:	47d0      	blx	sl
 800930c:	3001      	adds	r0, #1
 800930e:	d0ab      	beq.n	8009268 <_printf_i+0x164>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	079b      	lsls	r3, r3, #30
 8009314:	d413      	bmi.n	800933e <_printf_i+0x23a>
 8009316:	68e0      	ldr	r0, [r4, #12]
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	4298      	cmp	r0, r3
 800931c:	bfb8      	it	lt
 800931e:	4618      	movlt	r0, r3
 8009320:	e7a4      	b.n	800926c <_printf_i+0x168>
 8009322:	2301      	movs	r3, #1
 8009324:	4632      	mov	r2, r6
 8009326:	4649      	mov	r1, r9
 8009328:	4640      	mov	r0, r8
 800932a:	47d0      	blx	sl
 800932c:	3001      	adds	r0, #1
 800932e:	d09b      	beq.n	8009268 <_printf_i+0x164>
 8009330:	3501      	adds	r5, #1
 8009332:	68e3      	ldr	r3, [r4, #12]
 8009334:	9903      	ldr	r1, [sp, #12]
 8009336:	1a5b      	subs	r3, r3, r1
 8009338:	42ab      	cmp	r3, r5
 800933a:	dcf2      	bgt.n	8009322 <_printf_i+0x21e>
 800933c:	e7eb      	b.n	8009316 <_printf_i+0x212>
 800933e:	2500      	movs	r5, #0
 8009340:	f104 0619 	add.w	r6, r4, #25
 8009344:	e7f5      	b.n	8009332 <_printf_i+0x22e>
 8009346:	bf00      	nop
 8009348:	0800a99d 	.word	0x0800a99d
 800934c:	0800a9ae 	.word	0x0800a9ae

08009350 <siscanf>:
 8009350:	b40e      	push	{r1, r2, r3}
 8009352:	b510      	push	{r4, lr}
 8009354:	b09f      	sub	sp, #124	; 0x7c
 8009356:	ac21      	add	r4, sp, #132	; 0x84
 8009358:	f44f 7101 	mov.w	r1, #516	; 0x204
 800935c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009360:	9201      	str	r2, [sp, #4]
 8009362:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009366:	9004      	str	r0, [sp, #16]
 8009368:	9008      	str	r0, [sp, #32]
 800936a:	f7f6 ff31 	bl	80001d0 <strlen>
 800936e:	4b0c      	ldr	r3, [pc, #48]	; (80093a0 <siscanf+0x50>)
 8009370:	9005      	str	r0, [sp, #20]
 8009372:	9009      	str	r0, [sp, #36]	; 0x24
 8009374:	930d      	str	r3, [sp, #52]	; 0x34
 8009376:	480b      	ldr	r0, [pc, #44]	; (80093a4 <siscanf+0x54>)
 8009378:	9a01      	ldr	r2, [sp, #4]
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	9403      	str	r4, [sp, #12]
 800937e:	2300      	movs	r3, #0
 8009380:	9311      	str	r3, [sp, #68]	; 0x44
 8009382:	9316      	str	r3, [sp, #88]	; 0x58
 8009384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009388:	f8ad 301e 	strh.w	r3, [sp, #30]
 800938c:	a904      	add	r1, sp, #16
 800938e:	4623      	mov	r3, r4
 8009390:	f000 f9e4 	bl	800975c <__ssvfiscanf_r>
 8009394:	b01f      	add	sp, #124	; 0x7c
 8009396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800939a:	b003      	add	sp, #12
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	080093cb 	.word	0x080093cb
 80093a4:	20000040 	.word	0x20000040

080093a8 <__sread>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	460c      	mov	r4, r1
 80093ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b0:	f000 fc9e 	bl	8009cf0 <_read_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	bfab      	itete	ge
 80093b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093ba:	89a3      	ldrhlt	r3, [r4, #12]
 80093bc:	181b      	addge	r3, r3, r0
 80093be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093c2:	bfac      	ite	ge
 80093c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80093c6:	81a3      	strhlt	r3, [r4, #12]
 80093c8:	bd10      	pop	{r4, pc}

080093ca <__seofread>:
 80093ca:	2000      	movs	r0, #0
 80093cc:	4770      	bx	lr

080093ce <__swrite>:
 80093ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d2:	461f      	mov	r7, r3
 80093d4:	898b      	ldrh	r3, [r1, #12]
 80093d6:	05db      	lsls	r3, r3, #23
 80093d8:	4605      	mov	r5, r0
 80093da:	460c      	mov	r4, r1
 80093dc:	4616      	mov	r6, r2
 80093de:	d505      	bpl.n	80093ec <__swrite+0x1e>
 80093e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e4:	2302      	movs	r3, #2
 80093e6:	2200      	movs	r2, #0
 80093e8:	f000 f902 	bl	80095f0 <_lseek_r>
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	4632      	mov	r2, r6
 80093fa:	463b      	mov	r3, r7
 80093fc:	4628      	mov	r0, r5
 80093fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009402:	f000 b89d 	b.w	8009540 <_write_r>

08009406 <__sseek>:
 8009406:	b510      	push	{r4, lr}
 8009408:	460c      	mov	r4, r1
 800940a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940e:	f000 f8ef 	bl	80095f0 <_lseek_r>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	bf15      	itete	ne
 8009418:	6560      	strne	r0, [r4, #84]	; 0x54
 800941a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800941e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009422:	81a3      	strheq	r3, [r4, #12]
 8009424:	bf18      	it	ne
 8009426:	81a3      	strhne	r3, [r4, #12]
 8009428:	bd10      	pop	{r4, pc}

0800942a <__sclose>:
 800942a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942e:	f000 b8a1 	b.w	8009574 <_close_r>

08009432 <strcpy>:
 8009432:	4603      	mov	r3, r0
 8009434:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009438:	f803 2b01 	strb.w	r2, [r3], #1
 800943c:	2a00      	cmp	r2, #0
 800943e:	d1f9      	bne.n	8009434 <strcpy+0x2>
 8009440:	4770      	bx	lr
	...

08009444 <_strtoul_l.constprop.0>:
 8009444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009448:	4f36      	ldr	r7, [pc, #216]	; (8009524 <_strtoul_l.constprop.0+0xe0>)
 800944a:	4686      	mov	lr, r0
 800944c:	460d      	mov	r5, r1
 800944e:	4628      	mov	r0, r5
 8009450:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009454:	5de6      	ldrb	r6, [r4, r7]
 8009456:	f016 0608 	ands.w	r6, r6, #8
 800945a:	d1f8      	bne.n	800944e <_strtoul_l.constprop.0+0xa>
 800945c:	2c2d      	cmp	r4, #45	; 0x2d
 800945e:	d12f      	bne.n	80094c0 <_strtoul_l.constprop.0+0x7c>
 8009460:	782c      	ldrb	r4, [r5, #0]
 8009462:	2601      	movs	r6, #1
 8009464:	1c85      	adds	r5, r0, #2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d057      	beq.n	800951a <_strtoul_l.constprop.0+0xd6>
 800946a:	2b10      	cmp	r3, #16
 800946c:	d109      	bne.n	8009482 <_strtoul_l.constprop.0+0x3e>
 800946e:	2c30      	cmp	r4, #48	; 0x30
 8009470:	d107      	bne.n	8009482 <_strtoul_l.constprop.0+0x3e>
 8009472:	7828      	ldrb	r0, [r5, #0]
 8009474:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009478:	2858      	cmp	r0, #88	; 0x58
 800947a:	d149      	bne.n	8009510 <_strtoul_l.constprop.0+0xcc>
 800947c:	786c      	ldrb	r4, [r5, #1]
 800947e:	2310      	movs	r3, #16
 8009480:	3502      	adds	r5, #2
 8009482:	f04f 38ff 	mov.w	r8, #4294967295
 8009486:	2700      	movs	r7, #0
 8009488:	fbb8 f8f3 	udiv	r8, r8, r3
 800948c:	fb03 f908 	mul.w	r9, r3, r8
 8009490:	ea6f 0909 	mvn.w	r9, r9
 8009494:	4638      	mov	r0, r7
 8009496:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800949a:	f1bc 0f09 	cmp.w	ip, #9
 800949e:	d814      	bhi.n	80094ca <_strtoul_l.constprop.0+0x86>
 80094a0:	4664      	mov	r4, ip
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	dd22      	ble.n	80094ec <_strtoul_l.constprop.0+0xa8>
 80094a6:	2f00      	cmp	r7, #0
 80094a8:	db1d      	blt.n	80094e6 <_strtoul_l.constprop.0+0xa2>
 80094aa:	4580      	cmp	r8, r0
 80094ac:	d31b      	bcc.n	80094e6 <_strtoul_l.constprop.0+0xa2>
 80094ae:	d101      	bne.n	80094b4 <_strtoul_l.constprop.0+0x70>
 80094b0:	45a1      	cmp	r9, r4
 80094b2:	db18      	blt.n	80094e6 <_strtoul_l.constprop.0+0xa2>
 80094b4:	fb00 4003 	mla	r0, r0, r3, r4
 80094b8:	2701      	movs	r7, #1
 80094ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094be:	e7ea      	b.n	8009496 <_strtoul_l.constprop.0+0x52>
 80094c0:	2c2b      	cmp	r4, #43	; 0x2b
 80094c2:	bf04      	itt	eq
 80094c4:	782c      	ldrbeq	r4, [r5, #0]
 80094c6:	1c85      	addeq	r5, r0, #2
 80094c8:	e7cd      	b.n	8009466 <_strtoul_l.constprop.0+0x22>
 80094ca:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80094ce:	f1bc 0f19 	cmp.w	ip, #25
 80094d2:	d801      	bhi.n	80094d8 <_strtoul_l.constprop.0+0x94>
 80094d4:	3c37      	subs	r4, #55	; 0x37
 80094d6:	e7e4      	b.n	80094a2 <_strtoul_l.constprop.0+0x5e>
 80094d8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80094dc:	f1bc 0f19 	cmp.w	ip, #25
 80094e0:	d804      	bhi.n	80094ec <_strtoul_l.constprop.0+0xa8>
 80094e2:	3c57      	subs	r4, #87	; 0x57
 80094e4:	e7dd      	b.n	80094a2 <_strtoul_l.constprop.0+0x5e>
 80094e6:	f04f 37ff 	mov.w	r7, #4294967295
 80094ea:	e7e6      	b.n	80094ba <_strtoul_l.constprop.0+0x76>
 80094ec:	2f00      	cmp	r7, #0
 80094ee:	da07      	bge.n	8009500 <_strtoul_l.constprop.0+0xbc>
 80094f0:	2322      	movs	r3, #34	; 0x22
 80094f2:	f8ce 3000 	str.w	r3, [lr]
 80094f6:	f04f 30ff 	mov.w	r0, #4294967295
 80094fa:	b932      	cbnz	r2, 800950a <_strtoul_l.constprop.0+0xc6>
 80094fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009500:	b106      	cbz	r6, 8009504 <_strtoul_l.constprop.0+0xc0>
 8009502:	4240      	negs	r0, r0
 8009504:	2a00      	cmp	r2, #0
 8009506:	d0f9      	beq.n	80094fc <_strtoul_l.constprop.0+0xb8>
 8009508:	b107      	cbz	r7, 800950c <_strtoul_l.constprop.0+0xc8>
 800950a:	1e69      	subs	r1, r5, #1
 800950c:	6011      	str	r1, [r2, #0]
 800950e:	e7f5      	b.n	80094fc <_strtoul_l.constprop.0+0xb8>
 8009510:	2430      	movs	r4, #48	; 0x30
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1b5      	bne.n	8009482 <_strtoul_l.constprop.0+0x3e>
 8009516:	2308      	movs	r3, #8
 8009518:	e7b3      	b.n	8009482 <_strtoul_l.constprop.0+0x3e>
 800951a:	2c30      	cmp	r4, #48	; 0x30
 800951c:	d0a9      	beq.n	8009472 <_strtoul_l.constprop.0+0x2e>
 800951e:	230a      	movs	r3, #10
 8009520:	e7af      	b.n	8009482 <_strtoul_l.constprop.0+0x3e>
 8009522:	bf00      	nop
 8009524:	0800a9c0 	.word	0x0800a9c0

08009528 <_strtoul_r>:
 8009528:	f7ff bf8c 	b.w	8009444 <_strtoul_l.constprop.0>

0800952c <strtoul>:
 800952c:	4613      	mov	r3, r2
 800952e:	460a      	mov	r2, r1
 8009530:	4601      	mov	r1, r0
 8009532:	4802      	ldr	r0, [pc, #8]	; (800953c <strtoul+0x10>)
 8009534:	6800      	ldr	r0, [r0, #0]
 8009536:	f7ff bf85 	b.w	8009444 <_strtoul_l.constprop.0>
 800953a:	bf00      	nop
 800953c:	20000040 	.word	0x20000040

08009540 <_write_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d07      	ldr	r5, [pc, #28]	; (8009560 <_write_r+0x20>)
 8009544:	4604      	mov	r4, r0
 8009546:	4608      	mov	r0, r1
 8009548:	4611      	mov	r1, r2
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	f7f8 fc3f 	bl	8001dd2 <_write>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_write_r+0x1e>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_write_r+0x1e>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	20000bac 	.word	0x20000bac

08009564 <abort>:
 8009564:	b508      	push	{r3, lr}
 8009566:	2006      	movs	r0, #6
 8009568:	f000 fc34 	bl	8009dd4 <raise>
 800956c:	2001      	movs	r0, #1
 800956e:	f7f8 fc15 	bl	8001d9c <_exit>
	...

08009574 <_close_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d06      	ldr	r5, [pc, #24]	; (8009590 <_close_r+0x1c>)
 8009578:	2300      	movs	r3, #0
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	f7f8 fc70 	bl	8001e64 <_close>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_close_r+0x1a>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_close_r+0x1a>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	20000bac 	.word	0x20000bac

08009594 <__env_lock>:
 8009594:	4801      	ldr	r0, [pc, #4]	; (800959c <__env_lock+0x8>)
 8009596:	f7ff ba1d 	b.w	80089d4 <__retarget_lock_acquire_recursive>
 800959a:	bf00      	nop
 800959c:	20000ba4 	.word	0x20000ba4

080095a0 <__env_unlock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__env_unlock+0x8>)
 80095a2:	f7ff ba19 	b.w	80089d8 <__retarget_lock_release_recursive>
 80095a6:	bf00      	nop
 80095a8:	20000ba4 	.word	0x20000ba4

080095ac <_fstat_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d07      	ldr	r5, [pc, #28]	; (80095cc <_fstat_r+0x20>)
 80095b0:	2300      	movs	r3, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	f7f8 fc5f 	bl	8001e7c <_fstat>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d102      	bne.n	80095c8 <_fstat_r+0x1c>
 80095c2:	682b      	ldr	r3, [r5, #0]
 80095c4:	b103      	cbz	r3, 80095c8 <_fstat_r+0x1c>
 80095c6:	6023      	str	r3, [r4, #0]
 80095c8:	bd38      	pop	{r3, r4, r5, pc}
 80095ca:	bf00      	nop
 80095cc:	20000bac 	.word	0x20000bac

080095d0 <_isatty_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d06      	ldr	r5, [pc, #24]	; (80095ec <_isatty_r+0x1c>)
 80095d4:	2300      	movs	r3, #0
 80095d6:	4604      	mov	r4, r0
 80095d8:	4608      	mov	r0, r1
 80095da:	602b      	str	r3, [r5, #0]
 80095dc:	f7f8 fc5e 	bl	8001e9c <_isatty>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_isatty_r+0x1a>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_isatty_r+0x1a>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	20000bac 	.word	0x20000bac

080095f0 <_lseek_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d07      	ldr	r5, [pc, #28]	; (8009610 <_lseek_r+0x20>)
 80095f4:	4604      	mov	r4, r0
 80095f6:	4608      	mov	r0, r1
 80095f8:	4611      	mov	r1, r2
 80095fa:	2200      	movs	r2, #0
 80095fc:	602a      	str	r2, [r5, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	f7f8 fc57 	bl	8001eb2 <_lseek>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_lseek_r+0x1e>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	b103      	cbz	r3, 800960e <_lseek_r+0x1e>
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	20000bac 	.word	0x20000bac

08009614 <memmove>:
 8009614:	4288      	cmp	r0, r1
 8009616:	b510      	push	{r4, lr}
 8009618:	eb01 0402 	add.w	r4, r1, r2
 800961c:	d902      	bls.n	8009624 <memmove+0x10>
 800961e:	4284      	cmp	r4, r0
 8009620:	4623      	mov	r3, r4
 8009622:	d807      	bhi.n	8009634 <memmove+0x20>
 8009624:	1e43      	subs	r3, r0, #1
 8009626:	42a1      	cmp	r1, r4
 8009628:	d008      	beq.n	800963c <memmove+0x28>
 800962a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800962e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009632:	e7f8      	b.n	8009626 <memmove+0x12>
 8009634:	4402      	add	r2, r0
 8009636:	4601      	mov	r1, r0
 8009638:	428a      	cmp	r2, r1
 800963a:	d100      	bne.n	800963e <memmove+0x2a>
 800963c:	bd10      	pop	{r4, pc}
 800963e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009646:	e7f7      	b.n	8009638 <memmove+0x24>

08009648 <_realloc_r>:
 8009648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964c:	4680      	mov	r8, r0
 800964e:	4614      	mov	r4, r2
 8009650:	460e      	mov	r6, r1
 8009652:	b921      	cbnz	r1, 800965e <_realloc_r+0x16>
 8009654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	4611      	mov	r1, r2
 800965a:	f7fe ba19 	b.w	8007a90 <_malloc_r>
 800965e:	b92a      	cbnz	r2, 800966c <_realloc_r+0x24>
 8009660:	f7fe f9aa 	bl	80079b8 <_free_r>
 8009664:	4625      	mov	r5, r4
 8009666:	4628      	mov	r0, r5
 8009668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800966c:	f000 fc8c 	bl	8009f88 <_malloc_usable_size_r>
 8009670:	4284      	cmp	r4, r0
 8009672:	4607      	mov	r7, r0
 8009674:	d802      	bhi.n	800967c <_realloc_r+0x34>
 8009676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800967a:	d812      	bhi.n	80096a2 <_realloc_r+0x5a>
 800967c:	4621      	mov	r1, r4
 800967e:	4640      	mov	r0, r8
 8009680:	f7fe fa06 	bl	8007a90 <_malloc_r>
 8009684:	4605      	mov	r5, r0
 8009686:	2800      	cmp	r0, #0
 8009688:	d0ed      	beq.n	8009666 <_realloc_r+0x1e>
 800968a:	42bc      	cmp	r4, r7
 800968c:	4622      	mov	r2, r4
 800968e:	4631      	mov	r1, r6
 8009690:	bf28      	it	cs
 8009692:	463a      	movcs	r2, r7
 8009694:	f7fd ff08 	bl	80074a8 <memcpy>
 8009698:	4631      	mov	r1, r6
 800969a:	4640      	mov	r0, r8
 800969c:	f7fe f98c 	bl	80079b8 <_free_r>
 80096a0:	e7e1      	b.n	8009666 <_realloc_r+0x1e>
 80096a2:	4635      	mov	r5, r6
 80096a4:	e7df      	b.n	8009666 <_realloc_r+0x1e>

080096a6 <_sungetc_r>:
 80096a6:	b538      	push	{r3, r4, r5, lr}
 80096a8:	1c4b      	adds	r3, r1, #1
 80096aa:	4614      	mov	r4, r2
 80096ac:	d103      	bne.n	80096b6 <_sungetc_r+0x10>
 80096ae:	f04f 35ff 	mov.w	r5, #4294967295
 80096b2:	4628      	mov	r0, r5
 80096b4:	bd38      	pop	{r3, r4, r5, pc}
 80096b6:	8993      	ldrh	r3, [r2, #12]
 80096b8:	f023 0320 	bic.w	r3, r3, #32
 80096bc:	8193      	strh	r3, [r2, #12]
 80096be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096c0:	6852      	ldr	r2, [r2, #4]
 80096c2:	b2cd      	uxtb	r5, r1
 80096c4:	b18b      	cbz	r3, 80096ea <_sungetc_r+0x44>
 80096c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096c8:	4293      	cmp	r3, r2
 80096ca:	dd08      	ble.n	80096de <_sungetc_r+0x38>
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	1e5a      	subs	r2, r3, #1
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	3301      	adds	r3, #1
 80096da:	6063      	str	r3, [r4, #4]
 80096dc:	e7e9      	b.n	80096b2 <_sungetc_r+0xc>
 80096de:	4621      	mov	r1, r4
 80096e0:	f000 fc18 	bl	8009f14 <__submore>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d0f1      	beq.n	80096cc <_sungetc_r+0x26>
 80096e8:	e7e1      	b.n	80096ae <_sungetc_r+0x8>
 80096ea:	6921      	ldr	r1, [r4, #16]
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	b151      	cbz	r1, 8009706 <_sungetc_r+0x60>
 80096f0:	4299      	cmp	r1, r3
 80096f2:	d208      	bcs.n	8009706 <_sungetc_r+0x60>
 80096f4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80096f8:	42a9      	cmp	r1, r5
 80096fa:	d104      	bne.n	8009706 <_sungetc_r+0x60>
 80096fc:	3b01      	subs	r3, #1
 80096fe:	3201      	adds	r2, #1
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	6062      	str	r2, [r4, #4]
 8009704:	e7d5      	b.n	80096b2 <_sungetc_r+0xc>
 8009706:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800970a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800970e:	6363      	str	r3, [r4, #52]	; 0x34
 8009710:	2303      	movs	r3, #3
 8009712:	63a3      	str	r3, [r4, #56]	; 0x38
 8009714:	4623      	mov	r3, r4
 8009716:	f803 5f46 	strb.w	r5, [r3, #70]!
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	2301      	movs	r3, #1
 800971e:	e7dc      	b.n	80096da <_sungetc_r+0x34>

08009720 <__ssrefill_r>:
 8009720:	b510      	push	{r4, lr}
 8009722:	460c      	mov	r4, r1
 8009724:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009726:	b169      	cbz	r1, 8009744 <__ssrefill_r+0x24>
 8009728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800972c:	4299      	cmp	r1, r3
 800972e:	d001      	beq.n	8009734 <__ssrefill_r+0x14>
 8009730:	f7fe f942 	bl	80079b8 <_free_r>
 8009734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009736:	6063      	str	r3, [r4, #4]
 8009738:	2000      	movs	r0, #0
 800973a:	6360      	str	r0, [r4, #52]	; 0x34
 800973c:	b113      	cbz	r3, 8009744 <__ssrefill_r+0x24>
 800973e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd10      	pop	{r4, pc}
 8009744:	6923      	ldr	r3, [r4, #16]
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	2300      	movs	r3, #0
 800974a:	6063      	str	r3, [r4, #4]
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	f043 0320 	orr.w	r3, r3, #32
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	f04f 30ff 	mov.w	r0, #4294967295
 8009758:	e7f3      	b.n	8009742 <__ssrefill_r+0x22>
	...

0800975c <__ssvfiscanf_r>:
 800975c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009760:	460c      	mov	r4, r1
 8009762:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009766:	2100      	movs	r1, #0
 8009768:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800976c:	49a6      	ldr	r1, [pc, #664]	; (8009a08 <__ssvfiscanf_r+0x2ac>)
 800976e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009770:	f10d 0804 	add.w	r8, sp, #4
 8009774:	49a5      	ldr	r1, [pc, #660]	; (8009a0c <__ssvfiscanf_r+0x2b0>)
 8009776:	4fa6      	ldr	r7, [pc, #664]	; (8009a10 <__ssvfiscanf_r+0x2b4>)
 8009778:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009a14 <__ssvfiscanf_r+0x2b8>
 800977c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009780:	4606      	mov	r6, r0
 8009782:	91a1      	str	r1, [sp, #644]	; 0x284
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	7813      	ldrb	r3, [r2, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 815a 	beq.w	8009a42 <__ssvfiscanf_r+0x2e6>
 800978e:	5dd9      	ldrb	r1, [r3, r7]
 8009790:	f011 0108 	ands.w	r1, r1, #8
 8009794:	f102 0501 	add.w	r5, r2, #1
 8009798:	d019      	beq.n	80097ce <__ssvfiscanf_r+0x72>
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	dd0f      	ble.n	80097c0 <__ssvfiscanf_r+0x64>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	5cba      	ldrb	r2, [r7, r2]
 80097a6:	0712      	lsls	r2, r2, #28
 80097a8:	d401      	bmi.n	80097ae <__ssvfiscanf_r+0x52>
 80097aa:	462a      	mov	r2, r5
 80097ac:	e7eb      	b.n	8009786 <__ssvfiscanf_r+0x2a>
 80097ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097b0:	3201      	adds	r2, #1
 80097b2:	9245      	str	r2, [sp, #276]	; 0x114
 80097b4:	6862      	ldr	r2, [r4, #4]
 80097b6:	3301      	adds	r3, #1
 80097b8:	3a01      	subs	r2, #1
 80097ba:	6062      	str	r2, [r4, #4]
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	e7ec      	b.n	800979a <__ssvfiscanf_r+0x3e>
 80097c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097c2:	4621      	mov	r1, r4
 80097c4:	4630      	mov	r0, r6
 80097c6:	4798      	blx	r3
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d0e9      	beq.n	80097a0 <__ssvfiscanf_r+0x44>
 80097cc:	e7ed      	b.n	80097aa <__ssvfiscanf_r+0x4e>
 80097ce:	2b25      	cmp	r3, #37	; 0x25
 80097d0:	d012      	beq.n	80097f8 <__ssvfiscanf_r+0x9c>
 80097d2:	469a      	mov	sl, r3
 80097d4:	6863      	ldr	r3, [r4, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f340 8091 	ble.w	80098fe <__ssvfiscanf_r+0x1a2>
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	7813      	ldrb	r3, [r2, #0]
 80097e0:	4553      	cmp	r3, sl
 80097e2:	f040 812e 	bne.w	8009a42 <__ssvfiscanf_r+0x2e6>
 80097e6:	6863      	ldr	r3, [r4, #4]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	6063      	str	r3, [r4, #4]
 80097ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80097ee:	3201      	adds	r2, #1
 80097f0:	3301      	adds	r3, #1
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	9345      	str	r3, [sp, #276]	; 0x114
 80097f6:	e7d8      	b.n	80097aa <__ssvfiscanf_r+0x4e>
 80097f8:	9141      	str	r1, [sp, #260]	; 0x104
 80097fa:	9143      	str	r1, [sp, #268]	; 0x10c
 80097fc:	7853      	ldrb	r3, [r2, #1]
 80097fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009800:	bf02      	ittt	eq
 8009802:	2310      	moveq	r3, #16
 8009804:	1c95      	addeq	r5, r2, #2
 8009806:	9341      	streq	r3, [sp, #260]	; 0x104
 8009808:	220a      	movs	r2, #10
 800980a:	46aa      	mov	sl, r5
 800980c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009810:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009814:	2b09      	cmp	r3, #9
 8009816:	d91d      	bls.n	8009854 <__ssvfiscanf_r+0xf8>
 8009818:	487e      	ldr	r0, [pc, #504]	; (8009a14 <__ssvfiscanf_r+0x2b8>)
 800981a:	2203      	movs	r2, #3
 800981c:	f7f6 fcf0 	bl	8000200 <memchr>
 8009820:	b140      	cbz	r0, 8009834 <__ssvfiscanf_r+0xd8>
 8009822:	2301      	movs	r3, #1
 8009824:	eba0 0009 	sub.w	r0, r0, r9
 8009828:	fa03 f000 	lsl.w	r0, r3, r0
 800982c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800982e:	4318      	orrs	r0, r3
 8009830:	9041      	str	r0, [sp, #260]	; 0x104
 8009832:	4655      	mov	r5, sl
 8009834:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009838:	2b78      	cmp	r3, #120	; 0x78
 800983a:	d806      	bhi.n	800984a <__ssvfiscanf_r+0xee>
 800983c:	2b57      	cmp	r3, #87	; 0x57
 800983e:	d810      	bhi.n	8009862 <__ssvfiscanf_r+0x106>
 8009840:	2b25      	cmp	r3, #37	; 0x25
 8009842:	d0c6      	beq.n	80097d2 <__ssvfiscanf_r+0x76>
 8009844:	d856      	bhi.n	80098f4 <__ssvfiscanf_r+0x198>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d064      	beq.n	8009914 <__ssvfiscanf_r+0x1b8>
 800984a:	2303      	movs	r3, #3
 800984c:	9347      	str	r3, [sp, #284]	; 0x11c
 800984e:	230a      	movs	r3, #10
 8009850:	9342      	str	r3, [sp, #264]	; 0x108
 8009852:	e071      	b.n	8009938 <__ssvfiscanf_r+0x1dc>
 8009854:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009856:	fb02 1103 	mla	r1, r2, r3, r1
 800985a:	3930      	subs	r1, #48	; 0x30
 800985c:	9143      	str	r1, [sp, #268]	; 0x10c
 800985e:	4655      	mov	r5, sl
 8009860:	e7d3      	b.n	800980a <__ssvfiscanf_r+0xae>
 8009862:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009866:	2a20      	cmp	r2, #32
 8009868:	d8ef      	bhi.n	800984a <__ssvfiscanf_r+0xee>
 800986a:	a101      	add	r1, pc, #4	; (adr r1, 8009870 <__ssvfiscanf_r+0x114>)
 800986c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009870:	08009923 	.word	0x08009923
 8009874:	0800984b 	.word	0x0800984b
 8009878:	0800984b 	.word	0x0800984b
 800987c:	08009981 	.word	0x08009981
 8009880:	0800984b 	.word	0x0800984b
 8009884:	0800984b 	.word	0x0800984b
 8009888:	0800984b 	.word	0x0800984b
 800988c:	0800984b 	.word	0x0800984b
 8009890:	0800984b 	.word	0x0800984b
 8009894:	0800984b 	.word	0x0800984b
 8009898:	0800984b 	.word	0x0800984b
 800989c:	08009997 	.word	0x08009997
 80098a0:	0800996d 	.word	0x0800996d
 80098a4:	080098fb 	.word	0x080098fb
 80098a8:	080098fb 	.word	0x080098fb
 80098ac:	080098fb 	.word	0x080098fb
 80098b0:	0800984b 	.word	0x0800984b
 80098b4:	08009971 	.word	0x08009971
 80098b8:	0800984b 	.word	0x0800984b
 80098bc:	0800984b 	.word	0x0800984b
 80098c0:	0800984b 	.word	0x0800984b
 80098c4:	0800984b 	.word	0x0800984b
 80098c8:	080099a7 	.word	0x080099a7
 80098cc:	08009979 	.word	0x08009979
 80098d0:	0800991b 	.word	0x0800991b
 80098d4:	0800984b 	.word	0x0800984b
 80098d8:	0800984b 	.word	0x0800984b
 80098dc:	080099a3 	.word	0x080099a3
 80098e0:	0800984b 	.word	0x0800984b
 80098e4:	0800996d 	.word	0x0800996d
 80098e8:	0800984b 	.word	0x0800984b
 80098ec:	0800984b 	.word	0x0800984b
 80098f0:	08009923 	.word	0x08009923
 80098f4:	3b45      	subs	r3, #69	; 0x45
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d8a7      	bhi.n	800984a <__ssvfiscanf_r+0xee>
 80098fa:	2305      	movs	r3, #5
 80098fc:	e01b      	b.n	8009936 <__ssvfiscanf_r+0x1da>
 80098fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009900:	4621      	mov	r1, r4
 8009902:	4630      	mov	r0, r6
 8009904:	4798      	blx	r3
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f af68 	beq.w	80097dc <__ssvfiscanf_r+0x80>
 800990c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800990e:	2800      	cmp	r0, #0
 8009910:	f040 808d 	bne.w	8009a2e <__ssvfiscanf_r+0x2d2>
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	e08f      	b.n	8009a3a <__ssvfiscanf_r+0x2de>
 800991a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800991c:	f042 0220 	orr.w	r2, r2, #32
 8009920:	9241      	str	r2, [sp, #260]	; 0x104
 8009922:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009928:	9241      	str	r2, [sp, #260]	; 0x104
 800992a:	2210      	movs	r2, #16
 800992c:	2b6f      	cmp	r3, #111	; 0x6f
 800992e:	9242      	str	r2, [sp, #264]	; 0x108
 8009930:	bf34      	ite	cc
 8009932:	2303      	movcc	r3, #3
 8009934:	2304      	movcs	r3, #4
 8009936:	9347      	str	r3, [sp, #284]	; 0x11c
 8009938:	6863      	ldr	r3, [r4, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	dd42      	ble.n	80099c4 <__ssvfiscanf_r+0x268>
 800993e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009940:	0659      	lsls	r1, r3, #25
 8009942:	d404      	bmi.n	800994e <__ssvfiscanf_r+0x1f2>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	5cba      	ldrb	r2, [r7, r2]
 800994a:	0712      	lsls	r2, r2, #28
 800994c:	d441      	bmi.n	80099d2 <__ssvfiscanf_r+0x276>
 800994e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009950:	2b02      	cmp	r3, #2
 8009952:	dc50      	bgt.n	80099f6 <__ssvfiscanf_r+0x29a>
 8009954:	466b      	mov	r3, sp
 8009956:	4622      	mov	r2, r4
 8009958:	a941      	add	r1, sp, #260	; 0x104
 800995a:	4630      	mov	r0, r6
 800995c:	f000 f876 	bl	8009a4c <_scanf_chars>
 8009960:	2801      	cmp	r0, #1
 8009962:	d06e      	beq.n	8009a42 <__ssvfiscanf_r+0x2e6>
 8009964:	2802      	cmp	r0, #2
 8009966:	f47f af20 	bne.w	80097aa <__ssvfiscanf_r+0x4e>
 800996a:	e7cf      	b.n	800990c <__ssvfiscanf_r+0x1b0>
 800996c:	220a      	movs	r2, #10
 800996e:	e7dd      	b.n	800992c <__ssvfiscanf_r+0x1d0>
 8009970:	2300      	movs	r3, #0
 8009972:	9342      	str	r3, [sp, #264]	; 0x108
 8009974:	2303      	movs	r3, #3
 8009976:	e7de      	b.n	8009936 <__ssvfiscanf_r+0x1da>
 8009978:	2308      	movs	r3, #8
 800997a:	9342      	str	r3, [sp, #264]	; 0x108
 800997c:	2304      	movs	r3, #4
 800997e:	e7da      	b.n	8009936 <__ssvfiscanf_r+0x1da>
 8009980:	4629      	mov	r1, r5
 8009982:	4640      	mov	r0, r8
 8009984:	f000 f9c6 	bl	8009d14 <__sccl>
 8009988:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800998a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998e:	9341      	str	r3, [sp, #260]	; 0x104
 8009990:	4605      	mov	r5, r0
 8009992:	2301      	movs	r3, #1
 8009994:	e7cf      	b.n	8009936 <__ssvfiscanf_r+0x1da>
 8009996:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800999c:	9341      	str	r3, [sp, #260]	; 0x104
 800999e:	2300      	movs	r3, #0
 80099a0:	e7c9      	b.n	8009936 <__ssvfiscanf_r+0x1da>
 80099a2:	2302      	movs	r3, #2
 80099a4:	e7c7      	b.n	8009936 <__ssvfiscanf_r+0x1da>
 80099a6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80099a8:	06c3      	lsls	r3, r0, #27
 80099aa:	f53f aefe 	bmi.w	80097aa <__ssvfiscanf_r+0x4e>
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	9100      	str	r1, [sp, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f010 0f01 	tst.w	r0, #1
 80099bc:	bf14      	ite	ne
 80099be:	801a      	strhne	r2, [r3, #0]
 80099c0:	601a      	streq	r2, [r3, #0]
 80099c2:	e6f2      	b.n	80097aa <__ssvfiscanf_r+0x4e>
 80099c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099c6:	4621      	mov	r1, r4
 80099c8:	4630      	mov	r0, r6
 80099ca:	4798      	blx	r3
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d0b6      	beq.n	800993e <__ssvfiscanf_r+0x1e2>
 80099d0:	e79c      	b.n	800990c <__ssvfiscanf_r+0x1b0>
 80099d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80099d4:	3201      	adds	r2, #1
 80099d6:	9245      	str	r2, [sp, #276]	; 0x114
 80099d8:	6862      	ldr	r2, [r4, #4]
 80099da:	3a01      	subs	r2, #1
 80099dc:	2a00      	cmp	r2, #0
 80099de:	6062      	str	r2, [r4, #4]
 80099e0:	dd02      	ble.n	80099e8 <__ssvfiscanf_r+0x28c>
 80099e2:	3301      	adds	r3, #1
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	e7ad      	b.n	8009944 <__ssvfiscanf_r+0x1e8>
 80099e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099ea:	4621      	mov	r1, r4
 80099ec:	4630      	mov	r0, r6
 80099ee:	4798      	blx	r3
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d0a7      	beq.n	8009944 <__ssvfiscanf_r+0x1e8>
 80099f4:	e78a      	b.n	800990c <__ssvfiscanf_r+0x1b0>
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	dc0e      	bgt.n	8009a18 <__ssvfiscanf_r+0x2bc>
 80099fa:	466b      	mov	r3, sp
 80099fc:	4622      	mov	r2, r4
 80099fe:	a941      	add	r1, sp, #260	; 0x104
 8009a00:	4630      	mov	r0, r6
 8009a02:	f000 f87d 	bl	8009b00 <_scanf_i>
 8009a06:	e7ab      	b.n	8009960 <__ssvfiscanf_r+0x204>
 8009a08:	080096a7 	.word	0x080096a7
 8009a0c:	08009721 	.word	0x08009721
 8009a10:	0800a9c0 	.word	0x0800a9c0
 8009a14:	0800a992 	.word	0x0800a992
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <__ssvfiscanf_r+0x2ec>)
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f43f aec5 	beq.w	80097aa <__ssvfiscanf_r+0x4e>
 8009a20:	466b      	mov	r3, sp
 8009a22:	4622      	mov	r2, r4
 8009a24:	a941      	add	r1, sp, #260	; 0x104
 8009a26:	4630      	mov	r0, r6
 8009a28:	f3af 8000 	nop.w
 8009a2c:	e798      	b.n	8009960 <__ssvfiscanf_r+0x204>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009a34:	bf18      	it	ne
 8009a36:	f04f 30ff 	movne.w	r0, #4294967295
 8009a3a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a44:	e7f9      	b.n	8009a3a <__ssvfiscanf_r+0x2de>
 8009a46:	bf00      	nop
 8009a48:	00000000 	.word	0x00000000

08009a4c <_scanf_chars>:
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	4615      	mov	r5, r2
 8009a52:	688a      	ldr	r2, [r1, #8]
 8009a54:	4680      	mov	r8, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b932      	cbnz	r2, 8009a68 <_scanf_chars+0x1c>
 8009a5a:	698a      	ldr	r2, [r1, #24]
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	bf0c      	ite	eq
 8009a60:	2201      	moveq	r2, #1
 8009a62:	f04f 32ff 	movne.w	r2, #4294967295
 8009a66:	608a      	str	r2, [r1, #8]
 8009a68:	6822      	ldr	r2, [r4, #0]
 8009a6a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009afc <_scanf_chars+0xb0>
 8009a6e:	06d1      	lsls	r1, r2, #27
 8009a70:	bf5f      	itttt	pl
 8009a72:	681a      	ldrpl	r2, [r3, #0]
 8009a74:	1d11      	addpl	r1, r2, #4
 8009a76:	6019      	strpl	r1, [r3, #0]
 8009a78:	6816      	ldrpl	r6, [r2, #0]
 8009a7a:	2700      	movs	r7, #0
 8009a7c:	69a0      	ldr	r0, [r4, #24]
 8009a7e:	b188      	cbz	r0, 8009aa4 <_scanf_chars+0x58>
 8009a80:	2801      	cmp	r0, #1
 8009a82:	d107      	bne.n	8009a94 <_scanf_chars+0x48>
 8009a84:	682a      	ldr	r2, [r5, #0]
 8009a86:	7811      	ldrb	r1, [r2, #0]
 8009a88:	6962      	ldr	r2, [r4, #20]
 8009a8a:	5c52      	ldrb	r2, [r2, r1]
 8009a8c:	b952      	cbnz	r2, 8009aa4 <_scanf_chars+0x58>
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	d031      	beq.n	8009af6 <_scanf_chars+0xaa>
 8009a92:	e022      	b.n	8009ada <_scanf_chars+0x8e>
 8009a94:	2802      	cmp	r0, #2
 8009a96:	d120      	bne.n	8009ada <_scanf_chars+0x8e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009aa0:	071b      	lsls	r3, r3, #28
 8009aa2:	d41a      	bmi.n	8009ada <_scanf_chars+0x8e>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	06da      	lsls	r2, r3, #27
 8009aa8:	bf5e      	ittt	pl
 8009aaa:	682b      	ldrpl	r3, [r5, #0]
 8009aac:	781b      	ldrbpl	r3, [r3, #0]
 8009aae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009ab2:	682a      	ldr	r2, [r5, #0]
 8009ab4:	686b      	ldr	r3, [r5, #4]
 8009ab6:	3201      	adds	r2, #1
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	68a2      	ldr	r2, [r4, #8]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	3a01      	subs	r2, #1
 8009ac0:	606b      	str	r3, [r5, #4]
 8009ac2:	3701      	adds	r7, #1
 8009ac4:	60a2      	str	r2, [r4, #8]
 8009ac6:	b142      	cbz	r2, 8009ada <_scanf_chars+0x8e>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dcd7      	bgt.n	8009a7c <_scanf_chars+0x30>
 8009acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4798      	blx	r3
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0d0      	beq.n	8009a7c <_scanf_chars+0x30>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	f013 0310 	ands.w	r3, r3, #16
 8009ae0:	d105      	bne.n	8009aee <_scanf_chars+0xa2>
 8009ae2:	68e2      	ldr	r2, [r4, #12]
 8009ae4:	3201      	adds	r2, #1
 8009ae6:	60e2      	str	r2, [r4, #12]
 8009ae8:	69a2      	ldr	r2, [r4, #24]
 8009aea:	b102      	cbz	r2, 8009aee <_scanf_chars+0xa2>
 8009aec:	7033      	strb	r3, [r6, #0]
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	443b      	add	r3, r7
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	2000      	movs	r0, #0
 8009af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afa:	bf00      	nop
 8009afc:	0800a9c0 	.word	0x0800a9c0

08009b00 <_scanf_i>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	4698      	mov	r8, r3
 8009b06:	4b76      	ldr	r3, [pc, #472]	; (8009ce0 <_scanf_i+0x1e0>)
 8009b08:	460c      	mov	r4, r1
 8009b0a:	4682      	mov	sl, r0
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b12:	b087      	sub	sp, #28
 8009b14:	ab03      	add	r3, sp, #12
 8009b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b1a:	4b72      	ldr	r3, [pc, #456]	; (8009ce4 <_scanf_i+0x1e4>)
 8009b1c:	69a1      	ldr	r1, [r4, #24]
 8009b1e:	4a72      	ldr	r2, [pc, #456]	; (8009ce8 <_scanf_i+0x1e8>)
 8009b20:	2903      	cmp	r1, #3
 8009b22:	bf18      	it	ne
 8009b24:	461a      	movne	r2, r3
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	9201      	str	r2, [sp, #4]
 8009b2a:	1e5a      	subs	r2, r3, #1
 8009b2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009b30:	bf88      	it	hi
 8009b32:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b36:	4627      	mov	r7, r4
 8009b38:	bf82      	ittt	hi
 8009b3a:	eb03 0905 	addhi.w	r9, r3, r5
 8009b3e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b42:	60a3      	strhi	r3, [r4, #8]
 8009b44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009b48:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009b4c:	bf98      	it	ls
 8009b4e:	f04f 0900 	movls.w	r9, #0
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	463d      	mov	r5, r7
 8009b56:	f04f 0b00 	mov.w	fp, #0
 8009b5a:	6831      	ldr	r1, [r6, #0]
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	7809      	ldrb	r1, [r1, #0]
 8009b60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009b64:	2202      	movs	r2, #2
 8009b66:	f7f6 fb4b 	bl	8000200 <memchr>
 8009b6a:	b328      	cbz	r0, 8009bb8 <_scanf_i+0xb8>
 8009b6c:	f1bb 0f01 	cmp.w	fp, #1
 8009b70:	d159      	bne.n	8009c26 <_scanf_i+0x126>
 8009b72:	6862      	ldr	r2, [r4, #4]
 8009b74:	b92a      	cbnz	r2, 8009b82 <_scanf_i+0x82>
 8009b76:	6822      	ldr	r2, [r4, #0]
 8009b78:	2308      	movs	r3, #8
 8009b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b7e:	6063      	str	r3, [r4, #4]
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009b88:	6022      	str	r2, [r4, #0]
 8009b8a:	68a2      	ldr	r2, [r4, #8]
 8009b8c:	1e51      	subs	r1, r2, #1
 8009b8e:	60a1      	str	r1, [r4, #8]
 8009b90:	b192      	cbz	r2, 8009bb8 <_scanf_i+0xb8>
 8009b92:	6832      	ldr	r2, [r6, #0]
 8009b94:	1c51      	adds	r1, r2, #1
 8009b96:	6031      	str	r1, [r6, #0]
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	f805 2b01 	strb.w	r2, [r5], #1
 8009b9e:	6872      	ldr	r2, [r6, #4]
 8009ba0:	3a01      	subs	r2, #1
 8009ba2:	2a00      	cmp	r2, #0
 8009ba4:	6072      	str	r2, [r6, #4]
 8009ba6:	dc07      	bgt.n	8009bb8 <_scanf_i+0xb8>
 8009ba8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009bac:	4631      	mov	r1, r6
 8009bae:	4650      	mov	r0, sl
 8009bb0:	4790      	blx	r2
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	f040 8085 	bne.w	8009cc2 <_scanf_i+0x1c2>
 8009bb8:	f10b 0b01 	add.w	fp, fp, #1
 8009bbc:	f1bb 0f03 	cmp.w	fp, #3
 8009bc0:	d1cb      	bne.n	8009b5a <_scanf_i+0x5a>
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	b90b      	cbnz	r3, 8009bca <_scanf_i+0xca>
 8009bc6:	230a      	movs	r3, #10
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	6863      	ldr	r3, [r4, #4]
 8009bcc:	4947      	ldr	r1, [pc, #284]	; (8009cec <_scanf_i+0x1ec>)
 8009bce:	6960      	ldr	r0, [r4, #20]
 8009bd0:	1ac9      	subs	r1, r1, r3
 8009bd2:	f000 f89f 	bl	8009d14 <__sccl>
 8009bd6:	f04f 0b00 	mov.w	fp, #0
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d03d      	beq.n	8009c5e <_scanf_i+0x15e>
 8009be2:	6831      	ldr	r1, [r6, #0]
 8009be4:	6960      	ldr	r0, [r4, #20]
 8009be6:	f891 c000 	ldrb.w	ip, [r1]
 8009bea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d035      	beq.n	8009c5e <_scanf_i+0x15e>
 8009bf2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009bf6:	d124      	bne.n	8009c42 <_scanf_i+0x142>
 8009bf8:	0510      	lsls	r0, r2, #20
 8009bfa:	d522      	bpl.n	8009c42 <_scanf_i+0x142>
 8009bfc:	f10b 0b01 	add.w	fp, fp, #1
 8009c00:	f1b9 0f00 	cmp.w	r9, #0
 8009c04:	d003      	beq.n	8009c0e <_scanf_i+0x10e>
 8009c06:	3301      	adds	r3, #1
 8009c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c0c:	60a3      	str	r3, [r4, #8]
 8009c0e:	6873      	ldr	r3, [r6, #4]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	6073      	str	r3, [r6, #4]
 8009c16:	dd1b      	ble.n	8009c50 <_scanf_i+0x150>
 8009c18:	6833      	ldr	r3, [r6, #0]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	6033      	str	r3, [r6, #0]
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	e7d9      	b.n	8009bda <_scanf_i+0xda>
 8009c26:	f1bb 0f02 	cmp.w	fp, #2
 8009c2a:	d1ae      	bne.n	8009b8a <_scanf_i+0x8a>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009c32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009c36:	d1bf      	bne.n	8009bb8 <_scanf_i+0xb8>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	6063      	str	r3, [r4, #4]
 8009c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c40:	e7a2      	b.n	8009b88 <_scanf_i+0x88>
 8009c42:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009c46:	6022      	str	r2, [r4, #0]
 8009c48:	780b      	ldrb	r3, [r1, #0]
 8009c4a:	f805 3b01 	strb.w	r3, [r5], #1
 8009c4e:	e7de      	b.n	8009c0e <_scanf_i+0x10e>
 8009c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c54:	4631      	mov	r1, r6
 8009c56:	4650      	mov	r0, sl
 8009c58:	4798      	blx	r3
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d0df      	beq.n	8009c1e <_scanf_i+0x11e>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	05db      	lsls	r3, r3, #23
 8009c62:	d50d      	bpl.n	8009c80 <_scanf_i+0x180>
 8009c64:	42bd      	cmp	r5, r7
 8009c66:	d909      	bls.n	8009c7c <_scanf_i+0x17c>
 8009c68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c70:	4632      	mov	r2, r6
 8009c72:	4650      	mov	r0, sl
 8009c74:	4798      	blx	r3
 8009c76:	f105 39ff 	add.w	r9, r5, #4294967295
 8009c7a:	464d      	mov	r5, r9
 8009c7c:	42bd      	cmp	r5, r7
 8009c7e:	d02d      	beq.n	8009cdc <_scanf_i+0x1dc>
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	f012 0210 	ands.w	r2, r2, #16
 8009c86:	d113      	bne.n	8009cb0 <_scanf_i+0x1b0>
 8009c88:	702a      	strb	r2, [r5, #0]
 8009c8a:	6863      	ldr	r3, [r4, #4]
 8009c8c:	9e01      	ldr	r6, [sp, #4]
 8009c8e:	4639      	mov	r1, r7
 8009c90:	4650      	mov	r0, sl
 8009c92:	47b0      	blx	r6
 8009c94:	6821      	ldr	r1, [r4, #0]
 8009c96:	f8d8 3000 	ldr.w	r3, [r8]
 8009c9a:	f011 0f20 	tst.w	r1, #32
 8009c9e:	d013      	beq.n	8009cc8 <_scanf_i+0x1c8>
 8009ca0:	1d1a      	adds	r2, r3, #4
 8009ca2:	f8c8 2000 	str.w	r2, [r8]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6018      	str	r0, [r3, #0]
 8009caa:	68e3      	ldr	r3, [r4, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	60e3      	str	r3, [r4, #12]
 8009cb0:	1bed      	subs	r5, r5, r7
 8009cb2:	44ab      	add	fp, r5
 8009cb4:	6925      	ldr	r5, [r4, #16]
 8009cb6:	445d      	add	r5, fp
 8009cb8:	6125      	str	r5, [r4, #16]
 8009cba:	2000      	movs	r0, #0
 8009cbc:	b007      	add	sp, #28
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	f04f 0b00 	mov.w	fp, #0
 8009cc6:	e7ca      	b.n	8009c5e <_scanf_i+0x15e>
 8009cc8:	1d1a      	adds	r2, r3, #4
 8009cca:	f8c8 2000 	str.w	r2, [r8]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f011 0f01 	tst.w	r1, #1
 8009cd4:	bf14      	ite	ne
 8009cd6:	8018      	strhne	r0, [r3, #0]
 8009cd8:	6018      	streq	r0, [r3, #0]
 8009cda:	e7e6      	b.n	8009caa <_scanf_i+0x1aa>
 8009cdc:	2001      	movs	r0, #1
 8009cde:	e7ed      	b.n	8009cbc <_scanf_i+0x1bc>
 8009ce0:	0800a6c8 	.word	0x0800a6c8
 8009ce4:	08009529 	.word	0x08009529
 8009ce8:	08009f11 	.word	0x08009f11
 8009cec:	0800aad9 	.word	0x0800aad9

08009cf0 <_read_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	; (8009d10 <_read_r+0x20>)
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f7f8 f856 	bl	8001db0 <_read>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_read_r+0x1e>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_read_r+0x1e>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	20000bac 	.word	0x20000bac

08009d14 <__sccl>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	780b      	ldrb	r3, [r1, #0]
 8009d18:	4604      	mov	r4, r0
 8009d1a:	2b5e      	cmp	r3, #94	; 0x5e
 8009d1c:	bf0b      	itete	eq
 8009d1e:	784b      	ldrbeq	r3, [r1, #1]
 8009d20:	1c48      	addne	r0, r1, #1
 8009d22:	1c88      	addeq	r0, r1, #2
 8009d24:	2200      	movne	r2, #0
 8009d26:	bf08      	it	eq
 8009d28:	2201      	moveq	r2, #1
 8009d2a:	1e61      	subs	r1, r4, #1
 8009d2c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009d30:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009d34:	42a9      	cmp	r1, r5
 8009d36:	d1fb      	bne.n	8009d30 <__sccl+0x1c>
 8009d38:	b90b      	cbnz	r3, 8009d3e <__sccl+0x2a>
 8009d3a:	3801      	subs	r0, #1
 8009d3c:	bd70      	pop	{r4, r5, r6, pc}
 8009d3e:	f082 0201 	eor.w	r2, r2, #1
 8009d42:	54e2      	strb	r2, [r4, r3]
 8009d44:	4605      	mov	r5, r0
 8009d46:	4628      	mov	r0, r5
 8009d48:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009d4c:	292d      	cmp	r1, #45	; 0x2d
 8009d4e:	d006      	beq.n	8009d5e <__sccl+0x4a>
 8009d50:	295d      	cmp	r1, #93	; 0x5d
 8009d52:	d0f3      	beq.n	8009d3c <__sccl+0x28>
 8009d54:	b909      	cbnz	r1, 8009d5a <__sccl+0x46>
 8009d56:	4628      	mov	r0, r5
 8009d58:	e7f0      	b.n	8009d3c <__sccl+0x28>
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	e7f1      	b.n	8009d42 <__sccl+0x2e>
 8009d5e:	786e      	ldrb	r6, [r5, #1]
 8009d60:	2e5d      	cmp	r6, #93	; 0x5d
 8009d62:	d0fa      	beq.n	8009d5a <__sccl+0x46>
 8009d64:	42b3      	cmp	r3, r6
 8009d66:	dcf8      	bgt.n	8009d5a <__sccl+0x46>
 8009d68:	3502      	adds	r5, #2
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	3101      	adds	r1, #1
 8009d6e:	428e      	cmp	r6, r1
 8009d70:	5462      	strb	r2, [r4, r1]
 8009d72:	dcfb      	bgt.n	8009d6c <__sccl+0x58>
 8009d74:	1af1      	subs	r1, r6, r3
 8009d76:	3901      	subs	r1, #1
 8009d78:	1c58      	adds	r0, r3, #1
 8009d7a:	42b3      	cmp	r3, r6
 8009d7c:	bfa8      	it	ge
 8009d7e:	2100      	movge	r1, #0
 8009d80:	1843      	adds	r3, r0, r1
 8009d82:	e7e0      	b.n	8009d46 <__sccl+0x32>

08009d84 <_raise_r>:
 8009d84:	291f      	cmp	r1, #31
 8009d86:	b538      	push	{r3, r4, r5, lr}
 8009d88:	4604      	mov	r4, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	d904      	bls.n	8009d98 <_raise_r+0x14>
 8009d8e:	2316      	movs	r3, #22
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	f04f 30ff 	mov.w	r0, #4294967295
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d9a:	b112      	cbz	r2, 8009da2 <_raise_r+0x1e>
 8009d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009da0:	b94b      	cbnz	r3, 8009db6 <_raise_r+0x32>
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 f830 	bl	8009e08 <_getpid_r>
 8009da8:	462a      	mov	r2, r5
 8009daa:	4601      	mov	r1, r0
 8009dac:	4620      	mov	r0, r4
 8009dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009db2:	f000 b817 	b.w	8009de4 <_kill_r>
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d00a      	beq.n	8009dd0 <_raise_r+0x4c>
 8009dba:	1c59      	adds	r1, r3, #1
 8009dbc:	d103      	bne.n	8009dc6 <_raise_r+0x42>
 8009dbe:	2316      	movs	r3, #22
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	e7e7      	b.n	8009d96 <_raise_r+0x12>
 8009dc6:	2400      	movs	r4, #0
 8009dc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dcc:	4628      	mov	r0, r5
 8009dce:	4798      	blx	r3
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	e7e0      	b.n	8009d96 <_raise_r+0x12>

08009dd4 <raise>:
 8009dd4:	4b02      	ldr	r3, [pc, #8]	; (8009de0 <raise+0xc>)
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	f7ff bfd3 	b.w	8009d84 <_raise_r>
 8009dde:	bf00      	nop
 8009de0:	20000040 	.word	0x20000040

08009de4 <_kill_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d07      	ldr	r5, [pc, #28]	; (8009e04 <_kill_r+0x20>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	f7f7 ffc3 	bl	8001d7c <_kill>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d102      	bne.n	8009e00 <_kill_r+0x1c>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	b103      	cbz	r3, 8009e00 <_kill_r+0x1c>
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	20000bac 	.word	0x20000bac

08009e08 <_getpid_r>:
 8009e08:	f7f7 bfb0 	b.w	8001d6c <_getpid>

08009e0c <_strtol_l.constprop.0>:
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e12:	d001      	beq.n	8009e18 <_strtol_l.constprop.0+0xc>
 8009e14:	2b24      	cmp	r3, #36	; 0x24
 8009e16:	d906      	bls.n	8009e26 <_strtol_l.constprop.0+0x1a>
 8009e18:	f7fd f9fa 	bl	8007210 <__errno>
 8009e1c:	2316      	movs	r3, #22
 8009e1e:	6003      	str	r3, [r0, #0]
 8009e20:	2000      	movs	r0, #0
 8009e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f0c <_strtol_l.constprop.0+0x100>
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	462e      	mov	r6, r5
 8009e2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e32:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009e36:	f017 0708 	ands.w	r7, r7, #8
 8009e3a:	d1f7      	bne.n	8009e2c <_strtol_l.constprop.0+0x20>
 8009e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8009e3e:	d132      	bne.n	8009ea6 <_strtol_l.constprop.0+0x9a>
 8009e40:	782c      	ldrb	r4, [r5, #0]
 8009e42:	2701      	movs	r7, #1
 8009e44:	1cb5      	adds	r5, r6, #2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d05b      	beq.n	8009f02 <_strtol_l.constprop.0+0xf6>
 8009e4a:	2b10      	cmp	r3, #16
 8009e4c:	d109      	bne.n	8009e62 <_strtol_l.constprop.0+0x56>
 8009e4e:	2c30      	cmp	r4, #48	; 0x30
 8009e50:	d107      	bne.n	8009e62 <_strtol_l.constprop.0+0x56>
 8009e52:	782c      	ldrb	r4, [r5, #0]
 8009e54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e58:	2c58      	cmp	r4, #88	; 0x58
 8009e5a:	d14d      	bne.n	8009ef8 <_strtol_l.constprop.0+0xec>
 8009e5c:	786c      	ldrb	r4, [r5, #1]
 8009e5e:	2310      	movs	r3, #16
 8009e60:	3502      	adds	r5, #2
 8009e62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e66:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e72:	4666      	mov	r6, ip
 8009e74:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e78:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009e7c:	f1be 0f09 	cmp.w	lr, #9
 8009e80:	d816      	bhi.n	8009eb0 <_strtol_l.constprop.0+0xa4>
 8009e82:	4674      	mov	r4, lr
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	dd24      	ble.n	8009ed2 <_strtol_l.constprop.0+0xc6>
 8009e88:	f1bc 0f00 	cmp.w	ip, #0
 8009e8c:	db1e      	blt.n	8009ecc <_strtol_l.constprop.0+0xc0>
 8009e8e:	45b1      	cmp	r9, r6
 8009e90:	d31c      	bcc.n	8009ecc <_strtol_l.constprop.0+0xc0>
 8009e92:	d101      	bne.n	8009e98 <_strtol_l.constprop.0+0x8c>
 8009e94:	45a2      	cmp	sl, r4
 8009e96:	db19      	blt.n	8009ecc <_strtol_l.constprop.0+0xc0>
 8009e98:	fb06 4603 	mla	r6, r6, r3, r4
 8009e9c:	f04f 0c01 	mov.w	ip, #1
 8009ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ea4:	e7e8      	b.n	8009e78 <_strtol_l.constprop.0+0x6c>
 8009ea6:	2c2b      	cmp	r4, #43	; 0x2b
 8009ea8:	bf04      	itt	eq
 8009eaa:	782c      	ldrbeq	r4, [r5, #0]
 8009eac:	1cb5      	addeq	r5, r6, #2
 8009eae:	e7ca      	b.n	8009e46 <_strtol_l.constprop.0+0x3a>
 8009eb0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009eb4:	f1be 0f19 	cmp.w	lr, #25
 8009eb8:	d801      	bhi.n	8009ebe <_strtol_l.constprop.0+0xb2>
 8009eba:	3c37      	subs	r4, #55	; 0x37
 8009ebc:	e7e2      	b.n	8009e84 <_strtol_l.constprop.0+0x78>
 8009ebe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009ec2:	f1be 0f19 	cmp.w	lr, #25
 8009ec6:	d804      	bhi.n	8009ed2 <_strtol_l.constprop.0+0xc6>
 8009ec8:	3c57      	subs	r4, #87	; 0x57
 8009eca:	e7db      	b.n	8009e84 <_strtol_l.constprop.0+0x78>
 8009ecc:	f04f 3cff 	mov.w	ip, #4294967295
 8009ed0:	e7e6      	b.n	8009ea0 <_strtol_l.constprop.0+0x94>
 8009ed2:	f1bc 0f00 	cmp.w	ip, #0
 8009ed6:	da05      	bge.n	8009ee4 <_strtol_l.constprop.0+0xd8>
 8009ed8:	2322      	movs	r3, #34	; 0x22
 8009eda:	6003      	str	r3, [r0, #0]
 8009edc:	4646      	mov	r6, r8
 8009ede:	b942      	cbnz	r2, 8009ef2 <_strtol_l.constprop.0+0xe6>
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	e79e      	b.n	8009e22 <_strtol_l.constprop.0+0x16>
 8009ee4:	b107      	cbz	r7, 8009ee8 <_strtol_l.constprop.0+0xdc>
 8009ee6:	4276      	negs	r6, r6
 8009ee8:	2a00      	cmp	r2, #0
 8009eea:	d0f9      	beq.n	8009ee0 <_strtol_l.constprop.0+0xd4>
 8009eec:	f1bc 0f00 	cmp.w	ip, #0
 8009ef0:	d000      	beq.n	8009ef4 <_strtol_l.constprop.0+0xe8>
 8009ef2:	1e69      	subs	r1, r5, #1
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	e7f3      	b.n	8009ee0 <_strtol_l.constprop.0+0xd4>
 8009ef8:	2430      	movs	r4, #48	; 0x30
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1b1      	bne.n	8009e62 <_strtol_l.constprop.0+0x56>
 8009efe:	2308      	movs	r3, #8
 8009f00:	e7af      	b.n	8009e62 <_strtol_l.constprop.0+0x56>
 8009f02:	2c30      	cmp	r4, #48	; 0x30
 8009f04:	d0a5      	beq.n	8009e52 <_strtol_l.constprop.0+0x46>
 8009f06:	230a      	movs	r3, #10
 8009f08:	e7ab      	b.n	8009e62 <_strtol_l.constprop.0+0x56>
 8009f0a:	bf00      	nop
 8009f0c:	0800a9c0 	.word	0x0800a9c0

08009f10 <_strtol_r>:
 8009f10:	f7ff bf7c 	b.w	8009e0c <_strtol_l.constprop.0>

08009f14 <__submore>:
 8009f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d11d      	bne.n	8009f60 <__submore+0x4c>
 8009f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f28:	f7fd fdb2 	bl	8007a90 <_malloc_r>
 8009f2c:	b918      	cbnz	r0, 8009f36 <__submore+0x22>
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f3c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009f40:	6360      	str	r0, [r4, #52]	; 0x34
 8009f42:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009f46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009f4a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009f4e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009f52:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009f56:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009f5a:	6020      	str	r0, [r4, #0]
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e7e8      	b.n	8009f32 <__submore+0x1e>
 8009f60:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009f62:	0077      	lsls	r7, r6, #1
 8009f64:	463a      	mov	r2, r7
 8009f66:	f7ff fb6f 	bl	8009648 <_realloc_r>
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d0de      	beq.n	8009f2e <__submore+0x1a>
 8009f70:	eb00 0806 	add.w	r8, r0, r6
 8009f74:	4601      	mov	r1, r0
 8009f76:	4632      	mov	r2, r6
 8009f78:	4640      	mov	r0, r8
 8009f7a:	f7fd fa95 	bl	80074a8 <memcpy>
 8009f7e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009f82:	f8c4 8000 	str.w	r8, [r4]
 8009f86:	e7e9      	b.n	8009f5c <__submore+0x48>

08009f88 <_malloc_usable_size_r>:
 8009f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f8c:	1f18      	subs	r0, r3, #4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bfbc      	itt	lt
 8009f92:	580b      	ldrlt	r3, [r1, r0]
 8009f94:	18c0      	addlt	r0, r0, r3
 8009f96:	4770      	bx	lr

08009f98 <_init>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr

08009fa4 <_fini>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr
