
Iot-Weather-Monitoring_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userconfig   00000000  08040960  08040960  00020120  2**0
                  CONTENTS
  3 .storage      00000000  08043008  08043008  00020120  2**0
                  CONTENTS
  4 .rodata       00000b98  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800ca10  0800ca10  00020120  2**0
                  CONTENTS
  6 .ARM          00000008  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800ca18  0800ca18  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0800ca20  0800ca20  0001ca20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000120  20000000  0800ca28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000f54  20000120  0800cb48  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00014004  20001074  0800cb48  00021074  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020a8a  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c31  00000000  00000000  00040bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001df8  00000000  00000000  00045810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001b90  00000000  00000000  00047608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00030aaf  00000000  00000000  00049198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003007f  00000000  00000000  00079c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114925  00000000  00000000  000a9cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001be5eb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008dac  00000000  00000000  001be63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be60 	.word	0x0800be60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0800be60 	.word	0x0800be60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <__aeabi_ldivmod>:
 8000658:	b97b      	cbnz	r3, 800067a <__aeabi_ldivmod+0x22>
 800065a:	b972      	cbnz	r2, 800067a <__aeabi_ldivmod+0x22>
 800065c:	2900      	cmp	r1, #0
 800065e:	bfbe      	ittt	lt
 8000660:	2000      	movlt	r0, #0
 8000662:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000666:	e006      	blt.n	8000676 <__aeabi_ldivmod+0x1e>
 8000668:	bf08      	it	eq
 800066a:	2800      	cmpeq	r0, #0
 800066c:	bf1c      	itt	ne
 800066e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000672:	f04f 30ff 	movne.w	r0, #4294967295
 8000676:	f000 b9bf 	b.w	80009f8 <__aeabi_idiv0>
 800067a:	f1ad 0c08 	sub.w	ip, sp, #8
 800067e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000682:	2900      	cmp	r1, #0
 8000684:	db09      	blt.n	800069a <__aeabi_ldivmod+0x42>
 8000686:	2b00      	cmp	r3, #0
 8000688:	db1a      	blt.n	80006c0 <__aeabi_ldivmod+0x68>
 800068a:	f000 f84d 	bl	8000728 <__udivmoddi4>
 800068e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000696:	b004      	add	sp, #16
 8000698:	4770      	bx	lr
 800069a:	4240      	negs	r0, r0
 800069c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db1b      	blt.n	80006dc <__aeabi_ldivmod+0x84>
 80006a4:	f000 f840 	bl	8000728 <__udivmoddi4>
 80006a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b0:	b004      	add	sp, #16
 80006b2:	4240      	negs	r0, r0
 80006b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b8:	4252      	negs	r2, r2
 80006ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006be:	4770      	bx	lr
 80006c0:	4252      	negs	r2, r2
 80006c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006c6:	f000 f82f 	bl	8000728 <__udivmoddi4>
 80006ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d2:	b004      	add	sp, #16
 80006d4:	4240      	negs	r0, r0
 80006d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006da:	4770      	bx	lr
 80006dc:	4252      	negs	r2, r2
 80006de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006e2:	f000 f821 	bl	8000728 <__udivmoddi4>
 80006e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ee:	b004      	add	sp, #16
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	4770      	bx	lr

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b974 	b.w	80009f8 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468e      	mov	lr, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14d      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000736:	428a      	cmp	r2, r1
 8000738:	4694      	mov	ip, r2
 800073a:	d969      	bls.n	8000810 <__udivmoddi4+0xe8>
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	b152      	cbz	r2, 8000758 <__udivmoddi4+0x30>
 8000742:	fa01 f302 	lsl.w	r3, r1, r2
 8000746:	f1c2 0120 	rsb	r1, r2, #32
 800074a:	fa20 f101 	lsr.w	r1, r0, r1
 800074e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000752:	ea41 0e03 	orr.w	lr, r1, r3
 8000756:	4094      	lsls	r4, r2
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	0c21      	lsrs	r1, r4, #16
 800075e:	fbbe f6f8 	udiv	r6, lr, r8
 8000762:	fa1f f78c 	uxth.w	r7, ip
 8000766:	fb08 e316 	mls	r3, r8, r6, lr
 800076a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800076e:	fb06 f107 	mul.w	r1, r6, r7
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f106 30ff 	add.w	r0, r6, #4294967295
 800077e:	f080 811f 	bcs.w	80009c0 <__udivmoddi4+0x298>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 811c 	bls.w	80009c0 <__udivmoddi4+0x298>
 8000788:	3e02      	subs	r6, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb00 f707 	mul.w	r7, r0, r7
 80007a0:	42a7      	cmp	r7, r4
 80007a2:	d90a      	bls.n	80007ba <__udivmoddi4+0x92>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ac:	f080 810a 	bcs.w	80009c4 <__udivmoddi4+0x29c>
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	f240 8107 	bls.w	80009c4 <__udivmoddi4+0x29c>
 80007b6:	4464      	add	r4, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007be:	1be4      	subs	r4, r4, r7
 80007c0:	2600      	movs	r6, #0
 80007c2:	b11d      	cbz	r5, 80007cc <__udivmoddi4+0xa4>
 80007c4:	40d4      	lsrs	r4, r2
 80007c6:	2300      	movs	r3, #0
 80007c8:	e9c5 4300 	strd	r4, r3, [r5]
 80007cc:	4631      	mov	r1, r6
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0xc2>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	f000 80ef 	beq.w	80009ba <__udivmoddi4+0x292>
 80007dc:	2600      	movs	r6, #0
 80007de:	e9c5 0100 	strd	r0, r1, [r5]
 80007e2:	4630      	mov	r0, r6
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	fab3 f683 	clz	r6, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d14a      	bne.n	8000888 <__udivmoddi4+0x160>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d302      	bcc.n	80007fc <__udivmoddi4+0xd4>
 80007f6:	4282      	cmp	r2, r0
 80007f8:	f200 80f9 	bhi.w	80009ee <__udivmoddi4+0x2c6>
 80007fc:	1a84      	subs	r4, r0, r2
 80007fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	469e      	mov	lr, r3
 8000806:	2d00      	cmp	r5, #0
 8000808:	d0e0      	beq.n	80007cc <__udivmoddi4+0xa4>
 800080a:	e9c5 4e00 	strd	r4, lr, [r5]
 800080e:	e7dd      	b.n	80007cc <__udivmoddi4+0xa4>
 8000810:	b902      	cbnz	r2, 8000814 <__udivmoddi4+0xec>
 8000812:	deff      	udf	#255	; 0xff
 8000814:	fab2 f282 	clz	r2, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	f040 8092 	bne.w	8000942 <__udivmoddi4+0x21a>
 800081e:	eba1 010c 	sub.w	r1, r1, ip
 8000822:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	2601      	movs	r6, #1
 800082c:	0c20      	lsrs	r0, r4, #16
 800082e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000832:	fb07 1113 	mls	r1, r7, r3, r1
 8000836:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800083a:	fb0e f003 	mul.w	r0, lr, r3
 800083e:	4288      	cmp	r0, r1
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x12c>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f103 38ff 	add.w	r8, r3, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x12a>
 800084c:	4288      	cmp	r0, r1
 800084e:	f200 80cb 	bhi.w	80009e8 <__udivmoddi4+0x2c0>
 8000852:	4643      	mov	r3, r8
 8000854:	1a09      	subs	r1, r1, r0
 8000856:	b2a4      	uxth	r4, r4
 8000858:	fbb1 f0f7 	udiv	r0, r1, r7
 800085c:	fb07 1110 	mls	r1, r7, r0, r1
 8000860:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000864:	fb0e fe00 	mul.w	lr, lr, r0
 8000868:	45a6      	cmp	lr, r4
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x156>
 800086c:	eb1c 0404 	adds.w	r4, ip, r4
 8000870:	f100 31ff 	add.w	r1, r0, #4294967295
 8000874:	d202      	bcs.n	800087c <__udivmoddi4+0x154>
 8000876:	45a6      	cmp	lr, r4
 8000878:	f200 80bb 	bhi.w	80009f2 <__udivmoddi4+0x2ca>
 800087c:	4608      	mov	r0, r1
 800087e:	eba4 040e 	sub.w	r4, r4, lr
 8000882:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000886:	e79c      	b.n	80007c2 <__udivmoddi4+0x9a>
 8000888:	f1c6 0720 	rsb	r7, r6, #32
 800088c:	40b3      	lsls	r3, r6
 800088e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000892:	ea4c 0c03 	orr.w	ip, ip, r3
 8000896:	fa20 f407 	lsr.w	r4, r0, r7
 800089a:	fa01 f306 	lsl.w	r3, r1, r6
 800089e:	431c      	orrs	r4, r3
 80008a0:	40f9      	lsrs	r1, r7
 80008a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008a6:	fa00 f306 	lsl.w	r3, r0, r6
 80008aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ae:	0c20      	lsrs	r0, r4, #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fb09 1118 	mls	r1, r9, r8, r1
 80008b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008bc:	fb08 f00e 	mul.w	r0, r8, lr
 80008c0:	4288      	cmp	r0, r1
 80008c2:	fa02 f206 	lsl.w	r2, r2, r6
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b8>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d0:	f080 8088 	bcs.w	80009e4 <__udivmoddi4+0x2bc>
 80008d4:	4288      	cmp	r0, r1
 80008d6:	f240 8085 	bls.w	80009e4 <__udivmoddi4+0x2bc>
 80008da:	f1a8 0802 	sub.w	r8, r8, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1a09      	subs	r1, r1, r0
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008e8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f4:	458e      	cmp	lr, r1
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1e2>
 80008f8:	eb1c 0101 	adds.w	r1, ip, r1
 80008fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000900:	d26c      	bcs.n	80009dc <__udivmoddi4+0x2b4>
 8000902:	458e      	cmp	lr, r1
 8000904:	d96a      	bls.n	80009dc <__udivmoddi4+0x2b4>
 8000906:	3802      	subs	r0, #2
 8000908:	4461      	add	r1, ip
 800090a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800090e:	fba0 9402 	umull	r9, r4, r0, r2
 8000912:	eba1 010e 	sub.w	r1, r1, lr
 8000916:	42a1      	cmp	r1, r4
 8000918:	46c8      	mov	r8, r9
 800091a:	46a6      	mov	lr, r4
 800091c:	d356      	bcc.n	80009cc <__udivmoddi4+0x2a4>
 800091e:	d053      	beq.n	80009c8 <__udivmoddi4+0x2a0>
 8000920:	b15d      	cbz	r5, 800093a <__udivmoddi4+0x212>
 8000922:	ebb3 0208 	subs.w	r2, r3, r8
 8000926:	eb61 010e 	sbc.w	r1, r1, lr
 800092a:	fa01 f707 	lsl.w	r7, r1, r7
 800092e:	fa22 f306 	lsr.w	r3, r2, r6
 8000932:	40f1      	lsrs	r1, r6
 8000934:	431f      	orrs	r7, r3
 8000936:	e9c5 7100 	strd	r7, r1, [r5]
 800093a:	2600      	movs	r6, #0
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	f1c2 0320 	rsb	r3, r2, #32
 8000946:	40d8      	lsrs	r0, r3
 8000948:	fa0c fc02 	lsl.w	ip, ip, r2
 800094c:	fa21 f303 	lsr.w	r3, r1, r3
 8000950:	4091      	lsls	r1, r2
 8000952:	4301      	orrs	r1, r0
 8000954:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000958:	fa1f fe8c 	uxth.w	lr, ip
 800095c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000960:	fb07 3610 	mls	r6, r7, r0, r3
 8000964:	0c0b      	lsrs	r3, r1, #16
 8000966:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800096a:	fb00 f60e 	mul.w	r6, r0, lr
 800096e:	429e      	cmp	r6, r3
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x260>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 38ff 	add.w	r8, r0, #4294967295
 800097e:	d22f      	bcs.n	80009e0 <__udivmoddi4+0x2b8>
 8000980:	429e      	cmp	r6, r3
 8000982:	d92d      	bls.n	80009e0 <__udivmoddi4+0x2b8>
 8000984:	3802      	subs	r0, #2
 8000986:	4463      	add	r3, ip
 8000988:	1b9b      	subs	r3, r3, r6
 800098a:	b289      	uxth	r1, r1
 800098c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000990:	fb07 3316 	mls	r3, r7, r6, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb06 f30e 	mul.w	r3, r6, lr
 800099c:	428b      	cmp	r3, r1
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x28a>
 80009a0:	eb1c 0101 	adds.w	r1, ip, r1
 80009a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009a8:	d216      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d914      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 80009ae:	3e02      	subs	r6, #2
 80009b0:	4461      	add	r1, ip
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009b8:	e738      	b.n	800082c <__udivmoddi4+0x104>
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e705      	b.n	80007cc <__udivmoddi4+0xa4>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e3      	b.n	800078c <__udivmoddi4+0x64>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6f8      	b.n	80007ba <__udivmoddi4+0x92>
 80009c8:	454b      	cmp	r3, r9
 80009ca:	d2a9      	bcs.n	8000920 <__udivmoddi4+0x1f8>
 80009cc:	ebb9 0802 	subs.w	r8, r9, r2
 80009d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7a3      	b.n	8000920 <__udivmoddi4+0x1f8>
 80009d8:	4646      	mov	r6, r8
 80009da:	e7ea      	b.n	80009b2 <__udivmoddi4+0x28a>
 80009dc:	4620      	mov	r0, r4
 80009de:	e794      	b.n	800090a <__udivmoddi4+0x1e2>
 80009e0:	4640      	mov	r0, r8
 80009e2:	e7d1      	b.n	8000988 <__udivmoddi4+0x260>
 80009e4:	46d0      	mov	r8, sl
 80009e6:	e77b      	b.n	80008e0 <__udivmoddi4+0x1b8>
 80009e8:	3b02      	subs	r3, #2
 80009ea:	4461      	add	r1, ip
 80009ec:	e732      	b.n	8000854 <__udivmoddi4+0x12c>
 80009ee:	4630      	mov	r0, r6
 80009f0:	e709      	b.n	8000806 <__udivmoddi4+0xde>
 80009f2:	4464      	add	r4, ip
 80009f4:	3802      	subs	r0, #2
 80009f6:	e742      	b.n	800087e <__udivmoddi4+0x156>

080009f8 <__aeabi_idiv0>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <TimerCallback>:
void _FlashWriteAppUserConfig(void);
void _InitUserConfig(void);


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void TimerCallback(TIM_HandleTypeDef *htim) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	// Measurement collection
	TempSensor_GetData();
 8000a04:	f000 faf0 	bl	8000fe8 <TempSensor_GetData>
	HumiditySensor_GetData();
 8000a08:	f000 faa6 	bl	8000f58 <HumiditySensor_GetData>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <AplusAPP_Init>:

void AplusAPP_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	// Initialize the debug log
	Debug_InitLog();
 8000a1a:	f000 f9c1 	bl	8000da0 <Debug_InitLog>
	printf("Debug log initialized\r\n");
 8000a1e:	482b      	ldr	r0, [pc, #172]	; (8000acc <AplusAPP_Init+0xb8>)
 8000a20:	f009 f84a 	bl	8009ab8 <puts>

	// Capture reset cause
	/*ResetCause_t reset_cause =*/ Get_Reset_Cause();
 8000a24:	f000 f8a0 	bl	8000b68 <Get_Reset_Cause>

	// Initialize the watchdog timer
	Watchdog_Init();
 8000a28:	f000 fc14 	bl	8001254 <Watchdog_Init>
	printf("Watchdog initialized\r\n");
 8000a2c:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <AplusAPP_Init+0xbc>)
 8000a2e:	f009 f843 	bl	8009ab8 <puts>

	// Initialize the RTC.
	Timestamp_Init();
 8000a32:	f000 fb71 	bl	8001118 <Timestamp_Init>
	printf("RTC initialized\r\n");
 8000a36:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <AplusAPP_Init+0xc0>)
 8000a38:	f009 f83e 	bl	8009ab8 <puts>

	uint32_t new_timestamp = 1680554930;
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <AplusAPP_Init+0xc4>)
 8000a3e:	60fb      	str	r3, [r7, #12]
	Timestamp_SetTimestamp(new_timestamp);
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f000 fb93 	bl	800116c <Timestamp_SetTimestamp>

	// Initialize flash - where user configuration is stored
	Flash_Init();
 8000a46:	f000 f9d7 	bl	8000df8 <Flash_Init>
	printf("Flash initialized\r\n");
 8000a4a:	4824      	ldr	r0, [pc, #144]	; (8000adc <AplusAPP_Init+0xc8>)
 8000a4c:	f009 f834 	bl	8009ab8 <puts>

	// Read user configuration from flash
	_FlashReadAppUserConfig();
 8000a50:	f000 f8f4 	bl	8000c3c <_FlashReadAppUserConfig>
	printf("User configuration retrieved\r\n");
 8000a54:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <AplusAPP_Init+0xcc>)
 8000a56:	f009 f82f 	bl	8009ab8 <puts>
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <AplusAPP_Init+0xd0>)
 8000a5c:	685b      	ldr	r3, [r3, #4]

	 // Set current time from the last timestamp stored in flash.
	uint32_t timestamp;
	memcpy(&timestamp, &g_stUserConfig.au8Timestamp[0], 4);
 8000a5e:	607b      	str	r3, [r7, #4]
	if(timestamp>0) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <AplusAPP_Init+0x5a>
		Timestamp_SetTimestamp(timestamp);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fb7f 	bl	800116c <Timestamp_SetTimestamp>
	}
	printf("Timestamp Initialized\r\n");
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <AplusAPP_Init+0xd4>)
 8000a70:	f009 f822 	bl	8009ab8 <puts>

	int8_t s8Status = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	72fb      	strb	r3, [r7, #11]

	s8Status = Wifi_Init();
 8000a78:	f000 fc10 	bl	800129c <Wifi_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	72fb      	strb	r3, [r7, #11]
	if (s8Status!=0) {
 8000a80:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <AplusAPP_Init+0x7c>
		printf("Wifi failed to initialize.\r\n");
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <AplusAPP_Init+0xd8>)
 8000a8a:	f009 f815 	bl	8009ab8 <puts>
		while(1) {}
 8000a8e:	e7fe      	b.n	8000a8e <AplusAPP_Init+0x7a>
	}
	printf("Wifi initialized.\r\n");
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <AplusAPP_Init+0xdc>)
 8000a92:	f009 f811 	bl	8009ab8 <puts>

	TempSensor_Init();
 8000a96:	f000 faa1 	bl	8000fdc <TempSensor_Init>
	printf("Temp sensor initialize.\r\n");
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <AplusAPP_Init+0xe0>)
 8000a9c:	f009 f80c 	bl	8009ab8 <puts>

	HumiditySensor_Init();
 8000aa0:	f000 fa54 	bl	8000f4c <HumiditySensor_Init>
	printf("Humidity sensor initialize.\r\n");
 8000aa4:	4814      	ldr	r0, [pc, #80]	; (8000af8 <AplusAPP_Init+0xe4>)
 8000aa6:	f009 f807 	bl	8009ab8 <puts>

	DataQueue_Init();
 8000aaa:	f000 f91b 	bl	8000ce4 <DataQueue_Init>
	printf("Storage queue initialize.\r\n");
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <AplusAPP_Init+0xe8>)
 8000ab0:	f009 f802 	bl	8009ab8 <puts>

	Timer_Init();
 8000ab4:	f000 fada 	bl	800106c <Timer_Init>
	printf("Timer initialize.\r\n");
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <AplusAPP_Init+0xec>)
 8000aba:	f008 fffd 	bl	8009ab8 <puts>

	printf("Application init complete\r\n");
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <AplusAPP_Init+0xf0>)
 8000ac0:	f008 fffa 	bl	8009ab8 <puts>
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	0800be78 	.word	0x0800be78
 8000ad0:	0800be90 	.word	0x0800be90
 8000ad4:	0800bea8 	.word	0x0800bea8
 8000ad8:	642b3bb2 	.word	0x642b3bb2
 8000adc:	0800bebc 	.word	0x0800bebc
 8000ae0:	0800bed0 	.word	0x0800bed0
 8000ae4:	2000013c 	.word	0x2000013c
 8000ae8:	0800bef0 	.word	0x0800bef0
 8000aec:	0800bf08 	.word	0x0800bf08
 8000af0:	0800bf24 	.word	0x0800bf24
 8000af4:	0800bf38 	.word	0x0800bf38
 8000af8:	0800bf54 	.word	0x0800bf54
 8000afc:	0800bf74 	.word	0x0800bf74
 8000b00:	0800bf90 	.word	0x0800bf90
 8000b04:	0800bfa4 	.word	0x0800bfa4

08000b08 <AplusAPP_Entry>:

void AplusAPP_Entry(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	static bool s_fCheckLink = true;

	printf("Entering main state machine\r\n");
 8000b0e:	4812      	ldr	r0, [pc, #72]	; (8000b58 <AplusAPP_Entry+0x50>)
 8000b10:	f008 ffd2 	bl	8009ab8 <puts>

	while(1) {
		// Feed the watchdog every time through this callback - if not, the device will reset after 8 seconds
		Watchdog_Feed();
 8000b14:	f000 fbb8 	bl	8001288 <Watchdog_Feed>

		if (s_fCheckLink==true) {
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <AplusAPP_Entry+0x54>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d011      	beq.n	8000b44 <AplusAPP_Entry+0x3c>
			// Init vars.
			int8_t s8Status;

			// Attempt connect to stored SSID.
			s8Status = Wifi_Connect();
 8000b20:	f000 fbd6 	bl	80012d0 <Wifi_Connect>
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
			if (s8Status!=0) {
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <AplusAPP_Entry+0x30>
				printf("Wifi to connect.\r\n");
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <AplusAPP_Entry+0x58>)
 8000b32:	f008 ffc1 	bl	8009ab8 <puts>
				while(1) {}
 8000b36:	e7fe      	b.n	8000b36 <AplusAPP_Entry+0x2e>
			}
			printf("Wifi connected.\r\n");
 8000b38:	480a      	ldr	r0, [pc, #40]	; (8000b64 <AplusAPP_Entry+0x5c>)
 8000b3a:	f008 ffbd 	bl	8009ab8 <puts>
			s_fCheckLink = false;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <AplusAPP_Entry+0x54>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
		}

		// Determine if it is time to send to the server
		bool fTimeToSend = false;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71bb      	strb	r3, [r7, #6]

		if(DataQueue_GetCount() != 0) { fTimeToSend = true; }
 8000b48:	f000 f90c 	bl	8000d64 <DataQueue_GetCount>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0e0      	beq.n	8000b14 <AplusAPP_Entry+0xc>
 8000b52:	2301      	movs	r3, #1
 8000b54:	71bb      	strb	r3, [r7, #6]
	while(1) {
 8000b56:	e7dd      	b.n	8000b14 <AplusAPP_Entry+0xc>
 8000b58:	0800bfc0 	.word	0x0800bfc0
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	0800bfe0 	.word	0x0800bfe0
 8000b64:	0800bff4 	.word	0x0800bff4

08000b68 <Get_Reset_Cause>:
		}

	}
}

ResetCause_t Get_Reset_Cause(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
    ResetCause_t cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) {
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <Get_Reset_Cause+0xb4>)
 8000b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da05      	bge.n	8000b84 <Get_Reset_Cause+0x1c>
        cause = RESET_CAUSE_LOW_POWER_RESET;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Low Power Reset\r\n");
 8000b7c:	4828      	ldr	r0, [pc, #160]	; (8000c20 <Get_Reset_Cause+0xb8>)
 8000b7e:	f008 ff9b 	bl	8009ab8 <puts>
 8000b82:	e045      	b.n	8000c10 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) {
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <Get_Reset_Cause+0xb4>)
 8000b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <Get_Reset_Cause+0x36>
        cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8000b92:	2302      	movs	r3, #2
 8000b94:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Window Watchdog Reset\r\n");
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <Get_Reset_Cause+0xbc>)
 8000b98:	f008 ff8e 	bl	8009ab8 <puts>
 8000b9c:	e038      	b.n	8000c10 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) {
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <Get_Reset_Cause+0xb4>)
 8000ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <Get_Reset_Cause+0x50>
        cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8000bac:	2303      	movs	r3, #3
 8000bae:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Independent Watchdog Reset\r\n");
 8000bb0:	481d      	ldr	r0, [pc, #116]	; (8000c28 <Get_Reset_Cause+0xc0>)
 8000bb2:	f008 ff81 	bl	8009ab8 <puts>
 8000bb6:	e02b      	b.n	8000c10 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) {
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <Get_Reset_Cause+0xb4>)
 8000bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d005      	beq.n	8000bd2 <Get_Reset_Cause+0x6a>
        cause = RESET_CAUSE_SOFTWARE_RESET;
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Software Reset\r\n");
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <Get_Reset_Cause+0xc4>)
 8000bcc:	f008 ff74 	bl	8009ab8 <puts>
 8000bd0:	e01e      	b.n	8000c10 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) {
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <Get_Reset_Cause+0xb4>)
 8000bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d005      	beq.n	8000bec <Get_Reset_Cause+0x84>
        cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8000be0:	2306      	movs	r3, #6
 8000be2:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: External Reset Pin Reset\r\n");
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <Get_Reset_Cause+0xc8>)
 8000be6:	f008 ff67 	bl	8009ab8 <puts>
 8000bea:	e011      	b.n	8000c10 <Get_Reset_Cause+0xa8>
    } else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) {
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <Get_Reset_Cause+0xb4>)
 8000bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d005      	beq.n	8000c06 <Get_Reset_Cause+0x9e>
        cause = RESET_CAUSE_BROWN_OUT_RESET;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Brown Out Reset\r\n");
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <Get_Reset_Cause+0xcc>)
 8000c00:	f008 ff5a 	bl	8009ab8 <puts>
 8000c04:	e004      	b.n	8000c10 <Get_Reset_Cause+0xa8>
    } else {
        cause = RESET_CAUSE_UNKNOWN;
 8000c06:	2300      	movs	r3, #0
 8000c08:	71fb      	strb	r3, [r7, #7]
        printf("Reset Cause: Unknown\r\n");
 8000c0a:	480b      	ldr	r0, [pc, #44]	; (8000c38 <Get_Reset_Cause+0xd0>)
 8000c0c:	f008 ff54 	bl	8009ab8 <puts>
    }

    return cause;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	0800c008 	.word	0x0800c008
 8000c24:	0800c028 	.word	0x0800c028
 8000c28:	0800c04c 	.word	0x0800c04c
 8000c2c:	0800c078 	.word	0x0800c078
 8000c30:	0800c098 	.word	0x0800c098
 8000c34:	0800c0c0 	.word	0x0800c0c0
 8000c38:	0800c0e0 	.word	0x0800c0e0

08000c3c <_FlashReadAppUserConfig>:

void _FlashReadAppUserConfig(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	Flash_ReadFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_stUserConfig, sizeof(AplusUserConfig));
 8000c40:	2208      	movs	r2, #8
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <_FlashReadAppUserConfig+0x28>)
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <_FlashReadAppUserConfig+0x2c>)
 8000c46:	f000 f8de 	bl	8000e06 <Flash_ReadFlash>

	if(g_stUserConfig.u16InitCode!=USER_CONFIG_INIT_CODE) {
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <_FlashReadAppUserConfig+0x28>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	f645 225a 	movw	r2, #23130	; 0x5a5a
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d004      	beq.n	8000c60 <_FlashReadAppUserConfig+0x24>
		printf("Init User Config\r\n");
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <_FlashReadAppUserConfig+0x30>)
 8000c58:	f008 ff2e 	bl	8009ab8 <puts>
		_InitUserConfig();
 8000c5c:	f000 f82e 	bl	8000cbc <_InitUserConfig>
	}
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000013c 	.word	0x2000013c
 8000c68:	08040960 	.word	0x08040960
 8000c6c:	0800c0f8 	.word	0x0800c0f8

08000c70 <_FlashWriteAppUserConfig>:

void _FlashWriteAppUserConfig(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	// Set timestamp
	uint32_t timestamp;
	Timestamp_GetTimestamp(&timestamp);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fab5 	bl	80011e8 <Timestamp_GetTimestamp>
 8000c7e:	687b      	ldr	r3, [r7, #4]
	memcpy(&g_stUserConfig.au8Timestamp[0], &timestamp, 4);
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <_FlashWriteAppUserConfig+0x3c>)
 8000c82:	6053      	str	r3, [r2, #4]

	printf("Erase Flash\r\n");
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <_FlashWriteAppUserConfig+0x40>)
 8000c86:	f008 ff17 	bl	8009ab8 <puts>
	Flash_EraseFlash(USER_CONFIG_SPACE_ORIGIN, USER_CONFIG_SPACE_SIZE_BYTES);
 8000c8a:	f242 0148 	movw	r1, #8264	; 0x2048
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <_FlashWriteAppUserConfig+0x44>)
 8000c90:	f000 f8e8 	bl	8000e64 <Flash_EraseFlash>

	printf("Write Flash\r\n");
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <_FlashWriteAppUserConfig+0x48>)
 8000c96:	f008 ff0f 	bl	8009ab8 <puts>
	Flash_WriteFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_stUserConfig, sizeof(AplusUserConfig));
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	4903      	ldr	r1, [pc, #12]	; (8000cac <_FlashWriteAppUserConfig+0x3c>)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <_FlashWriteAppUserConfig+0x44>)
 8000ca0:	f000 f910 	bl	8000ec4 <Flash_WriteFlash>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000013c 	.word	0x2000013c
 8000cb0:	0800c10c 	.word	0x0800c10c
 8000cb4:	08040960 	.word	0x08040960
 8000cb8:	0800c11c 	.word	0x0800c11c

08000cbc <_InitUserConfig>:

void _InitUserConfig(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	memset(&g_stUserConfig, 0, sizeof(AplusUserConfig));
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <_InitUserConfig+0x24>)
 8000cc6:	f008 fb2f 	bl	8009328 <memset>

	g_stUserConfig.u16InitCode = USER_CONFIG_INIT_CODE;
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <_InitUserConfig+0x24>)
 8000ccc:	f645 225a 	movw	r2, #23130	; 0x5a5a
 8000cd0:	801a      	strh	r2, [r3, #0]
	g_stUserConfig.u16CfgSize  = sizeof(AplusUserConfig);
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <_InitUserConfig+0x24>)
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	805a      	strh	r2, [r3, #2]

	_FlashWriteAppUserConfig();
 8000cd8:	f7ff ffca 	bl	8000c70 <_FlashWriteAppUserConfig>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000013c 	.word	0x2000013c

08000ce4 <DataQueue_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void DataQueue_Init(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	// Clear the contents of the reading queue
	memset(&g_acReadingBuffer[0], 0, READING_BUFF_NUM_BYTES);
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	2100      	movs	r1, #0
 8000cec:	4803      	ldr	r0, [pc, #12]	; (8000cfc <DataQueue_Init+0x18>)
 8000cee:	f008 fb1b 	bl	8009328 <memset>
	s_u16QueueCount = 0;
 8000cf2:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <DataQueue_Init+0x1c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	801a      	strh	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000148 	.word	0x20000148
 8000d00:	20000144 	.word	0x20000144

08000d04 <DataQueue_Add>:

void DataQueue_Add(eDataType eType, uint8_t u8DataValue, uint8_t u8DataFloat) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	4613      	mov	r3, r2
 8000d14:	717b      	strb	r3, [r7, #5]
	// Init vars.
	tsData tsTempData;

	// Set timestamp
	uint32_t timestamp;
	Timestamp_GetTimestamp(&timestamp);
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fa64 	bl	80011e8 <Timestamp_GetTimestamp>

	// Set data.
	tsTempData.u32Timestamp = timestamp;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	617b      	str	r3, [r7, #20]
	tsTempData.eType = eType;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	743b      	strb	r3, [r7, #16]
	tsTempData.u8DataValue = u8DataValue;
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	747b      	strb	r3, [r7, #17]
	tsTempData.u8DataFloat = u8DataFloat;
 8000d2c:	797b      	ldrb	r3, [r7, #5]
 8000d2e:	74bb      	strb	r3, [r7, #18]

	// Store the structure.
	memcpy(&g_acReadingBuffer[s_u16QueueCount], &tsTempData, sizeof(tsData));
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <DataQueue_Add+0x58>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <DataQueue_Add+0x5c>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	f107 0110 	add.w	r1, r7, #16
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4618      	mov	r0, r3
 8000d42:	f008 fae3 	bl	800930c <memcpy>

	// Increase Queue index.
	s_u16QueueCount++;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <DataQueue_Add+0x58>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <DataQueue_Add+0x58>)
 8000d50:	801a      	strh	r2, [r3, #0]
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000144 	.word	0x20000144
 8000d60:	20000148 	.word	0x20000148

08000d64 <DataQueue_GetCount>:
uint16_t DataQueue_GetCount(void) {
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	return s_u16QueueCount;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <DataQueue_GetCount+0x14>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000144 	.word	0x20000144

08000d7c <__io_putchar>:

/** VARIABLES *****************************************************************/


/** LOCAL (PRIVATE) STRUCTURES AND ENUMERATIONS *******************************/
PUTCHAR_PROTOTYPE {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <__io_putchar+0x20>)
 8000d8e:	f007 fc4b 	bl	8008628 <HAL_UART_Transmit>

  return ch;
 8000d92:	687b      	ldr	r3, [r7, #4]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000fac 	.word	0x20000fac

08000da0 <Debug_InitLog>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Debug_InitLog() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	/* Initialize all configured peripherals */
	  hDiscoUart.Instance = DISCOVERY_COM1;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <Debug_InitLog+0x50>)
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <Debug_InitLog+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
	  hDiscoUart.Init.BaudRate = 115200;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <Debug_InitLog+0x50>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
	  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <Debug_InitLog+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
	  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <Debug_InitLog+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
	  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <Debug_InitLog+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
	  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <Debug_InitLog+0x50>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
	  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <Debug_InitLog+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
	  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <Debug_InitLog+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
	  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <Debug_InitLog+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
	  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <Debug_InitLog+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

	  BSP_COM_Init(COM1, &hDiscoUart);
 8000de2:	4903      	ldr	r1, [pc, #12]	; (8000df0 <Debug_InitLog+0x50>)
 8000de4:	2000      	movs	r0, #0
 8000de6:	f001 fbdf 	bl	80025a8 <BSP_COM_Init>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000fac 	.word	0x20000fac
 8000df4:	40013800 	.word	0x40013800

08000df8 <Flash_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Flash_Init(void) {
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <Flash_ReadFlash>:

void Flash_ReadFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b088      	sub	sp, #32
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint64_t data;

    for (i = 0; i < size; i += 8) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e01b      	b.n	8000e50 <Flash_ReadFlash+0x4a>
        // Read 8 bytes (double word) from the flash memory
        data = *(__IO uint64_t *)(byteAddress + i);
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Copy the data to the buffer
        memcpy(&buffer[i], &data, (i + 8 <= size) ? 8 : (size - i));
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	18d0      	adds	r0, r2, r3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d203      	bcs.n	8000e3e <Flash_ReadFlash+0x38>
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	e000      	b.n	8000e40 <Flash_ReadFlash+0x3a>
 8000e3e:	2308      	movs	r3, #8
 8000e40:	f107 0110 	add.w	r1, r7, #16
 8000e44:	461a      	mov	r2, r3
 8000e46:	f008 fa61 	bl	800930c <memcpy>
    for (i = 0; i < size; i += 8) {
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3308      	adds	r3, #8
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d3df      	bcc.n	8000e18 <Flash_ReadFlash+0x12>
    }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <Flash_EraseFlash>:


void Flash_EraseFlash(uint32_t byteAddress, uint32_t size) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	uint32_t pageError = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef eraseInitStruct;

	// Calculate the start page number
	uint32_t startPage = (byteAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e78:	0adb      	lsrs	r3, r3, #11
 8000e7a:	61fb      	str	r3, [r7, #28]

	// Unlock the Flash memory
	HAL_FLASH_Unlock();
 8000e7c:	f002 f998 	bl	80031b0 <HAL_FLASH_Unlock>

	// Clear any existing error flags
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <Flash_EraseFlash+0x5c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <Flash_EraseFlash+0x5c>)
 8000e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <Flash_EraseFlash+0x5c>)
 8000e8e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000e92:	611a      	str	r2, [r3, #16]

	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
	eraseInitStruct.Page = startPage;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	613b      	str	r3, [r7, #16]
	eraseInitStruct.NbPages = (size/FLASH_PAGE_SIZE);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	0adb      	lsrs	r3, r3, #11
 8000ea0:	617b      	str	r3, [r7, #20]

	if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 8000ea2:	f107 0218 	add.w	r2, r7, #24
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 fa63 	bl	8003378 <HAL_FLASHEx_Erase>
		// Handle erase error
	}

	// Lock the Flash memory
	HAL_FLASH_Lock();
 8000eb2:	f002 f99f 	bl	80031f4 <HAL_FLASH_Lock>
}
 8000eb6:	bf00      	nop
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <Flash_WriteFlash>:

void Flash_WriteFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint64_t data;

    // Unlock the Flash memory
    HAL_FLASH_Unlock();
 8000ed0:	f002 f96e 	bl	80031b0 <HAL_FLASH_Unlock>

    // Clear any existing error flags
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <Flash_WriteFlash+0x84>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <Flash_WriteFlash+0x84>)
 8000eda:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <Flash_WriteFlash+0x84>)
 8000ee2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000ee6:	611a      	str	r2, [r3, #16]

    for (i = 0; i < size; i += 8) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	e022      	b.n	8000f34 <Flash_WriteFlash+0x70>
        // Zero the data variable to ensure proper padding
        data = 0;
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Read up to 8 bytes from the buffer
        memcpy(&data, &buffer[i], (i + 8 <= size) ? 8 : (size - i));
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	18d1      	adds	r1, r2, r3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	3308      	adds	r3, #8
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d203      	bcs.n	8000f12 <Flash_WriteFlash+0x4e>
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	e000      	b.n	8000f14 <Flash_WriteFlash+0x50>
 8000f12:	2308      	movs	r3, #8
 8000f14:	f107 0010 	add.w	r0, r7, #16
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f008 f9f7 	bl	800930c <memcpy>

        // Write the double word to the flash memory
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, byteAddress + i, data) != HAL_OK) {
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	18d1      	adds	r1, r2, r3
 8000f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f002 f8d5 	bl	80030d8 <HAL_FLASH_Program>
    for (i = 0; i < size; i += 8) {
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3308      	adds	r3, #8
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3d8      	bcc.n	8000eee <Flash_WriteFlash+0x2a>
            // Handle write error
        }
    }

    // Lock the Flash memory
    HAL_FLASH_Lock();
 8000f3c:	f002 f95a 	bl	80031f4 <HAL_FLASH_Lock>
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40022000 	.word	0x40022000

08000f4c <HumiditySensor_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void HumiditySensor_Init(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	BSP_HSENSOR_Init();
 8000f50:	f001 fce6 	bl	8002920 <BSP_HSENSOR_Init>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HumiditySensor_GetData>:

void HumiditySensor_GetData(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
	float hum_value = 0;  // Measured temperature value
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
	hum_value = BSP_HSENSOR_ReadHumidity();
 8000f64:	f001 fcfc 	bl	8002960 <BSP_HSENSOR_ReadHumidity>
 8000f68:	ed87 0a05 	vstr	s0, [r7, #20]
	uint8_t humInt1 = hum_value;
 8000f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f74:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f78:	793b      	ldrb	r3, [r7, #4]
 8000f7a:	74fb      	strb	r3, [r7, #19]
	float humFrac = hum_value - humInt1;
 8000f7c:	7cfb      	ldrb	r3, [r7, #19]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f86:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t humInt2 = trunc(humFrac * 100);
 8000f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f96:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fd8 <HumiditySensor_GetData+0x80>
 8000f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9e:	ee17 0a90 	vmov	r0, s15
 8000fa2:	f7ff fae1 	bl	8000568 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	ec43 2b10 	vmov	d0, r2, r3
 8000fae:	f00a ff25 	bl	800bdfc <trunc>
 8000fb2:	ec53 2b10 	vmov	r2, r3, d0
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fb2d 	bl	8000618 <__aeabi_d2uiz>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	72fb      	strb	r3, [r7, #11]

	DataQueue_Add(DATA_TYPE_HUM, humInt1, humInt2);
 8000fc2:	7afa      	ldrb	r2, [r7, #11]
 8000fc4:	7cfb      	ldrb	r3, [r7, #19]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff fe9b 	bl	8000d04 <DataQueue_Add>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	42c80000 	.word	0x42c80000

08000fdc <TempSensor_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void TempSensor_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	BSP_TSENSOR_Init();
 8000fe0:	f001 fccc 	bl	800297c <BSP_TSENSOR_Init>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <TempSensor_GetData>:

void TempSensor_GetData(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
	float temp_value = 0;  // Measured temperature value
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	temp_value = BSP_TSENSOR_ReadTemp();
 8000ff4:	f001 fcde 	bl	80029b4 <BSP_TSENSOR_ReadTemp>
 8000ff8:	ed87 0a05 	vstr	s0, [r7, #20]
	uint8_t tmpInt1 = temp_value;
 8000ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001004:	edc7 7a01 	vstr	s15, [r7, #4]
 8001008:	793b      	ldrb	r3, [r7, #4]
 800100a:	74fb      	strb	r3, [r7, #19]
	float tmpFrac = temp_value - tmpInt1;
 800100c:	7cfb      	ldrb	r3, [r7, #19]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ed97 7a05 	vldr	s14, [r7, #20]
 800101a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t tmpInt2 = trunc(tmpFrac * 100);
 8001022:	edd7 7a03 	vldr	s15, [r7, #12]
 8001026:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001068 <TempSensor_GetData+0x80>
 800102a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102e:	ee17 0a90 	vmov	r0, s15
 8001032:	f7ff fa99 	bl	8000568 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	ec43 2b10 	vmov	d0, r2, r3
 800103e:	f00a fedd 	bl	800bdfc <trunc>
 8001042:	ec53 2b10 	vmov	r2, r3, d0
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fae5 	bl	8000618 <__aeabi_d2uiz>
 800104e:	4603      	mov	r3, r0
 8001050:	72fb      	strb	r3, [r7, #11]

	DataQueue_Add(DATA_TYPE_TEMP, tmpInt1, tmpInt2);
 8001052:	7afa      	ldrb	r2, [r7, #11]
 8001054:	7cfb      	ldrb	r3, [r7, #19]
 8001056:	4619      	mov	r1, r3
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fe53 	bl	8000d04 <DataQueue_Add>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	42c80000 	.word	0x42c80000

0800106c <Timer_Init>:
/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/

int16_t Timer_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE(); // Enable the clock for the TIM2 peripheral
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <Timer_Init+0x70>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a19      	ldr	r2, [pc, #100]	; (80010dc <Timer_Init+0x70>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <Timer_Init+0x70>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

	htim.Instance = TIM2;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <Timer_Init+0x74>)
 800108c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001090:	601a      	str	r2, [r3, #0]
	htim.Init.Prescaler = 8000 - 1; // 80 MHz / 8000 = 10 kHz
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <Timer_Init+0x74>)
 8001094:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001098:	605a      	str	r2, [r3, #4]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <Timer_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
	htim.Init.Period = 10000 - 1; // 10 kHz / 10000 = 1 Hz
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <Timer_Init+0x74>)
 80010a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80010a6:	60da      	str	r2, [r3, #12]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <Timer_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <Timer_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim); // Initialize the timer
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <Timer_Init+0x74>)
 80010b6:	f006 ff8e 	bl	8007fd6 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim); // Start the timer with interrupt
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <Timer_Init+0x74>)
 80010bc:	f006 ffec 	bl	8008098 <HAL_TIM_Base_Start_IT>

	// Enable the timer interrupt and set its priority
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	201c      	movs	r0, #28
 80010c6:	f001 ff90 	bl	8002fea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ca:	201c      	movs	r0, #28
 80010cc:	f001 ffa9 	bl	8003022 <HAL_NVIC_EnableIRQ>
    return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	20000548 	.word	0x20000548

080010e4 <TIM2_IRQHandler>:


/** LOCAL (PRIVATE) FUNCTION IMPLEMENTATIONS **********************************/
void TIM2_IRQHandler(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM2_IRQHandler+0x10>)
 80010ea:	f007 f845 	bl	8008178 <HAL_TIM_IRQHandler>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000548 	.word	0x20000548

080010f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001108:	d102      	bne.n	8001110 <HAL_TIM_PeriodElapsedCallback+0x18>
        TimerCallback(htim);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fc76 	bl	80009fc <TimerCallback>
    }
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <Timestamp_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void Timestamp_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	// Enable the RTC Clock
	__HAL_RCC_RTC_ENABLE();
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <Timestamp_Init+0x48>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <Timestamp_Init+0x48>)
 8001124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Configure the RTC
	hrtc.Instance = RTC;
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <Timestamp_Init+0x4c>)
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <Timestamp_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <Timestamp_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <Timestamp_Init+0x4c>)
 800113a:	227f      	movs	r2, #127	; 0x7f
 800113c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <Timestamp_Init+0x4c>)
 8001140:	22ff      	movs	r2, #255	; 0xff
 8001142:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <Timestamp_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <Timestamp_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <Timestamp_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]

	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <Timestamp_Init+0x4c>)
 8001158:	f004 fd6e 	bl	8005c38 <HAL_RTC_Init>
		/* Initialization Error */
	}
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000
 8001164:	200005a8 	.word	0x200005a8
 8001168:	40002800 	.word	0x40002800

0800116c <Timestamp_SetTimestamp>:

bool Timestamp_SetTimestamp(uint32_t timestamp) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	struct tm *tm;

	// Convert the epoch timestamp to tm struct
	tm = localtime((time_t *)&timestamp);
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f007 ffa6 	bl	80090c8 <localtime>
 800117c:	6278      	str	r0, [r7, #36]	; 0x24

	// Populate the date and time structs
	date.Year = tm->tm_year - 100;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3b64      	subs	r3, #100	; 0x64
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date.Month = tm->tm_mon + 1;
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date.Date = tm->tm_mday;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time.Hours = tm->tm_hour;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	733b      	strb	r3, [r7, #12]
	time.Minutes = tm->tm_min;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	737b      	strb	r3, [r7, #13]
	time.Seconds = tm->tm_sec;
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	73bb      	strb	r3, [r7, #14]

	// Set the RTC date and time
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <Timestamp_SetTimestamp+0x78>)
 80011c6:	f004 feb5 	bl	8005f34 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <Timestamp_SetTimestamp+0x78>)
 80011d4:	f004 fdb5 	bl	8005d42 <HAL_RTC_SetTime>

	return true;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200005a8 	.word	0x200005a8

080011e8 <Timestamp_GetTimestamp>:

void Timestamp_GetTimestamp(uint32_t *timestamp) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b092      	sub	sp, #72	; 0x48
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	struct tm tm;

	// Read the current date and time from RTC
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80011f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <Timestamp_GetTimestamp+0x68>)
 80011fa:	f004 ff22 	bl	8006042 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80011fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <Timestamp_GetTimestamp+0x68>)
 8001208:	f004 fe38 	bl	8005e7c <HAL_RTC_GetTime>

	// Populate the tm struct
	tm.tm_year = date.Year + 100;  // Years since 1900
 800120c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001210:	3364      	adds	r3, #100	; 0x64
 8001212:	623b      	str	r3, [r7, #32]
	tm.tm_mon = date.Month - 1;
 8001214:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001218:	3b01      	subs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
	tm.tm_mday = date.Date;
 800121c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001220:	61bb      	str	r3, [r7, #24]
	tm.tm_hour = time.Hours;
 8001222:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001226:	617b      	str	r3, [r7, #20]
	tm.tm_min = time.Minutes;
 8001228:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800122c:	613b      	str	r3, [r7, #16]
	tm.tm_sec = time.Seconds;
 800122e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001232:	60fb      	str	r3, [r7, #12]

	*timestamp = mktime(&tm);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4618      	mov	r0, r3
 800123a:	f008 f955 	bl	80094e8 <mktime>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3748      	adds	r7, #72	; 0x48
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200005a8 	.word	0x200005a8

08001254 <Watchdog_Init>:
/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/

void Watchdog_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <Watchdog_Init+0x2c>)
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <Watchdog_Init+0x30>)
 800125c:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = WATCHDOG_PRESCALER;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <Watchdog_Init+0x2c>)
 8001260:	2206      	movs	r2, #6
 8001262:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = WATCHDOG_RELOAD;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <Watchdog_Init+0x2c>)
 8001266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800126a:	609a      	str	r2, [r3, #8]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <Watchdog_Init+0x2c>)
 800126e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001272:	60da      	str	r2, [r3, #12]


	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <Watchdog_Init+0x2c>)
 8001276:	f003 f9a6 	bl	80045c6 <HAL_IWDG_Init>
		/* Initialization Error */
	}
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200005cc 	.word	0x200005cc
 8001284:	40003000 	.word	0x40003000

08001288 <Watchdog_Feed>:


void Watchdog_Feed(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <Watchdog_Feed+0x10>)
 800128e:	f003 f9e9 	bl	8004664 <HAL_IWDG_Refresh>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200005cc 	.word	0x200005cc

0800129c <Wifi_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
int8_t Wifi_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	// Init vars.
	WIFI_Status_t stmRet;

	// Initialize the WiFi info structure
	memset((uint8_t *)&s_stWiFiInfo, 0, sizeof(sWiFiInfo));
 80012a2:	2213      	movs	r2, #19
 80012a4:	2100      	movs	r1, #0
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <Wifi_Init+0x30>)
 80012a8:	f008 f83e 	bl	8009328 <memset>

	// Initalize Wifi stack.
	stmRet = WIFI_Init();
 80012ac:	f000 ffe4 	bl	8002278 <WIFI_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <Wifi_Init+0x24>
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	e000      	b.n	80012c2 <Wifi_Init+0x26>

	// Set Response.
	return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000594 	.word	0x20000594

080012d0 <Wifi_Connect>:

int8_t Wifi_Connect(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	// Init vars.
	WIFI_Status_t stmRet;

	memset(&s_stWiFiInfo.au8IpAddr[0], 0, 4);
 80012d6:	2204      	movs	r2, #4
 80012d8:	2100      	movs	r1, #0
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <Wifi_Connect+0x4c>)
 80012dc:	f008 f824 	bl	8009328 <memset>
//	memset(&s_stWiFiInfo.au8SubnetMask[0], 0, 4);
//	memset(&s_stWiFiInfo.au8Gateway[0], 0, 4);
//	memset(&s_stWiFiInfo.au8Dns[0], 0, 4);

	// Attempt connect with hardcode SSID and Password.
	stmRet = WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK);
 80012e0:	2203      	movs	r2, #3
 80012e2:	490f      	ldr	r1, [pc, #60]	; (8001320 <Wifi_Connect+0x50>)
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <Wifi_Connect+0x54>)
 80012e6:	f000 fff3 	bl	80022d0 <WIFI_Connect>
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <Wifi_Connect+0x2a>
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	e00c      	b.n	8001314 <Wifi_Connect+0x44>

	// Get network information
	stmRet = WIFI_GetIP_Address(&s_stWiFiInfo.au8IpAddr[0], sizeof(&s_stWiFiInfo.au8IpAddr[0]));
 80012fa:	2104      	movs	r1, #4
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <Wifi_Connect+0x4c>)
 80012fe:	f001 f809 	bl	8002314 <WIFI_GetIP_Address>
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	if(stmRet != WIFI_STATUS_OK) { return stmRet; }
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <Wifi_Connect+0x42>
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	e000      	b.n	8001314 <Wifi_Connect+0x44>
//	memcpy(&s_stWiFiInfo.au8SubnetMask[0], esWifiObj.NetSettings.IP_Mask, 4);
//	memcpy(&s_stWiFiInfo.au8Gateway[0], esWifiObj.NetSettings.Gateway_Addr, 4);
//	memcpy(&s_stWiFiInfo.au8Dns[0], esWifiObj.NetSettings.DNS1, 4);

	// Set Response.
	return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000597 	.word	0x20000597
 8001320:	0800c12c 	.word	0x0800c12c
 8001324:	0800c138 	.word	0x0800c138

08001328 <system_init>:
IWDG_HandleTypeDef hiwdg;

static void SystemClock_Config(void);
static void RTCClock_Config(void);

void system_init(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800132c:	f001 fce2 	bl	8002cf4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001330:	f000 f804 	bl	800133c <SystemClock_Config>

	/* Configure the rtc clock */
	RTCClock_Config();
 8001334:	f000 f83c 	bl	80013b0 <RTCClock_Config>

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <SystemClock_Config>:
  *            PLL_Q                          = 4
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b096      	sub	sp, #88	; 0x58
 8001340:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001342:	2310      	movs	r3, #16
 8001344:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800134a:	2360      	movs	r3, #96	; 0x60
 800134c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001356:	2301      	movs	r3, #1
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 800135e:	2328      	movs	r3, #40	; 0x28
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001362:	2302      	movs	r3, #2
 8001364:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001366:	2307      	movs	r3, #7
 8001368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800136a:	2304      	movs	r3, #4
 800136c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4618      	mov	r0, r3
 8001372:	f003 f9a5 	bl	80046c0 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d000      	beq.n	800137e <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 800137c:	e7fe      	b.n	800137c <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800137e:	230f      	movs	r3, #15
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001382:	2303      	movs	r3, #3
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001392:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001396:	2104      	movs	r1, #4
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fd6d 	bl	8004e78 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d000      	beq.n	80013a6 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 80013a4:	e7fe      	b.n	80013a4 <SystemClock_Config+0x68>
  }
}
 80013a6:	bf00      	nop
 80013a8:	3758      	adds	r7, #88	; 0x58
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <RTCClock_Config>:

static void RTCClock_Config(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0b4      	sub	sp, #208	; 0xd0
 80013b4:	af00      	add	r7, sp, #0
	// Enable the Power Clock and enable access to the RTC domain
	__HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <RTCClock_Config+0x78>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <RTCClock_Config+0x78>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <RTCClock_Config+0x78>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
	HAL_PWR_EnableBkUpAccess();
 80013ce:	f003 f959 	bl	8004684 <HAL_PWR_EnableBkUpAccess>

	// Enable the LSE (Low-Speed External) or LSI (Low-Speed Internal) oscillator
	// If your board has an external 32.768 kHz crystal, use LSE
	// Otherwise, use LSI
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013d6:	2244      	movs	r2, #68	; 0x44
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 ffa4 	bl	8009328 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80013e0:	2304      	movs	r3, #4
 80013e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 f962 	bl	80046c0 <HAL_RCC_OscConfig>
		/* Initialization Error */
	}

	// Configure the RTC clock source
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2288      	movs	r2, #136	; 0x88
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f007 ff90 	bl	8009328 <memset>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140c:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800140e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001412:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f003 ff51 	bl	80052c0 <HAL_RCCEx_PeriphCLKConfig>
		/* Initialization Error */
	}
}
 800141e:	bf00      	nop
 8001420:	37d0      	adds	r7, #208	; 0xd0
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000

0800142c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d102      	bne.n	8001442 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 800143c:	f000 ff0c 	bl	8002258 <SPI_WIFI_ISR>
      break;
 8001440:	e000      	b.n	8001444 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001442:	bf00      	nop
    }
  }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <SPI3_IRQHandler>:

void SPI3_IRQHandler(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <SPI3_IRQHandler+0x10>)
 8001452:	f005 ff3d 	bl	80072d0 <HAL_SPI_IRQHandler>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200005dc 	.word	0x200005dc

08001460 <stm_start_init>:
#include "stm_start.h"

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void stm_start_init(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	system_init();
 8001464:	f7ff ff60 	bl	8001328 <system_init>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b2d      	cmp	r3, #45	; 0x2d
 8001488:	d119      	bne.n	80014be <ParseNumber+0x52>
        minus = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
        done_count++;
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	3301      	adds	r3, #1
 8001498:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 800149a:	e010      	b.n	80014be <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	461a      	mov	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3b30      	subs	r3, #48	; 0x30
 80014ae:	4413      	add	r3, r2
 80014b0:	60bb      	str	r3, [r7, #8]
        ptr++;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3301      	adds	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
        done_count++;
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	3301      	adds	r3, #1
 80014bc:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b2f      	cmp	r3, #47	; 0x2f
 80014c4:	d903      	bls.n	80014ce <ParseNumber+0x62>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b39      	cmp	r3, #57	; 0x39
 80014cc:	d9e6      	bls.n	800149c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <ParseNumber+0x6e>
        *cnt = done_count;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	7bba      	ldrb	r2, [r7, #14]
 80014d8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <ParseNumber+0x7a>
        return 0 - sum;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	425b      	negs	r3, r3
 80014e4:	e000      	b.n	80014e8 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 80014e6:	68bb      	ldr	r3, [r7, #8]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d027      	beq.n	800155a <ParseIP+0x66>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d024      	beq.n	800155a <ParseIP+0x66>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d921      	bls.n	800155a <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001516:	e019      	b.n	800154c <ParseIP+0x58>
    uint8_t done_count = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b2e      	cmp	r3, #46	; 0x2e
 8001522:	d00e      	beq.n	8001542 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001524:	f107 0316 	add.w	r3, r7, #22
 8001528:	4619      	mov	r1, r3
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff ff9e 	bl	800146c <ParseNumber>
 8001530:	4601      	mov	r1, r0
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	75fa      	strb	r2, [r7, #23]
 8001538:	461a      	mov	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4413      	add	r3, r2
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001542:	7dbb      	ldrb	r3, [r7, #22]
 8001544:	461a      	mov	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d803      	bhi.n	800155a <ParseIP+0x66>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1de      	bne.n	8001518 <ParseIP+0x24>
   }
  }
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3302      	adds	r3, #2
 8001576:	4940      	ldr	r1, [pc, #256]	; (8001678 <AT_ParseInfo+0x114>)
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fb13 	bl	8009ba4 <strtok>
 800157e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001580:	e071      	b.n	8001666 <AT_ParseInfo+0x102>
    switch (num++) {
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	72fa      	strb	r2, [r7, #11]
 8001588:	2b06      	cmp	r3, #6
 800158a:	d866      	bhi.n	800165a <AT_ParseInfo+0xf6>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <AT_ParseInfo+0x30>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015b1 	.word	0x080015b1
 8001598:	080015c5 	.word	0x080015c5
 800159c:	080015dd 	.word	0x080015dd
 80015a0:	080015f5 	.word	0x080015f5
 80015a4:	0800160d 	.word	0x0800160d
 80015a8:	08001625 	.word	0x08001625
 80015ac:	08001639 	.word	0x08001639
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	221f      	movs	r2, #31
 80015b4:	68f9      	ldr	r1, [r7, #12]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 faca 	bl	8009b50 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	77da      	strb	r2, [r3, #31]
      break;
 80015c2:	e04b      	b.n	800165c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3320      	adds	r3, #32
 80015c8:	2217      	movs	r2, #23
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 fabf 	bl	8009b50 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 80015da:	e03f      	b.n	800165c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3338      	adds	r3, #56	; 0x38
 80015e0:	220f      	movs	r2, #15
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f008 fab3 	bl	8009b50 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80015f2:	e033      	b.n	800165c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3348      	adds	r3, #72	; 0x48
 80015f8:	220f      	movs	r2, #15
 80015fa:	68f9      	ldr	r1, [r7, #12]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f008 faa7 	bl	8009b50 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 800160a:	e027      	b.n	800165c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3358      	adds	r3, #88	; 0x58
 8001610:	220f      	movs	r2, #15
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f008 fa9b 	bl	8009b50 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8001622:	e01b      	b.n	800165c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001624:	2100      	movs	r1, #0
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f7ff ff20 	bl	800146c <ParseNumber>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001636:	e011      	b.n	800165c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001638:	4910      	ldr	r1, [pc, #64]	; (800167c <AT_ParseInfo+0x118>)
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f008 fab2 	bl	8009ba4 <strtok>
 8001640:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3368      	adds	r3, #104	; 0x68
 8001646:	221f      	movs	r2, #31
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	4618      	mov	r0, r3
 800164c:	f008 fa80 	bl	8009b50 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8001658:	e000      	b.n	800165c <AT_ParseInfo+0xf8>

    default: break;
 800165a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800165c:	4906      	ldr	r1, [pc, #24]	; (8001678 <AT_ParseInfo+0x114>)
 800165e:	2000      	movs	r0, #0
 8001660:	f008 faa0 	bl	8009ba4 <strtok>
 8001664:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d18a      	bne.n	8001582 <AT_ParseInfo+0x1e>
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	0800c16c 	.word	0x0800c16c
 800167c:	0800c170 	.word	0x0800c170

08001680 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3302      	adds	r3, #2
 8001692:	4959      	ldr	r1, [pc, #356]	; (80017f8 <AT_ParseConnSettings+0x178>)
 8001694:	4618      	mov	r0, r3
 8001696:	f008 fa85 	bl	8009ba4 <strtok>
 800169a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800169c:	e0a2      	b.n	80017e4 <AT_ParseConnSettings+0x164>
    switch (num++) {
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	73fa      	strb	r2, [r7, #15]
 80016a4:	2b0b      	cmp	r3, #11
 80016a6:	f200 808c 	bhi.w	80017c2 <AT_ParseConnSettings+0x142>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <AT_ParseConnSettings+0x30>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016e1 	.word	0x080016e1
 80016b4:	080016f7 	.word	0x080016f7
 80016b8:	0800170f 	.word	0x0800170f
 80016bc:	08001723 	.word	0x08001723
 80016c0:	08001737 	.word	0x08001737
 80016c4:	0800174b 	.word	0x0800174b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800176b 	.word	0x0800176b
 80016d0:	0800177b 	.word	0x0800177b
 80016d4:	0800178b 	.word	0x0800178b
 80016d8:	0800179b 	.word	0x0800179b
 80016dc:	080017af 	.word	0x080017af
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2220      	movs	r2, #32
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f008 fa32 	bl	8009b50 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80016f4:	e066      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	3321      	adds	r3, #33	; 0x21
 80016fa:	2220      	movs	r2, #32
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	4618      	mov	r0, r3
 8001700:	f008 fa26 	bl	8009b50 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 800170c:	e05a      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800170e:	2100      	movs	r1, #0
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f7ff feab 	bl	800146c <ParseNumber>
 8001716:	4603      	mov	r3, r0
 8001718:	b2da      	uxtb	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8001720:	e050      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001722:	2100      	movs	r1, #0
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f7ff fea1 	bl	800146c <ParseNumber>
 800172a:	4603      	mov	r3, r0
 800172c:	b2da      	uxtb	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8001734:	e046      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001736:	2100      	movs	r1, #0
 8001738:	68b8      	ldr	r0, [r7, #8]
 800173a:	f7ff fe97 	bl	800146c <ParseNumber>
 800173e:	4603      	mov	r3, r0
 8001740:	b2da      	uxtb	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001748:	e03c      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3348      	adds	r3, #72	; 0x48
 800174e:	2204      	movs	r2, #4
 8001750:	4619      	mov	r1, r3
 8001752:	68b8      	ldr	r0, [r7, #8]
 8001754:	f7ff fece 	bl	80014f4 <ParseIP>
      break;
 8001758:	e034      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	334c      	adds	r3, #76	; 0x4c
 800175e:	2204      	movs	r2, #4
 8001760:	4619      	mov	r1, r3
 8001762:	68b8      	ldr	r0, [r7, #8]
 8001764:	f7ff fec6 	bl	80014f4 <ParseIP>
      break;
 8001768:	e02c      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3350      	adds	r3, #80	; 0x50
 800176e:	2204      	movs	r2, #4
 8001770:	4619      	mov	r1, r3
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f7ff febe 	bl	80014f4 <ParseIP>
      break;
 8001778:	e024      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	3354      	adds	r3, #84	; 0x54
 800177e:	2204      	movs	r2, #4
 8001780:	4619      	mov	r1, r3
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f7ff feb6 	bl	80014f4 <ParseIP>
      break;
 8001788:	e01c      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3358      	adds	r3, #88	; 0x58
 800178e:	2204      	movs	r2, #4
 8001790:	4619      	mov	r1, r3
 8001792:	68b8      	ldr	r0, [r7, #8]
 8001794:	f7ff feae 	bl	80014f4 <ParseIP>
      break;
 8001798:	e014      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800179a:	2100      	movs	r1, #0
 800179c:	68b8      	ldr	r0, [r7, #8]
 800179e:	f7ff fe65 	bl	800146c <ParseNumber>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80017ac:	e00a      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 80017ae:	2100      	movs	r1, #0
 80017b0:	68b8      	ldr	r0, [r7, #8]
 80017b2:	f7ff fe5b 	bl	800146c <ParseNumber>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80017c0:	e000      	b.n	80017c4 <AT_ParseConnSettings+0x144>

    default:
      break;
 80017c2:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <AT_ParseConnSettings+0x178>)
 80017c6:	2000      	movs	r0, #0
 80017c8:	f008 f9ec 	bl	8009ba4 <strtok>
 80017cc:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <AT_ParseConnSettings+0x164>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b2c      	cmp	r3, #44	; 0x2c
 80017dc:	d102      	bne.n	80017e4 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	3301      	adds	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f47f af59 	bne.w	800169e <AT_ParseConnSettings+0x1e>
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800c16c 	.word	0x0800c16c

080017fc <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001816:	2b00      	cmp	r3, #0
 8001818:	d056      	beq.n	80018c8 <AT_ExecuteCommand+0xcc>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001820:	2b00      	cmp	r3, #0
 8001822:	d051      	beq.n	80018c8 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f7fe fcd0 	bl	80001d0 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b299      	uxth	r1, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800183a:	461a      	mov	r2, r3
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	47a0      	blx	r4
 8001840:	4603      	mov	r3, r0
 8001842:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	dd3e      	ble.n	80018c8 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001856:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
 800185e:	4603      	mov	r3, r0
 8001860:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001862:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001866:	2b00      	cmp	r3, #0
 8001868:	dd27      	ble.n	80018ba <AT_ExecuteCommand+0xbe>
 800186a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800186e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001872:	dc22      	bgt.n	80018ba <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001874:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001878:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800187c:	d105      	bne.n	800188a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 800187e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29b      	uxth	r3, r3
 8001888:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800188a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001896:	490f      	ldr	r1, [pc, #60]	; (80018d4 <AT_ExecuteCommand+0xd8>)
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f008 f96c 	bl	8009b76 <strstr>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e010      	b.n	80018ca <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80018a8:	490b      	ldr	r1, [pc, #44]	; (80018d8 <AT_ExecuteCommand+0xdc>)
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f008 f963 	bl	8009b76 <strstr>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80018b6:	2305      	movs	r3, #5
 80018b8:	e007      	b.n	80018ca <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80018ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018be:	f113 0f04 	cmn.w	r3, #4
 80018c2:	d101      	bne.n	80018c8 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80018c4:	2306      	movs	r3, #6
 80018c6:	e000      	b.n	80018ca <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80018c8:	2304      	movs	r3, #4
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	0800c184 	.word	0x0800c184
 80018d8:	0800c190 	.word	0x0800c190

080018dc <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80018e4:	2302      	movs	r3, #2
 80018e6:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f247 5230 	movw	r2, #30000	; 0x7530
 80018ee:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01b      	beq.n	8001934 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001902:	2000      	movs	r0, #0
 8001904:	4798      	blx	r3
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d113      	bne.n	8001934 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001912:	461a      	mov	r2, r3
 8001914:	490a      	ldr	r1, [pc, #40]	; (8001940 <ES_WIFI_Init+0x64>)
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff70 	bl	80017fc <AT_ExecuteCommand>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800192c:	4619      	mov	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fe18 	bl	8001564 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	0800c1a0 	.word	0x0800c1a0

08001944 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00b      	beq.n	8001970 <ES_WIFI_RegisterBusIO+0x2c>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <ES_WIFI_RegisterBusIO+0x2c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <ES_WIFI_RegisterBusIO+0x2c>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <ES_WIFI_RegisterBusIO+0x2c>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001970:	2302      	movs	r3, #2
 8001972:	e014      	b.n	800199e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	4932      	ldr	r1, [pc, #200]	; (8001a8c <ES_WIFI_Connect+0xe0>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f008 f88f 	bl	8009ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019d6:	461a      	mov	r2, r3
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff ff0f 	bl	80017fc <AT_ExecuteCommand>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d14b      	bne.n	8001a80 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4927      	ldr	r1, [pc, #156]	; (8001a90 <ES_WIFI_Connect+0xe4>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f008 f878 	bl	8009ae8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a04:	461a      	mov	r2, r3
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff fef8 	bl	80017fc <AT_ExecuteCommand>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d134      	bne.n	8001a80 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	491b      	ldr	r1, [pc, #108]	; (8001a94 <ES_WIFI_Connect+0xe8>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f008 f85d 	bl	8009ae8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff fedd 	bl	80017fc <AT_ExecuteCommand>
 8001a42:	4603      	mov	r3, r0
 8001a44:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d119      	bne.n	8001a80 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a52:	4911      	ldr	r1, [pc, #68]	; (8001a98 <ES_WIFI_Connect+0xec>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f008 f847 	bl	8009ae8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a66:	461a      	mov	r2, r3
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fec7 	bl	80017fc <AT_ExecuteCommand>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0800c1b8 	.word	0x0800c1b8
 8001a90:	0800c1c0 	.word	0x0800c1c0
 8001a94:	0800c1c8 	.word	0x0800c1c8
 8001a98:	0800c1d0 	.word	0x0800c1d0

08001a9c <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aaa:	4913      	ldr	r1, [pc, #76]	; (8001af8 <ES_WIFI_IsConnected+0x5c>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f008 f81b 	bl	8009ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fe9b 	bl	80017fc <AT_ExecuteCommand>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8001ad6:	2b31      	cmp	r3, #49	; 0x31
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	0800c1d4 	.word	0x0800c1d4

08001afc <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b0a:	4910      	ldr	r1, [pc, #64]	; (8001b4c <ES_WIFI_GetNetworkSettings+0x50>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f007 ffeb 	bl	8009ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fe6b 	bl	80017fc <AT_ExecuteCommand>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d108      	bne.n	8001b42 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	338d      	adds	r3, #141	; 0x8d
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7ff fd9f 	bl	8001680 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0800c1dc 	.word	0x0800c1dc

08001b50 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b58:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a56      	ldr	r2, [pc, #344]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
 8001b64:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a4a      	ldr	r2, [pc, #296]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba0:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a44      	ldr	r2, [pc, #272]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <SPI_WIFI_MspInit+0x168>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbe:	483f      	ldr	r0, [pc, #252]	; (8001cbc <SPI_WIFI_MspInit+0x16c>)
 8001bc0:	f001 fee0 	bl	8003984 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4837      	ldr	r0, [pc, #220]	; (8001cbc <SPI_WIFI_MspInit+0x16c>)
 8001bde:	f001 fd0f 	bl	8003600 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4831      	ldr	r0, [pc, #196]	; (8001cc0 <SPI_WIFI_MspInit+0x170>)
 8001bfc:	f001 fd00 	bl	8003600 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c04:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4828      	ldr	r0, [pc, #160]	; (8001cc0 <SPI_WIFI_MspInit+0x170>)
 8001c1e:	f001 fcef 	bl	8003600 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001c22:	2201      	movs	r2, #1
 8001c24:	2101      	movs	r1, #1
 8001c26:	4826      	ldr	r0, [pc, #152]	; (8001cc0 <SPI_WIFI_MspInit+0x170>)
 8001c28:	f001 feac 	bl	8003984 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <SPI_WIFI_MspInit+0x170>)
 8001c44:	f001 fcdc 	bl	8003600 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c56:	2301      	movs	r3, #1
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <SPI_WIFI_MspInit+0x174>)
 8001c66:	f001 fccb 	bl	8003600 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <SPI_WIFI_MspInit+0x174>)
 8001c88:	f001 fcba 	bl	8003600 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c90:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <SPI_WIFI_MspInit+0x174>)
 8001caa:	f001 fca9 	bl	8003600 <HAL_GPIO_Init>
}
 8001cae:	bf00      	nop
 8001cb0:	3730      	adds	r7, #48	; 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	48001000 	.word	0x48001000
 8001cc4:	48000800 	.word	0x48000800

08001cc8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d145      	bne.n	8001d68 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001cde:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <SPI_WIFI_Init+0xb8>)
 8001ce0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001ce2:	4826      	ldr	r0, [pc, #152]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001ce4:	f7ff ff34 	bl	8001b50 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001cea:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cee:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001cf8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001cfc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d10:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d14:	2210      	movs	r2, #16
 8001d16:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001d30:	4812      	ldr	r0, [pc, #72]	; (8001d7c <SPI_WIFI_Init+0xb4>)
 8001d32:	f004 faa5 	bl	8006280 <HAL_SPI_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	e018      	b.n	8001d74 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2007      	movs	r0, #7
 8001d48:	f001 f94f 	bl	8002fea <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001d4c:	2007      	movs	r0, #7
 8001d4e:	f001 f968 	bl	8003022 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2033      	movs	r0, #51	; 0x33
 8001d58:	f001 f947 	bl	8002fea <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001d5c:	2033      	movs	r0, #51	; 0x33
 8001d5e:	f001 f960 	bl	8003022 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001d62:	200a      	movs	r0, #10
 8001d64:	f000 f9fe 	bl	8002164 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8001d68:	f000 f80c 	bl	8001d84 <SPI_WIFI_ResetModule>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200005dc 	.word	0x200005dc
 8001d80:	40003c00 	.word	0x40003c00

08001d84 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001d8a:	f001 f823 	bl	8002dd4 <HAL_GetTick>
 8001d8e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9a:	4830      	ldr	r0, [pc, #192]	; (8001e5c <SPI_WIFI_ResetModule+0xd8>)
 8001d9c:	f001 fdf2 	bl	8003984 <HAL_GPIO_WritePin>
 8001da0:	200a      	movs	r0, #10
 8001da2:	f001 f823 	bl	8002dec <HAL_Delay>
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dac:	482b      	ldr	r0, [pc, #172]	; (8001e5c <SPI_WIFI_ResetModule+0xd8>)
 8001dae:	f001 fde9 	bl	8003984 <HAL_GPIO_WritePin>
 8001db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001db6:	f001 f819 	bl	8002dec <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4827      	ldr	r0, [pc, #156]	; (8001e5c <SPI_WIFI_ResetModule+0xd8>)
 8001dc0:	f001 fde0 	bl	8003984 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001dc4:	200f      	movs	r0, #15
 8001dc6:	f000 f9cd 	bl	8002164 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8001dca:	e020      	b.n	8001e0e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	463a      	mov	r2, r7
 8001dd0:	18d1      	adds	r1, r2, r3
 8001dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4821      	ldr	r0, [pc, #132]	; (8001e60 <SPI_WIFI_ResetModule+0xdc>)
 8001dda:	f004 fb59 	bl	8006490 <HAL_SPI_Receive>
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	3302      	adds	r3, #2
 8001de6:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001de8:	f000 fff4 	bl	8002dd4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d202      	bcs.n	8001dfe <SPI_WIFI_ResetModule+0x7a>
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2101      	movs	r1, #1
 8001e02:	4816      	ldr	r0, [pc, #88]	; (8001e5c <SPI_WIFI_ResetModule+0xd8>)
 8001e04:	f001 fdbe 	bl	8003984 <HAL_GPIO_WritePin>
      return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	e021      	b.n	8001e52 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001e0e:	2102      	movs	r1, #2
 8001e10:	4812      	ldr	r0, [pc, #72]	; (8001e5c <SPI_WIFI_ResetModule+0xd8>)
 8001e12:	f001 fd9f 	bl	8003954 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d0d7      	beq.n	8001dcc <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2101      	movs	r1, #1
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <SPI_WIFI_ResetModule+0xd8>)
 8001e22:	f001 fdaf 	bl	8003984 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001e26:	783b      	ldrb	r3, [r7, #0]
 8001e28:	2b15      	cmp	r3, #21
 8001e2a:	d10e      	bne.n	8001e4a <SPI_WIFI_ResetModule+0xc6>
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b15      	cmp	r3, #21
 8001e30:	d10b      	bne.n	8001e4a <SPI_WIFI_ResetModule+0xc6>
 8001e32:	78bb      	ldrb	r3, [r7, #2]
 8001e34:	2b0d      	cmp	r3, #13
 8001e36:	d108      	bne.n	8001e4a <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001e38:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001e3a:	2b0a      	cmp	r3, #10
 8001e3c:	d105      	bne.n	8001e4a <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001e3e:	793b      	ldrb	r3, [r7, #4]
 8001e40:	2b3e      	cmp	r3, #62	; 0x3e
 8001e42:	d102      	bne.n	8001e4a <SPI_WIFI_ResetModule+0xc6>
 8001e44:	797b      	ldrb	r3, [r7, #5]
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d002      	beq.n	8001e50 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e000      	b.n	8001e52 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	48001000 	.word	0x48001000
 8001e60:	200005dc 	.word	0x200005dc

08001e64 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <SPI_WIFI_DeInit+0x10>)
 8001e6a:	f004 fad5 	bl	8006418 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200005dc 	.word	0x200005dc

08001e78 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001e80:	f000 ffa8 	bl	8002dd4 <HAL_GetTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001e88:	e00a      	b.n	8001ea0 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e8a:	f000 ffa3 	bl	8002dd4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d902      	bls.n	8001ea0 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e007      	b.n	8001eb0 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <wait_cmddata_rdy_high+0x40>)
 8001ea4:	f001 fd56 	bl	8003954 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d1ed      	bne.n	8001e8a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	48001000 	.word	0x48001000

08001ebc <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001ec4:	f000 ff86 	bl	8002dd4 <HAL_GetTick>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8001ecc:	e00a      	b.n	8001ee4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ece:	f000 ff81 	bl	8002dd4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad2      	subs	r2, r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d902      	bls.n	8001ee4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e004      	b.n	8001eee <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <wait_cmddata_rdy_rising_event+0x3c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d0f0      	beq.n	8001ece <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001eec:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000648 	.word	0x20000648

08001efc <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f04:	f000 ff66 	bl	8002dd4 <HAL_GetTick>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8001f0c:	e00a      	b.n	8001f24 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f0e:	f000 ff61 	bl	8002dd4 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad2      	subs	r2, r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d902      	bls.n	8001f24 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e004      	b.n	8001f2e <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <wait_spi_rx_event+0x3c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d0f0      	beq.n	8001f0e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001f2c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000640 	.word	0x20000640

08001f3c <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001f44:	f000 ff46 	bl	8002dd4 <HAL_GetTick>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8001f4c:	e00a      	b.n	8001f64 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f4e:	f000 ff41 	bl	8002dd4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d902      	bls.n	8001f64 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e004      	b.n	8001f6e <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <wait_spi_tx_event+0x3c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d0f0      	beq.n	8001f4e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001f6c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000644 	.word	0x20000644

08001f7c <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	460b      	mov	r3, r1
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2101      	movs	r1, #1
 8001f92:	4834      	ldr	r0, [pc, #208]	; (8002064 <SPI_WIFI_ReceiveData+0xe8>)
 8001f94:	f001 fcf6 	bl	8003984 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 f8e3 	bl	8002164 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff8b 	bl	8001ebc <wait_cmddata_rdy_rising_event>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da02      	bge.n	8001fb2 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001fac:	f06f 0302 	mvn.w	r3, #2
 8001fb0:	e054      	b.n	800205c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	482b      	ldr	r0, [pc, #172]	; (8002064 <SPI_WIFI_ReceiveData+0xe8>)
 8001fb8:	f001 fce4 	bl	8003984 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001fbc:	200f      	movs	r0, #15
 8001fbe:	f000 f8d1 	bl	8002164 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001fc2:	e03d      	b.n	8002040 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8001fc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fc8:	897b      	ldrh	r3, [r7, #10]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	db02      	blt.n	8001fd4 <SPI_WIFI_ReceiveData+0x58>
 8001fce:	897b      	ldrh	r3, [r7, #10]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d13c      	bne.n	800204e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <SPI_WIFI_ReceiveData+0xec>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4822      	ldr	r0, [pc, #136]	; (800206c <SPI_WIFI_ReceiveData+0xf0>)
 8001fe4:	f004 ffc4 	bl	8006f70 <HAL_SPI_Receive_IT>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	481c      	ldr	r0, [pc, #112]	; (8002064 <SPI_WIFI_ReceiveData+0xe8>)
 8001ff4:	f001 fcc6 	bl	8003984 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffc:	e02e      	b.n	800205c <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff7b 	bl	8001efc <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002006:	7d3a      	ldrb	r2, [r7, #20]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3301      	adds	r3, #1
 8002010:	7d7a      	ldrb	r2, [r7, #21]
 8002012:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002014:	8afb      	ldrh	r3, [r7, #22]
 8002016:	3302      	adds	r3, #2
 8002018:	b29b      	uxth	r3, r3
 800201a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3302      	adds	r3, #2
 8002020:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 8002022:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002026:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800202a:	db09      	blt.n	8002040 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800202c:	2201      	movs	r2, #1
 800202e:	2101      	movs	r1, #1
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <SPI_WIFI_ReceiveData+0xe8>)
 8002032:	f001 fca7 	bl	8003984 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002036:	f7ff fea5 	bl	8001d84 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800203a:	f06f 0303 	mvn.w	r3, #3
 800203e:	e00d      	b.n	800205c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002040:	2102      	movs	r1, #2
 8002042:	4808      	ldr	r0, [pc, #32]	; (8002064 <SPI_WIFI_ReceiveData+0xe8>)
 8002044:	f001 fc86 	bl	8003954 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	2b01      	cmp	r3, #1
 800204c:	d0ba      	beq.n	8001fc4 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800204e:	2201      	movs	r2, #1
 8002050:	2101      	movs	r1, #1
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <SPI_WIFI_ReceiveData+0xe8>)
 8002054:	f001 fc96 	bl	8003984 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002058:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	48001000 	.word	0x48001000
 8002068:	20000640 	.word	0x20000640
 800206c:	200005dc 	.word	0x200005dc

08002070 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	460b      	mov	r3, r1
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fef9 	bl	8001e78 <wait_cmddata_rdy_high>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	da02      	bge.n	8002092 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
 8002090:	e04f      	b.n	8002132 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <SPI_WIFI_SendData+0xcc>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002098:	2200      	movs	r2, #0
 800209a:	2101      	movs	r1, #1
 800209c:	4828      	ldr	r0, [pc, #160]	; (8002140 <SPI_WIFI_SendData+0xd0>)
 800209e:	f001 fc71 	bl	8003984 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f000 f85e 	bl	8002164 <SPI_WIFI_DelayUs>
  if (len > 1)
 80020a8:	897b      	ldrh	r3, [r7, #10]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d919      	bls.n	80020e2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <SPI_WIFI_SendData+0xd4>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80020b4:	897b      	ldrh	r3, [r7, #10]
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	4822      	ldr	r0, [pc, #136]	; (8002148 <SPI_WIFI_SendData+0xd8>)
 80020c0:	f004 feb4 	bl	8006e2c <HAL_SPI_Transmit_IT>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80020ca:	2201      	movs	r2, #1
 80020cc:	2101      	movs	r1, #1
 80020ce:	481c      	ldr	r0, [pc, #112]	; (8002140 <SPI_WIFI_SendData+0xd0>)
 80020d0:	f001 fc58 	bl	8003984 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	e02b      	b.n	8002132 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff2d 	bl	8001f3c <wait_spi_tx_event>
  }

  if (len & 1)
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80020f8:	230a      	movs	r3, #10
 80020fa:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <SPI_WIFI_SendData+0xd4>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	2201      	movs	r2, #1
 8002108:	4619      	mov	r1, r3
 800210a:	480f      	ldr	r0, [pc, #60]	; (8002148 <SPI_WIFI_SendData+0xd8>)
 800210c:	f004 fe8e 	bl	8006e2c <HAL_SPI_Transmit_IT>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002116:	2201      	movs	r2, #1
 8002118:	2101      	movs	r1, #1
 800211a:	4809      	ldr	r0, [pc, #36]	; (8002140 <SPI_WIFI_SendData+0xd0>)
 800211c:	f001 fc32 	bl	8003984 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
 8002124:	e005      	b.n	8002132 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff07 	bl	8001f3c <wait_spi_tx_event>
  }
  return len;
 800212e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000648 	.word	0x20000648
 8002140:	48001000 	.word	0x48001000
 8002144:	20000644 	.word	0x20000644
 8002148:	200005dc 	.word	0x200005dc

0800214c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fe49 	bl	8002dec <HAL_Delay>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <SPI_WIFI_DelayUs+0x94>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d122      	bne.n	80021c2 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <SPI_WIFI_DelayUs+0x98>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <SPI_WIFI_DelayUs+0x9c>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002192:	f000 fe1f 	bl	8002dd4 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002198:	e002      	b.n	80021a0 <SPI_WIFI_DelayUs+0x3c>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 80021a6:	f000 fe15 	bl	8002dd4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <SPI_WIFI_DelayUs+0x94>)
 80021b2:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <SPI_WIFI_DelayUs+0x94>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <SPI_WIFI_DelayUs+0x5e>
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <SPI_WIFI_DelayUs+0x94>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <SPI_WIFI_DelayUs+0x98>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <SPI_WIFI_DelayUs+0xa0>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9a      	lsrs	r2, r3, #18
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <SPI_WIFI_DelayUs+0x94>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80021e2:	e002      	b.n	80021ea <SPI_WIFI_DelayUs+0x86>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f9      	bne.n	80021e4 <SPI_WIFI_DelayUs+0x80>
  return;
 80021f0:	bf00      	nop
}
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000064c 	.word	0x2000064c
 80021fc:	20000008 	.word	0x20000008
 8002200:	10624dd3 	.word	0x10624dd3
 8002204:	431bde83 	.word	0x431bde83

08002208 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_SPI_RxCpltCallback+0x24>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_SPI_RxCpltCallback+0x24>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
  }
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000640 	.word	0x20000640

08002230 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_SPI_TxCpltCallback+0x24>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_SPI_TxCpltCallback+0x24>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000644 	.word	0x20000644

08002258 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SPI_WIFI_ISR+0x1c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d102      	bne.n	800226a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <SPI_WIFI_ISR+0x1c>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
   }
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	20000648 	.word	0x20000648

08002278 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <WIFI_Init+0x40>)
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <WIFI_Init+0x44>)
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <WIFI_Init+0x48>)
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <WIFI_Init+0x4c>)
 800228e:	490e      	ldr	r1, [pc, #56]	; (80022c8 <WIFI_Init+0x50>)
 8002290:	480e      	ldr	r0, [pc, #56]	; (80022cc <WIFI_Init+0x54>)
 8002292:	f7ff fb57 	bl	8001944 <ES_WIFI_RegisterBusIO>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800229c:	480b      	ldr	r0, [pc, #44]	; (80022cc <WIFI_Init+0x54>)
 800229e:	f7ff fb1d 	bl	80018dc <ES_WIFI_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80022ac:	79fb      	ldrb	r3, [r7, #7]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	08001f7d 	.word	0x08001f7d
 80022bc:	08002071 	.word	0x08002071
 80022c0:	0800214d 	.word	0x0800214d
 80022c4:	08001e65 	.word	0x08001e65
 80022c8:	08001cc9 	.word	0x08001cc9
 80022cc:	20000650 	.word	0x20000650

080022d0 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	4613      	mov	r3, r2
 80022dc:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <WIFI_Connect+0x40>)
 80022ea:	f7ff fb5f 	bl	80019ac <ES_WIFI_Connect>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <WIFI_Connect+0x40>)
 80022f6:	f7ff fc01 	bl	8001afc <ES_WIFI_GetNetworkSettings>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002304:	7dfb      	ldrb	r3, [r7, #23]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000650 	.word	0x20000650

08002314 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <WIFI_GetIP_Address+0x38>
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d90d      	bls.n	800234c <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002330:	4809      	ldr	r0, [pc, #36]	; (8002358 <WIFI_GetIP_Address+0x44>)
 8002332:	f7ff fbb3 	bl	8001a9c <ES_WIFI_IsConnected>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <WIFI_GetIP_Address+0x38>
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <WIFI_GetIP_Address+0x44>)
 800233e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002342:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000650 	.word	0x20000650

0800235c <main>:


/* Private functions ---------------------------------------------------------*/


int main(void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0

	/* Initializes MCU, drivers and middleware */
	stm_start_init();
 8002360:	f7ff f87e 	bl	8001460 <stm_start_init>

	// Initialize specific functionality
	AplusAPP_Init();
 8002364:	f7fe fb56 	bl	8000a14 <AplusAPP_Init>

	// Main processing loop
	AplusAPP_Entry();
 8002368:	f7fe fbce 	bl	8000b08 <AplusAPP_Entry>
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}

08002372 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002384:	e7fe      	b.n	8002384 <HardFault_Handler+0x4>

08002386 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800238a:	e7fe      	b.n	800238a <MemManage_Handler+0x4>

0800238c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002390:	e7fe      	b.n	8002390 <BusFault_Handler+0x4>

08002392 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002396:	e7fe      	b.n	8002396 <UsageFault_Handler+0x4>

08002398 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80023c6:	f000 fcf1 	bl	8002dac <HAL_IncTick>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}

080023ce <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023d2:	2002      	movs	r0, #2
 80023d4:	f001 faee 	bl	80039b4 <HAL_GPIO_EXTI_IRQHandler>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
	return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_kill>:

int _kill(int pid, int sig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023f6:	f006 fe3d 	bl	8009074 <__errno>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2216      	movs	r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_exit>:

void _exit (int status)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffe7 	bl	80023ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800241e:	e7fe      	b.n	800241e <_exit+0x12>

08002420 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 800242c:	f3af 8000 	nop.w
 8002430:	4603      	mov	r3, r0
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	701a      	strb	r2, [r3, #0]

	return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_write>:

int _write(int file, char *ptr, int len)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e009      	b.n	8002468 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fc8d 	bl	8000d7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbf1      	blt.n	8002454 <_write+0x12>
	}
	return len;
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <_sbrk+0x50>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <_sbrk+0x16>
		heap_end = &end;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <_sbrk+0x50>)
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <_sbrk+0x54>)
 8002490:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <_sbrk+0x50>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <_sbrk+0x50>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	466a      	mov	r2, sp
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d907      	bls.n	80024b6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80024a6:	f006 fde5 	bl	8009074 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	220c      	movs	r2, #12
 80024ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	e006      	b.n	80024c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <_sbrk+0x50>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	4a03      	ldr	r2, [pc, #12]	; (80024cc <_sbrk+0x50>)
 80024c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000f54 	.word	0x20000f54
 80024d0:	20001078 	.word	0x20001078

080024d4 <_close>:

int _close(int file)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	return -1;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024fc:	605a      	str	r2, [r3, #4]
	return 0;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <_isatty>:

int _isatty(int file)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	return 1;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
	return 0;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <SystemInit+0x64>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <SystemInit+0x64>)
 8002548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800254c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <SystemInit+0x68>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <SystemInit+0x68>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <SystemInit+0x68>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <SystemInit+0x68>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <SystemInit+0x68>)
 8002568:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800256c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002570:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <SystemInit+0x68>)
 8002574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002578:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <SystemInit+0x68>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <SystemInit+0x68>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <SystemInit+0x68>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SystemInit+0x64>)
 800258e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002592:	609a      	str	r2, [r3, #8]
#endif
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00
 80025a4:	40021000 	.word	0x40021000

080025a8 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10b      	bne.n	80025d2 <BSP_COM_Init+0x2a>
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <BSP_COM_Init+0xc8>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <BSP_COM_Init+0xc8>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <BSP_COM_Init+0xc8>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <BSP_COM_Init+0x48>
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <BSP_COM_Init+0xc8>)
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <BSP_COM_Init+0xc8>)
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <BSP_COM_Init+0xc8>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <BSP_COM_Init+0x66>
 80025f6:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <BSP_COM_Init+0xc8>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <BSP_COM_Init+0xc8>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6613      	str	r3, [r2, #96]	; 0x60
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <BSP_COM_Init+0xc8>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800260e:	2340      	movs	r3, #64	; 0x40
 8002610:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002616:	2302      	movs	r3, #2
 8002618:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800261e:	2307      	movs	r3, #7
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <BSP_COM_Init+0xcc>)
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	f107 0214 	add.w	r2, r7, #20
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f000 ffe5 	bl	8003600 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800263e:	2307      	movs	r3, #7
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <BSP_COM_Init+0xd0>)
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	f107 0214 	add.w	r2, r7, #20
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f000 ffd5 	bl	8003600 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <BSP_COM_Init+0xd4>)
 800265a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002662:	6838      	ldr	r0, [r7, #0]
 8002664:	f005 ff88 	bl	8008578 <HAL_UART_Init>
}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	20000010 	.word	0x20000010
 8002678:	20000014 	.word	0x20000014
 800267c:	2000000c 	.word	0x2000000c

08002680 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <I2Cx_MspInit+0xa8>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4a26      	ldr	r2, [pc, #152]	; (8002728 <I2Cx_MspInit+0xa8>)
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <I2Cx_MspInit+0xa8>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80026a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80026a6:	2312      	movs	r3, #18
 80026a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80026aa:	2301      	movs	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80026b2:	2304      	movs	r3, #4
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	481b      	ldr	r0, [pc, #108]	; (800272c <I2Cx_MspInit+0xac>)
 80026be:	f000 ff9f 	bl	8003600 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	4818      	ldr	r0, [pc, #96]	; (800272c <I2Cx_MspInit+0xac>)
 80026ca:	f000 ff99 	bl	8003600 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <I2Cx_MspInit+0xa8>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <I2Cx_MspInit+0xa8>)
 80026d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <I2Cx_MspInit+0xa8>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <I2Cx_MspInit+0xa8>)
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <I2Cx_MspInit+0xa8>)
 80026ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <I2Cx_MspInit+0xa8>)
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <I2Cx_MspInit+0xa8>)
 80026f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	210f      	movs	r1, #15
 8002702:	2021      	movs	r0, #33	; 0x21
 8002704:	f000 fc71 	bl	8002fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002708:	2021      	movs	r0, #33	; 0x21
 800270a:	f000 fc8a 	bl	8003022 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	210f      	movs	r1, #15
 8002712:	2022      	movs	r0, #34	; 0x22
 8002714:	f000 fc69 	bl	8002fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002718:	2022      	movs	r0, #34	; 0x22
 800271a:	f000 fc82 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 800271e:	bf00      	nop
 8002720:	3728      	adds	r7, #40	; 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	48000400 	.word	0x48000400

08002730 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <I2Cx_Init+0x54>)
 800273c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a11      	ldr	r2, [pc, #68]	; (8002788 <I2Cx_Init+0x58>)
 8002742:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff89 	bl	8002680 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f001 f938 	bl	80039e4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002774:	2100      	movs	r1, #0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 feda 	bl	8004530 <HAL_I2CEx_ConfigAnalogFilter>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40005800 	.word	0x40005800
 8002788:	00702681 	.word	0x00702681

0800278c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af04      	add	r7, sp, #16
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	72fb      	strb	r3, [r7, #11]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	b299      	uxth	r1, r3
 80027ae:	88f8      	ldrh	r0, [r7, #6]
 80027b0:	893a      	ldrh	r2, [r7, #8]
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	9302      	str	r3, [sp, #8]
 80027b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	4603      	mov	r3, r0
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f001 faf4 	bl	8003db0 <HAL_I2C_Mem_Read>
 80027c8:	4603      	mov	r3, r0
 80027ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	4619      	mov	r1, r3
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f832 	bl	8002840 <I2Cx_Error>
  }
  return status;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b08a      	sub	sp, #40	; 0x28
 80027ea:	af04      	add	r7, sp, #16
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	4608      	mov	r0, r1
 80027f0:	4611      	mov	r1, r2
 80027f2:	461a      	mov	r2, r3
 80027f4:	4603      	mov	r3, r0
 80027f6:	72fb      	strb	r3, [r7, #11]
 80027f8:	460b      	mov	r3, r1
 80027fa:	813b      	strh	r3, [r7, #8]
 80027fc:	4613      	mov	r3, r2
 80027fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	b299      	uxth	r1, r3
 8002808:	88f8      	ldrh	r0, [r7, #6]
 800280a:	893a      	ldrh	r2, [r7, #8]
 800280c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002810:	9302      	str	r3, [sp, #8]
 8002812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	4603      	mov	r3, r0
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f001 f9b3 	bl	8003b88 <HAL_I2C_Mem_Write>
 8002822:	4603      	mov	r3, r0
 8002824:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	4619      	mov	r1, r3
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f805 	bl	8002840 <I2Cx_Error>
  }
  return status;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f001 f958 	bl	8003b02 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ff6c 	bl	8002730 <I2Cx_Init>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <SENSOR_IO_Init+0x10>)
 8002866:	f7ff ff63 	bl	8002730 <I2Cx_Init>
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000f58 	.word	0x20000f58

08002874 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af02      	add	r7, sp, #8
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
 800287e:	460b      	mov	r3, r1
 8002880:	71bb      	strb	r3, [r7, #6]
 8002882:	4613      	mov	r3, r2
 8002884:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002886:	79bb      	ldrb	r3, [r7, #6]
 8002888:	b29a      	uxth	r2, r3
 800288a:	79f9      	ldrb	r1, [r7, #7]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	1d7b      	adds	r3, r7, #5
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2301      	movs	r3, #1
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <SENSOR_IO_Write+0x30>)
 8002898:	f7ff ffa5 	bl	80027e6 <I2Cx_WriteMultiple>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000f58 	.word	0x20000f58

080028a8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	4603      	mov	r3, r0
 80028b0:	460a      	mov	r2, r1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80028bc:	79bb      	ldrb	r3, [r7, #6]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	79f9      	ldrb	r1, [r7, #7]
 80028c2:	2301      	movs	r3, #1
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	f107 030f 	add.w	r3, r7, #15
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2301      	movs	r3, #1
 80028ce:	4804      	ldr	r0, [pc, #16]	; (80028e0 <SENSOR_IO_Read+0x38>)
 80028d0:	f7ff ff5c 	bl	800278c <I2Cx_ReadMultiple>

  return read_value;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000f58 	.word	0x20000f58

080028e4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	603a      	str	r2, [r7, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	460b      	mov	r3, r1
 80028f4:	71bb      	strb	r3, [r7, #6]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80028fa:	79bb      	ldrb	r3, [r7, #6]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	79f9      	ldrb	r1, [r7, #7]
 8002900:	88bb      	ldrh	r3, [r7, #4]
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2301      	movs	r3, #1
 800290a:	4804      	ldr	r0, [pc, #16]	; (800291c <SENSOR_IO_ReadMultiple+0x38>)
 800290c:	f7ff ff3e 	bl	800278c <I2Cx_ReadMultiple>
 8002910:	4603      	mov	r3, r0
 8002912:	b29b      	uxth	r3, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000f58 	.word	0x20000f58

08002920 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <BSP_HSENSOR_Init+0x38>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	20be      	movs	r0, #190	; 0xbe
 800292c:	4798      	blx	r3
 800292e:	4603      	mov	r3, r0
 8002930:	2bbc      	cmp	r3, #188	; 0xbc
 8002932:	d002      	beq.n	800293a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	e009      	b.n	800294e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <BSP_HSENSOR_Init+0x3c>)
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <BSP_HSENSOR_Init+0x38>)
 800293e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <BSP_HSENSOR_Init+0x3c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	20be      	movs	r0, #190	; 0xbe
 8002948:	4798      	blx	r3
    ret = HSENSOR_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800294e:	687b      	ldr	r3, [r7, #4]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000018 	.word	0x20000018
 800295c:	20001030 	.word	0x20001030

08002960 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	20be      	movs	r0, #190	; 0xbe
 800296c:	4798      	blx	r3
 800296e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002972:	eeb0 0a67 	vmov.f32	s0, s15
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20001030 	.word	0x20001030

0800297c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <BSP_TSENSOR_Init+0x30>)
 8002988:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <BSP_TSENSOR_Init+0x34>)
 800298a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800298c:	f7ff ff68 	bl	8002860 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <BSP_TSENSOR_Init+0x30>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2100      	movs	r1, #0
 8002998:	20be      	movs	r0, #190	; 0xbe
 800299a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20001034 	.word	0x20001034
 80029b0:	20000024 	.word	0x20000024

080029b4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <BSP_TSENSOR_ReadTemp+0x18>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	20be      	movs	r0, #190	; 0xbe
 80029c0:	4798      	blx	r3
 80029c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80029c6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20001034 	.word	0x20001034

080029d0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2120      	movs	r1, #32
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff61 	bl	80028a8 <SENSOR_IO_Read>
 80029e6:	4603      	mov	r3, r0
 80029e8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	f023 0303 	bic.w	r3, r3, #3
 8002a00:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a10:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	2120      	movs	r1, #32
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff2a 	bl	8002874 <SENSOR_IO_Write>
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002a36:	f7ff ff13 	bl	8002860 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	210f      	movs	r1, #15
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff31 	bl	80028a8 <SENSOR_IO_Read>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	f107 020c 	add.w	r2, r7, #12
 8002a66:	2302      	movs	r3, #2
 8002a68:	21b0      	movs	r1, #176	; 0xb0
 8002a6a:	f7ff ff3b 	bl	80028e4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002a6e:	7b3b      	ldrb	r3, [r7, #12]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	b2d8      	uxtb	r0, r3
 8002a82:	f107 020c 	add.w	r2, r7, #12
 8002a86:	2302      	movs	r3, #2
 8002a88:	21b6      	movs	r1, #182	; 0xb6
 8002a8a:	f7ff ff2b 	bl	80028e4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a8e:	7b7b      	ldrb	r3, [r7, #13]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	b21a      	sxth	r2, r3
 8002a94:	7b3b      	ldrb	r3, [r7, #12]
 8002a96:	b21b      	sxth	r3, r3
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	b2d8      	uxtb	r0, r3
 8002aa0:	f107 020c 	add.w	r2, r7, #12
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	21ba      	movs	r1, #186	; 0xba
 8002aa8:	f7ff ff1c 	bl	80028e4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002aac:	7b7b      	ldrb	r3, [r7, #13]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	7b3b      	ldrb	r3, [r7, #12]
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	b2d8      	uxtb	r0, r3
 8002abe:	f107 020c 	add.w	r2, r7, #12
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	21a8      	movs	r1, #168	; 0xa8
 8002ac6:	f7ff ff0d 	bl	80028e4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002aca:	7b7b      	ldrb	r3, [r7, #13]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	b21a      	sxth	r2, r3
 8002ad0:	7b3b      	ldrb	r3, [r7, #12]
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002ad8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002adc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002aee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b00:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b26:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b3e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b84 <HTS221_H_ReadHumidity+0x130>
 8002b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	dd01      	ble.n	8002b50 <HTS221_H_ReadHumidity+0xfc>
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HTS221_H_ReadHumidity+0x134>)
 8002b4e:	e00a      	b.n	8002b66 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002b50:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5c:	d502      	bpl.n	8002b64 <HTS221_H_ReadHumidity+0x110>
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e000      	b.n	8002b66 <HTS221_H_ReadHumidity+0x112>
 8002b64:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002b66:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b74:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	447a0000 	.word	0x447a0000
 8002b88:	447a0000 	.word	0x447a0000

08002b8c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fe82 	bl	80028a8 <SENSOR_IO_Read>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bce:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fe4b 	bl	8002874 <SENSOR_IO_Write>
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	b2d8      	uxtb	r0, r3
 8002bf4:	f107 0208 	add.w	r2, r7, #8
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	21b2      	movs	r1, #178	; 0xb2
 8002bfc:	f7ff fe72 	bl	80028e4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2135      	movs	r1, #53	; 0x35
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fe4e 	bl	80028a8 <SENSOR_IO_Read>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21b      	sxth	r3, r3
 8002c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	7a3b      	ldrb	r3, [r7, #8]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
 8002c26:	019b      	lsls	r3, r3, #6
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	7a7b      	ldrb	r3, [r7, #9]
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002c38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c3c:	10db      	asrs	r3, r3, #3
 8002c3e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002c40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c44:	10db      	asrs	r3, r3, #3
 8002c46:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	b2d8      	uxtb	r0, r3
 8002c4c:	f107 0208 	add.w	r2, r7, #8
 8002c50:	2304      	movs	r3, #4
 8002c52:	21bc      	movs	r1, #188	; 0xbc
 8002c54:	f7ff fe46 	bl	80028e4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c58:	7a7b      	ldrb	r3, [r7, #9]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	7a3b      	ldrb	r3, [r7, #8]
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002c66:	7afb      	ldrb	r3, [r7, #11]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	7abb      	ldrb	r3, [r7, #10]
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	b2d8      	uxtb	r0, r3
 8002c78:	f107 0208 	add.w	r2, r7, #8
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	21aa      	movs	r1, #170	; 0xaa
 8002c80:	f7ff fe30 	bl	80028e4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c84:	7a7b      	ldrb	r3, [r7, #9]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b21a      	sxth	r2, r3
 8002c8a:	7a3b      	ldrb	r3, [r7, #8]
 8002c8c:	b21b      	sxth	r3, r3
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002c92:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ca8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002cba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002cbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	ee07 3a90 	vmov	s15, r3
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cfe:	2003      	movs	r0, #3
 8002d00:	f000 f968 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d04:	200f      	movs	r0, #15
 8002d06:	f000 f815 	bl	8002d34 <HAL_InitTick>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	71fb      	strb	r3, [r7, #7]
 8002d14:	e001      	b.n	8002d1a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d16:	f000 f805 	bl	8002d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_InitTick+0x6c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_InitTick+0x70>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_InitTick+0x6c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f96d 	bl	800303e <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d809      	bhi.n	8002d84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f000 f937 	bl	8002fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_InitTick+0x74>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e007      	b.n	8002d94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e004      	b.n	8002d94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e001      	b.n	8002d94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000038 	.word	0x20000038
 8002da4:	20000008 	.word	0x20000008
 8002da8:	20000034 	.word	0x20000034

08002dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_IncTick+0x24>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_IncTick+0x24>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000038 	.word	0x20000038
 8002dd0:	20001038 	.word	0x20001038

08002dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_GetTick+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20001038 	.word	0x20001038

08002dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff ffee 	bl	8002dd4 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d005      	beq.n	8002e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_Delay+0x44>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e12:	bf00      	nop
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8f7      	bhi.n	8002e14 <HAL_Delay+0x28>
  {
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000038 	.word	0x20000038

08002e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e66:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4907      	ldr	r1, [pc, #28]	; (8002ed0 <__NVIC_EnableIRQ+0x38>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0a      	blt.n	8002efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	490c      	ldr	r1, [pc, #48]	; (8002f20 <__NVIC_SetPriority+0x4c>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002efc:	e00a      	b.n	8002f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4908      	ldr	r1, [pc, #32]	; (8002f24 <__NVIC_SetPriority+0x50>)
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	761a      	strb	r2, [r3, #24]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000e100 	.word	0xe000e100
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f1c3 0307 	rsb	r3, r3, #7
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	bf28      	it	cs
 8002f46:	2304      	movcs	r3, #4
 8002f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d902      	bls.n	8002f58 <NVIC_EncodePriority+0x30>
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3b03      	subs	r3, #3
 8002f56:	e000      	b.n	8002f5a <NVIC_EncodePriority+0x32>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	4313      	orrs	r3, r2
         );
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	; 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	f7ff ff8e 	bl	8002ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff29 	bl	8002e34 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff3e 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff8e 	bl	8002f28 <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5d 	bl	8002ed4 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff31 	bl	8002e98 <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffa2 	bl	8002f90 <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d005      	beq.n	800307a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2204      	movs	r2, #4
 8003072:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e029      	b.n	80030ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 020e 	bic.w	r2, r2, #14
 8003088:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f003 021c 	and.w	r2, r3, #28
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
    }
  }
  return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030ea:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <HAL_FLASH_Program+0xd0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_FLASH_Program+0x1e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e053      	b.n	800319e <HAL_FLASH_Program+0xc6>
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_FLASH_Program+0xd0>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003100:	f000 f888 	bl	8003214 <FLASH_WaitForLastOperation>
 8003104:	4603      	mov	r3, r0
 8003106:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d143      	bne.n	8003196 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_FLASH_Program+0xd0>)
 8003110:	2200      	movs	r2, #0
 8003112:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <HAL_FLASH_Program+0xd4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <HAL_FLASH_Program+0xd4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_FLASH_Program+0xd4>)
 8003126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800312a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_FLASH_Program+0xd0>)
 800312e:	2202      	movs	r2, #2
 8003130:	771a      	strb	r2, [r3, #28]
 8003132:	e002      	b.n	800313a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_FLASH_Program+0xd0>)
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003144:	68b8      	ldr	r0, [r7, #8]
 8003146:	f000 f8bb 	bl	80032c0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800314a:	2301      	movs	r3, #1
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	e010      	b.n	8003172 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <HAL_FLASH_Program+0x84>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d10a      	bne.n	8003172 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	f000 f8d3 	bl	800330c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d102      	bne.n	8003172 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800316c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003170:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003172:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003176:	f000 f84d 	bl	8003214 <FLASH_WaitForLastOperation>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_FLASH_Program+0xd4>)
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	4907      	ldr	r1, [pc, #28]	; (80031ac <HAL_FLASH_Program+0xd4>)
 800318e:	4013      	ands	r3, r2
 8003190:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003192:	f000 f9eb 	bl	800356c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_FLASH_Program+0xd0>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]

  return status;
 800319c:	7dfb      	ldrb	r3, [r7, #23]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000003c 	.word	0x2000003c
 80031ac:	40022000 	.word	0x40022000

080031b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_FLASH_Unlock+0x38>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da0b      	bge.n	80031da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_FLASH_Unlock+0x38>)
 80031c4:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_FLASH_Unlock+0x3c>)
 80031c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_FLASH_Unlock+0x38>)
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_FLASH_Unlock+0x40>)
 80031cc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_FLASH_Unlock+0x38>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	da01      	bge.n	80031da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80031da:	79fb      	ldrb	r3, [r7, #7]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40022000 	.word	0x40022000
 80031ec:	45670123 	.word	0x45670123
 80031f0:	cdef89ab 	.word	0xcdef89ab

080031f4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_FLASH_Lock+0x1c>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_FLASH_Lock+0x1c>)
 80031fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003202:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40022000 	.word	0x40022000

08003214 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800321c:	f7ff fdda 	bl	8002dd4 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003222:	e00d      	b.n	8003240 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d009      	beq.n	8003240 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800322c:	f7ff fdd2 	bl	8002dd4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d801      	bhi.n	8003240 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e037      	b.n	80032b0 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <FLASH_WaitForLastOperation+0xa4>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1eb      	bne.n	8003224 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <FLASH_WaitForLastOperation+0xa4>)
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01e      	beq.n	800329c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <FLASH_WaitForLastOperation+0xa8>)
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4313      	orrs	r3, r2
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <FLASH_WaitForLastOperation+0xa8>)
 8003268:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <FLASH_WaitForLastOperation+0x70>
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <FLASH_WaitForLastOperation+0xa4>)
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800327e:	490e      	ldr	r1, [pc, #56]	; (80032b8 <FLASH_WaitForLastOperation+0xa4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	618b      	str	r3, [r1, #24]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <FLASH_WaitForLastOperation+0x84>
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <FLASH_WaitForLastOperation+0xa4>)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003296:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e009      	b.n	80032b0 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <FLASH_WaitForLastOperation+0xa4>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <FLASH_WaitForLastOperation+0xa4>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40022000 	.word	0x40022000
 80032bc:	2000003c 	.word	0x2000003c

080032c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <FLASH_Program_DoubleWord+0x48>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <FLASH_Program_DoubleWord+0x48>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80032de:	f3bf 8f6f 	isb	sy
}
 80032e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80032e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	000a      	movs	r2, r1
 80032f2:	2300      	movs	r3, #0
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	3104      	adds	r1, #4
 80032f8:	4613      	mov	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40022000 	.word	0x40022000

0800330c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003316:	2340      	movs	r3, #64	; 0x40
 8003318:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <FLASH_Program_Fast+0x68>)
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4a13      	ldr	r2, [pc, #76]	; (8003374 <FLASH_Program_Fast+0x68>)
 8003328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800332c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332e:	f3ef 8310 	mrs	r3, PRIMASK
 8003332:	60fb      	str	r3, [r7, #12]
  return(result);
 8003334:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003338:	b672      	cpsid	i
}
 800333a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	3304      	adds	r3, #4
 8003348:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3304      	adds	r3, #4
 800334e:	617b      	str	r3, [r7, #20]
    row_index--;
 8003350:	7ffb      	ldrb	r3, [r7, #31]
 8003352:	3b01      	subs	r3, #1
 8003354:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003356:	7ffb      	ldrb	r3, [r7, #31]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ef      	bne.n	800333c <FLASH_Program_Fast+0x30>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003368:	bf00      	nop
 800336a:	3724      	adds	r7, #36	; 0x24
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40022000 	.word	0x40022000

08003378 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003382:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_FLASHEx_Erase+0x16>
 800338a:	2302      	movs	r3, #2
 800338c:	e087      	b.n	800349e <HAL_FLASHEx_Erase+0x126>
 800338e:	4b46      	ldr	r3, [pc, #280]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003394:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003398:	f7ff ff3c 	bl	8003214 <FLASH_WaitForLastOperation>
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d177      	bne.n	8003496 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033a6:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80033b8:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80033c4:	4b39      	ldr	r3, [pc, #228]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a38      	ldr	r2, [pc, #224]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 80033ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ce:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80033d0:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 80033d2:	2203      	movs	r2, #3
 80033d4:	771a      	strb	r2, [r3, #28]
 80033d6:	e016      	b.n	8003406 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 80033da:	2201      	movs	r2, #1
 80033dc:	771a      	strb	r2, [r3, #28]
 80033de:	e012      	b.n	8003406 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2e      	ldr	r2, [pc, #184]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 80033f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 80033fa:	2202      	movs	r2, #2
 80033fc:	771a      	strb	r2, [r3, #28]
 80033fe:	e002      	b.n	8003406 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003400:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 8003402:	2200      	movs	r2, #0
 8003404:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d113      	bne.n	8003436 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f84c 	bl	80034b0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003418:	f24c 3050 	movw	r0, #50000	; 0xc350
 800341c:	f7ff fefa 	bl	8003214 <FLASH_WaitForLastOperation>
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 800342a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	6153      	str	r3, [r2, #20]
 8003434:	e02d      	b.n	8003492 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	e01d      	b.n	8003482 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4619      	mov	r1, r3
 800344c:	68b8      	ldr	r0, [r7, #8]
 800344e:	f000 f857 	bl	8003500 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003452:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003456:	f7ff fedd 	bl	8003214 <FLASH_WaitForLastOperation>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <HAL_FLASHEx_Erase+0x134>)
 8003464:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003468:	f023 0302 	bic.w	r3, r3, #2
 800346c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	601a      	str	r2, [r3, #0]
          break;
 800347a:	e00a      	b.n	8003492 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3301      	adds	r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4413      	add	r3, r2
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d3d9      	bcc.n	8003446 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003492:	f000 f86b 	bl	800356c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_FLASHEx_Erase+0x130>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]

  return status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000003c 	.word	0x2000003c
 80034ac:	40022000 	.word	0x40022000

080034b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <FLASH_MassErase+0x4c>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <FLASH_MassErase+0x4c>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <FLASH_MassErase+0x4c>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4a07      	ldr	r2, [pc, #28]	; (80034fc <FLASH_MassErase+0x4c>)
 80034de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <FLASH_MassErase+0x4c>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <FLASH_MassErase+0x4c>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	6153      	str	r3, [r2, #20]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40022000 	.word	0x40022000

08003500 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <FLASH_PageErase+0x68>)
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <FLASH_PageErase+0x68>)
 800351a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351e:	6153      	str	r3, [r2, #20]
 8003520:	e005      	b.n	800352e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <FLASH_PageErase+0x68>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <FLASH_PageErase+0x68>)
 8003528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800352c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <FLASH_PageErase+0x68>)
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <FLASH_PageErase+0x68>)
 8003540:	4313      	orrs	r3, r2
 8003542:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <FLASH_PageErase+0x68>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <FLASH_PageErase+0x68>)
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <FLASH_PageErase+0x68>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <FLASH_PageErase+0x68>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	6153      	str	r3, [r2, #20]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40022000 	.word	0x40022000

0800356c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <FLASH_FlushCaches+0x8c>)
 8003574:	7f1b      	ldrb	r3, [r3, #28]
 8003576:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d002      	beq.n	8003584 <FLASH_FlushCaches+0x18>
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d117      	bne.n	80035b4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <FLASH_FlushCaches+0x90>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <FLASH_FlushCaches+0x90>)
 800358a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800358e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <FLASH_FlushCaches+0x90>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <FLASH_FlushCaches+0x90>)
 8003596:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <FLASH_FlushCaches+0x90>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035a6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a13      	ldr	r2, [pc, #76]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d002      	beq.n	80035c0 <FLASH_FlushCaches+0x54>
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d111      	bne.n	80035e4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a07      	ldr	r2, [pc, #28]	; (80035fc <FLASH_FlushCaches+0x90>)
 80035de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <FLASH_FlushCaches+0x8c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	771a      	strb	r2, [r3, #28]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000003c 	.word	0x2000003c
 80035fc:	40022000 	.word	0x40022000

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360e:	e17f      	b.n	8003910 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	2101      	movs	r1, #1
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	4013      	ands	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8171 	beq.w	800390a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d005      	beq.n	8003640 <HAL_GPIO_Init+0x40>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d130      	bne.n	80036a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003676:	2201      	movs	r2, #1
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 0201 	and.w	r2, r3, #1
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d118      	bne.n	80036e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036b4:	2201      	movs	r2, #1
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	08db      	lsrs	r3, r3, #3
 80036ca:	f003 0201 	and.w	r2, r3, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d017      	beq.n	800371c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d123      	bne.n	8003770 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	08da      	lsrs	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	6939      	ldr	r1, [r7, #16]
 800376c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0203 	and.w	r2, r3, #3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80ac 	beq.w	800390a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	4b5f      	ldr	r3, [pc, #380]	; (8003930 <HAL_GPIO_Init+0x330>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b6:	4a5e      	ldr	r2, [pc, #376]	; (8003930 <HAL_GPIO_Init+0x330>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6613      	str	r3, [r2, #96]	; 0x60
 80037be:	4b5c      	ldr	r3, [pc, #368]	; (8003930 <HAL_GPIO_Init+0x330>)
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037ca:	4a5a      	ldr	r2, [pc, #360]	; (8003934 <HAL_GPIO_Init+0x334>)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	3302      	adds	r3, #2
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	220f      	movs	r2, #15
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037f4:	d025      	beq.n	8003842 <HAL_GPIO_Init+0x242>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4f      	ldr	r2, [pc, #316]	; (8003938 <HAL_GPIO_Init+0x338>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01f      	beq.n	800383e <HAL_GPIO_Init+0x23e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4e      	ldr	r2, [pc, #312]	; (800393c <HAL_GPIO_Init+0x33c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d019      	beq.n	800383a <HAL_GPIO_Init+0x23a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4d      	ldr	r2, [pc, #308]	; (8003940 <HAL_GPIO_Init+0x340>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0x236>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4c      	ldr	r2, [pc, #304]	; (8003944 <HAL_GPIO_Init+0x344>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00d      	beq.n	8003832 <HAL_GPIO_Init+0x232>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_GPIO_Init+0x348>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <HAL_GPIO_Init+0x22e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4a      	ldr	r2, [pc, #296]	; (800394c <HAL_GPIO_Init+0x34c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_GPIO_Init+0x22a>
 8003826:	2306      	movs	r3, #6
 8003828:	e00c      	b.n	8003844 <HAL_GPIO_Init+0x244>
 800382a:	2307      	movs	r3, #7
 800382c:	e00a      	b.n	8003844 <HAL_GPIO_Init+0x244>
 800382e:	2305      	movs	r3, #5
 8003830:	e008      	b.n	8003844 <HAL_GPIO_Init+0x244>
 8003832:	2304      	movs	r3, #4
 8003834:	e006      	b.n	8003844 <HAL_GPIO_Init+0x244>
 8003836:	2303      	movs	r3, #3
 8003838:	e004      	b.n	8003844 <HAL_GPIO_Init+0x244>
 800383a:	2302      	movs	r3, #2
 800383c:	e002      	b.n	8003844 <HAL_GPIO_Init+0x244>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_GPIO_Init+0x244>
 8003842:	2300      	movs	r3, #0
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	f002 0203 	and.w	r2, r2, #3
 800384a:	0092      	lsls	r2, r2, #2
 800384c:	4093      	lsls	r3, r2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003854:	4937      	ldr	r1, [pc, #220]	; (8003934 <HAL_GPIO_Init+0x334>)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	3302      	adds	r3, #2
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003862:	4b3b      	ldr	r3, [pc, #236]	; (8003950 <HAL_GPIO_Init+0x350>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003886:	4a32      	ldr	r2, [pc, #200]	; (8003950 <HAL_GPIO_Init+0x350>)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800388c:	4b30      	ldr	r3, [pc, #192]	; (8003950 <HAL_GPIO_Init+0x350>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038b0:	4a27      	ldr	r2, [pc, #156]	; (8003950 <HAL_GPIO_Init+0x350>)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038b6:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_GPIO_Init+0x350>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <HAL_GPIO_Init+0x350>)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <HAL_GPIO_Init+0x350>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003904:	4a12      	ldr	r2, [pc, #72]	; (8003950 <HAL_GPIO_Init+0x350>)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3301      	adds	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	f47f ae78 	bne.w	8003610 <HAL_GPIO_Init+0x10>
  }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40010000 	.word	0x40010000
 8003938:	48000400 	.word	0x48000400
 800393c:	48000800 	.word	0x48000800
 8003940:	48000c00 	.word	0x48000c00
 8003944:	48001000 	.word	0x48001000
 8003948:	48001400 	.word	0x48001400
 800394c:	48001800 	.word	0x48001800
 8003950:	40010400 	.word	0x40010400

08003954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e001      	b.n	8003976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
 8003990:	4613      	mov	r3, r2
 8003992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003994:	787b      	ldrb	r3, [r7, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039a0:	e002      	b.n	80039a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fd2a 	bl	800142c <HAL_GPIO_EXTI_Callback>
  }
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40010400 	.word	0x40010400

080039e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e081      	b.n	8003afa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8a8 	bl	8003b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	; 0x24
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	e006      	b.n	8003a6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d104      	bne.n	8003a7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1a      	ldr	r2, [r3, #32]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e021      	b.n	8003b58 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f821 	bl	8003b74 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	f040 80f9 	bne.w	8003da2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_I2C_Mem_Write+0x34>
 8003bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0ed      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2C_Mem_Write+0x4e>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0e6      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bde:	f7ff f8f9 	bl	8002dd4 <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2319      	movs	r3, #25
 8003bea:	2201      	movs	r2, #1
 8003bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fac3 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0d1      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2221      	movs	r2, #33	; 0x21
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a3a      	ldr	r2, [r7, #32]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c28:	88f8      	ldrh	r0, [r7, #6]
 8003c2a:	893a      	ldrh	r2, [r7, #8]
 8003c2c:	8979      	ldrh	r1, [r7, #10]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4603      	mov	r3, r0
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f9d3 	bl	8003fe4 <I2C_RequestMemoryWrite>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0a9      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2bff      	cmp	r3, #255	; 0xff
 8003c58:	d90e      	bls.n	8003c78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	22ff      	movs	r2, #255	; 0xff
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	8979      	ldrh	r1, [r7, #10]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fc2b 	bl	80044cc <I2C_TransferConfig>
 8003c76:	e00f      	b.n	8003c98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	8979      	ldrh	r1, [r7, #10]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fc1a 	bl	80044cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 faad 	bl	80041fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e07b      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d034      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x1c8>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d130      	bne.n	8003d50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fa3f 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e04d      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2bff      	cmp	r3, #255	; 0xff
 8003d10:	d90e      	bls.n	8003d30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	22ff      	movs	r2, #255	; 0xff
 8003d16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	8979      	ldrh	r1, [r7, #10]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fbcf 	bl	80044cc <I2C_TransferConfig>
 8003d2e:	e00f      	b.n	8003d50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	8979      	ldrh	r1, [r7, #10]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fbbe 	bl	80044cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d19e      	bne.n	8003c98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa8c 	bl	800427c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e01a      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2220      	movs	r2, #32
 8003d74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <HAL_I2C_Mem_Write+0x224>)
 8003d82:	400b      	ands	r3, r1
 8003d84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	fe00e800 	.word	0xfe00e800

08003db0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	817b      	strh	r3, [r7, #10]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	813b      	strh	r3, [r7, #8]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 80fd 	bne.w	8003fd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_I2C_Mem_Read+0x34>
 8003dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0f1      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_I2C_Mem_Read+0x4e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0ea      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e06:	f7fe ffe5 	bl	8002dd4 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2319      	movs	r3, #25
 8003e12:	2201      	movs	r2, #1
 8003e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f9af 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0d5      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2222      	movs	r2, #34	; 0x22
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e50:	88f8      	ldrh	r0, [r7, #6]
 8003e52:	893a      	ldrh	r2, [r7, #8]
 8003e54:	8979      	ldrh	r1, [r7, #10]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4603      	mov	r3, r0
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f913 	bl	800408c <I2C_RequestMemoryRead>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0ad      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2bff      	cmp	r3, #255	; 0xff
 8003e80:	d90e      	bls.n	8003ea0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	8979      	ldrh	r1, [r7, #10]
 8003e90:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_I2C_Mem_Read+0x22c>)
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fb17 	bl	80044cc <I2C_TransferConfig>
 8003e9e:	e00f      	b.n	8003ec0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	8979      	ldrh	r1, [r7, #10]
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_I2C_Mem_Read+0x22c>)
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fb06 	bl	80044cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2104      	movs	r1, #4
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f956 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07c      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d034      	beq.n	8003f80 <HAL_I2C_Mem_Read+0x1d0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d130      	bne.n	8003f80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	2200      	movs	r2, #0
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f927 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04d      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	d90e      	bls.n	8003f60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	8979      	ldrh	r1, [r7, #10]
 8003f50:	2300      	movs	r3, #0
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fab7 	bl	80044cc <I2C_TransferConfig>
 8003f5e:	e00f      	b.n	8003f80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 faa6 	bl	80044cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d19a      	bne.n	8003ec0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f974 	bl	800427c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e01a      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_I2C_Mem_Read+0x230>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	80002400 	.word	0x80002400
 8003fe0:	fe00e800 	.word	0xfe00e800

08003fe4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	4608      	mov	r0, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	817b      	strh	r3, [r7, #10]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	813b      	strh	r3, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	4b20      	ldr	r3, [pc, #128]	; (8004088 <I2C_RequestMemoryWrite+0xa4>)
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fa5d 	bl	80044cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	69b9      	ldr	r1, [r7, #24]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8f0 	bl	80041fc <I2C_WaitOnTXISFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e02c      	b.n	8004080 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	629a      	str	r2, [r3, #40]	; 0x28
 8004036:	e015      	b.n	8004064 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004038:	893b      	ldrh	r3, [r7, #8]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	b29b      	uxth	r3, r3
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8d6 	bl	80041fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e012      	b.n	8004080 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800405a:	893b      	ldrh	r3, [r7, #8]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2200      	movs	r2, #0
 800406c:	2180      	movs	r1, #128	; 0x80
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f884 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	80002000 	.word	0x80002000

0800408c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	460b      	mov	r3, r1
 80040a0:	813b      	strh	r3, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	8979      	ldrh	r1, [r7, #10]
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <I2C_RequestMemoryRead+0xa4>)
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fa0a 	bl	80044cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f89d 	bl	80041fc <I2C_WaitOnTXISFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e02c      	b.n	8004126 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d2:	893b      	ldrh	r3, [r7, #8]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
 80040dc:	e015      	b.n	800410a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040de:	893b      	ldrh	r3, [r7, #8]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	69b9      	ldr	r1, [r7, #24]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f883 	bl	80041fc <I2C_WaitOnTXISFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e012      	b.n	8004126 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004100:	893b      	ldrh	r3, [r7, #8]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2200      	movs	r2, #0
 8004112:	2140      	movs	r1, #64	; 0x40
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f831 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	80002000 	.word	0x80002000

08004134 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d103      	bne.n	8004152 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d007      	beq.n	8004170 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	619a      	str	r2, [r3, #24]
  }
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418c:	e022      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d01e      	beq.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fe fe1d 	bl	8002dd4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d113      	bne.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e00f      	b.n	80041f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d0cd      	beq.n	800418e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004208:	e02c      	b.n	8004264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f870 	bl	80042f4 <I2C_IsErrorOccurred>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e02a      	b.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d01e      	beq.n	8004264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004226:	f7fe fdd5 	bl	8002dd4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d113      	bne.n	8004264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e007      	b.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d1cb      	bne.n	800420a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004288:	e028      	b.n	80042dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f830 	bl	80042f4 <I2C_IsErrorOccurred>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e026      	b.n	80042ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fe fd99 	bl	8002dd4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d113      	bne.n	80042dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e007      	b.n	80042ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d1cf      	bne.n	800428a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d075      	beq.n	800440c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2210      	movs	r2, #16
 8004326:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004328:	e056      	b.n	80043d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d052      	beq.n	80043d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe fd4f 	bl	8002dd4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_IsErrorOccurred+0x54>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d147      	bne.n	80043d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800435a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436a:	d12e      	bne.n	80043ca <I2C_IsErrorOccurred+0xd6>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004372:	d02a      	beq.n	80043ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	2b20      	cmp	r3, #32
 8004378:	d027      	beq.n	80043ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004388:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800438a:	f7fe fd23 	bl	8002dd4 <HAL_GetTick>
 800438e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004390:	e01b      	b.n	80043ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004392:	f7fe fd1f 	bl	8002dd4 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b19      	cmp	r3, #25
 800439e:	d914      	bls.n	80043ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d1dc      	bne.n	8004392 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d003      	beq.n	80043ee <I2C_IsErrorOccurred+0xfa>
 80043e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d09d      	beq.n	800432a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2220      	movs	r2, #32
 80043fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800442e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f043 0308 	orr.w	r3, r3, #8
 8004446:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800447a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01c      	beq.n	80044bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fe56 	bl	8004134 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <I2C_IsErrorOccurred+0x1d4>)
 8004494:	400b      	ands	r3, r1
 8004496:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	431a      	orrs	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80044bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3728      	adds	r7, #40	; 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	fe00e800 	.word	0xfe00e800

080044cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	817b      	strh	r3, [r7, #10]
 80044da:	4613      	mov	r3, r2
 80044dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044de:	897b      	ldrh	r3, [r7, #10]
 80044e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044e4:	7a7b      	ldrb	r3, [r7, #9]
 80044e6:	041b      	lsls	r3, r3, #16
 80044e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	0d5b      	lsrs	r3, r3, #21
 8004506:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <I2C_TransferConfig+0x60>)
 800450c:	430b      	orrs	r3, r1
 800450e:	43db      	mvns	r3, r3
 8004510:	ea02 0103 	and.w	r1, r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	03ff63ff 	.word	0x03ff63ff

08004530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b20      	cmp	r3, #32
 8004544:	d138      	bne.n	80045b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004550:	2302      	movs	r3, #2
 8004552:	e032      	b.n	80045ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e041      	b.n	800465c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80045e0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f245 5255 	movw	r2, #21845	; 0x5555
 80045ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6892      	ldr	r2, [r2, #8]
 80045fe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004600:	f7fe fbe8 	bl	8002dd4 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004606:	e00f      	b.n	8004628 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004608:	f7fe fbe4 	bl	8002dd4 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b31      	cmp	r3, #49	; 0x31
 8004614:	d908      	bls.n	8004628 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e019      	b.n	800465c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e8      	bne.n	8004608 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	d005      	beq.n	8004650 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68d2      	ldr	r2, [r2, #12]
 800464c:	611a      	str	r2, [r3, #16]
 800464e:	e004      	b.n	800465a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004674:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800468e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004692:	6013      	str	r3, [r2, #0]
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40007000 	.word	0x40007000

080046a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <HAL_PWREx_GetVoltageRange+0x18>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40007000 	.word	0x40007000

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e3ca      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d2:	4b97      	ldr	r3, [pc, #604]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046dc:	4b94      	ldr	r3, [pc, #592]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80e4 	beq.w	80048bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_RCC_OscConfig+0x4a>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b0c      	cmp	r3, #12
 80046fe:	f040 808b 	bne.w	8004818 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b01      	cmp	r3, #1
 8004706:	f040 8087 	bne.w	8004818 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800470a:	4b89      	ldr	r3, [pc, #548]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e3a2      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1a      	ldr	r2, [r3, #32]
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <HAL_RCC_OscConfig+0x7c>
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473a:	e005      	b.n	8004748 <HAL_RCC_OscConfig+0x88>
 800473c:	4b7c      	ldr	r3, [pc, #496]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004742:	091b      	lsrs	r3, r3, #4
 8004744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004748:	4293      	cmp	r3, r2
 800474a:	d223      	bcs.n	8004794 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fd55 	bl	8005200 <RCC_SetFlashLatencyFromMSIRange>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e383      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004760:	4b73      	ldr	r3, [pc, #460]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a72      	ldr	r2, [pc, #456]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004766:	f043 0308 	orr.w	r3, r3, #8
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	496d      	ldr	r1, [pc, #436]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800477e:	4b6c      	ldr	r3, [pc, #432]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	4968      	ldr	r1, [pc, #416]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
 8004792:	e025      	b.n	80047e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004794:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800479a:	f043 0308 	orr.w	r3, r3, #8
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b63      	ldr	r3, [pc, #396]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4960      	ldr	r1, [pc, #384]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b2:	4b5f      	ldr	r3, [pc, #380]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	495b      	ldr	r1, [pc, #364]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fd15 	bl	8005200 <RCC_SetFlashLatencyFromMSIRange>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e343      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047e0:	f000 fc4a 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b52      	ldr	r3, [pc, #328]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	4950      	ldr	r1, [pc, #320]	; (8004934 <HAL_RCC_OscConfig+0x274>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	4a4e      	ldr	r2, [pc, #312]	; (8004938 <HAL_RCC_OscConfig+0x278>)
 80047fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004800:	4b4e      	ldr	r3, [pc, #312]	; (800493c <HAL_RCC_OscConfig+0x27c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fa95 	bl	8002d34 <HAL_InitTick>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d052      	beq.n	80048ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	e327      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d032      	beq.n	8004886 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004820:	4b43      	ldr	r3, [pc, #268]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a42      	ldr	r2, [pc, #264]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800482c:	f7fe fad2 	bl	8002dd4 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004834:	f7fe face 	bl	8002dd4 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e310      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004846:	4b3a      	ldr	r3, [pc, #232]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a36      	ldr	r2, [pc, #216]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4931      	ldr	r1, [pc, #196]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004870:	4b2f      	ldr	r3, [pc, #188]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	492c      	ldr	r1, [pc, #176]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
 8004884:	e01a      	b.n	80048bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004886:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a29      	ldr	r2, [pc, #164]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004892:	f7fe fa9f 	bl	8002dd4 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800489a:	f7fe fa9b 	bl	8002dd4 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e2dd      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f0      	bne.n	800489a <HAL_RCC_OscConfig+0x1da>
 80048b8:	e000      	b.n	80048bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d074      	beq.n	80049b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x21a>
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	d10e      	bne.n	80048f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d10b      	bne.n	80048f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d064      	beq.n	80049b0 <HAL_RCC_OscConfig+0x2f0>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d160      	bne.n	80049b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e2ba      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d106      	bne.n	800490a <HAL_RCC_OscConfig+0x24a>
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0b      	ldr	r2, [pc, #44]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	e026      	b.n	8004958 <HAL_RCC_OscConfig+0x298>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004912:	d115      	bne.n	8004940 <HAL_RCC_OscConfig+0x280>
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a05      	ldr	r2, [pc, #20]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 800491a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a02      	ldr	r2, [pc, #8]	; (8004930 <HAL_RCC_OscConfig+0x270>)
 8004926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	e014      	b.n	8004958 <HAL_RCC_OscConfig+0x298>
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	0800c608 	.word	0x0800c608
 8004938:	20000008 	.word	0x20000008
 800493c:	20000034 	.word	0x20000034
 8004940:	4ba0      	ldr	r3, [pc, #640]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a9f      	ldr	r2, [pc, #636]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b9d      	ldr	r3, [pc, #628]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a9c      	ldr	r2, [pc, #624]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fe fa38 	bl	8002dd4 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004968:	f7fe fa34 	bl	8002dd4 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e276      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497a:	4b92      	ldr	r3, [pc, #584]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x2a8>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fe fa24 	bl	8002dd4 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004990:	f7fe fa20 	bl	8002dd4 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e262      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049a2:	4b88      	ldr	r3, [pc, #544]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x2d0>
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d060      	beq.n	8004a80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_OscConfig+0x310>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d119      	bne.n	80049fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d116      	bne.n	80049fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d0:	4b7c      	ldr	r3, [pc, #496]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_OscConfig+0x328>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e23f      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	061b      	lsls	r3, r3, #24
 80049f6:	4973      	ldr	r1, [pc, #460]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fc:	e040      	b.n	8004a80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d023      	beq.n	8004a4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a06:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a6e      	ldr	r2, [pc, #440]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fe f9df 	bl	8002dd4 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1a:	f7fe f9db 	bl	8002dd4 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e21d      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a2c:	4b65      	ldr	r3, [pc, #404]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4b62      	ldr	r3, [pc, #392]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	061b      	lsls	r3, r3, #24
 8004a46:	495f      	ldr	r1, [pc, #380]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
 8004a4c:	e018      	b.n	8004a80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4e:	4b5d      	ldr	r3, [pc, #372]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a5c      	ldr	r2, [pc, #368]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5a:	f7fe f9bb 	bl	8002dd4 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a62:	f7fe f9b7 	bl	8002dd4 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e1f9      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a74:	4b53      	ldr	r3, [pc, #332]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03c      	beq.n	8004b06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01c      	beq.n	8004ace <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a94:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9a:	4a4a      	ldr	r2, [pc, #296]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fe f996 	bl	8002dd4 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fe f992 	bl	8002dd4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1d4      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004abe:	4b41      	ldr	r3, [pc, #260]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ef      	beq.n	8004aac <HAL_RCC_OscConfig+0x3ec>
 8004acc:	e01b      	b.n	8004b06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ace:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad4:	4a3b      	ldr	r2, [pc, #236]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ade:	f7fe f979 	bl	8002dd4 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae6:	f7fe f975 	bl	8002dd4 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e1b7      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004af8:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ef      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80a6 	beq.w	8004c60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b14:	2300      	movs	r3, #0
 8004b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b18:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10d      	bne.n	8004b40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b30:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b40:	4b21      	ldr	r3, [pc, #132]	; (8004bc8 <HAL_RCC_OscConfig+0x508>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d118      	bne.n	8004b7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_RCC_OscConfig+0x508>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <HAL_RCC_OscConfig+0x508>)
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b58:	f7fe f93c 	bl	8002dd4 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b60:	f7fe f938 	bl	8002dd4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e17a      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_RCC_OscConfig+0x508>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d108      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4d8>
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b96:	e029      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	d115      	bne.n	8004bcc <HAL_RCC_OscConfig+0x50c>
 8004ba0:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	4a03      	ldr	r2, [pc, #12]	; (8004bc4 <HAL_RCC_OscConfig+0x504>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bc0:	e014      	b.n	8004bec <HAL_RCC_OscConfig+0x52c>
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	4b9c      	ldr	r3, [pc, #624]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	4a9b      	ldr	r2, [pc, #620]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bdc:	4b98      	ldr	r3, [pc, #608]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	4a97      	ldr	r2, [pc, #604]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d016      	beq.n	8004c22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fe f8ee 	bl	8002dd4 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fe f8ea 	bl	8002dd4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e12a      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c12:	4b8b      	ldr	r3, [pc, #556]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ed      	beq.n	8004bfc <HAL_RCC_OscConfig+0x53c>
 8004c20:	e015      	b.n	8004c4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fe f8d7 	bl	8002dd4 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fe f8d3 	bl	8002dd4 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e113      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c40:	4b7f      	ldr	r3, [pc, #508]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ed      	bne.n	8004c2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c4e:	7ffb      	ldrb	r3, [r7, #31]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c54:	4b7a      	ldr	r3, [pc, #488]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	4a79      	ldr	r2, [pc, #484]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80fe 	beq.w	8004e66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	f040 80d0 	bne.w	8004e14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c74:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0203 	and.w	r2, r3, #3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d130      	bne.n	8004cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	3b01      	subs	r3, #1
 8004c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d127      	bne.n	8004cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d11f      	bne.n	8004cea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb4:	2a07      	cmp	r2, #7
 8004cb6:	bf14      	ite	ne
 8004cb8:	2201      	movne	r2, #1
 8004cba:	2200      	moveq	r2, #0
 8004cbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d113      	bne.n	8004cea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d06e      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	d069      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004cf0:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0ad      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a4b      	ldr	r2, [pc, #300]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d18:	f7fe f85c 	bl	8002dd4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fe f858 	bl	8002dd4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e09a      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d32:	4b43      	ldr	r3, [pc, #268]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d3e:	4b40      	ldr	r3, [pc, #256]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	4b40      	ldr	r3, [pc, #256]	; (8004e44 <HAL_RCC_OscConfig+0x784>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d4e:	3a01      	subs	r2, #1
 8004d50:	0112      	lsls	r2, r2, #4
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d58:	0212      	lsls	r2, r2, #8
 8004d5a:	4311      	orrs	r1, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0552      	lsls	r2, r2, #21
 8004d66:	4311      	orrs	r1, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d6c:	0852      	lsrs	r2, r2, #1
 8004d6e:	3a01      	subs	r2, #1
 8004d70:	0652      	lsls	r2, r2, #25
 8004d72:	4311      	orrs	r1, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d78:	0912      	lsrs	r2, r2, #4
 8004d7a:	0452      	lsls	r2, r2, #17
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	4930      	ldr	r1, [pc, #192]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d84:	4b2e      	ldr	r3, [pc, #184]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2d      	ldr	r2, [pc, #180]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d9c:	f7fe f81a 	bl	8002dd4 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fe f816 	bl	8002dd4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e058      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db6:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dc2:	e050      	b.n	8004e66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e04f      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d148      	bne.n	8004e66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dec:	f7fd fff2 	bl	8002dd4 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fd ffee 	bl	8002dd4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e030      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x734>
 8004e12:	e028      	b.n	8004e66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d023      	beq.n	8004e62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <HAL_RCC_OscConfig+0x780>)
 8004e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fd ffd5 	bl	8002dd4 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	e00c      	b.n	8004e48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2e:	f7fd ffd1 	bl	8002dd4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d905      	bls.n	8004e48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e013      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
 8004e40:	40021000 	.word	0x40021000
 8004e44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_OscConfig+0x7b0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ec      	bne.n	8004e2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCC_OscConfig+0x7b0>)
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	4905      	ldr	r1, [pc, #20]	; (8004e70 <HAL_RCC_OscConfig+0x7b0>)
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_RCC_OscConfig+0x7b4>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60cb      	str	r3, [r1, #12]
 8004e60:	e001      	b.n	8004e66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	feeefffc 	.word	0xfeeefffc

08004e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0e7      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b75      	ldr	r3, [pc, #468]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d910      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b72      	ldr	r3, [pc, #456]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 0207 	bic.w	r2, r3, #7
 8004ea2:	4970      	ldr	r1, [pc, #448]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b6e      	ldr	r3, [pc, #440]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0cf      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d010      	beq.n	8004eea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	4b66      	ldr	r3, [pc, #408]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d908      	bls.n	8004eea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b63      	ldr	r3, [pc, #396]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4960      	ldr	r1, [pc, #384]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04c      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efe:	4b5a      	ldr	r3, [pc, #360]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d121      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e0a6      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f16:	4b54      	ldr	r3, [pc, #336]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d115      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e09a      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f2e:	4b4e      	ldr	r3, [pc, #312]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e08e      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f3e:	4b4a      	ldr	r3, [pc, #296]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e086      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f4e:	4b46      	ldr	r3, [pc, #280]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 0203 	bic.w	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4943      	ldr	r1, [pc, #268]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f60:	f7fd ff38 	bl	8002dd4 <HAL_GetTick>
 8004f64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f68:	f7fd ff34 	bl	8002dd4 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e06e      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7e:	4b3a      	ldr	r3, [pc, #232]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 020c 	and.w	r2, r3, #12
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d1eb      	bne.n	8004f68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	4b31      	ldr	r3, [pc, #196]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d208      	bcs.n	8004fbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b2e      	ldr	r3, [pc, #184]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	492b      	ldr	r1, [pc, #172]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fbe:	4b29      	ldr	r3, [pc, #164]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d210      	bcs.n	8004fee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fcc:	4b25      	ldr	r3, [pc, #148]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 0207 	bic.w	r2, r3, #7
 8004fd4:	4923      	ldr	r1, [pc, #140]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <HAL_RCC_ClockConfig+0x1ec>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d001      	beq.n	8004fee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e036      	b.n	800505c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4918      	ldr	r1, [pc, #96]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8005008:	4313      	orrs	r3, r2
 800500a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4910      	ldr	r1, [pc, #64]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800502c:	f000 f824 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	490b      	ldr	r1, [pc, #44]	; (800506c <HAL_RCC_ClockConfig+0x1f4>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <HAL_RCC_ClockConfig+0x1f8>)
 800504a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1fc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd fe6f 	bl	8002d34 <HAL_InitTick>
 8005056:	4603      	mov	r3, r0
 8005058:	72fb      	strb	r3, [r7, #11]

  return status;
 800505a:	7afb      	ldrb	r3, [r7, #11]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40022000 	.word	0x40022000
 8005068:	40021000 	.word	0x40021000
 800506c:	0800c608 	.word	0x0800c608
 8005070:	20000008 	.word	0x20000008
 8005074:	20000034 	.word	0x20000034

08005078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005078:	b480      	push	{r7}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005090:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x34>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b0c      	cmp	r3, #12
 80050a4:	d121      	bne.n	80050ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d11e      	bne.n	80050ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050ac:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050b8:	4b31      	ldr	r3, [pc, #196]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	e005      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050c8:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050d4:	4a2b      	ldr	r2, [pc, #172]	; (8005184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10d      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d102      	bne.n	80050f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <HAL_RCC_GetSysClockFreq+0x110>)
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	e004      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050fc:	4b23      	ldr	r3, [pc, #140]	; (800518c <HAL_RCC_GetSysClockFreq+0x114>)
 80050fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d134      	bne.n	8005170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005106:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d003      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0xa6>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d003      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0xac>
 800511c:	e005      	b.n	800512a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800511e:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <HAL_RCC_GetSysClockFreq+0x110>)
 8005120:	617b      	str	r3, [r7, #20]
      break;
 8005122:	e005      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_RCC_GetSysClockFreq+0x114>)
 8005126:	617b      	str	r3, [r7, #20]
      break;
 8005128:	e002      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	617b      	str	r3, [r7, #20]
      break;
 800512e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	3301      	adds	r3, #1
 800513c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	fb03 f202 	mul.w	r2, r3, r2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCC_GetSysClockFreq+0x108>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	0e5b      	lsrs	r3, r3, #25
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	3301      	adds	r3, #1
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005170:	69bb      	ldr	r3, [r7, #24]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000
 8005184:	0800c620 	.word	0x0800c620
 8005188:	00f42400 	.word	0x00f42400
 800518c:	007a1200 	.word	0x007a1200

08005190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000008 	.word	0x20000008

080051a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051ac:	f7ff fff0 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4904      	ldr	r1, [pc, #16]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40021000 	.word	0x40021000
 80051d0:	0800c618 	.word	0x0800c618

080051d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051d8:	f7ff ffda 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	0adb      	lsrs	r3, r3, #11
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4904      	ldr	r1, [pc, #16]	; (80051fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40021000 	.word	0x40021000
 80051fc:	0800c618 	.word	0x0800c618

08005200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800520c:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005218:	f7ff fa44 	bl	80046a4 <HAL_PWREx_GetVoltageRange>
 800521c:	6178      	str	r0, [r7, #20]
 800521e:	e014      	b.n	800524a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005220:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005224:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522a:	6593      	str	r3, [r2, #88]	; 0x58
 800522c:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800522e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005238:	f7ff fa34 	bl	80046a4 <HAL_PWREx_GetVoltageRange>
 800523c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005248:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005250:	d10b      	bne.n	800526a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b80      	cmp	r3, #128	; 0x80
 8005256:	d919      	bls.n	800528c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2ba0      	cmp	r3, #160	; 0xa0
 800525c:	d902      	bls.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800525e:	2302      	movs	r3, #2
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e013      	b.n	800528c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005264:	2301      	movs	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e010      	b.n	800528c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d902      	bls.n	8005276 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005270:	2303      	movs	r3, #3
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	e00a      	b.n	800528c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b80      	cmp	r3, #128	; 0x80
 800527a:	d102      	bne.n	8005282 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800527c:	2302      	movs	r3, #2
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e004      	b.n	800528c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b70      	cmp	r3, #112	; 0x70
 8005286:	d101      	bne.n	800528c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005288:	2301      	movs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800528c:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f023 0207 	bic.w	r2, r3, #7
 8005294:	4909      	ldr	r1, [pc, #36]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800529c:	4b07      	ldr	r3, [pc, #28]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40022000 	.word	0x40022000

080052c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052c8:	2300      	movs	r3, #0
 80052ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052cc:	2300      	movs	r3, #0
 80052ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d041      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052e4:	d02a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052ea:	d824      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052f0:	d008      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052f6:	d81e      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005300:	d010      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005302:	e018      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005304:	4b86      	ldr	r3, [pc, #536]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a85      	ldr	r2, [pc, #532]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005310:	e015      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fabb 	bl	8005894 <RCCEx_PLLSAI1_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005322:	e00c      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3320      	adds	r3, #32
 8005328:	2100      	movs	r1, #0
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fba6 	bl	8005a7c <RCCEx_PLLSAI2_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005334:	e003      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	74fb      	strb	r3, [r7, #19]
      break;
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800533c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005352:	4973      	ldr	r1, [pc, #460]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800535a:	e001      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d041      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005370:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005374:	d02a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800537a:	d824      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800537c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005380:	d008      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005386:	d81e      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800538c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005390:	d010      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005392:	e018      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005394:	4b62      	ldr	r3, [pc, #392]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a61      	ldr	r2, [pc, #388]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053a0:	e015      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2100      	movs	r1, #0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fa73 	bl	8005894 <RCCEx_PLLSAI1_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053b2:	e00c      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3320      	adds	r3, #32
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fb5e 	bl	8005a7c <RCCEx_PLLSAI2_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053c4:	e003      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	74fb      	strb	r3, [r7, #19]
      break;
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80053cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053d4:	4b52      	ldr	r3, [pc, #328]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e2:	494f      	ldr	r1, [pc, #316]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053ea:	e001      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80a0 	beq.w	800553e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053fe:	2300      	movs	r3, #0
 8005400:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005402:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005418:	4b41      	ldr	r3, [pc, #260]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	4a40      	ldr	r2, [pc, #256]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	6593      	str	r3, [r2, #88]	; 0x58
 8005424:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005430:	2301      	movs	r3, #1
 8005432:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005434:	4b3b      	ldr	r3, [pc, #236]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a3a      	ldr	r2, [pc, #232]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800543a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005440:	f7fd fcc8 	bl	8002dd4 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005446:	e009      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005448:	f7fd fcc4 	bl	8002dd4 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d902      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	74fb      	strb	r3, [r7, #19]
        break;
 800545a:	e005      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800545c:	4b31      	ldr	r3, [pc, #196]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ef      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d15c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01f      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	429a      	cmp	r2, r3
 800548a:	d019      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005498:	4b21      	ldr	r3, [pc, #132]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	4a20      	ldr	r2, [pc, #128]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a8:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054b8:	4a19      	ldr	r2, [pc, #100]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d016      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7fd fc83 	bl	8002dd4 <HAL_GetTick>
 80054ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d0:	e00b      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fd fc7f 	bl	8002dd4 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d902      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	74fb      	strb	r3, [r7, #19]
            break;
 80054e8:	e006      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0ec      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550e:	4904      	ldr	r1, [pc, #16]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005516:	e009      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
 800551c:	e006      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000
 8005524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800552c:	7c7b      	ldrb	r3, [r7, #17]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d105      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005532:	4b9e      	ldr	r3, [pc, #632]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	4a9d      	ldr	r2, [pc, #628]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800554a:	4b98      	ldr	r3, [pc, #608]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f023 0203 	bic.w	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	4994      	ldr	r1, [pc, #592]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800556c:	4b8f      	ldr	r3, [pc, #572]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 020c 	bic.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	498c      	ldr	r1, [pc, #560]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800558e:	4b87      	ldr	r3, [pc, #540]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	4983      	ldr	r1, [pc, #524]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055b0:	4b7e      	ldr	r3, [pc, #504]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	497b      	ldr	r1, [pc, #492]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055d2:	4b76      	ldr	r3, [pc, #472]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e0:	4972      	ldr	r1, [pc, #456]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055f4:	4b6d      	ldr	r3, [pc, #436]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	496a      	ldr	r1, [pc, #424]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005616:	4b65      	ldr	r3, [pc, #404]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005624:	4961      	ldr	r1, [pc, #388]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005638:	4b5c      	ldr	r3, [pc, #368]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005646:	4959      	ldr	r1, [pc, #356]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800565a:	4b54      	ldr	r3, [pc, #336]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	4950      	ldr	r1, [pc, #320]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800567c:	4b4b      	ldr	r3, [pc, #300]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	4948      	ldr	r1, [pc, #288]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800569e:	4b43      	ldr	r3, [pc, #268]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	493f      	ldr	r1, [pc, #252]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d028      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c0:	4b3a      	ldr	r3, [pc, #232]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ce:	4937      	ldr	r1, [pc, #220]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056de:	d106      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e0:	4b32      	ldr	r3, [pc, #200]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a31      	ldr	r2, [pc, #196]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ea:	60d3      	str	r3, [r2, #12]
 80056ec:	e011      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f6:	d10c      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	2101      	movs	r1, #1
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f8c8 	bl	8005894 <RCCEx_PLLSAI1_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d028      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800571e:	4b23      	ldr	r3, [pc, #140]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	491f      	ldr	r1, [pc, #124]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800573c:	d106      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573e:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005748:	60d3      	str	r3, [r2, #12]
 800574a:	e011      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005754:	d10c      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3304      	adds	r3, #4
 800575a:	2101      	movs	r1, #1
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f899 	bl	8005894 <RCCEx_PLLSAI1_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005766:	7cfb      	ldrb	r3, [r7, #19]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02b      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578a:	4908      	ldr	r1, [pc, #32]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800579a:	d109      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800579c:	4b03      	ldr	r3, [pc, #12]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a02      	ldr	r2, [pc, #8]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a6:	60d3      	str	r3, [r2, #12]
 80057a8:	e014      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3304      	adds	r3, #4
 80057be:	2101      	movs	r1, #1
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 f867 	bl	8005894 <RCCEx_PLLSAI1_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ca:	7cfb      	ldrb	r3, [r7, #19]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
 80057d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02f      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e0:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ee:	4928      	ldr	r1, [pc, #160]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fe:	d10d      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	2102      	movs	r1, #2
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f844 	bl	8005894 <RCCEx_PLLSAI1_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d014      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005816:	7cfb      	ldrb	r3, [r7, #19]
 8005818:	74bb      	strb	r3, [r7, #18]
 800581a:	e011      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005824:	d10c      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3320      	adds	r3, #32
 800582a:	2102      	movs	r1, #2
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f925 	bl	8005a7c <RCCEx_PLLSAI2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005836:	7cfb      	ldrb	r3, [r7, #19]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005852:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585a:	490d      	ldr	r1, [pc, #52]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800586e:	4b08      	ldr	r3, [pc, #32]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587e:	4904      	ldr	r1, [pc, #16]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005886:	7cbb      	ldrb	r3, [r7, #18]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000

08005894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058a2:	4b75      	ldr	r3, [pc, #468]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058ae:	4b72      	ldr	r3, [pc, #456]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0203 	and.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d10d      	bne.n	80058da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
       ||
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058c6:	4b6c      	ldr	r3, [pc, #432]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
       ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d047      	beq.n	800596a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
 80058de:	e044      	b.n	800596a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d018      	beq.n	800591a <RCCEx_PLLSAI1_Config+0x86>
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d825      	bhi.n	8005938 <RCCEx_PLLSAI1_Config+0xa4>
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d002      	beq.n	80058f6 <RCCEx_PLLSAI1_Config+0x62>
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d009      	beq.n	8005908 <RCCEx_PLLSAI1_Config+0x74>
 80058f4:	e020      	b.n	8005938 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058f6:	4b60      	ldr	r3, [pc, #384]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d11d      	bne.n	800593e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005906:	e01a      	b.n	800593e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005908:	4b5b      	ldr	r3, [pc, #364]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d116      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005918:	e013      	b.n	8005942 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800591a:	4b57      	ldr	r3, [pc, #348]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005926:	4b54      	ldr	r3, [pc, #336]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005936:	e006      	b.n	8005946 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
      break;
 800593c:	e004      	b.n	8005948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005946:	bf00      	nop
    }

    if(status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10d      	bne.n	800596a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800594e:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6819      	ldr	r1, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	3b01      	subs	r3, #1
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	430b      	orrs	r3, r1
 8005964:	4944      	ldr	r1, [pc, #272]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005966:	4313      	orrs	r3, r2
 8005968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d17d      	bne.n	8005a6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005970:	4b41      	ldr	r3, [pc, #260]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a40      	ldr	r2, [pc, #256]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800597a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597c:	f7fd fa2a 	bl	8002dd4 <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005982:	e009      	b.n	8005998 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005984:	f7fd fa26 	bl	8002dd4 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d902      	bls.n	8005998 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	73fb      	strb	r3, [r7, #15]
        break;
 8005996:	e005      	b.n	80059a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005998:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ef      	bne.n	8005984 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d160      	bne.n	8005a6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d111      	bne.n	80059d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059b0:	4b31      	ldr	r3, [pc, #196]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
 80059c0:	0211      	lsls	r1, r2, #8
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68d2      	ldr	r2, [r2, #12]
 80059c6:	0912      	lsrs	r2, r2, #4
 80059c8:	0452      	lsls	r2, r2, #17
 80059ca:	430a      	orrs	r2, r1
 80059cc:	492a      	ldr	r1, [pc, #168]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	610b      	str	r3, [r1, #16]
 80059d2:	e027      	b.n	8005a24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d112      	bne.n	8005a00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059da:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6892      	ldr	r2, [r2, #8]
 80059ea:	0211      	lsls	r1, r2, #8
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6912      	ldr	r2, [r2, #16]
 80059f0:	0852      	lsrs	r2, r2, #1
 80059f2:	3a01      	subs	r2, #1
 80059f4:	0552      	lsls	r2, r2, #21
 80059f6:	430a      	orrs	r2, r1
 80059f8:	491f      	ldr	r1, [pc, #124]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	610b      	str	r3, [r1, #16]
 80059fe:	e011      	b.n	8005a24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a00:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6892      	ldr	r2, [r2, #8]
 8005a10:	0211      	lsls	r1, r2, #8
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6952      	ldr	r2, [r2, #20]
 8005a16:	0852      	lsrs	r2, r2, #1
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	0652      	lsls	r2, r2, #25
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	4916      	ldr	r1, [pc, #88]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a24:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a13      	ldr	r2, [pc, #76]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a30:	f7fd f9d0 	bl	8002dd4 <HAL_GetTick>
 8005a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a36:	e009      	b.n	8005a4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a38:	f7fd f9cc 	bl	8002dd4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d902      	bls.n	8005a4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	73fb      	strb	r3, [r7, #15]
          break;
 8005a4a:	e005      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ef      	beq.n	8005a38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	4904      	ldr	r1, [pc, #16]	; (8005a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000

08005a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d018      	beq.n	8005ac8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a96:	4b67      	ldr	r3, [pc, #412]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0203 	and.w	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d10d      	bne.n	8005ac2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aae:	4b61      	ldr	r3, [pc, #388]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	091b      	lsrs	r3, r3, #4
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
       ||
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d047      	beq.n	8005b52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	e044      	b.n	8005b52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d018      	beq.n	8005b02 <RCCEx_PLLSAI2_Config+0x86>
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d825      	bhi.n	8005b20 <RCCEx_PLLSAI2_Config+0xa4>
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d002      	beq.n	8005ade <RCCEx_PLLSAI2_Config+0x62>
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d009      	beq.n	8005af0 <RCCEx_PLLSAI2_Config+0x74>
 8005adc:	e020      	b.n	8005b20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ade:	4b55      	ldr	r3, [pc, #340]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d11d      	bne.n	8005b26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aee:	e01a      	b.n	8005b26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005af0:	4b50      	ldr	r3, [pc, #320]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d116      	bne.n	8005b2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b00:	e013      	b.n	8005b2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b02:	4b4c      	ldr	r3, [pc, #304]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10f      	bne.n	8005b2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b0e:	4b49      	ldr	r3, [pc, #292]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b1e:	e006      	b.n	8005b2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      break;
 8005b24:	e004      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b26:	bf00      	nop
 8005b28:	e002      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b36:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6819      	ldr	r1, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	4939      	ldr	r1, [pc, #228]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d167      	bne.n	8005c28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b58:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a35      	ldr	r2, [pc, #212]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b64:	f7fd f936 	bl	8002dd4 <HAL_GetTick>
 8005b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b6a:	e009      	b.n	8005b80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b6c:	f7fd f932 	bl	8002dd4 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d902      	bls.n	8005b80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b7e:	e005      	b.n	8005b8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b80:	4b2c      	ldr	r3, [pc, #176]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1ef      	bne.n	8005b6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d14a      	bne.n	8005c28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d111      	bne.n	8005bbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b98:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6892      	ldr	r2, [r2, #8]
 8005ba8:	0211      	lsls	r1, r2, #8
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68d2      	ldr	r2, [r2, #12]
 8005bae:	0912      	lsrs	r2, r2, #4
 8005bb0:	0452      	lsls	r2, r2, #17
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	491f      	ldr	r1, [pc, #124]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	614b      	str	r3, [r1, #20]
 8005bba:	e011      	b.n	8005be0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6892      	ldr	r2, [r2, #8]
 8005bcc:	0211      	lsls	r1, r2, #8
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6912      	ldr	r2, [r2, #16]
 8005bd2:	0852      	lsrs	r2, r2, #1
 8005bd4:	3a01      	subs	r2, #1
 8005bd6:	0652      	lsls	r2, r2, #25
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	4916      	ldr	r1, [pc, #88]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005be0:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bec:	f7fd f8f2 	bl	8002dd4 <HAL_GetTick>
 8005bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bf2:	e009      	b.n	8005c08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bf4:	f7fd f8ee 	bl	8002dd4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d902      	bls.n	8005c08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	73fb      	strb	r3, [r7, #15]
          break;
 8005c06:	e005      	b.n	8005c14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0ef      	beq.n	8005bf4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	4904      	ldr	r1, [pc, #16]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000

08005c38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d06c      	beq.n	8005d24 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f865 	bl	8005d2e <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	22ca      	movs	r2, #202	; 0xca
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2253      	movs	r2, #83	; 0x53
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fa53 	bl	8006128 <RTC_EnterInitMode>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d14b      	bne.n	8005d24 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68d2      	ldr	r2, [r2, #12]
 8005cc6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6919      	ldr	r1, [r3, #16]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	041a      	lsls	r2, r3, #16
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fa57 	bl	8006190 <RTC_ExitInitMode>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11b      	bne.n	8005d24 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0203 	bic.w	r2, r2, #3
 8005cfa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69da      	ldr	r2, [r3, #28]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d42:	b590      	push	{r4, r7, lr}
 8005d44:	b087      	sub	sp, #28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_RTC_SetTime+0x1a>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e08b      	b.n	8005e74 <HAL_RTC_SetTime+0x132>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	22ca      	movs	r2, #202	; 0xca
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2253      	movs	r2, #83	; 0x53
 8005d7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f9d3 	bl	8006128 <RTC_EnterInitMode>
 8005d82:	4603      	mov	r3, r0
 8005d84:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d86:	7cfb      	ldrb	r3, [r7, #19]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d163      	bne.n	8005e54 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d126      	bne.n	8005de0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fa2e 	bl	800620c <RTC_ByteToBcd2>
 8005db0:	4603      	mov	r3, r0
 8005db2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fa27 	bl	800620c <RTC_ByteToBcd2>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005dc2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	789b      	ldrb	r3, [r3, #2]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fa1f 	bl	800620c <RTC_ByteToBcd2>
 8005dce:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005dd0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e018      	b.n	8005e12 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2200      	movs	r2, #0
 8005df2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e00:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e06:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e1c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e20:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6899      	ldr	r1, [r3, #8]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f9a0 	bl	8006190 <RTC_ExitInitMode>
 8005e50:	4603      	mov	r3, r0
 8005e52:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	22ff      	movs	r2, #255	; 0xff
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005e72:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd90      	pop	{r4, r7, pc}

08005e7c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005eaa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005eae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	0d9b      	lsrs	r3, r3, #22
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11a      	bne.n	8005f2a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f9a7 	bl	800624c <RTC_Bcd2ToByte>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f99e 	bl	800624c <RTC_Bcd2ToByte>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	789b      	ldrb	r3, [r3, #2]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 f995 	bl	800624c <RTC_Bcd2ToByte>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_RTC_SetDate+0x1a>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e075      	b.n	800603a <HAL_RTC_SetDate+0x106>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10e      	bne.n	8005f82 <HAL_RTC_SetDate+0x4e>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	f023 0310 	bic.w	r3, r3, #16
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	330a      	adds	r3, #10
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11c      	bne.n	8005fc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	78db      	ldrb	r3, [r3, #3]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 f93d 	bl	800620c <RTC_ByteToBcd2>
 8005f92:	4603      	mov	r3, r0
 8005f94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f936 	bl	800620c <RTC_ByteToBcd2>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005fa4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	789b      	ldrb	r3, [r3, #2]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f92e 	bl	800620c <RTC_ByteToBcd2>
 8005fb0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005fb2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e00e      	b.n	8005fe0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005fce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005fd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	22ca      	movs	r2, #202	; 0xca
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2253      	movs	r2, #83	; 0x53
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f899 	bl	8006128 <RTC_EnterInitMode>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10c      	bne.n	800601a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800600e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f8bd 	bl	8006190 <RTC_ExitInitMode>
 8006016:	4603      	mov	r3, r0
 8006018:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	22ff      	movs	r2, #255	; 0xff
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006038:	7cfb      	ldrb	r3, [r7, #19]
}
 800603a:	4618      	mov	r0, r3
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd90      	pop	{r4, r7, pc}

08006042 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800605c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	b2da      	uxtb	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	b2da      	uxtb	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006080:	b2da      	uxtb	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	0b5b      	lsrs	r3, r3, #13
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11a      	bne.n	80060d2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 f8d3 	bl	800624c <RTC_Bcd2ToByte>
 80060a6:	4603      	mov	r3, r0
 80060a8:	461a      	mov	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f8ca 	bl	800624c <RTC_Bcd2ToByte>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	789b      	ldrb	r3, [r3, #2]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f8c1 	bl	800624c <RTC_Bcd2ToByte>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060f2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80060f4:	f7fc fe6e 	bl	8002dd4 <HAL_GetTick>
 80060f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060fa:	e009      	b.n	8006110 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060fc:	f7fc fe6a 	bl	8002dd4 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610a:	d901      	bls.n	8006110 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e007      	b.n	8006120 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ee      	beq.n	80060fc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d120      	bne.n	8006184 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f04f 32ff 	mov.w	r2, #4294967295
 800614a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800614c:	f7fc fe42 	bl	8002dd4 <HAL_GetTick>
 8006150:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006152:	e00d      	b.n	8006170 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006154:	f7fc fe3e 	bl	8002dd4 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006162:	d905      	bls.n	8006170 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2203      	movs	r2, #3
 800616c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <RTC_EnterInitMode+0x5c>
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b03      	cmp	r3, #3
 8006182:	d1e7      	bne.n	8006154 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800619c:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <RTC_ExitInitMode+0x78>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <RTC_ExitInitMode+0x78>)
 80061a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80061a8:	4b17      	ldr	r3, [pc, #92]	; (8006208 <RTC_ExitInitMode+0x78>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10c      	bne.n	80061ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff91 	bl	80060dc <HAL_RTC_WaitForSynchro>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01e      	beq.n	80061fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2203      	movs	r2, #3
 80061c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	e017      	b.n	80061fe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061ce:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <RTC_ExitInitMode+0x78>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	4a0d      	ldr	r2, [pc, #52]	; (8006208 <RTC_ExitInitMode+0x78>)
 80061d4:	f023 0320 	bic.w	r3, r3, #32
 80061d8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ff7e 	bl	80060dc <HAL_RTC_WaitForSynchro>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2203      	movs	r2, #3
 80061ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <RTC_ExitInitMode+0x78>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	4a04      	ldr	r2, [pc, #16]	; (8006208 <RTC_ExitInitMode+0x78>)
 80061f8:	f043 0320 	orr.w	r3, r3, #32
 80061fc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40002800 	.word	0x40002800

0800620c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800621e:	e005      	b.n	800622c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006226:	7afb      	ldrb	r3, [r7, #11]
 8006228:	3b0a      	subs	r3, #10
 800622a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	2b09      	cmp	r3, #9
 8006230:	d8f6      	bhi.n	8006220 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	b2da      	uxtb	r2, r3
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	4313      	orrs	r3, r2
 800623e:	b2db      	uxtb	r3, r3
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	0092      	lsls	r2, r2, #2
 8006260:	4413      	add	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	b2da      	uxtb	r2, r3
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	4413      	add	r3, r2
 8006272:	b2db      	uxtb	r3, r3
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e0be      	b.n	8006410 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d108      	bne.n	80062ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a2:	d009      	beq.n	80062b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	61da      	str	r2, [r3, #28]
 80062aa:	e005      	b.n	80062b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f8cb 	bl	8006468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062f2:	d902      	bls.n	80062fa <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e002      	b.n	8006300 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006308:	d007      	beq.n	800631a <HAL_SPI_Init+0x9a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006312:	d002      	beq.n	800631a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635c:	ea42 0103 	orr.w	r1, r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006378:	d11b      	bne.n	80063b2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800638a:	d903      	bls.n	8006394 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
 8006392:	e002      	b.n	800639a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d107      	bne.n	80063b2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	f003 0204 	and.w	r2, r3, #4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063d8:	ea42 0103 	orr.w	r1, r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f2:	d105      	bne.n	8006400 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	b292      	uxth	r2, r2
 80063fe:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e01a      	b.n	8006460 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006440:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f81a 	bl	800647c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08c      	sub	sp, #48	; 0x30
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b6:	d112      	bne.n	80064de <HAL_SPI_Receive+0x4e>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10e      	bne.n	80064de <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2204      	movs	r2, #4
 80064c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064c8:	88fa      	ldrh	r2, [r7, #6]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	4613      	mov	r3, r2
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f9c4 	bl	8006862 <HAL_SPI_TransmitReceive>
 80064da:	4603      	mov	r3, r0
 80064dc:	e1bd      	b.n	800685a <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_SPI_Receive+0x5c>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e1b6      	b.n	800685a <HAL_SPI_Receive+0x3ca>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064f4:	f7fc fc6e 	bl	8002dd4 <HAL_GetTick>
 80064f8:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	d003      	beq.n	800650e <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8006506:	2302      	movs	r3, #2
 8006508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 800650c:	e19b      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_SPI_Receive+0x8a>
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8006520:	e191      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2204      	movs	r2, #4
 8006526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656c:	d118      	bne.n	80065a0 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800658c:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065a8:	d908      	bls.n	80065bc <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	e007      	b.n	80065cc <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065ca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d10f      	bne.n	80065f6 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d007      	beq.n	8006614 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006612:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800661c:	d869      	bhi.n	80066f2 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800661e:	e031      	b.n	8006684 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d117      	bne.n	800665e <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f103 020c 	add.w	r2, r3, #12
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800665c:	e012      	b.n	8006684 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800665e:	f7fc fbb9 	bl	8002dd4 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d803      	bhi.n	8006676 <HAL_SPI_Receive+0x1e6>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d102      	bne.n	800667c <HAL_SPI_Receive+0x1ec>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006682:	e0e0      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1c7      	bne.n	8006620 <HAL_SPI_Receive+0x190>
 8006690:	e035      	b.n	80066fe <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	d115      	bne.n	80066cc <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	b292      	uxth	r2, r2
 80066ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	1c9a      	adds	r2, r3, #2
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066ca:	e012      	b.n	80066f2 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066cc:	f7fc fb82 	bl	8002dd4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d803      	bhi.n	80066e4 <HAL_SPI_Receive+0x254>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d102      	bne.n	80066ea <HAL_SPI_Receive+0x25a>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80066f0:	e0a9      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1c9      	bne.n	8006692 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006706:	d178      	bne.n	80067fa <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006716:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2201      	movs	r2, #1
 8006720:	2101      	movs	r1, #1
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f001 f9ba 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8006734:	e087      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800673e:	d907      	bls.n	8006750 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	b292      	uxth	r2, r2
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e008      	b.n	8006762 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f103 020c 	add.w	r2, r3, #12
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	7812      	ldrb	r2, [r2, #0]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	2101      	movs	r1, #1
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f001 f995 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d009      	beq.n	800678c <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677c:	f043 0202 	orr.w	r2, r3, #2
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800678a:	e05c      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006794:	d105      	bne.n	80067a2 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	e02b      	b.n	80067fa <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067b2:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067bc:	d11d      	bne.n	80067fa <HAL_SPI_Receive+0x36a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d119      	bne.n	80067fa <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2201      	movs	r2, #1
 80067ce:	2101      	movs	r1, #1
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f001 f963 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e0:	f043 0202 	orr.w	r2, r3, #2
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80067ee:	e02a      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067fa:	6a3a      	ldr	r2, [r7, #32]
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f001 fa6a 	bl	8007cd8 <SPI_EndRxTransaction>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	2b10      	cmp	r3, #16
 800681c:	d10a      	bne.n	8006834 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006832:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006842:	e000      	b.n	8006846 <HAL_SPI_Receive+0x3b6>
  }

error :
 8006844:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800685a:	4618      	mov	r0, r3
 800685c:	3728      	adds	r7, #40	; 0x28
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b092      	sub	sp, #72	; 0x48
 8006866:	af02      	add	r7, sp, #8
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006878:	2301      	movs	r3, #1
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x2e>
 800688c:	2302      	movs	r3, #2
 800688e:	e2c8      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x5c0>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006898:	f7fc fa9c 	bl	8002dd4 <HAL_GetTick>
 800689c:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80068ae:	887b      	ldrh	r3, [r7, #2]
 80068b0:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80068b2:	887b      	ldrh	r3, [r7, #2]
 80068b4:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d00f      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x8c>
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d4:	d107      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0x84>
 80068de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d003      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
 80068e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80068ec:	e28f      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x9e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x9e>
 80068fa:	887b      	ldrh	r3, [r7, #2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d103      	bne.n	8006908 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8006906:	e282      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b04      	cmp	r3, #4
 8006912:	d003      	beq.n	800691c <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2205      	movs	r2, #5
 8006918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	887a      	ldrh	r2, [r7, #2]
 800692c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	887a      	ldrh	r2, [r7, #2]
 8006934:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	887a      	ldrh	r2, [r7, #2]
 8006942:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	887a      	ldrh	r2, [r7, #2]
 8006948:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695e:	d10f      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800697e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006988:	d802      	bhi.n	8006990 <HAL_SPI_TransmitReceive+0x12e>
 800698a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800698c:	2b01      	cmp	r3, #1
 800698e:	d908      	bls.n	80069a2 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	e007      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d007      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d8:	f240 80a4 	bls.w	8006b24 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x18a>
 80069e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	f040 808e 	bne.w	8006b08 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	881a      	ldrh	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	1c9a      	adds	r2, r3, #2
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a10:	e07a      	b.n	8006b08 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d13f      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x23e>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d03a      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x23e>
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d137      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d11e      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x23e>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6a:	d119      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10c      	bne.n	8006a90 <HAL_SPI_TransmitReceive+0x22e>
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a9e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d11c      	bne.n	8006ae8 <HAL_SPI_TransmitReceive+0x286>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	b292      	uxth	r2, r2
 8006ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ae8:	f7fc f974 	bl	8002dd4 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d807      	bhi.n	8006b08 <HAL_SPI_TransmitReceive+0x2a6>
 8006af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afe:	d003      	beq.n	8006b08 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006b06:	e182      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f af7f 	bne.w	8006a12 <HAL_SPI_TransmitReceive+0x1b0>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f47f af78 	bne.w	8006a12 <HAL_SPI_TransmitReceive+0x1b0>
 8006b22:	e103      	b.n	8006d2c <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x2d2>
 8006b2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	f040 80ef 	bne.w	8006d12 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d912      	bls.n	8006b64 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	881a      	ldrh	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	1c9a      	adds	r2, r3, #2
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b02      	subs	r3, #2
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b62:	e0d6      	b.n	8006d12 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	330c      	adds	r3, #12
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b8a:	e0c2      	b.n	8006d12 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d158      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x3ea>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d053      	beq.n	8006c4c <HAL_SPI_TransmitReceive+0x3ea>
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d150      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d912      	bls.n	8006bda <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	881a      	ldrh	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	1c9a      	adds	r2, r3, #2
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b02      	subs	r3, #2
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bd8:	e012      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	7812      	ldrb	r2, [r2, #0]
 8006be6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d11e      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x3ea>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c16:	d119      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10c      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x3da>
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c4a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d148      	bne.n	8006cec <HAL_SPI_TransmitReceive+0x48a>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d042      	beq.n	8006cec <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d923      	bls.n	8006cba <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	b292      	uxth	r2, r2
 8006c7e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b02      	subs	r3, #2
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d81f      	bhi.n	8006ce8 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	e016      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f103 020c 	add.w	r2, r3, #12
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	7812      	ldrb	r2, [r2, #0]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cec:	f7fc f872 	bl	8002dd4 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d803      	bhi.n	8006d04 <HAL_SPI_TransmitReceive+0x4a2>
 8006cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_TransmitReceive+0x4a8>
 8006d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006d10:	e07d      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f47f af37 	bne.w	8006b8c <HAL_SPI_TransmitReceive+0x32a>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f47f af30 	bne.w	8006b8c <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d34:	d146      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	2101      	movs	r1, #1
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 feab 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d50:	f043 0202 	orr.w	r2, r3, #2
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8006d5e:	e056      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d68:	d105      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	e026      	b.n	8006dc4 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d86:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d119      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d96:	2201      	movs	r2, #1
 8006d98:	2101      	movs	r1, #1
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fe7e 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006daa:	f043 0202 	orr.w	r2, r3, #2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006db8:	e029      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d10d      	bne.n	8006dee <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd6:	f043 0202 	orr.w	r2, r3, #2
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006de6:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 ffc8 	bl	8007d88 <SPI_EndRxTxTransaction>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d006      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	661a      	str	r2, [r3, #96]	; 0x60
 8006e0a:	e000      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8006e0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3740      	adds	r7, #64	; 0x40
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4613      	mov	r3, r2
 8006e38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_SPI_Transmit_IT+0x20>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e087      	b.n	8006f5c <HAL_SPI_Transmit_IT+0x130>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_Transmit_IT+0x34>
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d102      	bne.n	8006e66 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e64:	e075      	b.n	8006f52 <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006e72:	2302      	movs	r3, #2
 8006e74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e76:	e06c      	b.n	8006f52 <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	88fa      	ldrh	r2, [r7, #6]
 8006e96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ebc:	d903      	bls.n	8006ec6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <HAL_SPI_Transmit_IT+0x13c>)
 8006ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8006ec4:	e002      	b.n	8006ecc <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <HAL_SPI_Transmit_IT+0x140>)
 8006eca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed4:	d10f      	bne.n	8006ef6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef4:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efe:	d10f      	bne.n	8006f20 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f1e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006f2e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b40      	cmp	r3, #64	; 0x40
 8006f3c:	d008      	beq.n	8006f50 <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e000      	b.n	8006f52 <HAL_SPI_Transmit_IT+0x126>
  }

error :
 8006f50:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	08007a3d 	.word	0x08007a3d
 8006f6c:	080079dd 	.word	0x080079dd

08006f70 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d110      	bne.n	8006fac <HAL_SPI_Receive_IT+0x3c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f92:	d10b      	bne.n	8006fac <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2204      	movs	r2, #4
 8006f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 f8bc 	bl	8007120 <HAL_SPI_TransmitReceive_IT>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	e0b1      	b.n	8007110 <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_SPI_Receive_IT+0x4a>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e0aa      	b.n	8007110 <HAL_SPI_Receive_IT+0x1a0>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d002      	beq.n	8006fd4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fd2:	e098      	b.n	8007106 <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_SPI_Receive_IT+0x70>
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fe4:	e08f      	b.n	8007106 <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2204      	movs	r2, #4
 8006fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	88fa      	ldrh	r2, [r7, #6]
 8006ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	88fa      	ldrh	r2, [r7, #6]
 8007006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800702a:	d90b      	bls.n	8007044 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800703a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a36      	ldr	r2, [pc, #216]	; (8007118 <HAL_SPI_Receive_IT+0x1a8>)
 8007040:	64da      	str	r2, [r3, #76]	; 0x4c
 8007042:	e00a      	b.n	800705a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007052:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4a31      	ldr	r2, [pc, #196]	; (800711c <HAL_SPI_Receive_IT+0x1ac>)
 8007058:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007062:	d10f      	bne.n	8007084 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007072:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007082:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708c:	d11f      	bne.n	80070ce <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800709c:	d806      	bhi.n	80070ac <HAL_SPI_Receive_IT+0x13c>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d102      	bne.n	80070ac <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2202      	movs	r2, #2
 80070aa:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e002      	b.n	80070d4 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80070e2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d008      	beq.n	8007104 <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e000      	b.n	8007106 <HAL_SPI_Receive_IT+0x196>
  }

error :
 8007104:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	08007955 	.word	0x08007955
 800711c:	08007895 	.word	0x08007895

08007120 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_SPI_TransmitReceive_IT+0x20>
 800713c:	2302      	movs	r3, #2
 800713e:	e0b9      	b.n	80072b4 <HAL_SPI_TransmitReceive_IT+0x194>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800714e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007156:	7dbb      	ldrb	r3, [r7, #22]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d00d      	beq.n	8007178 <HAL_SPI_TransmitReceive_IT+0x58>
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007162:	d106      	bne.n	8007172 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_SPI_TransmitReceive_IT+0x52>
 800716c:	7dbb      	ldrb	r3, [r7, #22]
 800716e:	2b04      	cmp	r3, #4
 8007170:	d002      	beq.n	8007178 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007172:	2302      	movs	r3, #2
 8007174:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007176:	e098      	b.n	80072aa <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d005      	beq.n	800718a <HAL_SPI_TransmitReceive_IT+0x6a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007184:	887b      	ldrh	r3, [r7, #2]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d102      	bne.n	8007190 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800718e:	e08c      	b.n	80072aa <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b04      	cmp	r3, #4
 800719a:	d003      	beq.n	80071a4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2205      	movs	r2, #5
 80071a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	887a      	ldrh	r2, [r7, #2]
 80071b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	887a      	ldrh	r2, [r7, #2]
 80071ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	887a      	ldrh	r2, [r7, #2]
 80071c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	887a      	ldrh	r2, [r7, #2]
 80071ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071da:	d906      	bls.n	80071ea <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4a38      	ldr	r2, [pc, #224]	; (80072c0 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80071e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4a37      	ldr	r2, [pc, #220]	; (80072c4 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 80071e6:	651a      	str	r2, [r3, #80]	; 0x50
 80071e8:	e005      	b.n	80071f6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a36      	ldr	r2, [pc, #216]	; (80072c8 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 80071ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a36      	ldr	r2, [pc, #216]	; (80072cc <HAL_SPI_TransmitReceive_IT+0x1ac>)
 80071f4:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fe:	d11f      	bne.n	8007240 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800720e:	d806      	bhi.n	800721e <HAL_SPI_TransmitReceive_IT+0xfe>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	2b02      	cmp	r3, #2
 8007216:	d102      	bne.n	800721e <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2202      	movs	r2, #2
 800721c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	e002      	b.n	8007246 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800724e:	d802      	bhi.n	8007256 <HAL_SPI_TransmitReceive_IT+0x136>
 8007250:	887b      	ldrh	r3, [r7, #2]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d908      	bls.n	8007268 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	e007      	b.n	8007278 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007276:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007286:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d008      	beq.n	80072a8 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e000      	b.n	80072aa <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 80072a8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	0800771d 	.word	0x0800771d
 80072c4:	080077cd 	.word	0x080077cd
 80072c8:	08007525 	.word	0x08007525
 80072cc:	08007661 	.word	0x08007661

080072d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	099b      	lsrs	r3, r3, #6
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10f      	bne.n	8007314 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	099b      	lsrs	r3, r3, #6
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
    return;
 8007312:	e0d7      	b.n	80074c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <HAL_SPI_IRQHandler+0x66>
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	09db      	lsrs	r3, r3, #7
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
    return;
 8007334:	e0c6      	b.n	80074c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10c      	bne.n	800735c <HAL_SPI_IRQHandler+0x8c>
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	099b      	lsrs	r3, r3, #6
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80b4 	beq.w	80074c4 <HAL_SPI_IRQHandler+0x1f4>
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 80ad 	beq.w	80074c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	099b      	lsrs	r3, r3, #6
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d023      	beq.n	80073be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d011      	beq.n	80073a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007386:	f043 0204 	orr.w	r2, r3, #4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	e00b      	b.n	80073be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	693b      	ldr	r3, [r7, #16]
        return;
 80073bc:	e082      	b.n	80074c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d014      	beq.n	80073f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ce:	f043 0201 	orr.w	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007404:	f043 0208 	orr.w	r2, r3, #8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800740c:	2300      	movs	r3, #0
 800740e:	60bb      	str	r3, [r7, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]
 8007418:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800741e:	2b00      	cmp	r3, #0
 8007420:	d04f      	beq.n	80074c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007430:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <HAL_SPI_IRQHandler+0x17e>
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d034      	beq.n	80074b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0203 	bic.w	r2, r2, #3
 800745c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	2b00      	cmp	r3, #0
 8007464:	d011      	beq.n	800748a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746a:	4a18      	ldr	r2, [pc, #96]	; (80074cc <HAL_SPI_IRQHandler+0x1fc>)
 800746c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007472:	4618      	mov	r0, r3
 8007474:	f7fb fdef 	bl	8003056 <HAL_DMA_Abort_IT>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	2b00      	cmp	r3, #0
 8007490:	d016      	beq.n	80074c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <HAL_SPI_IRQHandler+0x1fc>)
 8007498:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fb fdd9 	bl	8003056 <HAL_DMA_Abort_IT>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80074b6:	e003      	b.n	80074c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f813 	bl	80074e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80074be:	e000      	b.n	80074c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80074c0:	bf00      	nop
    return;
 80074c2:	bf00      	nop
  }
}
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	080074f9 	.word	0x080074f9

080074d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff ffe5 	bl	80074e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d923      	bls.n	8007580 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	b292      	uxth	r2, r2
 8007544:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	1c9a      	adds	r2, r3, #2
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b02      	subs	r3, #2
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b01      	cmp	r3, #1
 800756c:	d11f      	bne.n	80075ae <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	e016      	b.n	80075ae <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f103 020c 	add.w	r2, r3, #12
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	7812      	ldrb	r2, [r2, #0]
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d120      	bne.n	80075fc <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c2:	d10b      	bne.n	80075dc <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075d2:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <SPI_2linesRxISR_8BIT+0xe0>)
 80075d8:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80075da:	e00f      	b.n	80075fc <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075ea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc0c 	bl	8007e14 <SPI_CloseRxTx_ISR>
    }
  }
}
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	08007609 	.word	0x08007609

08007608 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007624:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762a:	1e5a      	subs	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10f      	bne.n	8007658 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007646:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fbde 	bl	8007e14 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b01      	cmp	r3, #1
 8007670:	d912      	bls.n	8007698 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	881a      	ldrh	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	1c9a      	adds	r2, r3, #2
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b02      	subs	r3, #2
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007696:	e012      	b.n	80076be <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	7812      	ldrb	r2, [r2, #0]
 80076a4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d126      	bne.n	8007716 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d0:	d110      	bne.n	80076f4 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076e0:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076f0:	605a      	str	r2, [r3, #4]
      return;
 80076f2:	e010      	b.n	8007716 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007702:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fb7f 	bl	8007e14 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	b292      	uxth	r2, r2
 8007730:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	1c9a      	adds	r2, r3, #2
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d118      	bne.n	800778c <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007762:	d103      	bne.n	800776c <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a0b      	ldr	r2, [pc, #44]	; (8007794 <SPI_2linesRxISR_16BIT+0x78>)
 8007768:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800776a:	e00f      	b.n	800778c <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800777a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fb44 	bl	8007e14 <SPI_CloseRxTx_ISR>
    }
  }
}
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	08007799 	.word	0x08007799

08007798 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80077ac:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077bc:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fb28 	bl	8007e14 <SPI_CloseRxTx_ISR>
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	881a      	ldrh	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	1c9a      	adds	r2, r3, #2
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d126      	bne.n	8007850 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780a:	d110      	bne.n	800782e <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800781a:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800782a:	605a      	str	r2, [r3, #4]
      return;
 800782c:	e010      	b.n	8007850 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800783c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fae2 	bl	8007e14 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8007872:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007878:	1e5a      	subs	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fb20 	bl	8007ecc <SPI_CloseRx_ISR>
  }
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f103 020c 	add.w	r2, r3, #12
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d10c      	bne.n	80078f0 <SPI_RxISR_8BIT+0x5c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078de:	d107      	bne.n	80078f0 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078ee:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10b      	bne.n	8007914 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007904:	d103      	bne.n	800790e <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a04      	ldr	r2, [pc, #16]	; (800791c <SPI_RxISR_8BIT+0x88>)
 800790a:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800790c:	e002      	b.n	8007914 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fadc 	bl	8007ecc <SPI_CloseRx_ISR>
  }
}
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	08007857 	.word	0x08007857

08007920 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8007934:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007944:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fac0 	bl	8007ecc <SPI_CloseRx_ISR>
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	b292      	uxth	r2, r2
 8007968:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	1c9a      	adds	r2, r3, #2
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	d10c      	bne.n	80079ac <SPI_RxISR_16BIT+0x58>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799a:	d107      	bne.n	80079ac <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079aa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10b      	bne.n	80079d0 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c0:	d103      	bne.n	80079ca <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a04      	ldr	r2, [pc, #16]	; (80079d8 <SPI_RxISR_16BIT+0x84>)
 80079c6:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80079c8:	e002      	b.n	80079d0 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa7e 	bl	8007ecc <SPI_CloseRx_ISR>
  }
}
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	08007921 	.word	0x08007921

080079dc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	7812      	ldrb	r2, [r2, #0]
 80079f0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10f      	bne.n	8007a34 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1c:	d107      	bne.n	8007a2e <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a2c:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa92 	bl	8007f58 <SPI_CloseTx_ISR>
  }
}
 8007a34:	bf00      	nop
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10f      	bne.n	8007a92 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7a:	d107      	bne.n	8007a8c <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a8a:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fa63 	bl	8007f58 <SPI_CloseTx_ISR>
  }
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007aac:	f7fb f992 	bl	8002dd4 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	4413      	add	r3, r2
 8007aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007abc:	f7fb f98a 	bl	8002dd4 <HAL_GetTick>
 8007ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ac2:	4b39      	ldr	r3, [pc, #228]	; (8007ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	015b      	lsls	r3, r3, #5
 8007ac8:	0d1b      	lsrs	r3, r3, #20
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	fb02 f303 	mul.w	r3, r2, r3
 8007ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ad2:	e054      	b.n	8007b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d050      	beq.n	8007b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007adc:	f7fb f97a 	bl	8002dd4 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d902      	bls.n	8007af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d13d      	bne.n	8007b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b0a:	d111      	bne.n	8007b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b14:	d004      	beq.n	8007b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1e:	d107      	bne.n	8007b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b38:	d10f      	bne.n	8007b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e017      	b.n	8007b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4013      	ands	r3, r2
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	bf0c      	ite	eq
 8007b8e:	2301      	moveq	r3, #1
 8007b90:	2300      	movne	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d19b      	bne.n	8007ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000008 	.word	0x20000008

08007bac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007bbe:	f7fb f909 	bl	8002dd4 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	4413      	add	r3, r2
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007bce:	f7fb f901 	bl	8002dd4 <HAL_GetTick>
 8007bd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	330c      	adds	r3, #12
 8007bda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007bdc:	4b3d      	ldr	r3, [pc, #244]	; (8007cd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	00da      	lsls	r2, r3, #3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	0d1b      	lsrs	r3, r3, #20
 8007bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bee:	fb02 f303 	mul.w	r3, r2, r3
 8007bf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007bf4:	e060      	b.n	8007cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007bfc:	d107      	bne.n	8007c0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c14:	d050      	beq.n	8007cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c16:	f7fb f8dd 	bl	8002dd4 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d902      	bls.n	8007c2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d13d      	bne.n	8007ca8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c44:	d111      	bne.n	8007c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c4e:	d004      	beq.n	8007c5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c58:	d107      	bne.n	8007c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c72:	d10f      	bne.n	8007c94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e010      	b.n	8007cca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d196      	bne.n	8007bf6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3728      	adds	r7, #40	; 0x28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20000008 	.word	0x20000008

08007cd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cec:	d111      	bne.n	8007d12 <SPI_EndRxTransaction+0x3a>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf6:	d004      	beq.n	8007d02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d00:	d107      	bne.n	8007d12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2180      	movs	r1, #128	; 0x80
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff febd 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2c:	f043 0220 	orr.w	r2, r3, #32
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e023      	b.n	8007d80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d40:	d11d      	bne.n	8007d7e <SPI_EndRxTransaction+0xa6>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d4a:	d004      	beq.n	8007d56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d54:	d113      	bne.n	8007d7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff ff22 	bl	8007bac <SPI_WaitFifoStateUntilTimeout>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d72:	f043 0220 	orr.w	r2, r3, #32
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e000      	b.n	8007d80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff ff03 	bl	8007bac <SPI_WaitFifoStateUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d007      	beq.n	8007dbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db0:	f043 0220 	orr.w	r2, r3, #32
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e027      	b.n	8007e0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2180      	movs	r1, #128	; 0x80
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff fe68 	bl	8007a9c <SPI_WaitFlagStateUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e014      	b.n	8007e0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff fedc 	bl	8007bac <SPI_WaitFifoStateUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	f043 0220 	orr.w	r2, r3, #32
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e000      	b.n	8007e0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e1c:	f7fa ffda 	bl	8002dd4 <HAL_GetTick>
 8007e20:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0220 	bic.w	r2, r2, #32
 8007e30:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	2164      	movs	r1, #100	; 0x64
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff ffa6 	bl	8007d88 <SPI_EndRxTxTransaction>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b10      	cmp	r3, #16
 8007e5a:	d112      	bne.n	8007e82 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e68:	f043 0202 	orr.w	r2, r3, #2
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007e78:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff fb32 	bl	80074e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007e80:	e020      	b.n	8007ec4 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d115      	bne.n	8007eb6 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d107      	bne.n	8007ea6 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fa f9b2 	bl	8002208 <HAL_SPI_RxCpltCallback>
}
 8007ea4:	e00e      	b.n	8007ec4 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fb0e 	bl	80074d0 <HAL_SPI_TxRxCpltCallback>
}
 8007eb4:	e006      	b.n	8007ec4 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fb10 	bl	80074e4 <HAL_SPI_ErrorCallback>
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ee2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007ee4:	f7fa ff76 	bl	8002dd4 <HAL_GetTick>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	2164      	movs	r1, #100	; 0x64
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff fef2 	bl	8007cd8 <SPI_EndRxTransaction>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efe:	f043 0220 	orr.w	r2, r3, #32
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 0310 	and.w	r3, r3, #16
 8007f18:	2b10      	cmp	r3, #16
 8007f1a:	d10e      	bne.n	8007f3a <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f20:	f043 0202 	orr.w	r2, r3, #2
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007f30:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff fad6 	bl	80074e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007f38:	e00a      	b.n	8007f50 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fa f960 	bl	8002208 <HAL_SPI_RxCpltCallback>
}
 8007f48:	e002      	b.n	8007f50 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff faca 	bl	80074e4 <HAL_SPI_ErrorCallback>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f60:	f7fa ff38 	bl	8002dd4 <HAL_GetTick>
 8007f64:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f74:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	2164      	movs	r1, #100	; 0x64
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff ff04 	bl	8007d88 <SPI_EndRxTxTransaction>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8a:	f043 0220 	orr.w	r2, r3, #32
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60bb      	str	r3, [r7, #8]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fa8f 	bl	80074e4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007fc6:	e002      	b.n	8007fce <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fa f931 	bl	8002230 <HAL_SPI_TxCpltCallback>
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e049      	b.n	800807c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f841 	bl	8008084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3304      	adds	r3, #4
 8008012:	4619      	mov	r1, r3
 8008014:	4610      	mov	r0, r2
 8008016:	f000 f9f7 	bl	8008408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d001      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e04f      	b.n	8008150 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a23      	ldr	r2, [pc, #140]	; (800815c <HAL_TIM_Base_Start_IT+0xc4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d01d      	beq.n	800810e <HAL_TIM_Base_Start_IT+0x76>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d018      	beq.n	800810e <HAL_TIM_Base_Start_IT+0x76>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <HAL_TIM_Base_Start_IT+0xc8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <HAL_TIM_Base_Start_IT+0x76>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <HAL_TIM_Base_Start_IT+0xcc>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00e      	beq.n	800810e <HAL_TIM_Base_Start_IT+0x76>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1c      	ldr	r2, [pc, #112]	; (8008168 <HAL_TIM_Base_Start_IT+0xd0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d009      	beq.n	800810e <HAL_TIM_Base_Start_IT+0x76>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1b      	ldr	r2, [pc, #108]	; (800816c <HAL_TIM_Base_Start_IT+0xd4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d004      	beq.n	800810e <HAL_TIM_Base_Start_IT+0x76>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a19      	ldr	r2, [pc, #100]	; (8008170 <HAL_TIM_Base_Start_IT+0xd8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d115      	bne.n	800813a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	4b17      	ldr	r3, [pc, #92]	; (8008174 <HAL_TIM_Base_Start_IT+0xdc>)
 8008116:	4013      	ands	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b06      	cmp	r3, #6
 800811e:	d015      	beq.n	800814c <HAL_TIM_Base_Start_IT+0xb4>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008126:	d011      	beq.n	800814c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008138:	e008      	b.n	800814c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0201 	orr.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	e000      	b.n	800814e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40000400 	.word	0x40000400
 8008164:	40000800 	.word	0x40000800
 8008168:	40000c00 	.word	0x40000c00
 800816c:	40013400 	.word	0x40013400
 8008170:	40014000 	.word	0x40014000
 8008174:	00010007 	.word	0x00010007

08008178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d122      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b02      	cmp	r3, #2
 800819a:	d11b      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0202 	mvn.w	r2, #2
 80081a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f905 	bl	80083ca <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8f7 	bl	80083b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f908 	bl	80083de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d122      	bne.n	8008228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d11b      	bne.n	8008228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0204 	mvn.w	r2, #4
 80081f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f8db 	bl	80083ca <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f8cd 	bl	80083b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f8de 	bl	80083de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	2b08      	cmp	r3, #8
 8008234:	d122      	bne.n	800827c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f003 0308 	and.w	r3, r3, #8
 8008240:	2b08      	cmp	r3, #8
 8008242:	d11b      	bne.n	800827c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0208 	mvn.w	r2, #8
 800824c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2204      	movs	r2, #4
 8008252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8b1 	bl	80083ca <HAL_TIM_IC_CaptureCallback>
 8008268:	e005      	b.n	8008276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f8a3 	bl	80083b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f8b4 	bl	80083de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b10      	cmp	r3, #16
 8008288:	d122      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b10      	cmp	r3, #16
 8008296:	d11b      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0210 	mvn.w	r2, #16
 80082a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2208      	movs	r2, #8
 80082a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f887 	bl	80083ca <HAL_TIM_IC_CaptureCallback>
 80082bc:	e005      	b.n	80082ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f879 	bl	80083b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f88a 	bl	80083de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d10e      	bne.n	80082fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d107      	bne.n	80082fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0201 	mvn.w	r2, #1
 80082f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7f8 fefe 	bl	80010f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008306:	2b80      	cmp	r3, #128	; 0x80
 8008308:	d10e      	bne.n	8008328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d107      	bne.n	8008328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f914 	bl	8008550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008336:	d10e      	bne.n	8008356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b80      	cmp	r3, #128	; 0x80
 8008344:	d107      	bne.n	8008356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800834e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f907 	bl	8008564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	d10e      	bne.n	8008382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d107      	bne.n	8008382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800837a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f838 	bl	80083f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b20      	cmp	r3, #32
 800838e:	d10e      	bne.n	80083ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b20      	cmp	r3, #32
 800839c:	d107      	bne.n	80083ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f06f 0220 	mvn.w	r2, #32
 80083a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f8c7 	bl	800853c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
	...

08008408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a40      	ldr	r2, [pc, #256]	; (800851c <TIM_Base_SetConfig+0x114>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d013      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008426:	d00f      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a3d      	ldr	r2, [pc, #244]	; (8008520 <TIM_Base_SetConfig+0x118>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00b      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a3c      	ldr	r2, [pc, #240]	; (8008524 <TIM_Base_SetConfig+0x11c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d007      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a3b      	ldr	r2, [pc, #236]	; (8008528 <TIM_Base_SetConfig+0x120>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d003      	beq.n	8008448 <TIM_Base_SetConfig+0x40>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a3a      	ldr	r2, [pc, #232]	; (800852c <TIM_Base_SetConfig+0x124>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d108      	bne.n	800845a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a2f      	ldr	r2, [pc, #188]	; (800851c <TIM_Base_SetConfig+0x114>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01f      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008468:	d01b      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a2c      	ldr	r2, [pc, #176]	; (8008520 <TIM_Base_SetConfig+0x118>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d017      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a2b      	ldr	r2, [pc, #172]	; (8008524 <TIM_Base_SetConfig+0x11c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d013      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a2a      	ldr	r2, [pc, #168]	; (8008528 <TIM_Base_SetConfig+0x120>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d00f      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a29      	ldr	r2, [pc, #164]	; (800852c <TIM_Base_SetConfig+0x124>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00b      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a28      	ldr	r2, [pc, #160]	; (8008530 <TIM_Base_SetConfig+0x128>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d007      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a27      	ldr	r2, [pc, #156]	; (8008534 <TIM_Base_SetConfig+0x12c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d003      	beq.n	80084a2 <TIM_Base_SetConfig+0x9a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a26      	ldr	r2, [pc, #152]	; (8008538 <TIM_Base_SetConfig+0x130>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d108      	bne.n	80084b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a10      	ldr	r2, [pc, #64]	; (800851c <TIM_Base_SetConfig+0x114>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00f      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a12      	ldr	r2, [pc, #72]	; (800852c <TIM_Base_SetConfig+0x124>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a11      	ldr	r2, [pc, #68]	; (8008530 <TIM_Base_SetConfig+0x128>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d007      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a10      	ldr	r2, [pc, #64]	; (8008534 <TIM_Base_SetConfig+0x12c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_Base_SetConfig+0xf8>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a0f      	ldr	r2, [pc, #60]	; (8008538 <TIM_Base_SetConfig+0x130>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d103      	bne.n	8008508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	615a      	str	r2, [r3, #20]
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	40012c00 	.word	0x40012c00
 8008520:	40000400 	.word	0x40000400
 8008524:	40000800 	.word	0x40000800
 8008528:	40000c00 	.word	0x40000c00
 800852c:	40013400 	.word	0x40013400
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800

0800853c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e040      	b.n	800860c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f83a 	bl	8008614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2224      	movs	r2, #36	; 0x24
 80085a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0201 	bic.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8ca 	bl	8008750 <UART_SetConfig>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e022      	b.n	800860c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fb76 	bl	8008cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0201 	orr.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fbfd 	bl	8008e04 <UART_CheckIdleState>
 800860a:	4603      	mov	r3, r0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	; 0x28
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800863c:	2b20      	cmp	r3, #32
 800863e:	f040 8082 	bne.w	8008746 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <HAL_UART_Transmit+0x26>
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e07a      	b.n	8008748 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_UART_Transmit+0x38>
 800865c:	2302      	movs	r3, #2
 800865e:	e073      	b.n	8008748 <HAL_UART_Transmit+0x120>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2221      	movs	r2, #33	; 0x21
 8008674:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008676:	f7fa fbad 	bl	8002dd4 <HAL_GetTick>
 800867a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008694:	d108      	bne.n	80086a8 <HAL_UART_Transmit+0x80>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d104      	bne.n	80086a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	61bb      	str	r3, [r7, #24]
 80086a6:	e003      	b.n	80086b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80086b8:	e02d      	b.n	8008716 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2200      	movs	r2, #0
 80086c2:	2180      	movs	r1, #128	; 0x80
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fbe6 	bl	8008e96 <UART_WaitOnFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e039      	b.n	8008748 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	881a      	ldrh	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086e6:	b292      	uxth	r2, r2
 80086e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	3302      	adds	r3, #2
 80086ee:	61bb      	str	r3, [r7, #24]
 80086f0:	e008      	b.n	8008704 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	b292      	uxth	r2, r2
 80086fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	3301      	adds	r3, #1
 8008702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800871c:	b29b      	uxth	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1cb      	bne.n	80086ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2200      	movs	r2, #0
 800872a:	2140      	movs	r1, #64	; 0x40
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fbb2 	bl	8008e96 <UART_WaitOnFlagUntilTimeout>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e005      	b.n	8008748 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	e000      	b.n	8008748 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008746:	2302      	movs	r3, #2
  }
}
 8008748:	4618      	mov	r0, r3
 800874a:	3720      	adds	r7, #32
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008754:	b08a      	sub	sp, #40	; 0x28
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	431a      	orrs	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	431a      	orrs	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	4313      	orrs	r3, r2
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4ba4      	ldr	r3, [pc, #656]	; (8008a10 <UART_SetConfig+0x2c0>)
 8008780:	4013      	ands	r3, r2
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	6812      	ldr	r2, [r2, #0]
 8008786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008788:	430b      	orrs	r3, r1
 800878a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a99      	ldr	r2, [pc, #612]	; (8008a14 <UART_SetConfig+0x2c4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d004      	beq.n	80087bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b8:	4313      	orrs	r3, r2
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087cc:	430a      	orrs	r2, r1
 80087ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a90      	ldr	r2, [pc, #576]	; (8008a18 <UART_SetConfig+0x2c8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d126      	bne.n	8008828 <UART_SetConfig+0xd8>
 80087da:	4b90      	ldr	r3, [pc, #576]	; (8008a1c <UART_SetConfig+0x2cc>)
 80087dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e0:	f003 0303 	and.w	r3, r3, #3
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d81b      	bhi.n	8008820 <UART_SetConfig+0xd0>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0xa0>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008801 	.word	0x08008801
 80087f4:	08008811 	.word	0x08008811
 80087f8:	08008809 	.word	0x08008809
 80087fc:	08008819 	.word	0x08008819
 8008800:	2301      	movs	r3, #1
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008806:	e116      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008808:	2302      	movs	r3, #2
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800880e:	e112      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008810:	2304      	movs	r3, #4
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008816:	e10e      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008818:	2308      	movs	r3, #8
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800881e:	e10a      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008826:	e106      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a7c      	ldr	r2, [pc, #496]	; (8008a20 <UART_SetConfig+0x2d0>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d138      	bne.n	80088a4 <UART_SetConfig+0x154>
 8008832:	4b7a      	ldr	r3, [pc, #488]	; (8008a1c <UART_SetConfig+0x2cc>)
 8008834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008838:	f003 030c 	and.w	r3, r3, #12
 800883c:	2b0c      	cmp	r3, #12
 800883e:	d82d      	bhi.n	800889c <UART_SetConfig+0x14c>
 8008840:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <UART_SetConfig+0xf8>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	0800887d 	.word	0x0800887d
 800884c:	0800889d 	.word	0x0800889d
 8008850:	0800889d 	.word	0x0800889d
 8008854:	0800889d 	.word	0x0800889d
 8008858:	0800888d 	.word	0x0800888d
 800885c:	0800889d 	.word	0x0800889d
 8008860:	0800889d 	.word	0x0800889d
 8008864:	0800889d 	.word	0x0800889d
 8008868:	08008885 	.word	0x08008885
 800886c:	0800889d 	.word	0x0800889d
 8008870:	0800889d 	.word	0x0800889d
 8008874:	0800889d 	.word	0x0800889d
 8008878:	08008895 	.word	0x08008895
 800887c:	2300      	movs	r3, #0
 800887e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008882:	e0d8      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008884:	2302      	movs	r3, #2
 8008886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888a:	e0d4      	b.n	8008a36 <UART_SetConfig+0x2e6>
 800888c:	2304      	movs	r3, #4
 800888e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008892:	e0d0      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008894:	2308      	movs	r3, #8
 8008896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800889a:	e0cc      	b.n	8008a36 <UART_SetConfig+0x2e6>
 800889c:	2310      	movs	r3, #16
 800889e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a2:	e0c8      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a5e      	ldr	r2, [pc, #376]	; (8008a24 <UART_SetConfig+0x2d4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d125      	bne.n	80088fa <UART_SetConfig+0x1aa>
 80088ae:	4b5b      	ldr	r3, [pc, #364]	; (8008a1c <UART_SetConfig+0x2cc>)
 80088b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088b8:	2b30      	cmp	r3, #48	; 0x30
 80088ba:	d016      	beq.n	80088ea <UART_SetConfig+0x19a>
 80088bc:	2b30      	cmp	r3, #48	; 0x30
 80088be:	d818      	bhi.n	80088f2 <UART_SetConfig+0x1a2>
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d00a      	beq.n	80088da <UART_SetConfig+0x18a>
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d814      	bhi.n	80088f2 <UART_SetConfig+0x1a2>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <UART_SetConfig+0x182>
 80088cc:	2b10      	cmp	r3, #16
 80088ce:	d008      	beq.n	80088e2 <UART_SetConfig+0x192>
 80088d0:	e00f      	b.n	80088f2 <UART_SetConfig+0x1a2>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d8:	e0ad      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80088da:	2302      	movs	r3, #2
 80088dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e0:	e0a9      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80088e2:	2304      	movs	r3, #4
 80088e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e8:	e0a5      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80088ea:	2308      	movs	r3, #8
 80088ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f0:	e0a1      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80088f2:	2310      	movs	r3, #16
 80088f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f8:	e09d      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a4a      	ldr	r2, [pc, #296]	; (8008a28 <UART_SetConfig+0x2d8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d125      	bne.n	8008950 <UART_SetConfig+0x200>
 8008904:	4b45      	ldr	r3, [pc, #276]	; (8008a1c <UART_SetConfig+0x2cc>)
 8008906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800890a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800890e:	2bc0      	cmp	r3, #192	; 0xc0
 8008910:	d016      	beq.n	8008940 <UART_SetConfig+0x1f0>
 8008912:	2bc0      	cmp	r3, #192	; 0xc0
 8008914:	d818      	bhi.n	8008948 <UART_SetConfig+0x1f8>
 8008916:	2b80      	cmp	r3, #128	; 0x80
 8008918:	d00a      	beq.n	8008930 <UART_SetConfig+0x1e0>
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d814      	bhi.n	8008948 <UART_SetConfig+0x1f8>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <UART_SetConfig+0x1d8>
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d008      	beq.n	8008938 <UART_SetConfig+0x1e8>
 8008926:	e00f      	b.n	8008948 <UART_SetConfig+0x1f8>
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892e:	e082      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008930:	2302      	movs	r3, #2
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008936:	e07e      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800893e:	e07a      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008946:	e076      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894e:	e072      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a35      	ldr	r2, [pc, #212]	; (8008a2c <UART_SetConfig+0x2dc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d12a      	bne.n	80089b0 <UART_SetConfig+0x260>
 800895a:	4b30      	ldr	r3, [pc, #192]	; (8008a1c <UART_SetConfig+0x2cc>)
 800895c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008968:	d01a      	beq.n	80089a0 <UART_SetConfig+0x250>
 800896a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800896e:	d81b      	bhi.n	80089a8 <UART_SetConfig+0x258>
 8008970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008974:	d00c      	beq.n	8008990 <UART_SetConfig+0x240>
 8008976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800897a:	d815      	bhi.n	80089a8 <UART_SetConfig+0x258>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <UART_SetConfig+0x238>
 8008980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008984:	d008      	beq.n	8008998 <UART_SetConfig+0x248>
 8008986:	e00f      	b.n	80089a8 <UART_SetConfig+0x258>
 8008988:	2300      	movs	r3, #0
 800898a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800898e:	e052      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008990:	2302      	movs	r3, #2
 8008992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008996:	e04e      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008998:	2304      	movs	r3, #4
 800899a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800899e:	e04a      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80089a0:	2308      	movs	r3, #8
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a6:	e046      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80089a8:	2310      	movs	r3, #16
 80089aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ae:	e042      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a17      	ldr	r2, [pc, #92]	; (8008a14 <UART_SetConfig+0x2c4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d13a      	bne.n	8008a30 <UART_SetConfig+0x2e0>
 80089ba:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <UART_SetConfig+0x2cc>)
 80089bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089c8:	d01a      	beq.n	8008a00 <UART_SetConfig+0x2b0>
 80089ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ce:	d81b      	bhi.n	8008a08 <UART_SetConfig+0x2b8>
 80089d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d4:	d00c      	beq.n	80089f0 <UART_SetConfig+0x2a0>
 80089d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089da:	d815      	bhi.n	8008a08 <UART_SetConfig+0x2b8>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d003      	beq.n	80089e8 <UART_SetConfig+0x298>
 80089e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e4:	d008      	beq.n	80089f8 <UART_SetConfig+0x2a8>
 80089e6:	e00f      	b.n	8008a08 <UART_SetConfig+0x2b8>
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ee:	e022      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80089f0:	2302      	movs	r3, #2
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089f6:	e01e      	b.n	8008a36 <UART_SetConfig+0x2e6>
 80089f8:	2304      	movs	r3, #4
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089fe:	e01a      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008a00:	2308      	movs	r3, #8
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a06:	e016      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008a08:	2310      	movs	r3, #16
 8008a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a0e:	e012      	b.n	8008a36 <UART_SetConfig+0x2e6>
 8008a10:	efff69f3 	.word	0xefff69f3
 8008a14:	40008000 	.word	0x40008000
 8008a18:	40013800 	.word	0x40013800
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	40004400 	.word	0x40004400
 8008a24:	40004800 	.word	0x40004800
 8008a28:	40004c00 	.word	0x40004c00
 8008a2c:	40005000 	.word	0x40005000
 8008a30:	2310      	movs	r3, #16
 8008a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a9f      	ldr	r2, [pc, #636]	; (8008cb8 <UART_SetConfig+0x568>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d17a      	bne.n	8008b36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d824      	bhi.n	8008a92 <UART_SetConfig+0x342>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <UART_SetConfig+0x300>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a93 	.word	0x08008a93
 8008a58:	08008a7d 	.word	0x08008a7d
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a83 	.word	0x08008a83
 8008a64:	08008a93 	.word	0x08008a93
 8008a68:	08008a93 	.word	0x08008a93
 8008a6c:	08008a93 	.word	0x08008a93
 8008a70:	08008a8b 	.word	0x08008a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a74:	f7fc fb98 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8008a78:	61f8      	str	r0, [r7, #28]
        break;
 8008a7a:	e010      	b.n	8008a9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a7c:	4b8f      	ldr	r3, [pc, #572]	; (8008cbc <UART_SetConfig+0x56c>)
 8008a7e:	61fb      	str	r3, [r7, #28]
        break;
 8008a80:	e00d      	b.n	8008a9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fc faf9 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8008a86:	61f8      	str	r0, [r7, #28]
        break;
 8008a88:	e009      	b.n	8008a9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8e:	61fb      	str	r3, [r7, #28]
        break;
 8008a90:	e005      	b.n	8008a9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80fb 	beq.w	8008c9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	4413      	add	r3, r2
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d305      	bcc.n	8008ac2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d903      	bls.n	8008aca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ac8:	e0e8      	b.n	8008c9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	2200      	movs	r2, #0
 8008ace:	461c      	mov	r4, r3
 8008ad0:	4615      	mov	r5, r2
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	f04f 0300 	mov.w	r3, #0
 8008ada:	022b      	lsls	r3, r5, #8
 8008adc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ae0:	0222      	lsls	r2, r4, #8
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	6849      	ldr	r1, [r1, #4]
 8008ae6:	0849      	lsrs	r1, r1, #1
 8008ae8:	2000      	movs	r0, #0
 8008aea:	4688      	mov	r8, r1
 8008aec:	4681      	mov	r9, r0
 8008aee:	eb12 0a08 	adds.w	sl, r2, r8
 8008af2:	eb43 0b09 	adc.w	fp, r3, r9
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b04:	4650      	mov	r0, sl
 8008b06:	4659      	mov	r1, fp
 8008b08:	f7f7 fdf6 	bl	80006f8 <__aeabi_uldivmod>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4613      	mov	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b1a:	d308      	bcc.n	8008b2e <UART_SetConfig+0x3de>
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b22:	d204      	bcs.n	8008b2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	60da      	str	r2, [r3, #12]
 8008b2c:	e0b6      	b.n	8008c9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b34:	e0b2      	b.n	8008c9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3e:	d15e      	bne.n	8008bfe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d828      	bhi.n	8008b9a <UART_SetConfig+0x44a>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0x400>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008b7d 	.word	0x08008b7d
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	08008b9b 	.word	0x08008b9b
 8008b60:	08008b8b 	.word	0x08008b8b
 8008b64:	08008b9b 	.word	0x08008b9b
 8008b68:	08008b9b 	.word	0x08008b9b
 8008b6c:	08008b9b 	.word	0x08008b9b
 8008b70:	08008b93 	.word	0x08008b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b74:	f7fc fb18 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8008b78:	61f8      	str	r0, [r7, #28]
        break;
 8008b7a:	e014      	b.n	8008ba6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b7c:	f7fc fb2a 	bl	80051d4 <HAL_RCC_GetPCLK2Freq>
 8008b80:	61f8      	str	r0, [r7, #28]
        break;
 8008b82:	e010      	b.n	8008ba6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b84:	4b4d      	ldr	r3, [pc, #308]	; (8008cbc <UART_SetConfig+0x56c>)
 8008b86:	61fb      	str	r3, [r7, #28]
        break;
 8008b88:	e00d      	b.n	8008ba6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b8a:	f7fc fa75 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8008b8e:	61f8      	str	r0, [r7, #28]
        break;
 8008b90:	e009      	b.n	8008ba6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b96:	61fb      	str	r3, [r7, #28]
        break;
 8008b98:	e005      	b.n	8008ba6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ba4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d077      	beq.n	8008c9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	005a      	lsls	r2, r3, #1
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	441a      	add	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b0f      	cmp	r3, #15
 8008bc6:	d916      	bls.n	8008bf6 <UART_SetConfig+0x4a6>
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bce:	d212      	bcs.n	8008bf6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f023 030f 	bic.w	r3, r3, #15
 8008bd8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	085b      	lsrs	r3, r3, #1
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	8afb      	ldrh	r3, [r7, #22]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	8afa      	ldrh	r2, [r7, #22]
 8008bf2:	60da      	str	r2, [r3, #12]
 8008bf4:	e052      	b.n	8008c9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008bfc:	e04e      	b.n	8008c9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d827      	bhi.n	8008c56 <UART_SetConfig+0x506>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <UART_SetConfig+0x4bc>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	08008c57 	.word	0x08008c57
 8008c1c:	08008c47 	.word	0x08008c47
 8008c20:	08008c57 	.word	0x08008c57
 8008c24:	08008c57 	.word	0x08008c57
 8008c28:	08008c57 	.word	0x08008c57
 8008c2c:	08008c4f 	.word	0x08008c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c30:	f7fc faba 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8008c34:	61f8      	str	r0, [r7, #28]
        break;
 8008c36:	e014      	b.n	8008c62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c38:	f7fc facc 	bl	80051d4 <HAL_RCC_GetPCLK2Freq>
 8008c3c:	61f8      	str	r0, [r7, #28]
        break;
 8008c3e:	e010      	b.n	8008c62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c40:	4b1e      	ldr	r3, [pc, #120]	; (8008cbc <UART_SetConfig+0x56c>)
 8008c42:	61fb      	str	r3, [r7, #28]
        break;
 8008c44:	e00d      	b.n	8008c62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c46:	f7fc fa17 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8008c4a:	61f8      	str	r0, [r7, #28]
        break;
 8008c4c:	e009      	b.n	8008c62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c52:	61fb      	str	r3, [r7, #28]
        break;
 8008c54:	e005      	b.n	8008c62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c60:	bf00      	nop
    }

    if (pclk != 0U)
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d019      	beq.n	8008c9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	085a      	lsrs	r2, r3, #1
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	441a      	add	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	2b0f      	cmp	r3, #15
 8008c80:	d909      	bls.n	8008c96 <UART_SetConfig+0x546>
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c88:	d205      	bcs.n	8008c96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60da      	str	r2, [r3, #12]
 8008c94:	e002      	b.n	8008c9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ca8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3728      	adds	r7, #40	; 0x28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cb6:	bf00      	nop
 8008cb8:	40008000 	.word	0x40008000
 8008cbc:	00f42400 	.word	0x00f42400

08008cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00a      	beq.n	8008d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	f003 0308 	and.w	r3, r3, #8
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01a      	beq.n	8008dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dbe:	d10a      	bne.n	8008dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	605a      	str	r2, [r3, #4]
  }
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af02      	add	r7, sp, #8
 8008e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e14:	f7f9 ffde 	bl	8002dd4 <HAL_GetTick>
 8008e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0308 	and.w	r3, r3, #8
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d10e      	bne.n	8008e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f82d 	bl	8008e96 <UART_WaitOnFlagUntilTimeout>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e023      	b.n	8008e8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d10e      	bne.n	8008e72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f817 	bl	8008e96 <UART_WaitOnFlagUntilTimeout>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e00d      	b.n	8008e8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2220      	movs	r2, #32
 8008e76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b09c      	sub	sp, #112	; 0x70
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	603b      	str	r3, [r7, #0]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea6:	e0a5      	b.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eae:	f000 80a1 	beq.w	8008ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb2:	f7f9 ff8f 	bl	8002dd4 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d302      	bcc.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d13e      	bne.n	8008f46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008edc:	667b      	str	r3, [r7, #100]	; 0x64
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ee8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e6      	bne.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3308      	adds	r3, #8
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f04:	e853 3f00 	ldrex	r3, [r3]
 8008f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	f023 0301 	bic.w	r3, r3, #1
 8008f10:	663b      	str	r3, [r7, #96]	; 0x60
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e5      	bne.n	8008efa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2220      	movs	r2, #32
 8008f32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e067      	b.n	8009016 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d04f      	beq.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f62:	d147      	bne.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e6      	bne.n	8008f6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f023 0301 	bic.w	r3, r3, #1
 8008fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fc0:	623a      	str	r2, [r7, #32]
 8008fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	69f9      	ldr	r1, [r7, #28]
 8008fc6:	6a3a      	ldr	r2, [r7, #32]
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e5      	bne.n	8008fa0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e010      	b.n	8009016 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69da      	ldr	r2, [r3, #28]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	429a      	cmp	r2, r3
 8009002:	bf0c      	ite	eq
 8009004:	2301      	moveq	r3, #1
 8009006:	2300      	movne	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	429a      	cmp	r2, r3
 8009010:	f43f af4a 	beq.w	8008ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3770      	adds	r7, #112	; 0x70
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009024:	f7f9 fa8a 	bl	800253c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009028:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800902a:	e003      	b.n	8009034 <LoopCopyDataInit>

0800902c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800902c:	4b0b      	ldr	r3, [pc, #44]	; (800905c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800902e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009030:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009032:	3104      	adds	r1, #4

08009034 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009034:	480a      	ldr	r0, [pc, #40]	; (8009060 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009036:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009038:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800903a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800903c:	d3f6      	bcc.n	800902c <CopyDataInit>
	ldr	r2, =_sbss
 800903e:	4a0a      	ldr	r2, [pc, #40]	; (8009068 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009040:	e002      	b.n	8009048 <LoopFillZerobss>

08009042 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009042:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009044:	f842 3b04 	str.w	r3, [r2], #4

08009048 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009048:	4b08      	ldr	r3, [pc, #32]	; (800906c <LoopForever+0x16>)
	cmp	r2, r3
 800904a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800904c:	d3f9      	bcc.n	8009042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800904e:	f000 f817 	bl	8009080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009052:	f7f9 f983 	bl	800235c <main>

08009056 <LoopForever>:

LoopForever:
    b LoopForever
 8009056:	e7fe      	b.n	8009056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009058:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800905c:	0800ca28 	.word	0x0800ca28
	ldr	r0, =_sdata
 8009060:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009064:	20000120 	.word	0x20000120
	ldr	r2, =_sbss
 8009068:	20000120 	.word	0x20000120
	ldr	r3, = _ebss
 800906c:	20001074 	.word	0x20001074

08009070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009070:	e7fe      	b.n	8009070 <ADC1_2_IRQHandler>
	...

08009074 <__errno>:
 8009074:	4b01      	ldr	r3, [pc, #4]	; (800907c <__errno+0x8>)
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	2000005c 	.word	0x2000005c

08009080 <__libc_init_array>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	4d0d      	ldr	r5, [pc, #52]	; (80090b8 <__libc_init_array+0x38>)
 8009084:	4c0d      	ldr	r4, [pc, #52]	; (80090bc <__libc_init_array+0x3c>)
 8009086:	1b64      	subs	r4, r4, r5
 8009088:	10a4      	asrs	r4, r4, #2
 800908a:	2600      	movs	r6, #0
 800908c:	42a6      	cmp	r6, r4
 800908e:	d109      	bne.n	80090a4 <__libc_init_array+0x24>
 8009090:	4d0b      	ldr	r5, [pc, #44]	; (80090c0 <__libc_init_array+0x40>)
 8009092:	4c0c      	ldr	r4, [pc, #48]	; (80090c4 <__libc_init_array+0x44>)
 8009094:	f002 fee4 	bl	800be60 <_init>
 8009098:	1b64      	subs	r4, r4, r5
 800909a:	10a4      	asrs	r4, r4, #2
 800909c:	2600      	movs	r6, #0
 800909e:	42a6      	cmp	r6, r4
 80090a0:	d105      	bne.n	80090ae <__libc_init_array+0x2e>
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a8:	4798      	blx	r3
 80090aa:	3601      	adds	r6, #1
 80090ac:	e7ee      	b.n	800908c <__libc_init_array+0xc>
 80090ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b2:	4798      	blx	r3
 80090b4:	3601      	adds	r6, #1
 80090b6:	e7f2      	b.n	800909e <__libc_init_array+0x1e>
 80090b8:	0800ca18 	.word	0x0800ca18
 80090bc:	0800ca18 	.word	0x0800ca18
 80090c0:	0800ca18 	.word	0x0800ca18
 80090c4:	0800ca1c 	.word	0x0800ca1c

080090c8 <localtime>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <localtime+0x30>)
 80090cc:	681d      	ldr	r5, [r3, #0]
 80090ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80090d0:	4604      	mov	r4, r0
 80090d2:	b953      	cbnz	r3, 80090ea <localtime+0x22>
 80090d4:	2024      	movs	r0, #36	; 0x24
 80090d6:	f000 f909 	bl	80092ec <malloc>
 80090da:	4602      	mov	r2, r0
 80090dc:	63e8      	str	r0, [r5, #60]	; 0x3c
 80090de:	b920      	cbnz	r0, 80090ea <localtime+0x22>
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <localtime+0x34>)
 80090e2:	4807      	ldr	r0, [pc, #28]	; (8009100 <localtime+0x38>)
 80090e4:	2132      	movs	r1, #50	; 0x32
 80090e6:	f001 f8b5 	bl	800a254 <__assert_func>
 80090ea:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80090ec:	4620      	mov	r0, r4
 80090ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f2:	f000 b807 	b.w	8009104 <localtime_r>
 80090f6:	bf00      	nop
 80090f8:	2000005c 	.word	0x2000005c
 80090fc:	0800c654 	.word	0x0800c654
 8009100:	0800c66b 	.word	0x0800c66b

08009104 <localtime_r>:
 8009104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009108:	4680      	mov	r8, r0
 800910a:	9101      	str	r1, [sp, #4]
 800910c:	f001 fae2 	bl	800a6d4 <__gettzinfo>
 8009110:	9901      	ldr	r1, [sp, #4]
 8009112:	4605      	mov	r5, r0
 8009114:	4640      	mov	r0, r8
 8009116:	f001 fae1 	bl	800a6dc <gmtime_r>
 800911a:	6943      	ldr	r3, [r0, #20]
 800911c:	0799      	lsls	r1, r3, #30
 800911e:	4604      	mov	r4, r0
 8009120:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8009124:	d105      	bne.n	8009132 <localtime_r+0x2e>
 8009126:	2264      	movs	r2, #100	; 0x64
 8009128:	fb97 f3f2 	sdiv	r3, r7, r2
 800912c:	fb02 7313 	mls	r3, r2, r3, r7
 8009130:	bb73      	cbnz	r3, 8009190 <localtime_r+0x8c>
 8009132:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009136:	fb97 f6f3 	sdiv	r6, r7, r3
 800913a:	fb03 7616 	mls	r6, r3, r6, r7
 800913e:	fab6 f386 	clz	r3, r6
 8009142:	095b      	lsrs	r3, r3, #5
 8009144:	4e67      	ldr	r6, [pc, #412]	; (80092e4 <localtime_r+0x1e0>)
 8009146:	2230      	movs	r2, #48	; 0x30
 8009148:	fb02 6603 	mla	r6, r2, r3, r6
 800914c:	f000 fe30 	bl	8009db0 <__tz_lock>
 8009150:	f000 fe3a 	bl	8009dc8 <_tzset_unlocked>
 8009154:	4b64      	ldr	r3, [pc, #400]	; (80092e8 <localtime_r+0x1e4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	b34b      	cbz	r3, 80091ae <localtime_r+0xaa>
 800915a:	686b      	ldr	r3, [r5, #4]
 800915c:	42bb      	cmp	r3, r7
 800915e:	d119      	bne.n	8009194 <localtime_r+0x90>
 8009160:	682f      	ldr	r7, [r5, #0]
 8009162:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009166:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800916a:	b9df      	cbnz	r7, 80091a4 <localtime_r+0xa0>
 800916c:	4282      	cmp	r2, r0
 800916e:	eb73 0101 	sbcs.w	r1, r3, r1
 8009172:	da23      	bge.n	80091bc <localtime_r+0xb8>
 8009174:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009178:	4282      	cmp	r2, r0
 800917a:	eb73 0701 	sbcs.w	r7, r3, r1
 800917e:	bfb4      	ite	lt
 8009180:	2701      	movlt	r7, #1
 8009182:	2700      	movge	r7, #0
 8009184:	4282      	cmp	r2, r0
 8009186:	418b      	sbcs	r3, r1
 8009188:	6227      	str	r7, [r4, #32]
 800918a:	db19      	blt.n	80091c0 <localtime_r+0xbc>
 800918c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800918e:	e018      	b.n	80091c2 <localtime_r+0xbe>
 8009190:	2301      	movs	r3, #1
 8009192:	e7d7      	b.n	8009144 <localtime_r+0x40>
 8009194:	4638      	mov	r0, r7
 8009196:	f000 fd61 	bl	8009c5c <__tzcalc_limits>
 800919a:	2800      	cmp	r0, #0
 800919c:	d1e0      	bne.n	8009160 <localtime_r+0x5c>
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	e004      	b.n	80091ae <localtime_r+0xaa>
 80091a4:	4282      	cmp	r2, r0
 80091a6:	eb73 0101 	sbcs.w	r1, r3, r1
 80091aa:	da02      	bge.n	80091b2 <localtime_r+0xae>
 80091ac:	2300      	movs	r3, #0
 80091ae:	6223      	str	r3, [r4, #32]
 80091b0:	e7ec      	b.n	800918c <localtime_r+0x88>
 80091b2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80091b6:	4282      	cmp	r2, r0
 80091b8:	418b      	sbcs	r3, r1
 80091ba:	daf7      	bge.n	80091ac <localtime_r+0xa8>
 80091bc:	2301      	movs	r3, #1
 80091be:	6223      	str	r3, [r4, #32]
 80091c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80091c2:	6861      	ldr	r1, [r4, #4]
 80091c4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80091c8:	203c      	movs	r0, #60	; 0x3c
 80091ca:	fb93 f5f2 	sdiv	r5, r3, r2
 80091ce:	fb02 3315 	mls	r3, r2, r5, r3
 80091d2:	fb93 f2f0 	sdiv	r2, r3, r0
 80091d6:	fb00 3012 	mls	r0, r0, r2, r3
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	1a89      	subs	r1, r1, r2
 80091de:	68a2      	ldr	r2, [r4, #8]
 80091e0:	6061      	str	r1, [r4, #4]
 80091e2:	1a1b      	subs	r3, r3, r0
 80091e4:	1b52      	subs	r2, r2, r5
 80091e6:	2b3b      	cmp	r3, #59	; 0x3b
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	60a2      	str	r2, [r4, #8]
 80091ec:	dd35      	ble.n	800925a <localtime_r+0x156>
 80091ee:	3101      	adds	r1, #1
 80091f0:	6061      	str	r1, [r4, #4]
 80091f2:	3b3c      	subs	r3, #60	; 0x3c
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	6863      	ldr	r3, [r4, #4]
 80091f8:	2b3b      	cmp	r3, #59	; 0x3b
 80091fa:	dd34      	ble.n	8009266 <localtime_r+0x162>
 80091fc:	3201      	adds	r2, #1
 80091fe:	60a2      	str	r2, [r4, #8]
 8009200:	3b3c      	subs	r3, #60	; 0x3c
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	2b17      	cmp	r3, #23
 8009208:	dd33      	ble.n	8009272 <localtime_r+0x16e>
 800920a:	69e2      	ldr	r2, [r4, #28]
 800920c:	3201      	adds	r2, #1
 800920e:	61e2      	str	r2, [r4, #28]
 8009210:	69a2      	ldr	r2, [r4, #24]
 8009212:	3201      	adds	r2, #1
 8009214:	2a06      	cmp	r2, #6
 8009216:	bfc8      	it	gt
 8009218:	2200      	movgt	r2, #0
 800921a:	61a2      	str	r2, [r4, #24]
 800921c:	68e2      	ldr	r2, [r4, #12]
 800921e:	3b18      	subs	r3, #24
 8009220:	3201      	adds	r2, #1
 8009222:	60a3      	str	r3, [r4, #8]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	60e2      	str	r2, [r4, #12]
 8009228:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800922c:	428a      	cmp	r2, r1
 800922e:	dd0e      	ble.n	800924e <localtime_r+0x14a>
 8009230:	2b0b      	cmp	r3, #11
 8009232:	eba2 0201 	sub.w	r2, r2, r1
 8009236:	60e2      	str	r2, [r4, #12]
 8009238:	f103 0201 	add.w	r2, r3, #1
 800923c:	bf09      	itett	eq
 800923e:	6963      	ldreq	r3, [r4, #20]
 8009240:	6122      	strne	r2, [r4, #16]
 8009242:	2200      	moveq	r2, #0
 8009244:	3301      	addeq	r3, #1
 8009246:	bf02      	ittt	eq
 8009248:	6122      	streq	r2, [r4, #16]
 800924a:	6163      	streq	r3, [r4, #20]
 800924c:	61e2      	streq	r2, [r4, #28]
 800924e:	f000 fdb5 	bl	8009dbc <__tz_unlock>
 8009252:	4620      	mov	r0, r4
 8009254:	b002      	add	sp, #8
 8009256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800925a:	2b00      	cmp	r3, #0
 800925c:	dacb      	bge.n	80091f6 <localtime_r+0xf2>
 800925e:	3901      	subs	r1, #1
 8009260:	6061      	str	r1, [r4, #4]
 8009262:	333c      	adds	r3, #60	; 0x3c
 8009264:	e7c6      	b.n	80091f4 <localtime_r+0xf0>
 8009266:	2b00      	cmp	r3, #0
 8009268:	dacc      	bge.n	8009204 <localtime_r+0x100>
 800926a:	3a01      	subs	r2, #1
 800926c:	60a2      	str	r2, [r4, #8]
 800926e:	333c      	adds	r3, #60	; 0x3c
 8009270:	e7c7      	b.n	8009202 <localtime_r+0xfe>
 8009272:	2b00      	cmp	r3, #0
 8009274:	daeb      	bge.n	800924e <localtime_r+0x14a>
 8009276:	69e2      	ldr	r2, [r4, #28]
 8009278:	3a01      	subs	r2, #1
 800927a:	61e2      	str	r2, [r4, #28]
 800927c:	69a2      	ldr	r2, [r4, #24]
 800927e:	3a01      	subs	r2, #1
 8009280:	bf48      	it	mi
 8009282:	2206      	movmi	r2, #6
 8009284:	61a2      	str	r2, [r4, #24]
 8009286:	68e2      	ldr	r2, [r4, #12]
 8009288:	3318      	adds	r3, #24
 800928a:	3a01      	subs	r2, #1
 800928c:	60e2      	str	r2, [r4, #12]
 800928e:	60a3      	str	r3, [r4, #8]
 8009290:	2a00      	cmp	r2, #0
 8009292:	d1dc      	bne.n	800924e <localtime_r+0x14a>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	3b01      	subs	r3, #1
 8009298:	d405      	bmi.n	80092a6 <localtime_r+0x1a2>
 800929a:	6123      	str	r3, [r4, #16]
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80092a2:	60e3      	str	r3, [r4, #12]
 80092a4:	e7d3      	b.n	800924e <localtime_r+0x14a>
 80092a6:	230b      	movs	r3, #11
 80092a8:	6123      	str	r3, [r4, #16]
 80092aa:	6963      	ldr	r3, [r4, #20]
 80092ac:	1e5a      	subs	r2, r3, #1
 80092ae:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80092b2:	6162      	str	r2, [r4, #20]
 80092b4:	079a      	lsls	r2, r3, #30
 80092b6:	d105      	bne.n	80092c4 <localtime_r+0x1c0>
 80092b8:	2164      	movs	r1, #100	; 0x64
 80092ba:	fb93 f2f1 	sdiv	r2, r3, r1
 80092be:	fb01 3212 	mls	r2, r1, r2, r3
 80092c2:	b962      	cbnz	r2, 80092de <localtime_r+0x1da>
 80092c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80092c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80092cc:	fb02 3311 	mls	r3, r2, r1, r3
 80092d0:	fab3 f383 	clz	r3, r3
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80092da:	61e3      	str	r3, [r4, #28]
 80092dc:	e7de      	b.n	800929c <localtime_r+0x198>
 80092de:	2301      	movs	r3, #1
 80092e0:	e7f9      	b.n	80092d6 <localtime_r+0x1d2>
 80092e2:	bf00      	nop
 80092e4:	0800c728 	.word	0x0800c728
 80092e8:	20001060 	.word	0x20001060

080092ec <malloc>:
 80092ec:	4b02      	ldr	r3, [pc, #8]	; (80092f8 <malloc+0xc>)
 80092ee:	4601      	mov	r1, r0
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f000 baff 	b.w	80098f4 <_malloc_r>
 80092f6:	bf00      	nop
 80092f8:	2000005c 	.word	0x2000005c

080092fc <free>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <free+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f000 ba8b 	b.w	800981c <_free_r>
 8009306:	bf00      	nop
 8009308:	2000005c 	.word	0x2000005c

0800930c <memcpy>:
 800930c:	440a      	add	r2, r1
 800930e:	4291      	cmp	r1, r2
 8009310:	f100 33ff 	add.w	r3, r0, #4294967295
 8009314:	d100      	bne.n	8009318 <memcpy+0xc>
 8009316:	4770      	bx	lr
 8009318:	b510      	push	{r4, lr}
 800931a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800931e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009322:	4291      	cmp	r1, r2
 8009324:	d1f9      	bne.n	800931a <memcpy+0xe>
 8009326:	bd10      	pop	{r4, pc}

08009328 <memset>:
 8009328:	4402      	add	r2, r0
 800932a:	4603      	mov	r3, r0
 800932c:	4293      	cmp	r3, r2
 800932e:	d100      	bne.n	8009332 <memset+0xa>
 8009330:	4770      	bx	lr
 8009332:	f803 1b01 	strb.w	r1, [r3], #1
 8009336:	e7f9      	b.n	800932c <memset+0x4>

08009338 <validate_structure>:
 8009338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800933a:	6801      	ldr	r1, [r0, #0]
 800933c:	293b      	cmp	r1, #59	; 0x3b
 800933e:	4604      	mov	r4, r0
 8009340:	d911      	bls.n	8009366 <validate_structure+0x2e>
 8009342:	223c      	movs	r2, #60	; 0x3c
 8009344:	4668      	mov	r0, sp
 8009346:	f000 ffa3 	bl	800a290 <div>
 800934a:	9a01      	ldr	r2, [sp, #4]
 800934c:	6863      	ldr	r3, [r4, #4]
 800934e:	9900      	ldr	r1, [sp, #0]
 8009350:	2a00      	cmp	r2, #0
 8009352:	440b      	add	r3, r1
 8009354:	6063      	str	r3, [r4, #4]
 8009356:	bfbb      	ittet	lt
 8009358:	323c      	addlt	r2, #60	; 0x3c
 800935a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800935e:	6022      	strge	r2, [r4, #0]
 8009360:	6022      	strlt	r2, [r4, #0]
 8009362:	bfb8      	it	lt
 8009364:	6063      	strlt	r3, [r4, #4]
 8009366:	6861      	ldr	r1, [r4, #4]
 8009368:	293b      	cmp	r1, #59	; 0x3b
 800936a:	d911      	bls.n	8009390 <validate_structure+0x58>
 800936c:	223c      	movs	r2, #60	; 0x3c
 800936e:	4668      	mov	r0, sp
 8009370:	f000 ff8e 	bl	800a290 <div>
 8009374:	9a01      	ldr	r2, [sp, #4]
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	9900      	ldr	r1, [sp, #0]
 800937a:	2a00      	cmp	r2, #0
 800937c:	440b      	add	r3, r1
 800937e:	60a3      	str	r3, [r4, #8]
 8009380:	bfbb      	ittet	lt
 8009382:	323c      	addlt	r2, #60	; 0x3c
 8009384:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009388:	6062      	strge	r2, [r4, #4]
 800938a:	6062      	strlt	r2, [r4, #4]
 800938c:	bfb8      	it	lt
 800938e:	60a3      	strlt	r3, [r4, #8]
 8009390:	68a1      	ldr	r1, [r4, #8]
 8009392:	2917      	cmp	r1, #23
 8009394:	d911      	bls.n	80093ba <validate_structure+0x82>
 8009396:	2218      	movs	r2, #24
 8009398:	4668      	mov	r0, sp
 800939a:	f000 ff79 	bl	800a290 <div>
 800939e:	9a01      	ldr	r2, [sp, #4]
 80093a0:	68e3      	ldr	r3, [r4, #12]
 80093a2:	9900      	ldr	r1, [sp, #0]
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	440b      	add	r3, r1
 80093a8:	60e3      	str	r3, [r4, #12]
 80093aa:	bfbb      	ittet	lt
 80093ac:	3218      	addlt	r2, #24
 80093ae:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80093b2:	60a2      	strge	r2, [r4, #8]
 80093b4:	60a2      	strlt	r2, [r4, #8]
 80093b6:	bfb8      	it	lt
 80093b8:	60e3      	strlt	r3, [r4, #12]
 80093ba:	6921      	ldr	r1, [r4, #16]
 80093bc:	290b      	cmp	r1, #11
 80093be:	d911      	bls.n	80093e4 <validate_structure+0xac>
 80093c0:	220c      	movs	r2, #12
 80093c2:	4668      	mov	r0, sp
 80093c4:	f000 ff64 	bl	800a290 <div>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	6963      	ldr	r3, [r4, #20]
 80093cc:	9900      	ldr	r1, [sp, #0]
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	440b      	add	r3, r1
 80093d2:	6163      	str	r3, [r4, #20]
 80093d4:	bfbb      	ittet	lt
 80093d6:	320c      	addlt	r2, #12
 80093d8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80093dc:	6122      	strge	r2, [r4, #16]
 80093de:	6122      	strlt	r2, [r4, #16]
 80093e0:	bfb8      	it	lt
 80093e2:	6163      	strlt	r3, [r4, #20]
 80093e4:	6963      	ldr	r3, [r4, #20]
 80093e6:	0798      	lsls	r0, r3, #30
 80093e8:	d120      	bne.n	800942c <validate_structure+0xf4>
 80093ea:	2164      	movs	r1, #100	; 0x64
 80093ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80093f0:	fb01 3212 	mls	r2, r1, r2, r3
 80093f4:	b9e2      	cbnz	r2, 8009430 <validate_structure+0xf8>
 80093f6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80093fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80093fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8009402:	fb02 3311 	mls	r3, r2, r1, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	bf14      	ite	ne
 800940a:	231c      	movne	r3, #28
 800940c:	231d      	moveq	r3, #29
 800940e:	68e2      	ldr	r2, [r4, #12]
 8009410:	2a00      	cmp	r2, #0
 8009412:	dc0f      	bgt.n	8009434 <validate_structure+0xfc>
 8009414:	4f33      	ldr	r7, [pc, #204]	; (80094e4 <validate_structure+0x1ac>)
 8009416:	260b      	movs	r6, #11
 8009418:	2064      	movs	r0, #100	; 0x64
 800941a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800941e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009422:	f1bc 0f00 	cmp.w	ip, #0
 8009426:	dd31      	ble.n	800948c <validate_structure+0x154>
 8009428:	b003      	add	sp, #12
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942c:	231c      	movs	r3, #28
 800942e:	e7ee      	b.n	800940e <validate_structure+0xd6>
 8009430:	231d      	movs	r3, #29
 8009432:	e7ec      	b.n	800940e <validate_structure+0xd6>
 8009434:	4e2b      	ldr	r6, [pc, #172]	; (80094e4 <validate_structure+0x1ac>)
 8009436:	2700      	movs	r7, #0
 8009438:	2064      	movs	r0, #100	; 0x64
 800943a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800943e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8009442:	2a01      	cmp	r2, #1
 8009444:	bf14      	ite	ne
 8009446:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800944a:	469c      	moveq	ip, r3
 800944c:	4561      	cmp	r1, ip
 800944e:	ddeb      	ble.n	8009428 <validate_structure+0xf0>
 8009450:	3201      	adds	r2, #1
 8009452:	eba1 010c 	sub.w	r1, r1, ip
 8009456:	2a0c      	cmp	r2, #12
 8009458:	60e1      	str	r1, [r4, #12]
 800945a:	6122      	str	r2, [r4, #16]
 800945c:	d1ef      	bne.n	800943e <validate_structure+0x106>
 800945e:	6963      	ldr	r3, [r4, #20]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	0791      	lsls	r1, r2, #30
 8009464:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8009468:	d137      	bne.n	80094da <validate_structure+0x1a2>
 800946a:	fb92 f1f0 	sdiv	r1, r2, r0
 800946e:	fb00 2211 	mls	r2, r0, r1, r2
 8009472:	2a00      	cmp	r2, #0
 8009474:	d133      	bne.n	80094de <validate_structure+0x1a6>
 8009476:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800947a:	fb93 f2f5 	sdiv	r2, r3, r5
 800947e:	fb05 3312 	mls	r3, r5, r2, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	bf14      	ite	ne
 8009486:	231c      	movne	r3, #28
 8009488:	231d      	moveq	r3, #29
 800948a:	e7d8      	b.n	800943e <validate_structure+0x106>
 800948c:	6921      	ldr	r1, [r4, #16]
 800948e:	3901      	subs	r1, #1
 8009490:	6121      	str	r1, [r4, #16]
 8009492:	3101      	adds	r1, #1
 8009494:	d114      	bne.n	80094c0 <validate_structure+0x188>
 8009496:	6963      	ldr	r3, [r4, #20]
 8009498:	1e5a      	subs	r2, r3, #1
 800949a:	0791      	lsls	r1, r2, #30
 800949c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80094a0:	d117      	bne.n	80094d2 <validate_structure+0x19a>
 80094a2:	fb92 f1f0 	sdiv	r1, r2, r0
 80094a6:	fb00 2211 	mls	r2, r0, r1, r2
 80094aa:	b9a2      	cbnz	r2, 80094d6 <validate_structure+0x19e>
 80094ac:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80094b0:	fb93 f2f5 	sdiv	r2, r3, r5
 80094b4:	fb05 3312 	mls	r3, r5, r2, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bf14      	ite	ne
 80094bc:	231c      	movne	r3, #28
 80094be:	231d      	moveq	r3, #29
 80094c0:	6922      	ldr	r2, [r4, #16]
 80094c2:	2a01      	cmp	r2, #1
 80094c4:	bf14      	ite	ne
 80094c6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80094ca:	461a      	moveq	r2, r3
 80094cc:	4462      	add	r2, ip
 80094ce:	60e2      	str	r2, [r4, #12]
 80094d0:	e7a5      	b.n	800941e <validate_structure+0xe6>
 80094d2:	231c      	movs	r3, #28
 80094d4:	e7f4      	b.n	80094c0 <validate_structure+0x188>
 80094d6:	231d      	movs	r3, #29
 80094d8:	e7f2      	b.n	80094c0 <validate_structure+0x188>
 80094da:	231c      	movs	r3, #28
 80094dc:	e7af      	b.n	800943e <validate_structure+0x106>
 80094de:	231d      	movs	r3, #29
 80094e0:	e7ad      	b.n	800943e <validate_structure+0x106>
 80094e2:	bf00      	nop
 80094e4:	0800c6c8 	.word	0x0800c6c8

080094e8 <mktime>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	b085      	sub	sp, #20
 80094ee:	4607      	mov	r7, r0
 80094f0:	f001 f8f0 	bl	800a6d4 <__gettzinfo>
 80094f4:	4681      	mov	r9, r0
 80094f6:	4638      	mov	r0, r7
 80094f8:	f7ff ff1e 	bl	8009338 <validate_structure>
 80094fc:	e9d7 4000 	ldrd	r4, r0, [r7]
 8009500:	233c      	movs	r3, #60	; 0x3c
 8009502:	fb03 4400 	mla	r4, r3, r0, r4
 8009506:	68b8      	ldr	r0, [r7, #8]
 8009508:	4abc      	ldr	r2, [pc, #752]	; (80097fc <mktime+0x314>)
 800950a:	697e      	ldr	r6, [r7, #20]
 800950c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009510:	fb03 4400 	mla	r4, r3, r0, r4
 8009514:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8009518:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800951c:	3d01      	subs	r5, #1
 800951e:	2b01      	cmp	r3, #1
 8009520:	4415      	add	r5, r2
 8009522:	dd11      	ble.n	8009548 <mktime+0x60>
 8009524:	07b1      	lsls	r1, r6, #30
 8009526:	d10f      	bne.n	8009548 <mktime+0x60>
 8009528:	2264      	movs	r2, #100	; 0x64
 800952a:	fb96 f3f2 	sdiv	r3, r6, r2
 800952e:	fb02 6313 	mls	r3, r2, r3, r6
 8009532:	b943      	cbnz	r3, 8009546 <mktime+0x5e>
 8009534:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8009538:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800953c:	fb93 f1f2 	sdiv	r1, r3, r2
 8009540:	fb02 3311 	mls	r3, r2, r1, r3
 8009544:	b903      	cbnz	r3, 8009548 <mktime+0x60>
 8009546:	3501      	adds	r5, #1
 8009548:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800954c:	3310      	adds	r3, #16
 800954e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009552:	4293      	cmp	r3, r2
 8009554:	61fd      	str	r5, [r7, #28]
 8009556:	f200 815d 	bhi.w	8009814 <mktime+0x32c>
 800955a:	2e46      	cmp	r6, #70	; 0x46
 800955c:	dd71      	ble.n	8009642 <mktime+0x15a>
 800955e:	2346      	movs	r3, #70	; 0x46
 8009560:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009564:	2164      	movs	r1, #100	; 0x64
 8009566:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800956a:	079a      	lsls	r2, r3, #30
 800956c:	d163      	bne.n	8009636 <mktime+0x14e>
 800956e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009572:	fb01 3212 	mls	r2, r1, r2, r3
 8009576:	2a00      	cmp	r2, #0
 8009578:	d160      	bne.n	800963c <mktime+0x154>
 800957a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800957e:	fb92 fef0 	sdiv	lr, r2, r0
 8009582:	fb00 221e 	mls	r2, r0, lr, r2
 8009586:	2a00      	cmp	r2, #0
 8009588:	bf14      	ite	ne
 800958a:	4662      	movne	r2, ip
 800958c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009590:	3301      	adds	r3, #1
 8009592:	429e      	cmp	r6, r3
 8009594:	4415      	add	r5, r2
 8009596:	d1e8      	bne.n	800956a <mktime+0x82>
 8009598:	4b99      	ldr	r3, [pc, #612]	; (8009800 <mktime+0x318>)
 800959a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800959e:	fbc5 4803 	smlal	r4, r8, r5, r3
 80095a2:	f000 fc05 	bl	8009db0 <__tz_lock>
 80095a6:	f000 fc0f 	bl	8009dc8 <_tzset_unlocked>
 80095aa:	4b96      	ldr	r3, [pc, #600]	; (8009804 <mktime+0x31c>)
 80095ac:	f8d3 b000 	ldr.w	fp, [r3]
 80095b0:	f1bb 0f00 	cmp.w	fp, #0
 80095b4:	d039      	beq.n	800962a <mktime+0x142>
 80095b6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80095ba:	6978      	ldr	r0, [r7, #20]
 80095bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80095c0:	f1bb 0f01 	cmp.w	fp, #1
 80095c4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80095c8:	46da      	mov	sl, fp
 80095ca:	bfa8      	it	ge
 80095cc:	f04f 0a01 	movge.w	sl, #1
 80095d0:	4283      	cmp	r3, r0
 80095d2:	d178      	bne.n	80096c6 <mktime+0x1de>
 80095d4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80095d8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80095dc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80095e0:	1a5b      	subs	r3, r3, r1
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80095ee:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	ebb3 0c02 	subs.w	ip, r3, r2
 80095f8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80095fc:	4564      	cmp	r4, ip
 80095fe:	eb78 0300 	sbcs.w	r3, r8, r0
 8009602:	da66      	bge.n	80096d2 <mktime+0x1ea>
 8009604:	f8d9 3000 	ldr.w	r3, [r9]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d06f      	beq.n	80096ec <mktime+0x204>
 800960c:	9b02      	ldr	r3, [sp, #8]
 800960e:	429c      	cmp	r4, r3
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	eb78 0303 	sbcs.w	r3, r8, r3
 8009616:	db03      	blt.n	8009620 <mktime+0x138>
 8009618:	4564      	cmp	r4, ip
 800961a:	eb78 0300 	sbcs.w	r3, r8, r0
 800961e:	db6b      	blt.n	80096f8 <mktime+0x210>
 8009620:	f1bb 0f00 	cmp.w	fp, #0
 8009624:	f04f 0b00 	mov.w	fp, #0
 8009628:	da6b      	bge.n	8009702 <mktime+0x21a>
 800962a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800962e:	190c      	adds	r4, r1, r4
 8009630:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009634:	e0a9      	b.n	800978a <mktime+0x2a2>
 8009636:	f240 126d 	movw	r2, #365	; 0x16d
 800963a:	e7a9      	b.n	8009590 <mktime+0xa8>
 800963c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009640:	e7a6      	b.n	8009590 <mktime+0xa8>
 8009642:	d0a9      	beq.n	8009598 <mktime+0xb0>
 8009644:	2345      	movs	r3, #69	; 0x45
 8009646:	f240 1c6d 	movw	ip, #365	; 0x16d
 800964a:	2164      	movs	r1, #100	; 0x64
 800964c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009650:	e012      	b.n	8009678 <mktime+0x190>
 8009652:	bb62      	cbnz	r2, 80096ae <mktime+0x1c6>
 8009654:	fb93 f2f1 	sdiv	r2, r3, r1
 8009658:	fb01 3212 	mls	r2, r1, r2, r3
 800965c:	bb52      	cbnz	r2, 80096b4 <mktime+0x1cc>
 800965e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8009662:	fb92 fef0 	sdiv	lr, r2, r0
 8009666:	fb00 221e 	mls	r2, r0, lr, r2
 800966a:	2a00      	cmp	r2, #0
 800966c:	bf14      	ite	ne
 800966e:	4662      	movne	r2, ip
 8009670:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009674:	1aad      	subs	r5, r5, r2
 8009676:	3b01      	subs	r3, #1
 8009678:	429e      	cmp	r6, r3
 800967a:	f003 0203 	and.w	r2, r3, #3
 800967e:	dbe8      	blt.n	8009652 <mktime+0x16a>
 8009680:	b9da      	cbnz	r2, 80096ba <mktime+0x1d2>
 8009682:	2264      	movs	r2, #100	; 0x64
 8009684:	fb96 f3f2 	sdiv	r3, r6, r2
 8009688:	fb02 6313 	mls	r3, r2, r3, r6
 800968c:	b9c3      	cbnz	r3, 80096c0 <mktime+0x1d8>
 800968e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8009692:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009696:	fb93 f1f2 	sdiv	r1, r3, r2
 800969a:	fb02 3311 	mls	r3, r2, r1, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f240 136d 	movw	r3, #365	; 0x16d
 80096a4:	bf08      	it	eq
 80096a6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80096aa:	1aed      	subs	r5, r5, r3
 80096ac:	e774      	b.n	8009598 <mktime+0xb0>
 80096ae:	f240 126d 	movw	r2, #365	; 0x16d
 80096b2:	e7df      	b.n	8009674 <mktime+0x18c>
 80096b4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80096b8:	e7dc      	b.n	8009674 <mktime+0x18c>
 80096ba:	f240 136d 	movw	r3, #365	; 0x16d
 80096be:	e7f4      	b.n	80096aa <mktime+0x1c2>
 80096c0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80096c4:	e7f1      	b.n	80096aa <mktime+0x1c2>
 80096c6:	f000 fac9 	bl	8009c5c <__tzcalc_limits>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d182      	bne.n	80095d4 <mktime+0xec>
 80096ce:	46d3      	mov	fp, sl
 80096d0:	e050      	b.n	8009774 <mktime+0x28c>
 80096d2:	9b01      	ldr	r3, [sp, #4]
 80096d4:	1a5b      	subs	r3, r3, r1
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80096dc:	eb6e 0e03 	sbc.w	lr, lr, r3
 80096e0:	9b01      	ldr	r3, [sp, #4]
 80096e2:	429c      	cmp	r4, r3
 80096e4:	eb78 030e 	sbcs.w	r3, r8, lr
 80096e8:	dbf1      	blt.n	80096ce <mktime+0x1e6>
 80096ea:	e78b      	b.n	8009604 <mktime+0x11c>
 80096ec:	9b02      	ldr	r3, [sp, #8]
 80096ee:	429c      	cmp	r4, r3
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	eb78 0303 	sbcs.w	r3, r8, r3
 80096f6:	db8f      	blt.n	8009618 <mktime+0x130>
 80096f8:	f1bb 0f00 	cmp.w	fp, #0
 80096fc:	db3e      	blt.n	800977c <mktime+0x294>
 80096fe:	f04f 0b01 	mov.w	fp, #1
 8009702:	ea8a 0a0b 	eor.w	sl, sl, fp
 8009706:	f1ba 0f01 	cmp.w	sl, #1
 800970a:	d133      	bne.n	8009774 <mktime+0x28c>
 800970c:	f1bb 0f00 	cmp.w	fp, #0
 8009710:	d04e      	beq.n	80097b0 <mktime+0x2c8>
 8009712:	1a52      	subs	r2, r2, r1
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	1914      	adds	r4, r2, r4
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	4638      	mov	r0, r7
 8009722:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8009726:	f7ff fe07 	bl	8009338 <validate_structure>
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	ebb2 020a 	subs.w	r2, r2, sl
 8009730:	d020      	beq.n	8009774 <mktime+0x28c>
 8009732:	2a01      	cmp	r2, #1
 8009734:	dc3e      	bgt.n	80097b4 <mktime+0x2cc>
 8009736:	1c90      	adds	r0, r2, #2
 8009738:	bfd8      	it	le
 800973a:	2201      	movle	r2, #1
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	18d3      	adds	r3, r2, r3
 8009740:	4415      	add	r5, r2
 8009742:	d540      	bpl.n	80097c6 <mktime+0x2de>
 8009744:	1e73      	subs	r3, r6, #1
 8009746:	0799      	lsls	r1, r3, #30
 8009748:	d137      	bne.n	80097ba <mktime+0x2d2>
 800974a:	2264      	movs	r2, #100	; 0x64
 800974c:	fb93 f1f2 	sdiv	r1, r3, r2
 8009750:	fb02 3311 	mls	r3, r2, r1, r3
 8009754:	bba3      	cbnz	r3, 80097c0 <mktime+0x2d8>
 8009756:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800975a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800975e:	fb96 f2f3 	sdiv	r2, r6, r3
 8009762:	fb03 6612 	mls	r6, r3, r2, r6
 8009766:	2e00      	cmp	r6, #0
 8009768:	f240 136d 	movw	r3, #365	; 0x16d
 800976c:	bf18      	it	ne
 800976e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	f1bb 0f01 	cmp.w	fp, #1
 8009778:	f47f af57 	bne.w	800962a <mktime+0x142>
 800977c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8009780:	190c      	adds	r4, r1, r4
 8009782:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009786:	f04f 0b01 	mov.w	fp, #1
 800978a:	f000 fb17 	bl	8009dbc <__tz_unlock>
 800978e:	3504      	adds	r5, #4
 8009790:	2307      	movs	r3, #7
 8009792:	fb95 f3f3 	sdiv	r3, r5, r3
 8009796:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800979a:	1aed      	subs	r5, r5, r3
 800979c:	bf48      	it	mi
 800979e:	3507      	addmi	r5, #7
 80097a0:	f8c7 b020 	str.w	fp, [r7, #32]
 80097a4:	61bd      	str	r5, [r7, #24]
 80097a6:	4620      	mov	r0, r4
 80097a8:	4641      	mov	r1, r8
 80097aa:	b005      	add	sp, #20
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b0:	1a8a      	subs	r2, r1, r2
 80097b2:	e7af      	b.n	8009714 <mktime+0x22c>
 80097b4:	f04f 32ff 	mov.w	r2, #4294967295
 80097b8:	e7c0      	b.n	800973c <mktime+0x254>
 80097ba:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80097be:	e7d8      	b.n	8009772 <mktime+0x28a>
 80097c0:	f240 136d 	movw	r3, #365	; 0x16d
 80097c4:	e7d5      	b.n	8009772 <mktime+0x28a>
 80097c6:	07b2      	lsls	r2, r6, #30
 80097c8:	d11e      	bne.n	8009808 <mktime+0x320>
 80097ca:	2164      	movs	r1, #100	; 0x64
 80097cc:	fb96 f2f1 	sdiv	r2, r6, r1
 80097d0:	fb01 6212 	mls	r2, r1, r2, r6
 80097d4:	b9da      	cbnz	r2, 800980e <mktime+0x326>
 80097d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80097da:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80097de:	fb96 f1f2 	sdiv	r1, r6, r2
 80097e2:	fb02 6611 	mls	r6, r2, r1, r6
 80097e6:	2e00      	cmp	r6, #0
 80097e8:	f240 126d 	movw	r2, #365	; 0x16d
 80097ec:	bf08      	it	eq
 80097ee:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80097f2:	4293      	cmp	r3, r2
 80097f4:	bfa8      	it	ge
 80097f6:	1a9b      	subge	r3, r3, r2
 80097f8:	e7bb      	b.n	8009772 <mktime+0x28a>
 80097fa:	bf00      	nop
 80097fc:	0800c6f8 	.word	0x0800c6f8
 8009800:	00015180 	.word	0x00015180
 8009804:	20001060 	.word	0x20001060
 8009808:	f240 126d 	movw	r2, #365	; 0x16d
 800980c:	e7f1      	b.n	80097f2 <mktime+0x30a>
 800980e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009812:	e7ee      	b.n	80097f2 <mktime+0x30a>
 8009814:	f04f 34ff 	mov.w	r4, #4294967295
 8009818:	46a0      	mov	r8, r4
 800981a:	e7c4      	b.n	80097a6 <mktime+0x2be>

0800981c <_free_r>:
 800981c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800981e:	2900      	cmp	r1, #0
 8009820:	d044      	beq.n	80098ac <_free_r+0x90>
 8009822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009826:	9001      	str	r0, [sp, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f1a1 0404 	sub.w	r4, r1, #4
 800982e:	bfb8      	it	lt
 8009830:	18e4      	addlt	r4, r4, r3
 8009832:	f001 f869 	bl	800a908 <__malloc_lock>
 8009836:	4a1e      	ldr	r2, [pc, #120]	; (80098b0 <_free_r+0x94>)
 8009838:	9801      	ldr	r0, [sp, #4]
 800983a:	6813      	ldr	r3, [r2, #0]
 800983c:	b933      	cbnz	r3, 800984c <_free_r+0x30>
 800983e:	6063      	str	r3, [r4, #4]
 8009840:	6014      	str	r4, [r2, #0]
 8009842:	b003      	add	sp, #12
 8009844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009848:	f001 b864 	b.w	800a914 <__malloc_unlock>
 800984c:	42a3      	cmp	r3, r4
 800984e:	d908      	bls.n	8009862 <_free_r+0x46>
 8009850:	6825      	ldr	r5, [r4, #0]
 8009852:	1961      	adds	r1, r4, r5
 8009854:	428b      	cmp	r3, r1
 8009856:	bf01      	itttt	eq
 8009858:	6819      	ldreq	r1, [r3, #0]
 800985a:	685b      	ldreq	r3, [r3, #4]
 800985c:	1949      	addeq	r1, r1, r5
 800985e:	6021      	streq	r1, [r4, #0]
 8009860:	e7ed      	b.n	800983e <_free_r+0x22>
 8009862:	461a      	mov	r2, r3
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	b10b      	cbz	r3, 800986c <_free_r+0x50>
 8009868:	42a3      	cmp	r3, r4
 800986a:	d9fa      	bls.n	8009862 <_free_r+0x46>
 800986c:	6811      	ldr	r1, [r2, #0]
 800986e:	1855      	adds	r5, r2, r1
 8009870:	42a5      	cmp	r5, r4
 8009872:	d10b      	bne.n	800988c <_free_r+0x70>
 8009874:	6824      	ldr	r4, [r4, #0]
 8009876:	4421      	add	r1, r4
 8009878:	1854      	adds	r4, r2, r1
 800987a:	42a3      	cmp	r3, r4
 800987c:	6011      	str	r1, [r2, #0]
 800987e:	d1e0      	bne.n	8009842 <_free_r+0x26>
 8009880:	681c      	ldr	r4, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	6053      	str	r3, [r2, #4]
 8009886:	4421      	add	r1, r4
 8009888:	6011      	str	r1, [r2, #0]
 800988a:	e7da      	b.n	8009842 <_free_r+0x26>
 800988c:	d902      	bls.n	8009894 <_free_r+0x78>
 800988e:	230c      	movs	r3, #12
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	e7d6      	b.n	8009842 <_free_r+0x26>
 8009894:	6825      	ldr	r5, [r4, #0]
 8009896:	1961      	adds	r1, r4, r5
 8009898:	428b      	cmp	r3, r1
 800989a:	bf04      	itt	eq
 800989c:	6819      	ldreq	r1, [r3, #0]
 800989e:	685b      	ldreq	r3, [r3, #4]
 80098a0:	6063      	str	r3, [r4, #4]
 80098a2:	bf04      	itt	eq
 80098a4:	1949      	addeq	r1, r1, r5
 80098a6:	6021      	streq	r1, [r4, #0]
 80098a8:	6054      	str	r4, [r2, #4]
 80098aa:	e7ca      	b.n	8009842 <_free_r+0x26>
 80098ac:	b003      	add	sp, #12
 80098ae:	bd30      	pop	{r4, r5, pc}
 80098b0:	2000103c 	.word	0x2000103c

080098b4 <sbrk_aligned>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	4e0e      	ldr	r6, [pc, #56]	; (80098f0 <sbrk_aligned+0x3c>)
 80098b8:	460c      	mov	r4, r1
 80098ba:	6831      	ldr	r1, [r6, #0]
 80098bc:	4605      	mov	r5, r0
 80098be:	b911      	cbnz	r1, 80098c6 <sbrk_aligned+0x12>
 80098c0:	f000 f902 	bl	8009ac8 <_sbrk_r>
 80098c4:	6030      	str	r0, [r6, #0]
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 f8fd 	bl	8009ac8 <_sbrk_r>
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	d00a      	beq.n	80098e8 <sbrk_aligned+0x34>
 80098d2:	1cc4      	adds	r4, r0, #3
 80098d4:	f024 0403 	bic.w	r4, r4, #3
 80098d8:	42a0      	cmp	r0, r4
 80098da:	d007      	beq.n	80098ec <sbrk_aligned+0x38>
 80098dc:	1a21      	subs	r1, r4, r0
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f8f2 	bl	8009ac8 <_sbrk_r>
 80098e4:	3001      	adds	r0, #1
 80098e6:	d101      	bne.n	80098ec <sbrk_aligned+0x38>
 80098e8:	f04f 34ff 	mov.w	r4, #4294967295
 80098ec:	4620      	mov	r0, r4
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	20001040 	.word	0x20001040

080098f4 <_malloc_r>:
 80098f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	1ccd      	adds	r5, r1, #3
 80098fa:	f025 0503 	bic.w	r5, r5, #3
 80098fe:	3508      	adds	r5, #8
 8009900:	2d0c      	cmp	r5, #12
 8009902:	bf38      	it	cc
 8009904:	250c      	movcc	r5, #12
 8009906:	2d00      	cmp	r5, #0
 8009908:	4607      	mov	r7, r0
 800990a:	db01      	blt.n	8009910 <_malloc_r+0x1c>
 800990c:	42a9      	cmp	r1, r5
 800990e:	d905      	bls.n	800991c <_malloc_r+0x28>
 8009910:	230c      	movs	r3, #12
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	2600      	movs	r6, #0
 8009916:	4630      	mov	r0, r6
 8009918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800991c:	4e2e      	ldr	r6, [pc, #184]	; (80099d8 <_malloc_r+0xe4>)
 800991e:	f000 fff3 	bl	800a908 <__malloc_lock>
 8009922:	6833      	ldr	r3, [r6, #0]
 8009924:	461c      	mov	r4, r3
 8009926:	bb34      	cbnz	r4, 8009976 <_malloc_r+0x82>
 8009928:	4629      	mov	r1, r5
 800992a:	4638      	mov	r0, r7
 800992c:	f7ff ffc2 	bl	80098b4 <sbrk_aligned>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	4604      	mov	r4, r0
 8009934:	d14d      	bne.n	80099d2 <_malloc_r+0xde>
 8009936:	6834      	ldr	r4, [r6, #0]
 8009938:	4626      	mov	r6, r4
 800993a:	2e00      	cmp	r6, #0
 800993c:	d140      	bne.n	80099c0 <_malloc_r+0xcc>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	4631      	mov	r1, r6
 8009942:	4638      	mov	r0, r7
 8009944:	eb04 0803 	add.w	r8, r4, r3
 8009948:	f000 f8be 	bl	8009ac8 <_sbrk_r>
 800994c:	4580      	cmp	r8, r0
 800994e:	d13a      	bne.n	80099c6 <_malloc_r+0xd2>
 8009950:	6821      	ldr	r1, [r4, #0]
 8009952:	3503      	adds	r5, #3
 8009954:	1a6d      	subs	r5, r5, r1
 8009956:	f025 0503 	bic.w	r5, r5, #3
 800995a:	3508      	adds	r5, #8
 800995c:	2d0c      	cmp	r5, #12
 800995e:	bf38      	it	cc
 8009960:	250c      	movcc	r5, #12
 8009962:	4629      	mov	r1, r5
 8009964:	4638      	mov	r0, r7
 8009966:	f7ff ffa5 	bl	80098b4 <sbrk_aligned>
 800996a:	3001      	adds	r0, #1
 800996c:	d02b      	beq.n	80099c6 <_malloc_r+0xd2>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	442b      	add	r3, r5
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	e00e      	b.n	8009994 <_malloc_r+0xa0>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	1b52      	subs	r2, r2, r5
 800997a:	d41e      	bmi.n	80099ba <_malloc_r+0xc6>
 800997c:	2a0b      	cmp	r2, #11
 800997e:	d916      	bls.n	80099ae <_malloc_r+0xba>
 8009980:	1961      	adds	r1, r4, r5
 8009982:	42a3      	cmp	r3, r4
 8009984:	6025      	str	r5, [r4, #0]
 8009986:	bf18      	it	ne
 8009988:	6059      	strne	r1, [r3, #4]
 800998a:	6863      	ldr	r3, [r4, #4]
 800998c:	bf08      	it	eq
 800998e:	6031      	streq	r1, [r6, #0]
 8009990:	5162      	str	r2, [r4, r5]
 8009992:	604b      	str	r3, [r1, #4]
 8009994:	4638      	mov	r0, r7
 8009996:	f104 060b 	add.w	r6, r4, #11
 800999a:	f000 ffbb 	bl	800a914 <__malloc_unlock>
 800999e:	f026 0607 	bic.w	r6, r6, #7
 80099a2:	1d23      	adds	r3, r4, #4
 80099a4:	1af2      	subs	r2, r6, r3
 80099a6:	d0b6      	beq.n	8009916 <_malloc_r+0x22>
 80099a8:	1b9b      	subs	r3, r3, r6
 80099aa:	50a3      	str	r3, [r4, r2]
 80099ac:	e7b3      	b.n	8009916 <_malloc_r+0x22>
 80099ae:	6862      	ldr	r2, [r4, #4]
 80099b0:	42a3      	cmp	r3, r4
 80099b2:	bf0c      	ite	eq
 80099b4:	6032      	streq	r2, [r6, #0]
 80099b6:	605a      	strne	r2, [r3, #4]
 80099b8:	e7ec      	b.n	8009994 <_malloc_r+0xa0>
 80099ba:	4623      	mov	r3, r4
 80099bc:	6864      	ldr	r4, [r4, #4]
 80099be:	e7b2      	b.n	8009926 <_malloc_r+0x32>
 80099c0:	4634      	mov	r4, r6
 80099c2:	6876      	ldr	r6, [r6, #4]
 80099c4:	e7b9      	b.n	800993a <_malloc_r+0x46>
 80099c6:	230c      	movs	r3, #12
 80099c8:	603b      	str	r3, [r7, #0]
 80099ca:	4638      	mov	r0, r7
 80099cc:	f000 ffa2 	bl	800a914 <__malloc_unlock>
 80099d0:	e7a1      	b.n	8009916 <_malloc_r+0x22>
 80099d2:	6025      	str	r5, [r4, #0]
 80099d4:	e7de      	b.n	8009994 <_malloc_r+0xa0>
 80099d6:	bf00      	nop
 80099d8:	2000103c 	.word	0x2000103c

080099dc <_puts_r>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	460e      	mov	r6, r1
 80099e0:	4605      	mov	r5, r0
 80099e2:	b118      	cbz	r0, 80099ec <_puts_r+0x10>
 80099e4:	6983      	ldr	r3, [r0, #24]
 80099e6:	b90b      	cbnz	r3, 80099ec <_puts_r+0x10>
 80099e8:	f000 fd80 	bl	800a4ec <__sinit>
 80099ec:	69ab      	ldr	r3, [r5, #24]
 80099ee:	68ac      	ldr	r4, [r5, #8]
 80099f0:	b913      	cbnz	r3, 80099f8 <_puts_r+0x1c>
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 fd7a 	bl	800a4ec <__sinit>
 80099f8:	4b2c      	ldr	r3, [pc, #176]	; (8009aac <_puts_r+0xd0>)
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d120      	bne.n	8009a40 <_puts_r+0x64>
 80099fe:	686c      	ldr	r4, [r5, #4]
 8009a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a02:	07db      	lsls	r3, r3, #31
 8009a04:	d405      	bmi.n	8009a12 <_puts_r+0x36>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	0598      	lsls	r0, r3, #22
 8009a0a:	d402      	bmi.n	8009a12 <_puts_r+0x36>
 8009a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0e:	f000 ff13 	bl	800a838 <__retarget_lock_acquire_recursive>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	0719      	lsls	r1, r3, #28
 8009a16:	d51d      	bpl.n	8009a54 <_puts_r+0x78>
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	b1db      	cbz	r3, 8009a54 <_puts_r+0x78>
 8009a1c:	3e01      	subs	r6, #1
 8009a1e:	68a3      	ldr	r3, [r4, #8]
 8009a20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a24:	3b01      	subs	r3, #1
 8009a26:	60a3      	str	r3, [r4, #8]
 8009a28:	bb39      	cbnz	r1, 8009a7a <_puts_r+0x9e>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	da38      	bge.n	8009aa0 <_puts_r+0xc4>
 8009a2e:	4622      	mov	r2, r4
 8009a30:	210a      	movs	r1, #10
 8009a32:	4628      	mov	r0, r5
 8009a34:	f000 fb4e 	bl	800a0d4 <__swbuf_r>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d011      	beq.n	8009a60 <_puts_r+0x84>
 8009a3c:	250a      	movs	r5, #10
 8009a3e:	e011      	b.n	8009a64 <_puts_r+0x88>
 8009a40:	4b1b      	ldr	r3, [pc, #108]	; (8009ab0 <_puts_r+0xd4>)
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d101      	bne.n	8009a4a <_puts_r+0x6e>
 8009a46:	68ac      	ldr	r4, [r5, #8]
 8009a48:	e7da      	b.n	8009a00 <_puts_r+0x24>
 8009a4a:	4b1a      	ldr	r3, [pc, #104]	; (8009ab4 <_puts_r+0xd8>)
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	bf08      	it	eq
 8009a50:	68ec      	ldreq	r4, [r5, #12]
 8009a52:	e7d5      	b.n	8009a00 <_puts_r+0x24>
 8009a54:	4621      	mov	r1, r4
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 fb8e 	bl	800a178 <__swsetup_r>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d0dd      	beq.n	8009a1c <_puts_r+0x40>
 8009a60:	f04f 35ff 	mov.w	r5, #4294967295
 8009a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a66:	07da      	lsls	r2, r3, #31
 8009a68:	d405      	bmi.n	8009a76 <_puts_r+0x9a>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	059b      	lsls	r3, r3, #22
 8009a6e:	d402      	bmi.n	8009a76 <_puts_r+0x9a>
 8009a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a72:	f000 fee3 	bl	800a83c <__retarget_lock_release_recursive>
 8009a76:	4628      	mov	r0, r5
 8009a78:	bd70      	pop	{r4, r5, r6, pc}
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da04      	bge.n	8009a88 <_puts_r+0xac>
 8009a7e:	69a2      	ldr	r2, [r4, #24]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	dc06      	bgt.n	8009a92 <_puts_r+0xb6>
 8009a84:	290a      	cmp	r1, #10
 8009a86:	d004      	beq.n	8009a92 <_puts_r+0xb6>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	6022      	str	r2, [r4, #0]
 8009a8e:	7019      	strb	r1, [r3, #0]
 8009a90:	e7c5      	b.n	8009a1e <_puts_r+0x42>
 8009a92:	4622      	mov	r2, r4
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 fb1d 	bl	800a0d4 <__swbuf_r>
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	d1bf      	bne.n	8009a1e <_puts_r+0x42>
 8009a9e:	e7df      	b.n	8009a60 <_puts_r+0x84>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	250a      	movs	r5, #10
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	6022      	str	r2, [r4, #0]
 8009aa8:	701d      	strb	r5, [r3, #0]
 8009aaa:	e7db      	b.n	8009a64 <_puts_r+0x88>
 8009aac:	0800c880 	.word	0x0800c880
 8009ab0:	0800c8a0 	.word	0x0800c8a0
 8009ab4:	0800c860 	.word	0x0800c860

08009ab8 <puts>:
 8009ab8:	4b02      	ldr	r3, [pc, #8]	; (8009ac4 <puts+0xc>)
 8009aba:	4601      	mov	r1, r0
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	f7ff bf8d 	b.w	80099dc <_puts_r>
 8009ac2:	bf00      	nop
 8009ac4:	2000005c 	.word	0x2000005c

08009ac8 <_sbrk_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d06      	ldr	r5, [pc, #24]	; (8009ae4 <_sbrk_r+0x1c>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7f8 fcd2 	bl	800247c <_sbrk>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_sbrk_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_sbrk_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	20001070 	.word	0x20001070

08009ae8 <siprintf>:
 8009ae8:	b40e      	push	{r1, r2, r3}
 8009aea:	b500      	push	{lr}
 8009aec:	b09c      	sub	sp, #112	; 0x70
 8009aee:	ab1d      	add	r3, sp, #116	; 0x74
 8009af0:	9002      	str	r0, [sp, #8]
 8009af2:	9006      	str	r0, [sp, #24]
 8009af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <siprintf+0x38>)
 8009afa:	9107      	str	r1, [sp, #28]
 8009afc:	9104      	str	r1, [sp, #16]
 8009afe:	4909      	ldr	r1, [pc, #36]	; (8009b24 <siprintf+0x3c>)
 8009b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b04:	9105      	str	r1, [sp, #20]
 8009b06:	6800      	ldr	r0, [r0, #0]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	a902      	add	r1, sp, #8
 8009b0c:	f000 ff64 	bl	800a9d8 <_svfiprintf_r>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	b01c      	add	sp, #112	; 0x70
 8009b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b1c:	b003      	add	sp, #12
 8009b1e:	4770      	bx	lr
 8009b20:	2000005c 	.word	0x2000005c
 8009b24:	ffff0208 	.word	0xffff0208

08009b28 <strncmp>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	b17a      	cbz	r2, 8009b4c <strncmp+0x24>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	3901      	subs	r1, #1
 8009b30:	1884      	adds	r4, r0, r2
 8009b32:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b3a:	4290      	cmp	r0, r2
 8009b3c:	d101      	bne.n	8009b42 <strncmp+0x1a>
 8009b3e:	42a3      	cmp	r3, r4
 8009b40:	d101      	bne.n	8009b46 <strncmp+0x1e>
 8009b42:	1a80      	subs	r0, r0, r2
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d1f3      	bne.n	8009b32 <strncmp+0xa>
 8009b4a:	e7fa      	b.n	8009b42 <strncmp+0x1a>
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	e7f9      	b.n	8009b44 <strncmp+0x1c>

08009b50 <strncpy>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	3901      	subs	r1, #1
 8009b54:	4603      	mov	r3, r0
 8009b56:	b132      	cbz	r2, 8009b66 <strncpy+0x16>
 8009b58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009b5c:	f803 4b01 	strb.w	r4, [r3], #1
 8009b60:	3a01      	subs	r2, #1
 8009b62:	2c00      	cmp	r4, #0
 8009b64:	d1f7      	bne.n	8009b56 <strncpy+0x6>
 8009b66:	441a      	add	r2, r3
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d100      	bne.n	8009b70 <strncpy+0x20>
 8009b6e:	bd10      	pop	{r4, pc}
 8009b70:	f803 1b01 	strb.w	r1, [r3], #1
 8009b74:	e7f9      	b.n	8009b6a <strncpy+0x1a>

08009b76 <strstr>:
 8009b76:	780a      	ldrb	r2, [r1, #0]
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	b96a      	cbnz	r2, 8009b98 <strstr+0x22>
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d109      	bne.n	8009b96 <strstr+0x20>
 8009b82:	460c      	mov	r4, r1
 8009b84:	4605      	mov	r5, r0
 8009b86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0f6      	beq.n	8009b7c <strstr+0x6>
 8009b8e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009b92:	429e      	cmp	r6, r3
 8009b94:	d0f7      	beq.n	8009b86 <strstr+0x10>
 8009b96:	3001      	adds	r0, #1
 8009b98:	7803      	ldrb	r3, [r0, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1ef      	bne.n	8009b7e <strstr+0x8>
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	e7ec      	b.n	8009b7c <strstr+0x6>
	...

08009ba4 <strtok>:
 8009ba4:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <strtok+0x5c>)
 8009ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba8:	681e      	ldr	r6, [r3, #0]
 8009baa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009bac:	4605      	mov	r5, r0
 8009bae:	b9fc      	cbnz	r4, 8009bf0 <strtok+0x4c>
 8009bb0:	2050      	movs	r0, #80	; 0x50
 8009bb2:	9101      	str	r1, [sp, #4]
 8009bb4:	f7ff fb9a 	bl	80092ec <malloc>
 8009bb8:	9901      	ldr	r1, [sp, #4]
 8009bba:	65b0      	str	r0, [r6, #88]	; 0x58
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	b920      	cbnz	r0, 8009bca <strtok+0x26>
 8009bc0:	4b10      	ldr	r3, [pc, #64]	; (8009c04 <strtok+0x60>)
 8009bc2:	4811      	ldr	r0, [pc, #68]	; (8009c08 <strtok+0x64>)
 8009bc4:	2157      	movs	r1, #87	; 0x57
 8009bc6:	f000 fb45 	bl	800a254 <__assert_func>
 8009bca:	e9c0 4400 	strd	r4, r4, [r0]
 8009bce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009bd2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009bd6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009bda:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009bde:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009be2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009be6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009bea:	6184      	str	r4, [r0, #24]
 8009bec:	7704      	strb	r4, [r0, #28]
 8009bee:	6244      	str	r4, [r0, #36]	; 0x24
 8009bf0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	b002      	add	sp, #8
 8009bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bfc:	f000 b806 	b.w	8009c0c <__strtok_r>
 8009c00:	2000005c 	.word	0x2000005c
 8009c04:	0800c654 	.word	0x0800c654
 8009c08:	0800c788 	.word	0x0800c788

08009c0c <__strtok_r>:
 8009c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0e:	b908      	cbnz	r0, 8009c14 <__strtok_r+0x8>
 8009c10:	6810      	ldr	r0, [r2, #0]
 8009c12:	b188      	cbz	r0, 8009c38 <__strtok_r+0x2c>
 8009c14:	4604      	mov	r4, r0
 8009c16:	4620      	mov	r0, r4
 8009c18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c22:	b91e      	cbnz	r6, 8009c2c <__strtok_r+0x20>
 8009c24:	b965      	cbnz	r5, 8009c40 <__strtok_r+0x34>
 8009c26:	6015      	str	r5, [r2, #0]
 8009c28:	4628      	mov	r0, r5
 8009c2a:	e005      	b.n	8009c38 <__strtok_r+0x2c>
 8009c2c:	42b5      	cmp	r5, r6
 8009c2e:	d1f6      	bne.n	8009c1e <__strtok_r+0x12>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1f0      	bne.n	8009c16 <__strtok_r+0xa>
 8009c34:	6014      	str	r4, [r2, #0]
 8009c36:	7003      	strb	r3, [r0, #0]
 8009c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3a:	461c      	mov	r4, r3
 8009c3c:	e00c      	b.n	8009c58 <__strtok_r+0x4c>
 8009c3e:	b915      	cbnz	r5, 8009c46 <__strtok_r+0x3a>
 8009c40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c44:	460e      	mov	r6, r1
 8009c46:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c4a:	42ab      	cmp	r3, r5
 8009c4c:	d1f7      	bne.n	8009c3e <__strtok_r+0x32>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f3      	beq.n	8009c3a <__strtok_r+0x2e>
 8009c52:	2300      	movs	r3, #0
 8009c54:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009c58:	6014      	str	r4, [r2, #0]
 8009c5a:	e7ed      	b.n	8009c38 <__strtok_r+0x2c>

08009c5c <__tzcalc_limits>:
 8009c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	4605      	mov	r5, r0
 8009c62:	f000 fd37 	bl	800a6d4 <__gettzinfo>
 8009c66:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009c6a:	429d      	cmp	r5, r3
 8009c6c:	f340 8099 	ble.w	8009da2 <__tzcalc_limits+0x146>
 8009c70:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8009c74:	18ac      	adds	r4, r5, r2
 8009c76:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8009c7a:	f240 126d 	movw	r2, #365	; 0x16d
 8009c7e:	10a4      	asrs	r4, r4, #2
 8009c80:	fb02 4403 	mla	r4, r2, r3, r4
 8009c84:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009c88:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009c8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c90:	441c      	add	r4, r3
 8009c92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009c96:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8009c9a:	fb95 fcf3 	sdiv	ip, r5, r3
 8009c9e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8009ca2:	186a      	adds	r2, r5, r1
 8009ca4:	fabc f68c 	clz	r6, ip
 8009ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cac:	f005 0303 	and.w	r3, r5, #3
 8009cb0:	4414      	add	r4, r2
 8009cb2:	2264      	movs	r2, #100	; 0x64
 8009cb4:	6045      	str	r5, [r0, #4]
 8009cb6:	fb95 f7f2 	sdiv	r7, r5, r2
 8009cba:	0976      	lsrs	r6, r6, #5
 8009cbc:	fb02 5717 	mls	r7, r2, r7, r5
 8009cc0:	4601      	mov	r1, r0
 8009cc2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	f04f 0a07 	mov.w	sl, #7
 8009ccc:	7a0d      	ldrb	r5, [r1, #8]
 8009cce:	694b      	ldr	r3, [r1, #20]
 8009cd0:	2d4a      	cmp	r5, #74	; 0x4a
 8009cd2:	d12d      	bne.n	8009d30 <__tzcalc_limits+0xd4>
 8009cd4:	9a00      	ldr	r2, [sp, #0]
 8009cd6:	eb04 0e03 	add.w	lr, r4, r3
 8009cda:	b902      	cbnz	r2, 8009cde <__tzcalc_limits+0x82>
 8009cdc:	b917      	cbnz	r7, 8009ce4 <__tzcalc_limits+0x88>
 8009cde:	f1bc 0f00 	cmp.w	ip, #0
 8009ce2:	d123      	bne.n	8009d2c <__tzcalc_limits+0xd0>
 8009ce4:	2b3b      	cmp	r3, #59	; 0x3b
 8009ce6:	bfd4      	ite	le
 8009ce8:	2300      	movle	r3, #0
 8009cea:	2301      	movgt	r3, #1
 8009cec:	4473      	add	r3, lr
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	698d      	ldr	r5, [r1, #24]
 8009cf2:	4a2d      	ldr	r2, [pc, #180]	; (8009da8 <__tzcalc_limits+0x14c>)
 8009cf4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8009cf8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8009cfc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009cfe:	18ed      	adds	r5, r5, r3
 8009d00:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8009d04:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8009d08:	3128      	adds	r1, #40	; 0x28
 8009d0a:	458b      	cmp	fp, r1
 8009d0c:	d1de      	bne.n	8009ccc <__tzcalc_limits+0x70>
 8009d0e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8009d12:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8009d16:	428c      	cmp	r4, r1
 8009d18:	eb72 0303 	sbcs.w	r3, r2, r3
 8009d1c:	bfb4      	ite	lt
 8009d1e:	2301      	movlt	r3, #1
 8009d20:	2300      	movge	r3, #0
 8009d22:	6003      	str	r3, [r0, #0]
 8009d24:	2001      	movs	r0, #1
 8009d26:	b003      	add	sp, #12
 8009d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e7dd      	b.n	8009cec <__tzcalc_limits+0x90>
 8009d30:	2d44      	cmp	r5, #68	; 0x44
 8009d32:	d101      	bne.n	8009d38 <__tzcalc_limits+0xdc>
 8009d34:	4423      	add	r3, r4
 8009d36:	e7db      	b.n	8009cf0 <__tzcalc_limits+0x94>
 8009d38:	9a00      	ldr	r2, [sp, #0]
 8009d3a:	bb62      	cbnz	r2, 8009d96 <__tzcalc_limits+0x13a>
 8009d3c:	2f00      	cmp	r7, #0
 8009d3e:	bf0c      	ite	eq
 8009d40:	4635      	moveq	r5, r6
 8009d42:	2501      	movne	r5, #1
 8009d44:	68ca      	ldr	r2, [r1, #12]
 8009d46:	9201      	str	r2, [sp, #4]
 8009d48:	4a18      	ldr	r2, [pc, #96]	; (8009dac <__tzcalc_limits+0x150>)
 8009d4a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8009d4e:	fb09 2505 	mla	r5, r9, r5, r2
 8009d52:	46a6      	mov	lr, r4
 8009d54:	f04f 0800 	mov.w	r8, #0
 8009d58:	3d04      	subs	r5, #4
 8009d5a:	9a01      	ldr	r2, [sp, #4]
 8009d5c:	f108 0801 	add.w	r8, r8, #1
 8009d60:	4542      	cmp	r2, r8
 8009d62:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8009d66:	dc18      	bgt.n	8009d9a <__tzcalc_limits+0x13e>
 8009d68:	f10e 0504 	add.w	r5, lr, #4
 8009d6c:	fb95 f8fa 	sdiv	r8, r5, sl
 8009d70:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009d74:	eba5 0808 	sub.w	r8, r5, r8
 8009d78:	ebb3 0808 	subs.w	r8, r3, r8
 8009d7c:	690b      	ldr	r3, [r1, #16]
 8009d7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d82:	bf48      	it	mi
 8009d84:	f108 0807 	addmi.w	r8, r8, #7
 8009d88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d8c:	4443      	add	r3, r8
 8009d8e:	454b      	cmp	r3, r9
 8009d90:	da05      	bge.n	8009d9e <__tzcalc_limits+0x142>
 8009d92:	4473      	add	r3, lr
 8009d94:	e7ac      	b.n	8009cf0 <__tzcalc_limits+0x94>
 8009d96:	4635      	mov	r5, r6
 8009d98:	e7d4      	b.n	8009d44 <__tzcalc_limits+0xe8>
 8009d9a:	44ce      	add	lr, r9
 8009d9c:	e7dd      	b.n	8009d5a <__tzcalc_limits+0xfe>
 8009d9e:	3b07      	subs	r3, #7
 8009da0:	e7f5      	b.n	8009d8e <__tzcalc_limits+0x132>
 8009da2:	2000      	movs	r0, #0
 8009da4:	e7bf      	b.n	8009d26 <__tzcalc_limits+0xca>
 8009da6:	bf00      	nop
 8009da8:	00015180 	.word	0x00015180
 8009dac:	0800c728 	.word	0x0800c728

08009db0 <__tz_lock>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__tz_lock+0x8>)
 8009db2:	f000 bd40 	b.w	800a836 <__retarget_lock_acquire>
 8009db6:	bf00      	nop
 8009db8:	2000106c 	.word	0x2000106c

08009dbc <__tz_unlock>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	; (8009dc4 <__tz_unlock+0x8>)
 8009dbe:	f000 bd3c 	b.w	800a83a <__retarget_lock_release>
 8009dc2:	bf00      	nop
 8009dc4:	2000106c 	.word	0x2000106c

08009dc8 <_tzset_unlocked>:
 8009dc8:	4b01      	ldr	r3, [pc, #4]	; (8009dd0 <_tzset_unlocked+0x8>)
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	f000 b802 	b.w	8009dd4 <_tzset_unlocked_r>
 8009dd0:	2000005c 	.word	0x2000005c

08009dd4 <_tzset_unlocked_r>:
 8009dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	b08d      	sub	sp, #52	; 0x34
 8009dda:	4607      	mov	r7, r0
 8009ddc:	f000 fc7a 	bl	800a6d4 <__gettzinfo>
 8009de0:	49b0      	ldr	r1, [pc, #704]	; (800a0a4 <_tzset_unlocked_r+0x2d0>)
 8009de2:	4eb1      	ldr	r6, [pc, #708]	; (800a0a8 <_tzset_unlocked_r+0x2d4>)
 8009de4:	4605      	mov	r5, r0
 8009de6:	4638      	mov	r0, r7
 8009de8:	f000 fc6c 	bl	800a6c4 <_getenv_r>
 8009dec:	4604      	mov	r4, r0
 8009dee:	b970      	cbnz	r0, 8009e0e <_tzset_unlocked_r+0x3a>
 8009df0:	4bae      	ldr	r3, [pc, #696]	; (800a0ac <_tzset_unlocked_r+0x2d8>)
 8009df2:	4aaf      	ldr	r2, [pc, #700]	; (800a0b0 <_tzset_unlocked_r+0x2dc>)
 8009df4:	6018      	str	r0, [r3, #0]
 8009df6:	4baf      	ldr	r3, [pc, #700]	; (800a0b4 <_tzset_unlocked_r+0x2e0>)
 8009df8:	6018      	str	r0, [r3, #0]
 8009dfa:	4baf      	ldr	r3, [pc, #700]	; (800a0b8 <_tzset_unlocked_r+0x2e4>)
 8009dfc:	6830      	ldr	r0, [r6, #0]
 8009dfe:	e9c3 2200 	strd	r2, r2, [r3]
 8009e02:	f7ff fa7b 	bl	80092fc <free>
 8009e06:	6034      	str	r4, [r6, #0]
 8009e08:	b00d      	add	sp, #52	; 0x34
 8009e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0e:	6831      	ldr	r1, [r6, #0]
 8009e10:	2900      	cmp	r1, #0
 8009e12:	d162      	bne.n	8009eda <_tzset_unlocked_r+0x106>
 8009e14:	6830      	ldr	r0, [r6, #0]
 8009e16:	f7ff fa71 	bl	80092fc <free>
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f7f6 f9d8 	bl	80001d0 <strlen>
 8009e20:	1c41      	adds	r1, r0, #1
 8009e22:	4638      	mov	r0, r7
 8009e24:	f7ff fd66 	bl	80098f4 <_malloc_r>
 8009e28:	6030      	str	r0, [r6, #0]
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d15a      	bne.n	8009ee4 <_tzset_unlocked_r+0x110>
 8009e2e:	7823      	ldrb	r3, [r4, #0]
 8009e30:	4aa2      	ldr	r2, [pc, #648]	; (800a0bc <_tzset_unlocked_r+0x2e8>)
 8009e32:	49a3      	ldr	r1, [pc, #652]	; (800a0c0 <_tzset_unlocked_r+0x2ec>)
 8009e34:	2b3a      	cmp	r3, #58	; 0x3a
 8009e36:	bf08      	it	eq
 8009e38:	3401      	addeq	r4, #1
 8009e3a:	ae0a      	add	r6, sp, #40	; 0x28
 8009e3c:	4633      	mov	r3, r6
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f001 f9b8 	bl	800b1b4 <siscanf>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	dddf      	ble.n	8009e08 <_tzset_unlocked_r+0x34>
 8009e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4a:	18e7      	adds	r7, r4, r3
 8009e4c:	5ce3      	ldrb	r3, [r4, r3]
 8009e4e:	2b2d      	cmp	r3, #45	; 0x2d
 8009e50:	d14c      	bne.n	8009eec <_tzset_unlocked_r+0x118>
 8009e52:	3701      	adds	r7, #1
 8009e54:	f04f 38ff 	mov.w	r8, #4294967295
 8009e58:	f10d 0a20 	add.w	sl, sp, #32
 8009e5c:	f10d 0b1e 	add.w	fp, sp, #30
 8009e60:	2400      	movs	r4, #0
 8009e62:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009e66:	4997      	ldr	r1, [pc, #604]	; (800a0c4 <_tzset_unlocked_r+0x2f0>)
 8009e68:	9603      	str	r6, [sp, #12]
 8009e6a:	f8cd b000 	str.w	fp, [sp]
 8009e6e:	4633      	mov	r3, r6
 8009e70:	aa07      	add	r2, sp, #28
 8009e72:	4638      	mov	r0, r7
 8009e74:	f8ad 401e 	strh.w	r4, [sp, #30]
 8009e78:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009e7c:	f001 f99a 	bl	800b1b4 <siscanf>
 8009e80:	42a0      	cmp	r0, r4
 8009e82:	ddc1      	ble.n	8009e08 <_tzset_unlocked_r+0x34>
 8009e84:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009e88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009e8c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800a0d0 <_tzset_unlocked_r+0x2fc>
 8009e90:	213c      	movs	r1, #60	; 0x3c
 8009e92:	fb01 3302 	mla	r3, r1, r2, r3
 8009e96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009e9a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009e9e:	fb01 3302 	mla	r3, r1, r2, r3
 8009ea2:	fb08 f303 	mul.w	r3, r8, r3
 8009ea6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800a0b8 <_tzset_unlocked_r+0x2e4>
 8009eaa:	62ab      	str	r3, [r5, #40]	; 0x28
 8009eac:	4b83      	ldr	r3, [pc, #524]	; (800a0bc <_tzset_unlocked_r+0x2e8>)
 8009eae:	f8c8 3000 	str.w	r3, [r8]
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb4:	4982      	ldr	r1, [pc, #520]	; (800a0c0 <_tzset_unlocked_r+0x2ec>)
 8009eb6:	441f      	add	r7, r3
 8009eb8:	464a      	mov	r2, r9
 8009eba:	4633      	mov	r3, r6
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f001 f979 	bl	800b1b4 <siscanf>
 8009ec2:	42a0      	cmp	r0, r4
 8009ec4:	dc18      	bgt.n	8009ef8 <_tzset_unlocked_r+0x124>
 8009ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eca:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ece:	4b77      	ldr	r3, [pc, #476]	; (800a0ac <_tzset_unlocked_r+0x2d8>)
 8009ed0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	4b77      	ldr	r3, [pc, #476]	; (800a0b4 <_tzset_unlocked_r+0x2e0>)
 8009ed6:	601c      	str	r4, [r3, #0]
 8009ed8:	e796      	b.n	8009e08 <_tzset_unlocked_r+0x34>
 8009eda:	f7f6 f981 	bl	80001e0 <strcmp>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d198      	bne.n	8009e14 <_tzset_unlocked_r+0x40>
 8009ee2:	e791      	b.n	8009e08 <_tzset_unlocked_r+0x34>
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	f001 f9d6 	bl	800b296 <strcpy>
 8009eea:	e7a0      	b.n	8009e2e <_tzset_unlocked_r+0x5a>
 8009eec:	2b2b      	cmp	r3, #43	; 0x2b
 8009eee:	bf08      	it	eq
 8009ef0:	3701      	addeq	r7, #1
 8009ef2:	f04f 0801 	mov.w	r8, #1
 8009ef6:	e7af      	b.n	8009e58 <_tzset_unlocked_r+0x84>
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	f8c8 9004 	str.w	r9, [r8, #4]
 8009efe:	18fc      	adds	r4, r7, r3
 8009f00:	5cfb      	ldrb	r3, [r7, r3]
 8009f02:	2b2d      	cmp	r3, #45	; 0x2d
 8009f04:	f040 808b 	bne.w	800a01e <_tzset_unlocked_r+0x24a>
 8009f08:	3401      	adds	r4, #1
 8009f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f18:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f1e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009f22:	e9cd b600 	strd	fp, r6, [sp]
 8009f26:	4967      	ldr	r1, [pc, #412]	; (800a0c4 <_tzset_unlocked_r+0x2f0>)
 8009f28:	4633      	mov	r3, r6
 8009f2a:	aa07      	add	r2, sp, #28
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f001 f941 	bl	800b1b4 <siscanf>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	dc78      	bgt.n	800a028 <_tzset_unlocked_r+0x254>
 8009f36:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009f38:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009f3c:	652b      	str	r3, [r5, #80]	; 0x50
 8009f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f40:	462f      	mov	r7, r5
 8009f42:	441c      	add	r4, r3
 8009f44:	f04f 0900 	mov.w	r9, #0
 8009f48:	7823      	ldrb	r3, [r4, #0]
 8009f4a:	2b2c      	cmp	r3, #44	; 0x2c
 8009f4c:	bf08      	it	eq
 8009f4e:	3401      	addeq	r4, #1
 8009f50:	f894 8000 	ldrb.w	r8, [r4]
 8009f54:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009f58:	d178      	bne.n	800a04c <_tzset_unlocked_r+0x278>
 8009f5a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009f5e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009f62:	ab09      	add	r3, sp, #36	; 0x24
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	4958      	ldr	r1, [pc, #352]	; (800a0c8 <_tzset_unlocked_r+0x2f4>)
 8009f68:	9603      	str	r6, [sp, #12]
 8009f6a:	4633      	mov	r3, r6
 8009f6c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009f70:	4620      	mov	r0, r4
 8009f72:	f001 f91f 	bl	800b1b4 <siscanf>
 8009f76:	2803      	cmp	r0, #3
 8009f78:	f47f af46 	bne.w	8009e08 <_tzset_unlocked_r+0x34>
 8009f7c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009f80:	1e4b      	subs	r3, r1, #1
 8009f82:	2b0b      	cmp	r3, #11
 8009f84:	f63f af40 	bhi.w	8009e08 <_tzset_unlocked_r+0x34>
 8009f88:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009f8c:	1e53      	subs	r3, r2, #1
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	f63f af3a 	bhi.w	8009e08 <_tzset_unlocked_r+0x34>
 8009f94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009f98:	2b06      	cmp	r3, #6
 8009f9a:	f63f af35 	bhi.w	8009e08 <_tzset_unlocked_r+0x34>
 8009f9e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009fa2:	f887 8008 	strb.w	r8, [r7, #8]
 8009fa6:	617b      	str	r3, [r7, #20]
 8009fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009faa:	eb04 0803 	add.w	r8, r4, r3
 8009fae:	2302      	movs	r3, #2
 8009fb0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009fba:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009fc0:	f898 3000 	ldrb.w	r3, [r8]
 8009fc4:	2b2f      	cmp	r3, #47	; 0x2f
 8009fc6:	d109      	bne.n	8009fdc <_tzset_unlocked_r+0x208>
 8009fc8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009fcc:	e9cd b600 	strd	fp, r6, [sp]
 8009fd0:	493e      	ldr	r1, [pc, #248]	; (800a0cc <_tzset_unlocked_r+0x2f8>)
 8009fd2:	4633      	mov	r3, r6
 8009fd4:	aa07      	add	r2, sp, #28
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	f001 f8ec 	bl	800b1b4 <siscanf>
 8009fdc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009fe0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009fe4:	213c      	movs	r1, #60	; 0x3c
 8009fe6:	fb01 3302 	mla	r3, r1, r2, r3
 8009fea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009fee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ff2:	fb01 3302 	mla	r3, r1, r2, r3
 8009ff6:	61bb      	str	r3, [r7, #24]
 8009ff8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ffa:	3728      	adds	r7, #40	; 0x28
 8009ffc:	4444      	add	r4, r8
 8009ffe:	f1b9 0f00 	cmp.w	r9, #0
 800a002:	d020      	beq.n	800a046 <_tzset_unlocked_r+0x272>
 800a004:	6868      	ldr	r0, [r5, #4]
 800a006:	f7ff fe29 	bl	8009c5c <__tzcalc_limits>
 800a00a:	4b28      	ldr	r3, [pc, #160]	; (800a0ac <_tzset_unlocked_r+0x2d8>)
 800a00c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a012:	1a9b      	subs	r3, r3, r2
 800a014:	4a27      	ldr	r2, [pc, #156]	; (800a0b4 <_tzset_unlocked_r+0x2e0>)
 800a016:	bf18      	it	ne
 800a018:	2301      	movne	r3, #1
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	e6f4      	b.n	8009e08 <_tzset_unlocked_r+0x34>
 800a01e:	2b2b      	cmp	r3, #43	; 0x2b
 800a020:	bf08      	it	eq
 800a022:	3401      	addeq	r4, #1
 800a024:	2701      	movs	r7, #1
 800a026:	e772      	b.n	8009f0e <_tzset_unlocked_r+0x13a>
 800a028:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a02c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a030:	213c      	movs	r1, #60	; 0x3c
 800a032:	fb01 3302 	mla	r3, r1, r2, r3
 800a036:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a03a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a03e:	fb01 3302 	mla	r3, r1, r2, r3
 800a042:	437b      	muls	r3, r7
 800a044:	e77a      	b.n	8009f3c <_tzset_unlocked_r+0x168>
 800a046:	f04f 0901 	mov.w	r9, #1
 800a04a:	e77d      	b.n	8009f48 <_tzset_unlocked_r+0x174>
 800a04c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a050:	bf06      	itte	eq
 800a052:	3401      	addeq	r4, #1
 800a054:	4643      	moveq	r3, r8
 800a056:	2344      	movne	r3, #68	; 0x44
 800a058:	220a      	movs	r2, #10
 800a05a:	a90b      	add	r1, sp, #44	; 0x2c
 800a05c:	4620      	mov	r0, r4
 800a05e:	9305      	str	r3, [sp, #20]
 800a060:	f001 f996 	bl	800b390 <strtoul>
 800a064:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a068:	9b05      	ldr	r3, [sp, #20]
 800a06a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a06e:	45a0      	cmp	r8, r4
 800a070:	d114      	bne.n	800a09c <_tzset_unlocked_r+0x2c8>
 800a072:	234d      	movs	r3, #77	; 0x4d
 800a074:	f1b9 0f00 	cmp.w	r9, #0
 800a078:	d107      	bne.n	800a08a <_tzset_unlocked_r+0x2b6>
 800a07a:	722b      	strb	r3, [r5, #8]
 800a07c:	2103      	movs	r1, #3
 800a07e:	2302      	movs	r3, #2
 800a080:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a084:	f8c5 9014 	str.w	r9, [r5, #20]
 800a088:	e791      	b.n	8009fae <_tzset_unlocked_r+0x1da>
 800a08a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a08e:	220b      	movs	r2, #11
 800a090:	2301      	movs	r3, #1
 800a092:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a096:	2300      	movs	r3, #0
 800a098:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a09a:	e788      	b.n	8009fae <_tzset_unlocked_r+0x1da>
 800a09c:	b280      	uxth	r0, r0
 800a09e:	723b      	strb	r3, [r7, #8]
 800a0a0:	6178      	str	r0, [r7, #20]
 800a0a2:	e784      	b.n	8009fae <_tzset_unlocked_r+0x1da>
 800a0a4:	0800c7e5 	.word	0x0800c7e5
 800a0a8:	2000105c 	.word	0x2000105c
 800a0ac:	20001064 	.word	0x20001064
 800a0b0:	0800c7e8 	.word	0x0800c7e8
 800a0b4:	20001060 	.word	0x20001060
 800a0b8:	200000c0 	.word	0x200000c0
 800a0bc:	2000104f 	.word	0x2000104f
 800a0c0:	0800c7ec 	.word	0x0800c7ec
 800a0c4:	0800c80f 	.word	0x0800c80f
 800a0c8:	0800c7fb 	.word	0x0800c7fb
 800a0cc:	0800c80e 	.word	0x0800c80e
 800a0d0:	20001044 	.word	0x20001044

0800a0d4 <__swbuf_r>:
 800a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d6:	460e      	mov	r6, r1
 800a0d8:	4614      	mov	r4, r2
 800a0da:	4605      	mov	r5, r0
 800a0dc:	b118      	cbz	r0, 800a0e6 <__swbuf_r+0x12>
 800a0de:	6983      	ldr	r3, [r0, #24]
 800a0e0:	b90b      	cbnz	r3, 800a0e6 <__swbuf_r+0x12>
 800a0e2:	f000 fa03 	bl	800a4ec <__sinit>
 800a0e6:	4b21      	ldr	r3, [pc, #132]	; (800a16c <__swbuf_r+0x98>)
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	d12b      	bne.n	800a144 <__swbuf_r+0x70>
 800a0ec:	686c      	ldr	r4, [r5, #4]
 800a0ee:	69a3      	ldr	r3, [r4, #24]
 800a0f0:	60a3      	str	r3, [r4, #8]
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	071a      	lsls	r2, r3, #28
 800a0f6:	d52f      	bpl.n	800a158 <__swbuf_r+0x84>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	b36b      	cbz	r3, 800a158 <__swbuf_r+0x84>
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	6820      	ldr	r0, [r4, #0]
 800a100:	1ac0      	subs	r0, r0, r3
 800a102:	6963      	ldr	r3, [r4, #20]
 800a104:	b2f6      	uxtb	r6, r6
 800a106:	4283      	cmp	r3, r0
 800a108:	4637      	mov	r7, r6
 800a10a:	dc04      	bgt.n	800a116 <__swbuf_r+0x42>
 800a10c:	4621      	mov	r1, r4
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 f958 	bl	800a3c4 <_fflush_r>
 800a114:	bb30      	cbnz	r0, 800a164 <__swbuf_r+0x90>
 800a116:	68a3      	ldr	r3, [r4, #8]
 800a118:	3b01      	subs	r3, #1
 800a11a:	60a3      	str	r3, [r4, #8]
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	6022      	str	r2, [r4, #0]
 800a122:	701e      	strb	r6, [r3, #0]
 800a124:	6963      	ldr	r3, [r4, #20]
 800a126:	3001      	adds	r0, #1
 800a128:	4283      	cmp	r3, r0
 800a12a:	d004      	beq.n	800a136 <__swbuf_r+0x62>
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	07db      	lsls	r3, r3, #31
 800a130:	d506      	bpl.n	800a140 <__swbuf_r+0x6c>
 800a132:	2e0a      	cmp	r6, #10
 800a134:	d104      	bne.n	800a140 <__swbuf_r+0x6c>
 800a136:	4621      	mov	r1, r4
 800a138:	4628      	mov	r0, r5
 800a13a:	f000 f943 	bl	800a3c4 <_fflush_r>
 800a13e:	b988      	cbnz	r0, 800a164 <__swbuf_r+0x90>
 800a140:	4638      	mov	r0, r7
 800a142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a144:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <__swbuf_r+0x9c>)
 800a146:	429c      	cmp	r4, r3
 800a148:	d101      	bne.n	800a14e <__swbuf_r+0x7a>
 800a14a:	68ac      	ldr	r4, [r5, #8]
 800a14c:	e7cf      	b.n	800a0ee <__swbuf_r+0x1a>
 800a14e:	4b09      	ldr	r3, [pc, #36]	; (800a174 <__swbuf_r+0xa0>)
 800a150:	429c      	cmp	r4, r3
 800a152:	bf08      	it	eq
 800a154:	68ec      	ldreq	r4, [r5, #12]
 800a156:	e7ca      	b.n	800a0ee <__swbuf_r+0x1a>
 800a158:	4621      	mov	r1, r4
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 f80c 	bl	800a178 <__swsetup_r>
 800a160:	2800      	cmp	r0, #0
 800a162:	d0cb      	beq.n	800a0fc <__swbuf_r+0x28>
 800a164:	f04f 37ff 	mov.w	r7, #4294967295
 800a168:	e7ea      	b.n	800a140 <__swbuf_r+0x6c>
 800a16a:	bf00      	nop
 800a16c:	0800c880 	.word	0x0800c880
 800a170:	0800c8a0 	.word	0x0800c8a0
 800a174:	0800c860 	.word	0x0800c860

0800a178 <__swsetup_r>:
 800a178:	4b32      	ldr	r3, [pc, #200]	; (800a244 <__swsetup_r+0xcc>)
 800a17a:	b570      	push	{r4, r5, r6, lr}
 800a17c:	681d      	ldr	r5, [r3, #0]
 800a17e:	4606      	mov	r6, r0
 800a180:	460c      	mov	r4, r1
 800a182:	b125      	cbz	r5, 800a18e <__swsetup_r+0x16>
 800a184:	69ab      	ldr	r3, [r5, #24]
 800a186:	b913      	cbnz	r3, 800a18e <__swsetup_r+0x16>
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 f9af 	bl	800a4ec <__sinit>
 800a18e:	4b2e      	ldr	r3, [pc, #184]	; (800a248 <__swsetup_r+0xd0>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d10f      	bne.n	800a1b4 <__swsetup_r+0x3c>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a19c:	0719      	lsls	r1, r3, #28
 800a19e:	d42c      	bmi.n	800a1fa <__swsetup_r+0x82>
 800a1a0:	06dd      	lsls	r5, r3, #27
 800a1a2:	d411      	bmi.n	800a1c8 <__swsetup_r+0x50>
 800a1a4:	2309      	movs	r3, #9
 800a1a6:	6033      	str	r3, [r6, #0]
 800a1a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1ac:	81a3      	strh	r3, [r4, #12]
 800a1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b2:	e03e      	b.n	800a232 <__swsetup_r+0xba>
 800a1b4:	4b25      	ldr	r3, [pc, #148]	; (800a24c <__swsetup_r+0xd4>)
 800a1b6:	429c      	cmp	r4, r3
 800a1b8:	d101      	bne.n	800a1be <__swsetup_r+0x46>
 800a1ba:	68ac      	ldr	r4, [r5, #8]
 800a1bc:	e7eb      	b.n	800a196 <__swsetup_r+0x1e>
 800a1be:	4b24      	ldr	r3, [pc, #144]	; (800a250 <__swsetup_r+0xd8>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	bf08      	it	eq
 800a1c4:	68ec      	ldreq	r4, [r5, #12]
 800a1c6:	e7e6      	b.n	800a196 <__swsetup_r+0x1e>
 800a1c8:	0758      	lsls	r0, r3, #29
 800a1ca:	d512      	bpl.n	800a1f2 <__swsetup_r+0x7a>
 800a1cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ce:	b141      	cbz	r1, 800a1e2 <__swsetup_r+0x6a>
 800a1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1d4:	4299      	cmp	r1, r3
 800a1d6:	d002      	beq.n	800a1de <__swsetup_r+0x66>
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f7ff fb1f 	bl	800981c <_free_r>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1e8:	81a3      	strh	r3, [r4, #12]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6063      	str	r3, [r4, #4]
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	f043 0308 	orr.w	r3, r3, #8
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	6923      	ldr	r3, [r4, #16]
 800a1fc:	b94b      	cbnz	r3, 800a212 <__swsetup_r+0x9a>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a208:	d003      	beq.n	800a212 <__swsetup_r+0x9a>
 800a20a:	4621      	mov	r1, r4
 800a20c:	4630      	mov	r0, r6
 800a20e:	f000 fb3b 	bl	800a888 <__smakebuf_r>
 800a212:	89a0      	ldrh	r0, [r4, #12]
 800a214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a218:	f010 0301 	ands.w	r3, r0, #1
 800a21c:	d00a      	beq.n	800a234 <__swsetup_r+0xbc>
 800a21e:	2300      	movs	r3, #0
 800a220:	60a3      	str	r3, [r4, #8]
 800a222:	6963      	ldr	r3, [r4, #20]
 800a224:	425b      	negs	r3, r3
 800a226:	61a3      	str	r3, [r4, #24]
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	b943      	cbnz	r3, 800a23e <__swsetup_r+0xc6>
 800a22c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a230:	d1ba      	bne.n	800a1a8 <__swsetup_r+0x30>
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	0781      	lsls	r1, r0, #30
 800a236:	bf58      	it	pl
 800a238:	6963      	ldrpl	r3, [r4, #20]
 800a23a:	60a3      	str	r3, [r4, #8]
 800a23c:	e7f4      	b.n	800a228 <__swsetup_r+0xb0>
 800a23e:	2000      	movs	r0, #0
 800a240:	e7f7      	b.n	800a232 <__swsetup_r+0xba>
 800a242:	bf00      	nop
 800a244:	2000005c 	.word	0x2000005c
 800a248:	0800c880 	.word	0x0800c880
 800a24c:	0800c8a0 	.word	0x0800c8a0
 800a250:	0800c860 	.word	0x0800c860

0800a254 <__assert_func>:
 800a254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a256:	4614      	mov	r4, r2
 800a258:	461a      	mov	r2, r3
 800a25a:	4b09      	ldr	r3, [pc, #36]	; (800a280 <__assert_func+0x2c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4605      	mov	r5, r0
 800a260:	68d8      	ldr	r0, [r3, #12]
 800a262:	b14c      	cbz	r4, 800a278 <__assert_func+0x24>
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <__assert_func+0x30>)
 800a266:	9100      	str	r1, [sp, #0]
 800a268:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a26c:	4906      	ldr	r1, [pc, #24]	; (800a288 <__assert_func+0x34>)
 800a26e:	462b      	mov	r3, r5
 800a270:	f000 f9ba 	bl	800a5e8 <fiprintf>
 800a274:	f001 f8a8 	bl	800b3c8 <abort>
 800a278:	4b04      	ldr	r3, [pc, #16]	; (800a28c <__assert_func+0x38>)
 800a27a:	461c      	mov	r4, r3
 800a27c:	e7f3      	b.n	800a266 <__assert_func+0x12>
 800a27e:	bf00      	nop
 800a280:	2000005c 	.word	0x2000005c
 800a284:	0800c821 	.word	0x0800c821
 800a288:	0800c82e 	.word	0x0800c82e
 800a28c:	0800c85c 	.word	0x0800c85c

0800a290 <div>:
 800a290:	2900      	cmp	r1, #0
 800a292:	b510      	push	{r4, lr}
 800a294:	fb91 f4f2 	sdiv	r4, r1, r2
 800a298:	fb02 1314 	mls	r3, r2, r4, r1
 800a29c:	db06      	blt.n	800a2ac <div+0x1c>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	da01      	bge.n	800a2a6 <div+0x16>
 800a2a2:	3401      	adds	r4, #1
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	e9c0 4300 	strd	r4, r3, [r0]
 800a2aa:	bd10      	pop	{r4, pc}
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bfc4      	itt	gt
 800a2b0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800a2b4:	189b      	addgt	r3, r3, r2
 800a2b6:	e7f6      	b.n	800a2a6 <div+0x16>

0800a2b8 <__sflush_r>:
 800a2b8:	898a      	ldrh	r2, [r1, #12]
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	4605      	mov	r5, r0
 800a2c0:	0710      	lsls	r0, r2, #28
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	d458      	bmi.n	800a378 <__sflush_r+0xc0>
 800a2c6:	684b      	ldr	r3, [r1, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dc05      	bgt.n	800a2d8 <__sflush_r+0x20>
 800a2cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dc02      	bgt.n	800a2d8 <__sflush_r+0x20>
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2da:	2e00      	cmp	r6, #0
 800a2dc:	d0f9      	beq.n	800a2d2 <__sflush_r+0x1a>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2e4:	682f      	ldr	r7, [r5, #0]
 800a2e6:	602b      	str	r3, [r5, #0]
 800a2e8:	d032      	beq.n	800a350 <__sflush_r+0x98>
 800a2ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	075a      	lsls	r2, r3, #29
 800a2f0:	d505      	bpl.n	800a2fe <__sflush_r+0x46>
 800a2f2:	6863      	ldr	r3, [r4, #4]
 800a2f4:	1ac0      	subs	r0, r0, r3
 800a2f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2f8:	b10b      	cbz	r3, 800a2fe <__sflush_r+0x46>
 800a2fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2fc:	1ac0      	subs	r0, r0, r3
 800a2fe:	2300      	movs	r3, #0
 800a300:	4602      	mov	r2, r0
 800a302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a304:	6a21      	ldr	r1, [r4, #32]
 800a306:	4628      	mov	r0, r5
 800a308:	47b0      	blx	r6
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	d106      	bne.n	800a31e <__sflush_r+0x66>
 800a310:	6829      	ldr	r1, [r5, #0]
 800a312:	291d      	cmp	r1, #29
 800a314:	d82c      	bhi.n	800a370 <__sflush_r+0xb8>
 800a316:	4a2a      	ldr	r2, [pc, #168]	; (800a3c0 <__sflush_r+0x108>)
 800a318:	40ca      	lsrs	r2, r1
 800a31a:	07d6      	lsls	r6, r2, #31
 800a31c:	d528      	bpl.n	800a370 <__sflush_r+0xb8>
 800a31e:	2200      	movs	r2, #0
 800a320:	6062      	str	r2, [r4, #4]
 800a322:	04d9      	lsls	r1, r3, #19
 800a324:	6922      	ldr	r2, [r4, #16]
 800a326:	6022      	str	r2, [r4, #0]
 800a328:	d504      	bpl.n	800a334 <__sflush_r+0x7c>
 800a32a:	1c42      	adds	r2, r0, #1
 800a32c:	d101      	bne.n	800a332 <__sflush_r+0x7a>
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	b903      	cbnz	r3, 800a334 <__sflush_r+0x7c>
 800a332:	6560      	str	r0, [r4, #84]	; 0x54
 800a334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a336:	602f      	str	r7, [r5, #0]
 800a338:	2900      	cmp	r1, #0
 800a33a:	d0ca      	beq.n	800a2d2 <__sflush_r+0x1a>
 800a33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a340:	4299      	cmp	r1, r3
 800a342:	d002      	beq.n	800a34a <__sflush_r+0x92>
 800a344:	4628      	mov	r0, r5
 800a346:	f7ff fa69 	bl	800981c <_free_r>
 800a34a:	2000      	movs	r0, #0
 800a34c:	6360      	str	r0, [r4, #52]	; 0x34
 800a34e:	e7c1      	b.n	800a2d4 <__sflush_r+0x1c>
 800a350:	6a21      	ldr	r1, [r4, #32]
 800a352:	2301      	movs	r3, #1
 800a354:	4628      	mov	r0, r5
 800a356:	47b0      	blx	r6
 800a358:	1c41      	adds	r1, r0, #1
 800a35a:	d1c7      	bne.n	800a2ec <__sflush_r+0x34>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0c4      	beq.n	800a2ec <__sflush_r+0x34>
 800a362:	2b1d      	cmp	r3, #29
 800a364:	d001      	beq.n	800a36a <__sflush_r+0xb2>
 800a366:	2b16      	cmp	r3, #22
 800a368:	d101      	bne.n	800a36e <__sflush_r+0xb6>
 800a36a:	602f      	str	r7, [r5, #0]
 800a36c:	e7b1      	b.n	800a2d2 <__sflush_r+0x1a>
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	e7ad      	b.n	800a2d4 <__sflush_r+0x1c>
 800a378:	690f      	ldr	r7, [r1, #16]
 800a37a:	2f00      	cmp	r7, #0
 800a37c:	d0a9      	beq.n	800a2d2 <__sflush_r+0x1a>
 800a37e:	0793      	lsls	r3, r2, #30
 800a380:	680e      	ldr	r6, [r1, #0]
 800a382:	bf08      	it	eq
 800a384:	694b      	ldreq	r3, [r1, #20]
 800a386:	600f      	str	r7, [r1, #0]
 800a388:	bf18      	it	ne
 800a38a:	2300      	movne	r3, #0
 800a38c:	eba6 0807 	sub.w	r8, r6, r7
 800a390:	608b      	str	r3, [r1, #8]
 800a392:	f1b8 0f00 	cmp.w	r8, #0
 800a396:	dd9c      	ble.n	800a2d2 <__sflush_r+0x1a>
 800a398:	6a21      	ldr	r1, [r4, #32]
 800a39a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a39c:	4643      	mov	r3, r8
 800a39e:	463a      	mov	r2, r7
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b0      	blx	r6
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	dc06      	bgt.n	800a3b6 <__sflush_r+0xfe>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ae:	81a3      	strh	r3, [r4, #12]
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b4:	e78e      	b.n	800a2d4 <__sflush_r+0x1c>
 800a3b6:	4407      	add	r7, r0
 800a3b8:	eba8 0800 	sub.w	r8, r8, r0
 800a3bc:	e7e9      	b.n	800a392 <__sflush_r+0xda>
 800a3be:	bf00      	nop
 800a3c0:	20400001 	.word	0x20400001

0800a3c4 <_fflush_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	690b      	ldr	r3, [r1, #16]
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	b913      	cbnz	r3, 800a3d4 <_fflush_r+0x10>
 800a3ce:	2500      	movs	r5, #0
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	b118      	cbz	r0, 800a3de <_fflush_r+0x1a>
 800a3d6:	6983      	ldr	r3, [r0, #24]
 800a3d8:	b90b      	cbnz	r3, 800a3de <_fflush_r+0x1a>
 800a3da:	f000 f887 	bl	800a4ec <__sinit>
 800a3de:	4b14      	ldr	r3, [pc, #80]	; (800a430 <_fflush_r+0x6c>)
 800a3e0:	429c      	cmp	r4, r3
 800a3e2:	d11b      	bne.n	800a41c <_fflush_r+0x58>
 800a3e4:	686c      	ldr	r4, [r5, #4]
 800a3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0ef      	beq.n	800a3ce <_fflush_r+0xa>
 800a3ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3f0:	07d0      	lsls	r0, r2, #31
 800a3f2:	d404      	bmi.n	800a3fe <_fflush_r+0x3a>
 800a3f4:	0599      	lsls	r1, r3, #22
 800a3f6:	d402      	bmi.n	800a3fe <_fflush_r+0x3a>
 800a3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fa:	f000 fa1d 	bl	800a838 <__retarget_lock_acquire_recursive>
 800a3fe:	4628      	mov	r0, r5
 800a400:	4621      	mov	r1, r4
 800a402:	f7ff ff59 	bl	800a2b8 <__sflush_r>
 800a406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a408:	07da      	lsls	r2, r3, #31
 800a40a:	4605      	mov	r5, r0
 800a40c:	d4e0      	bmi.n	800a3d0 <_fflush_r+0xc>
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	059b      	lsls	r3, r3, #22
 800a412:	d4dd      	bmi.n	800a3d0 <_fflush_r+0xc>
 800a414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a416:	f000 fa11 	bl	800a83c <__retarget_lock_release_recursive>
 800a41a:	e7d9      	b.n	800a3d0 <_fflush_r+0xc>
 800a41c:	4b05      	ldr	r3, [pc, #20]	; (800a434 <_fflush_r+0x70>)
 800a41e:	429c      	cmp	r4, r3
 800a420:	d101      	bne.n	800a426 <_fflush_r+0x62>
 800a422:	68ac      	ldr	r4, [r5, #8]
 800a424:	e7df      	b.n	800a3e6 <_fflush_r+0x22>
 800a426:	4b04      	ldr	r3, [pc, #16]	; (800a438 <_fflush_r+0x74>)
 800a428:	429c      	cmp	r4, r3
 800a42a:	bf08      	it	eq
 800a42c:	68ec      	ldreq	r4, [r5, #12]
 800a42e:	e7da      	b.n	800a3e6 <_fflush_r+0x22>
 800a430:	0800c880 	.word	0x0800c880
 800a434:	0800c8a0 	.word	0x0800c8a0
 800a438:	0800c860 	.word	0x0800c860

0800a43c <std>:
 800a43c:	2300      	movs	r3, #0
 800a43e:	b510      	push	{r4, lr}
 800a440:	4604      	mov	r4, r0
 800a442:	e9c0 3300 	strd	r3, r3, [r0]
 800a446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a44a:	6083      	str	r3, [r0, #8]
 800a44c:	8181      	strh	r1, [r0, #12]
 800a44e:	6643      	str	r3, [r0, #100]	; 0x64
 800a450:	81c2      	strh	r2, [r0, #14]
 800a452:	6183      	str	r3, [r0, #24]
 800a454:	4619      	mov	r1, r3
 800a456:	2208      	movs	r2, #8
 800a458:	305c      	adds	r0, #92	; 0x5c
 800a45a:	f7fe ff65 	bl	8009328 <memset>
 800a45e:	4b05      	ldr	r3, [pc, #20]	; (800a474 <std+0x38>)
 800a460:	6263      	str	r3, [r4, #36]	; 0x24
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <std+0x3c>)
 800a464:	62a3      	str	r3, [r4, #40]	; 0x28
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <std+0x40>)
 800a468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a46a:	4b05      	ldr	r3, [pc, #20]	; (800a480 <std+0x44>)
 800a46c:	6224      	str	r4, [r4, #32]
 800a46e:	6323      	str	r3, [r4, #48]	; 0x30
 800a470:	bd10      	pop	{r4, pc}
 800a472:	bf00      	nop
 800a474:	0800b20d 	.word	0x0800b20d
 800a478:	0800b233 	.word	0x0800b233
 800a47c:	0800b26b 	.word	0x0800b26b
 800a480:	0800b28f 	.word	0x0800b28f

0800a484 <_cleanup_r>:
 800a484:	4901      	ldr	r1, [pc, #4]	; (800a48c <_cleanup_r+0x8>)
 800a486:	f000 b8c1 	b.w	800a60c <_fwalk_reent>
 800a48a:	bf00      	nop
 800a48c:	0800a3c5 	.word	0x0800a3c5

0800a490 <__sfmoreglue>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	2268      	movs	r2, #104	; 0x68
 800a494:	1e4d      	subs	r5, r1, #1
 800a496:	4355      	muls	r5, r2
 800a498:	460e      	mov	r6, r1
 800a49a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a49e:	f7ff fa29 	bl	80098f4 <_malloc_r>
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	b140      	cbz	r0, 800a4b8 <__sfmoreglue+0x28>
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	e9c0 1600 	strd	r1, r6, [r0]
 800a4ac:	300c      	adds	r0, #12
 800a4ae:	60a0      	str	r0, [r4, #8]
 800a4b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4b4:	f7fe ff38 	bl	8009328 <memset>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}

0800a4bc <__sfp_lock_acquire>:
 800a4bc:	4801      	ldr	r0, [pc, #4]	; (800a4c4 <__sfp_lock_acquire+0x8>)
 800a4be:	f000 b9bb 	b.w	800a838 <__retarget_lock_acquire_recursive>
 800a4c2:	bf00      	nop
 800a4c4:	2000106a 	.word	0x2000106a

0800a4c8 <__sfp_lock_release>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__sfp_lock_release+0x8>)
 800a4ca:	f000 b9b7 	b.w	800a83c <__retarget_lock_release_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	2000106a 	.word	0x2000106a

0800a4d4 <__sinit_lock_acquire>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__sinit_lock_acquire+0x8>)
 800a4d6:	f000 b9af 	b.w	800a838 <__retarget_lock_acquire_recursive>
 800a4da:	bf00      	nop
 800a4dc:	2000106b 	.word	0x2000106b

0800a4e0 <__sinit_lock_release>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	; (800a4e8 <__sinit_lock_release+0x8>)
 800a4e2:	f000 b9ab 	b.w	800a83c <__retarget_lock_release_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	2000106b 	.word	0x2000106b

0800a4ec <__sinit>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	f7ff fff0 	bl	800a4d4 <__sinit_lock_acquire>
 800a4f4:	69a3      	ldr	r3, [r4, #24]
 800a4f6:	b11b      	cbz	r3, 800a500 <__sinit+0x14>
 800a4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fc:	f7ff bff0 	b.w	800a4e0 <__sinit_lock_release>
 800a500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a504:	6523      	str	r3, [r4, #80]	; 0x50
 800a506:	4b13      	ldr	r3, [pc, #76]	; (800a554 <__sinit+0x68>)
 800a508:	4a13      	ldr	r2, [pc, #76]	; (800a558 <__sinit+0x6c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a50e:	42a3      	cmp	r3, r4
 800a510:	bf04      	itt	eq
 800a512:	2301      	moveq	r3, #1
 800a514:	61a3      	streq	r3, [r4, #24]
 800a516:	4620      	mov	r0, r4
 800a518:	f000 f820 	bl	800a55c <__sfp>
 800a51c:	6060      	str	r0, [r4, #4]
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 f81c 	bl	800a55c <__sfp>
 800a524:	60a0      	str	r0, [r4, #8]
 800a526:	4620      	mov	r0, r4
 800a528:	f000 f818 	bl	800a55c <__sfp>
 800a52c:	2200      	movs	r2, #0
 800a52e:	60e0      	str	r0, [r4, #12]
 800a530:	2104      	movs	r1, #4
 800a532:	6860      	ldr	r0, [r4, #4]
 800a534:	f7ff ff82 	bl	800a43c <std>
 800a538:	68a0      	ldr	r0, [r4, #8]
 800a53a:	2201      	movs	r2, #1
 800a53c:	2109      	movs	r1, #9
 800a53e:	f7ff ff7d 	bl	800a43c <std>
 800a542:	68e0      	ldr	r0, [r4, #12]
 800a544:	2202      	movs	r2, #2
 800a546:	2112      	movs	r1, #18
 800a548:	f7ff ff78 	bl	800a43c <std>
 800a54c:	2301      	movs	r3, #1
 800a54e:	61a3      	str	r3, [r4, #24]
 800a550:	e7d2      	b.n	800a4f8 <__sinit+0xc>
 800a552:	bf00      	nop
 800a554:	0800c650 	.word	0x0800c650
 800a558:	0800a485 	.word	0x0800a485

0800a55c <__sfp>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	4607      	mov	r7, r0
 800a560:	f7ff ffac 	bl	800a4bc <__sfp_lock_acquire>
 800a564:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <__sfp+0x84>)
 800a566:	681e      	ldr	r6, [r3, #0]
 800a568:	69b3      	ldr	r3, [r6, #24]
 800a56a:	b913      	cbnz	r3, 800a572 <__sfp+0x16>
 800a56c:	4630      	mov	r0, r6
 800a56e:	f7ff ffbd 	bl	800a4ec <__sinit>
 800a572:	3648      	adds	r6, #72	; 0x48
 800a574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a578:	3b01      	subs	r3, #1
 800a57a:	d503      	bpl.n	800a584 <__sfp+0x28>
 800a57c:	6833      	ldr	r3, [r6, #0]
 800a57e:	b30b      	cbz	r3, 800a5c4 <__sfp+0x68>
 800a580:	6836      	ldr	r6, [r6, #0]
 800a582:	e7f7      	b.n	800a574 <__sfp+0x18>
 800a584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a588:	b9d5      	cbnz	r5, 800a5c0 <__sfp+0x64>
 800a58a:	4b16      	ldr	r3, [pc, #88]	; (800a5e4 <__sfp+0x88>)
 800a58c:	60e3      	str	r3, [r4, #12]
 800a58e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a592:	6665      	str	r5, [r4, #100]	; 0x64
 800a594:	f000 f94e 	bl	800a834 <__retarget_lock_init_recursive>
 800a598:	f7ff ff96 	bl	800a4c8 <__sfp_lock_release>
 800a59c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5a4:	6025      	str	r5, [r4, #0]
 800a5a6:	61a5      	str	r5, [r4, #24]
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5b0:	f7fe feba 	bl	8009328 <memset>
 800a5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5bc:	4620      	mov	r0, r4
 800a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c0:	3468      	adds	r4, #104	; 0x68
 800a5c2:	e7d9      	b.n	800a578 <__sfp+0x1c>
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f7ff ff62 	bl	800a490 <__sfmoreglue>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	6030      	str	r0, [r6, #0]
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d1d5      	bne.n	800a580 <__sfp+0x24>
 800a5d4:	f7ff ff78 	bl	800a4c8 <__sfp_lock_release>
 800a5d8:	230c      	movs	r3, #12
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	e7ee      	b.n	800a5bc <__sfp+0x60>
 800a5de:	bf00      	nop
 800a5e0:	0800c650 	.word	0x0800c650
 800a5e4:	ffff0001 	.word	0xffff0001

0800a5e8 <fiprintf>:
 800a5e8:	b40e      	push	{r1, r2, r3}
 800a5ea:	b503      	push	{r0, r1, lr}
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	ab03      	add	r3, sp, #12
 800a5f0:	4805      	ldr	r0, [pc, #20]	; (800a608 <fiprintf+0x20>)
 800a5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f6:	6800      	ldr	r0, [r0, #0]
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	f000 fb17 	bl	800ac2c <_vfiprintf_r>
 800a5fe:	b002      	add	sp, #8
 800a600:	f85d eb04 	ldr.w	lr, [sp], #4
 800a604:	b003      	add	sp, #12
 800a606:	4770      	bx	lr
 800a608:	2000005c 	.word	0x2000005c

0800a60c <_fwalk_reent>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	4606      	mov	r6, r0
 800a612:	4688      	mov	r8, r1
 800a614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a618:	2700      	movs	r7, #0
 800a61a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a61e:	f1b9 0901 	subs.w	r9, r9, #1
 800a622:	d505      	bpl.n	800a630 <_fwalk_reent+0x24>
 800a624:	6824      	ldr	r4, [r4, #0]
 800a626:	2c00      	cmp	r4, #0
 800a628:	d1f7      	bne.n	800a61a <_fwalk_reent+0xe>
 800a62a:	4638      	mov	r0, r7
 800a62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a630:	89ab      	ldrh	r3, [r5, #12]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d907      	bls.n	800a646 <_fwalk_reent+0x3a>
 800a636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a63a:	3301      	adds	r3, #1
 800a63c:	d003      	beq.n	800a646 <_fwalk_reent+0x3a>
 800a63e:	4629      	mov	r1, r5
 800a640:	4630      	mov	r0, r6
 800a642:	47c0      	blx	r8
 800a644:	4307      	orrs	r7, r0
 800a646:	3568      	adds	r5, #104	; 0x68
 800a648:	e7e9      	b.n	800a61e <_fwalk_reent+0x12>
	...

0800a64c <_findenv_r>:
 800a64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a6c0 <_findenv_r+0x74>
 800a654:	4607      	mov	r7, r0
 800a656:	4689      	mov	r9, r1
 800a658:	4616      	mov	r6, r2
 800a65a:	f000 fecd 	bl	800b3f8 <__env_lock>
 800a65e:	f8da 4000 	ldr.w	r4, [sl]
 800a662:	b134      	cbz	r4, 800a672 <_findenv_r+0x26>
 800a664:	464b      	mov	r3, r9
 800a666:	4698      	mov	r8, r3
 800a668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a66c:	b13a      	cbz	r2, 800a67e <_findenv_r+0x32>
 800a66e:	2a3d      	cmp	r2, #61	; 0x3d
 800a670:	d1f9      	bne.n	800a666 <_findenv_r+0x1a>
 800a672:	4638      	mov	r0, r7
 800a674:	f000 fec6 	bl	800b404 <__env_unlock>
 800a678:	2000      	movs	r0, #0
 800a67a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67e:	eba8 0809 	sub.w	r8, r8, r9
 800a682:	46a3      	mov	fp, r4
 800a684:	f854 0b04 	ldr.w	r0, [r4], #4
 800a688:	2800      	cmp	r0, #0
 800a68a:	d0f2      	beq.n	800a672 <_findenv_r+0x26>
 800a68c:	4642      	mov	r2, r8
 800a68e:	4649      	mov	r1, r9
 800a690:	f7ff fa4a 	bl	8009b28 <strncmp>
 800a694:	2800      	cmp	r0, #0
 800a696:	d1f4      	bne.n	800a682 <_findenv_r+0x36>
 800a698:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a69c:	eb03 0508 	add.w	r5, r3, r8
 800a6a0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a6a4:	2b3d      	cmp	r3, #61	; 0x3d
 800a6a6:	d1ec      	bne.n	800a682 <_findenv_r+0x36>
 800a6a8:	f8da 3000 	ldr.w	r3, [sl]
 800a6ac:	ebab 0303 	sub.w	r3, fp, r3
 800a6b0:	109b      	asrs	r3, r3, #2
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	6033      	str	r3, [r6, #0]
 800a6b6:	f000 fea5 	bl	800b404 <__env_unlock>
 800a6ba:	1c68      	adds	r0, r5, #1
 800a6bc:	e7dd      	b.n	800a67a <_findenv_r+0x2e>
 800a6be:	bf00      	nop
 800a6c0:	20000004 	.word	0x20000004

0800a6c4 <_getenv_r>:
 800a6c4:	b507      	push	{r0, r1, r2, lr}
 800a6c6:	aa01      	add	r2, sp, #4
 800a6c8:	f7ff ffc0 	bl	800a64c <_findenv_r>
 800a6cc:	b003      	add	sp, #12
 800a6ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a6d4 <__gettzinfo>:
 800a6d4:	4800      	ldr	r0, [pc, #0]	; (800a6d8 <__gettzinfo+0x4>)
 800a6d6:	4770      	bx	lr
 800a6d8:	200000c8 	.word	0x200000c8

0800a6dc <gmtime_r>:
 800a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	4a4f      	ldr	r2, [pc, #316]	; (800a824 <gmtime_r+0x148>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	f7f5 ffb3 	bl	8000658 <__aeabi_ldivmod>
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	4a4b      	ldr	r2, [pc, #300]	; (800a824 <gmtime_r+0x148>)
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f7f5 ffac 	bl	8000658 <__aeabi_ldivmod>
 800a700:	2a00      	cmp	r2, #0
 800a702:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a706:	bfb7      	itett	lt
 800a708:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a70c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a710:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a714:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a718:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a71c:	fbb2 f1f0 	udiv	r1, r2, r0
 800a720:	fb00 2211 	mls	r2, r0, r1, r2
 800a724:	203c      	movs	r0, #60	; 0x3c
 800a726:	60a1      	str	r1, [r4, #8]
 800a728:	fbb2 f1f0 	udiv	r1, r2, r0
 800a72c:	fb00 2211 	mls	r2, r0, r1, r2
 800a730:	6061      	str	r1, [r4, #4]
 800a732:	6022      	str	r2, [r4, #0]
 800a734:	2107      	movs	r1, #7
 800a736:	1cda      	adds	r2, r3, #3
 800a738:	fb92 f1f1 	sdiv	r1, r2, r1
 800a73c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a740:	1a52      	subs	r2, r2, r1
 800a742:	bf48      	it	mi
 800a744:	3207      	addmi	r2, #7
 800a746:	4d38      	ldr	r5, [pc, #224]	; (800a828 <gmtime_r+0x14c>)
 800a748:	4838      	ldr	r0, [pc, #224]	; (800a82c <gmtime_r+0x150>)
 800a74a:	61a2      	str	r2, [r4, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	bfb7      	itett	lt
 800a750:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a754:	fb93 f5f5 	sdivge	r5, r3, r5
 800a758:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a75c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a760:	fb00 3005 	mla	r0, r0, r5, r3
 800a764:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a768:	fbb0 f2f2 	udiv	r2, r0, r2
 800a76c:	4402      	add	r2, r0
 800a76e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a772:	fbb0 f1f3 	udiv	r1, r0, r3
 800a776:	1a52      	subs	r2, r2, r1
 800a778:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a77c:	492c      	ldr	r1, [pc, #176]	; (800a830 <gmtime_r+0x154>)
 800a77e:	fbb0 f1f1 	udiv	r1, r0, r1
 800a782:	2764      	movs	r7, #100	; 0x64
 800a784:	1a52      	subs	r2, r2, r1
 800a786:	fbb2 f1fc 	udiv	r1, r2, ip
 800a78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78e:	fbb1 f6f7 	udiv	r6, r1, r7
 800a792:	1af3      	subs	r3, r6, r3
 800a794:	4403      	add	r3, r0
 800a796:	fb0c 3311 	mls	r3, ip, r1, r3
 800a79a:	2299      	movs	r2, #153	; 0x99
 800a79c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a7a0:	f10e 0e02 	add.w	lr, lr, #2
 800a7a4:	f103 0c01 	add.w	ip, r3, #1
 800a7a8:	fbbe f0f2 	udiv	r0, lr, r2
 800a7ac:	4342      	muls	r2, r0
 800a7ae:	3202      	adds	r2, #2
 800a7b0:	f04f 0805 	mov.w	r8, #5
 800a7b4:	fbb2 f2f8 	udiv	r2, r2, r8
 800a7b8:	ebac 0c02 	sub.w	ip, ip, r2
 800a7bc:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a7c0:	4596      	cmp	lr, r2
 800a7c2:	bf94      	ite	ls
 800a7c4:	2202      	movls	r2, #2
 800a7c6:	f06f 0209 	mvnhi.w	r2, #9
 800a7ca:	4410      	add	r0, r2
 800a7cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a7d0:	fb02 1505 	mla	r5, r2, r5, r1
 800a7d4:	2801      	cmp	r0, #1
 800a7d6:	bf98      	it	ls
 800a7d8:	3501      	addls	r5, #1
 800a7da:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a7de:	d30d      	bcc.n	800a7fc <gmtime_r+0x120>
 800a7e0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a7e4:	61e3      	str	r3, [r4, #28]
 800a7e6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a7f0:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a7f4:	6223      	str	r3, [r4, #32]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7fc:	078a      	lsls	r2, r1, #30
 800a7fe:	d102      	bne.n	800a806 <gmtime_r+0x12a>
 800a800:	fb07 1616 	mls	r6, r7, r6, r1
 800a804:	b95e      	cbnz	r6, 800a81e <gmtime_r+0x142>
 800a806:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a80a:	fbb1 f6f2 	udiv	r6, r1, r2
 800a80e:	fb02 1216 	mls	r2, r2, r6, r1
 800a812:	fab2 f282 	clz	r2, r2
 800a816:	0952      	lsrs	r2, r2, #5
 800a818:	333b      	adds	r3, #59	; 0x3b
 800a81a:	4413      	add	r3, r2
 800a81c:	e7e2      	b.n	800a7e4 <gmtime_r+0x108>
 800a81e:	2201      	movs	r2, #1
 800a820:	e7fa      	b.n	800a818 <gmtime_r+0x13c>
 800a822:	bf00      	nop
 800a824:	00015180 	.word	0x00015180
 800a828:	00023ab1 	.word	0x00023ab1
 800a82c:	fffdc54f 	.word	0xfffdc54f
 800a830:	00023ab0 	.word	0x00023ab0

0800a834 <__retarget_lock_init_recursive>:
 800a834:	4770      	bx	lr

0800a836 <__retarget_lock_acquire>:
 800a836:	4770      	bx	lr

0800a838 <__retarget_lock_acquire_recursive>:
 800a838:	4770      	bx	lr

0800a83a <__retarget_lock_release>:
 800a83a:	4770      	bx	lr

0800a83c <__retarget_lock_release_recursive>:
 800a83c:	4770      	bx	lr

0800a83e <__swhatbuf_r>:
 800a83e:	b570      	push	{r4, r5, r6, lr}
 800a840:	460e      	mov	r6, r1
 800a842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a846:	2900      	cmp	r1, #0
 800a848:	b096      	sub	sp, #88	; 0x58
 800a84a:	4614      	mov	r4, r2
 800a84c:	461d      	mov	r5, r3
 800a84e:	da08      	bge.n	800a862 <__swhatbuf_r+0x24>
 800a850:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	602a      	str	r2, [r5, #0]
 800a858:	061a      	lsls	r2, r3, #24
 800a85a:	d410      	bmi.n	800a87e <__swhatbuf_r+0x40>
 800a85c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a860:	e00e      	b.n	800a880 <__swhatbuf_r+0x42>
 800a862:	466a      	mov	r2, sp
 800a864:	f000 fdd4 	bl	800b410 <_fstat_r>
 800a868:	2800      	cmp	r0, #0
 800a86a:	dbf1      	blt.n	800a850 <__swhatbuf_r+0x12>
 800a86c:	9a01      	ldr	r2, [sp, #4]
 800a86e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a876:	425a      	negs	r2, r3
 800a878:	415a      	adcs	r2, r3
 800a87a:	602a      	str	r2, [r5, #0]
 800a87c:	e7ee      	b.n	800a85c <__swhatbuf_r+0x1e>
 800a87e:	2340      	movs	r3, #64	; 0x40
 800a880:	2000      	movs	r0, #0
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	b016      	add	sp, #88	; 0x58
 800a886:	bd70      	pop	{r4, r5, r6, pc}

0800a888 <__smakebuf_r>:
 800a888:	898b      	ldrh	r3, [r1, #12]
 800a88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a88c:	079d      	lsls	r5, r3, #30
 800a88e:	4606      	mov	r6, r0
 800a890:	460c      	mov	r4, r1
 800a892:	d507      	bpl.n	800a8a4 <__smakebuf_r+0x1c>
 800a894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	2301      	movs	r3, #1
 800a89e:	6163      	str	r3, [r4, #20]
 800a8a0:	b002      	add	sp, #8
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	ab01      	add	r3, sp, #4
 800a8a6:	466a      	mov	r2, sp
 800a8a8:	f7ff ffc9 	bl	800a83e <__swhatbuf_r>
 800a8ac:	9900      	ldr	r1, [sp, #0]
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f7ff f81f 	bl	80098f4 <_malloc_r>
 800a8b6:	b948      	cbnz	r0, 800a8cc <__smakebuf_r+0x44>
 800a8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8bc:	059a      	lsls	r2, r3, #22
 800a8be:	d4ef      	bmi.n	800a8a0 <__smakebuf_r+0x18>
 800a8c0:	f023 0303 	bic.w	r3, r3, #3
 800a8c4:	f043 0302 	orr.w	r3, r3, #2
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	e7e3      	b.n	800a894 <__smakebuf_r+0xc>
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <__smakebuf_r+0x7c>)
 800a8ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	6020      	str	r0, [r4, #0]
 800a8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	9b00      	ldr	r3, [sp, #0]
 800a8dc:	6163      	str	r3, [r4, #20]
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	6120      	str	r0, [r4, #16]
 800a8e2:	b15b      	cbz	r3, 800a8fc <__smakebuf_r+0x74>
 800a8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f000 fda3 	bl	800b434 <_isatty_r>
 800a8ee:	b128      	cbz	r0, 800a8fc <__smakebuf_r+0x74>
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	f023 0303 	bic.w	r3, r3, #3
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	81a3      	strh	r3, [r4, #12]
 800a8fc:	89a0      	ldrh	r0, [r4, #12]
 800a8fe:	4305      	orrs	r5, r0
 800a900:	81a5      	strh	r5, [r4, #12]
 800a902:	e7cd      	b.n	800a8a0 <__smakebuf_r+0x18>
 800a904:	0800a485 	.word	0x0800a485

0800a908 <__malloc_lock>:
 800a908:	4801      	ldr	r0, [pc, #4]	; (800a910 <__malloc_lock+0x8>)
 800a90a:	f7ff bf95 	b.w	800a838 <__retarget_lock_acquire_recursive>
 800a90e:	bf00      	nop
 800a910:	20001069 	.word	0x20001069

0800a914 <__malloc_unlock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_unlock+0x8>)
 800a916:	f7ff bf91 	b.w	800a83c <__retarget_lock_release_recursive>
 800a91a:	bf00      	nop
 800a91c:	20001069 	.word	0x20001069

0800a920 <__ssputs_r>:
 800a920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a924:	688e      	ldr	r6, [r1, #8]
 800a926:	429e      	cmp	r6, r3
 800a928:	4682      	mov	sl, r0
 800a92a:	460c      	mov	r4, r1
 800a92c:	4690      	mov	r8, r2
 800a92e:	461f      	mov	r7, r3
 800a930:	d838      	bhi.n	800a9a4 <__ssputs_r+0x84>
 800a932:	898a      	ldrh	r2, [r1, #12]
 800a934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a938:	d032      	beq.n	800a9a0 <__ssputs_r+0x80>
 800a93a:	6825      	ldr	r5, [r4, #0]
 800a93c:	6909      	ldr	r1, [r1, #16]
 800a93e:	eba5 0901 	sub.w	r9, r5, r1
 800a942:	6965      	ldr	r5, [r4, #20]
 800a944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a948:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a94c:	3301      	adds	r3, #1
 800a94e:	444b      	add	r3, r9
 800a950:	106d      	asrs	r5, r5, #1
 800a952:	429d      	cmp	r5, r3
 800a954:	bf38      	it	cc
 800a956:	461d      	movcc	r5, r3
 800a958:	0553      	lsls	r3, r2, #21
 800a95a:	d531      	bpl.n	800a9c0 <__ssputs_r+0xa0>
 800a95c:	4629      	mov	r1, r5
 800a95e:	f7fe ffc9 	bl	80098f4 <_malloc_r>
 800a962:	4606      	mov	r6, r0
 800a964:	b950      	cbnz	r0, 800a97c <__ssputs_r+0x5c>
 800a966:	230c      	movs	r3, #12
 800a968:	f8ca 3000 	str.w	r3, [sl]
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a972:	81a3      	strh	r3, [r4, #12]
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97c:	6921      	ldr	r1, [r4, #16]
 800a97e:	464a      	mov	r2, r9
 800a980:	f7fe fcc4 	bl	800930c <memcpy>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	6126      	str	r6, [r4, #16]
 800a992:	6165      	str	r5, [r4, #20]
 800a994:	444e      	add	r6, r9
 800a996:	eba5 0509 	sub.w	r5, r5, r9
 800a99a:	6026      	str	r6, [r4, #0]
 800a99c:	60a5      	str	r5, [r4, #8]
 800a99e:	463e      	mov	r6, r7
 800a9a0:	42be      	cmp	r6, r7
 800a9a2:	d900      	bls.n	800a9a6 <__ssputs_r+0x86>
 800a9a4:	463e      	mov	r6, r7
 800a9a6:	6820      	ldr	r0, [r4, #0]
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	4641      	mov	r1, r8
 800a9ac:	f000 fd64 	bl	800b478 <memmove>
 800a9b0:	68a3      	ldr	r3, [r4, #8]
 800a9b2:	1b9b      	subs	r3, r3, r6
 800a9b4:	60a3      	str	r3, [r4, #8]
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	4433      	add	r3, r6
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	2000      	movs	r0, #0
 800a9be:	e7db      	b.n	800a978 <__ssputs_r+0x58>
 800a9c0:	462a      	mov	r2, r5
 800a9c2:	f000 fd73 	bl	800b4ac <_realloc_r>
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d1e1      	bne.n	800a990 <__ssputs_r+0x70>
 800a9cc:	6921      	ldr	r1, [r4, #16]
 800a9ce:	4650      	mov	r0, sl
 800a9d0:	f7fe ff24 	bl	800981c <_free_r>
 800a9d4:	e7c7      	b.n	800a966 <__ssputs_r+0x46>
	...

0800a9d8 <_svfiprintf_r>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	4698      	mov	r8, r3
 800a9de:	898b      	ldrh	r3, [r1, #12]
 800a9e0:	061b      	lsls	r3, r3, #24
 800a9e2:	b09d      	sub	sp, #116	; 0x74
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	d50e      	bpl.n	800aa0a <_svfiprintf_r+0x32>
 800a9ec:	690b      	ldr	r3, [r1, #16]
 800a9ee:	b963      	cbnz	r3, 800aa0a <_svfiprintf_r+0x32>
 800a9f0:	2140      	movs	r1, #64	; 0x40
 800a9f2:	f7fe ff7f 	bl	80098f4 <_malloc_r>
 800a9f6:	6028      	str	r0, [r5, #0]
 800a9f8:	6128      	str	r0, [r5, #16]
 800a9fa:	b920      	cbnz	r0, 800aa06 <_svfiprintf_r+0x2e>
 800a9fc:	230c      	movs	r3, #12
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	f04f 30ff 	mov.w	r0, #4294967295
 800aa04:	e0d1      	b.n	800abaa <_svfiprintf_r+0x1d2>
 800aa06:	2340      	movs	r3, #64	; 0x40
 800aa08:	616b      	str	r3, [r5, #20]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0e:	2320      	movs	r3, #32
 800aa10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa14:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa18:	2330      	movs	r3, #48	; 0x30
 800aa1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800abc4 <_svfiprintf_r+0x1ec>
 800aa1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa22:	f04f 0901 	mov.w	r9, #1
 800aa26:	4623      	mov	r3, r4
 800aa28:	469a      	mov	sl, r3
 800aa2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa2e:	b10a      	cbz	r2, 800aa34 <_svfiprintf_r+0x5c>
 800aa30:	2a25      	cmp	r2, #37	; 0x25
 800aa32:	d1f9      	bne.n	800aa28 <_svfiprintf_r+0x50>
 800aa34:	ebba 0b04 	subs.w	fp, sl, r4
 800aa38:	d00b      	beq.n	800aa52 <_svfiprintf_r+0x7a>
 800aa3a:	465b      	mov	r3, fp
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4638      	mov	r0, r7
 800aa42:	f7ff ff6d 	bl	800a920 <__ssputs_r>
 800aa46:	3001      	adds	r0, #1
 800aa48:	f000 80aa 	beq.w	800aba0 <_svfiprintf_r+0x1c8>
 800aa4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa4e:	445a      	add	r2, fp
 800aa50:	9209      	str	r2, [sp, #36]	; 0x24
 800aa52:	f89a 3000 	ldrb.w	r3, [sl]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 80a2 	beq.w	800aba0 <_svfiprintf_r+0x1c8>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa66:	f10a 0a01 	add.w	sl, sl, #1
 800aa6a:	9304      	str	r3, [sp, #16]
 800aa6c:	9307      	str	r3, [sp, #28]
 800aa6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa72:	931a      	str	r3, [sp, #104]	; 0x68
 800aa74:	4654      	mov	r4, sl
 800aa76:	2205      	movs	r2, #5
 800aa78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa7c:	4851      	ldr	r0, [pc, #324]	; (800abc4 <_svfiprintf_r+0x1ec>)
 800aa7e:	f7f5 fbbf 	bl	8000200 <memchr>
 800aa82:	9a04      	ldr	r2, [sp, #16]
 800aa84:	b9d8      	cbnz	r0, 800aabe <_svfiprintf_r+0xe6>
 800aa86:	06d0      	lsls	r0, r2, #27
 800aa88:	bf44      	itt	mi
 800aa8a:	2320      	movmi	r3, #32
 800aa8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa90:	0711      	lsls	r1, r2, #28
 800aa92:	bf44      	itt	mi
 800aa94:	232b      	movmi	r3, #43	; 0x2b
 800aa96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa9a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9e:	2b2a      	cmp	r3, #42	; 0x2a
 800aaa0:	d015      	beq.n	800aace <_svfiprintf_r+0xf6>
 800aaa2:	9a07      	ldr	r2, [sp, #28]
 800aaa4:	4654      	mov	r4, sl
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	f04f 0c0a 	mov.w	ip, #10
 800aaac:	4621      	mov	r1, r4
 800aaae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aab2:	3b30      	subs	r3, #48	; 0x30
 800aab4:	2b09      	cmp	r3, #9
 800aab6:	d94e      	bls.n	800ab56 <_svfiprintf_r+0x17e>
 800aab8:	b1b0      	cbz	r0, 800aae8 <_svfiprintf_r+0x110>
 800aaba:	9207      	str	r2, [sp, #28]
 800aabc:	e014      	b.n	800aae8 <_svfiprintf_r+0x110>
 800aabe:	eba0 0308 	sub.w	r3, r0, r8
 800aac2:	fa09 f303 	lsl.w	r3, r9, r3
 800aac6:	4313      	orrs	r3, r2
 800aac8:	9304      	str	r3, [sp, #16]
 800aaca:	46a2      	mov	sl, r4
 800aacc:	e7d2      	b.n	800aa74 <_svfiprintf_r+0x9c>
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	1d19      	adds	r1, r3, #4
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	9103      	str	r1, [sp, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	bfbb      	ittet	lt
 800aada:	425b      	neglt	r3, r3
 800aadc:	f042 0202 	orrlt.w	r2, r2, #2
 800aae0:	9307      	strge	r3, [sp, #28]
 800aae2:	9307      	strlt	r3, [sp, #28]
 800aae4:	bfb8      	it	lt
 800aae6:	9204      	strlt	r2, [sp, #16]
 800aae8:	7823      	ldrb	r3, [r4, #0]
 800aaea:	2b2e      	cmp	r3, #46	; 0x2e
 800aaec:	d10c      	bne.n	800ab08 <_svfiprintf_r+0x130>
 800aaee:	7863      	ldrb	r3, [r4, #1]
 800aaf0:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf2:	d135      	bne.n	800ab60 <_svfiprintf_r+0x188>
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	1d1a      	adds	r2, r3, #4
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	9203      	str	r2, [sp, #12]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfb8      	it	lt
 800ab00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab04:	3402      	adds	r4, #2
 800ab06:	9305      	str	r3, [sp, #20]
 800ab08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abd4 <_svfiprintf_r+0x1fc>
 800ab0c:	7821      	ldrb	r1, [r4, #0]
 800ab0e:	2203      	movs	r2, #3
 800ab10:	4650      	mov	r0, sl
 800ab12:	f7f5 fb75 	bl	8000200 <memchr>
 800ab16:	b140      	cbz	r0, 800ab2a <_svfiprintf_r+0x152>
 800ab18:	2340      	movs	r3, #64	; 0x40
 800ab1a:	eba0 000a 	sub.w	r0, r0, sl
 800ab1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab22:	9b04      	ldr	r3, [sp, #16]
 800ab24:	4303      	orrs	r3, r0
 800ab26:	3401      	adds	r4, #1
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2e:	4826      	ldr	r0, [pc, #152]	; (800abc8 <_svfiprintf_r+0x1f0>)
 800ab30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab34:	2206      	movs	r2, #6
 800ab36:	f7f5 fb63 	bl	8000200 <memchr>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d038      	beq.n	800abb0 <_svfiprintf_r+0x1d8>
 800ab3e:	4b23      	ldr	r3, [pc, #140]	; (800abcc <_svfiprintf_r+0x1f4>)
 800ab40:	bb1b      	cbnz	r3, 800ab8a <_svfiprintf_r+0x1b2>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	3307      	adds	r3, #7
 800ab46:	f023 0307 	bic.w	r3, r3, #7
 800ab4a:	3308      	adds	r3, #8
 800ab4c:	9303      	str	r3, [sp, #12]
 800ab4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab50:	4433      	add	r3, r6
 800ab52:	9309      	str	r3, [sp, #36]	; 0x24
 800ab54:	e767      	b.n	800aa26 <_svfiprintf_r+0x4e>
 800ab56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	e7a5      	b.n	800aaac <_svfiprintf_r+0xd4>
 800ab60:	2300      	movs	r3, #0
 800ab62:	3401      	adds	r4, #1
 800ab64:	9305      	str	r3, [sp, #20]
 800ab66:	4619      	mov	r1, r3
 800ab68:	f04f 0c0a 	mov.w	ip, #10
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab72:	3a30      	subs	r2, #48	; 0x30
 800ab74:	2a09      	cmp	r2, #9
 800ab76:	d903      	bls.n	800ab80 <_svfiprintf_r+0x1a8>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0c5      	beq.n	800ab08 <_svfiprintf_r+0x130>
 800ab7c:	9105      	str	r1, [sp, #20]
 800ab7e:	e7c3      	b.n	800ab08 <_svfiprintf_r+0x130>
 800ab80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab84:	4604      	mov	r4, r0
 800ab86:	2301      	movs	r3, #1
 800ab88:	e7f0      	b.n	800ab6c <_svfiprintf_r+0x194>
 800ab8a:	ab03      	add	r3, sp, #12
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4b0f      	ldr	r3, [pc, #60]	; (800abd0 <_svfiprintf_r+0x1f8>)
 800ab92:	a904      	add	r1, sp, #16
 800ab94:	4638      	mov	r0, r7
 800ab96:	f3af 8000 	nop.w
 800ab9a:	1c42      	adds	r2, r0, #1
 800ab9c:	4606      	mov	r6, r0
 800ab9e:	d1d6      	bne.n	800ab4e <_svfiprintf_r+0x176>
 800aba0:	89ab      	ldrh	r3, [r5, #12]
 800aba2:	065b      	lsls	r3, r3, #25
 800aba4:	f53f af2c 	bmi.w	800aa00 <_svfiprintf_r+0x28>
 800aba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abaa:	b01d      	add	sp, #116	; 0x74
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb0:	ab03      	add	r3, sp, #12
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	462a      	mov	r2, r5
 800abb6:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <_svfiprintf_r+0x1f8>)
 800abb8:	a904      	add	r1, sp, #16
 800abba:	4638      	mov	r0, r7
 800abbc:	f000 f9d4 	bl	800af68 <_printf_i>
 800abc0:	e7eb      	b.n	800ab9a <_svfiprintf_r+0x1c2>
 800abc2:	bf00      	nop
 800abc4:	0800c8c0 	.word	0x0800c8c0
 800abc8:	0800c8ca 	.word	0x0800c8ca
 800abcc:	00000000 	.word	0x00000000
 800abd0:	0800a921 	.word	0x0800a921
 800abd4:	0800c8c6 	.word	0x0800c8c6

0800abd8 <__sfputc_r>:
 800abd8:	6893      	ldr	r3, [r2, #8]
 800abda:	3b01      	subs	r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	b410      	push	{r4}
 800abe0:	6093      	str	r3, [r2, #8]
 800abe2:	da08      	bge.n	800abf6 <__sfputc_r+0x1e>
 800abe4:	6994      	ldr	r4, [r2, #24]
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	db01      	blt.n	800abee <__sfputc_r+0x16>
 800abea:	290a      	cmp	r1, #10
 800abec:	d103      	bne.n	800abf6 <__sfputc_r+0x1e>
 800abee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abf2:	f7ff ba6f 	b.w	800a0d4 <__swbuf_r>
 800abf6:	6813      	ldr	r3, [r2, #0]
 800abf8:	1c58      	adds	r0, r3, #1
 800abfa:	6010      	str	r0, [r2, #0]
 800abfc:	7019      	strb	r1, [r3, #0]
 800abfe:	4608      	mov	r0, r1
 800ac00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <__sfputs_r>:
 800ac06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac08:	4606      	mov	r6, r0
 800ac0a:	460f      	mov	r7, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	18d5      	adds	r5, r2, r3
 800ac10:	42ac      	cmp	r4, r5
 800ac12:	d101      	bne.n	800ac18 <__sfputs_r+0x12>
 800ac14:	2000      	movs	r0, #0
 800ac16:	e007      	b.n	800ac28 <__sfputs_r+0x22>
 800ac18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1c:	463a      	mov	r2, r7
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f7ff ffda 	bl	800abd8 <__sfputc_r>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d1f3      	bne.n	800ac10 <__sfputs_r+0xa>
 800ac28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac2c <_vfiprintf_r>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	460d      	mov	r5, r1
 800ac32:	b09d      	sub	sp, #116	; 0x74
 800ac34:	4614      	mov	r4, r2
 800ac36:	4698      	mov	r8, r3
 800ac38:	4606      	mov	r6, r0
 800ac3a:	b118      	cbz	r0, 800ac44 <_vfiprintf_r+0x18>
 800ac3c:	6983      	ldr	r3, [r0, #24]
 800ac3e:	b90b      	cbnz	r3, 800ac44 <_vfiprintf_r+0x18>
 800ac40:	f7ff fc54 	bl	800a4ec <__sinit>
 800ac44:	4b89      	ldr	r3, [pc, #548]	; (800ae6c <_vfiprintf_r+0x240>)
 800ac46:	429d      	cmp	r5, r3
 800ac48:	d11b      	bne.n	800ac82 <_vfiprintf_r+0x56>
 800ac4a:	6875      	ldr	r5, [r6, #4]
 800ac4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac4e:	07d9      	lsls	r1, r3, #31
 800ac50:	d405      	bmi.n	800ac5e <_vfiprintf_r+0x32>
 800ac52:	89ab      	ldrh	r3, [r5, #12]
 800ac54:	059a      	lsls	r2, r3, #22
 800ac56:	d402      	bmi.n	800ac5e <_vfiprintf_r+0x32>
 800ac58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac5a:	f7ff fded 	bl	800a838 <__retarget_lock_acquire_recursive>
 800ac5e:	89ab      	ldrh	r3, [r5, #12]
 800ac60:	071b      	lsls	r3, r3, #28
 800ac62:	d501      	bpl.n	800ac68 <_vfiprintf_r+0x3c>
 800ac64:	692b      	ldr	r3, [r5, #16]
 800ac66:	b9eb      	cbnz	r3, 800aca4 <_vfiprintf_r+0x78>
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff fa84 	bl	800a178 <__swsetup_r>
 800ac70:	b1c0      	cbz	r0, 800aca4 <_vfiprintf_r+0x78>
 800ac72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac74:	07dc      	lsls	r4, r3, #31
 800ac76:	d50e      	bpl.n	800ac96 <_vfiprintf_r+0x6a>
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	b01d      	add	sp, #116	; 0x74
 800ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac82:	4b7b      	ldr	r3, [pc, #492]	; (800ae70 <_vfiprintf_r+0x244>)
 800ac84:	429d      	cmp	r5, r3
 800ac86:	d101      	bne.n	800ac8c <_vfiprintf_r+0x60>
 800ac88:	68b5      	ldr	r5, [r6, #8]
 800ac8a:	e7df      	b.n	800ac4c <_vfiprintf_r+0x20>
 800ac8c:	4b79      	ldr	r3, [pc, #484]	; (800ae74 <_vfiprintf_r+0x248>)
 800ac8e:	429d      	cmp	r5, r3
 800ac90:	bf08      	it	eq
 800ac92:	68f5      	ldreq	r5, [r6, #12]
 800ac94:	e7da      	b.n	800ac4c <_vfiprintf_r+0x20>
 800ac96:	89ab      	ldrh	r3, [r5, #12]
 800ac98:	0598      	lsls	r0, r3, #22
 800ac9a:	d4ed      	bmi.n	800ac78 <_vfiprintf_r+0x4c>
 800ac9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac9e:	f7ff fdcd 	bl	800a83c <__retarget_lock_release_recursive>
 800aca2:	e7e9      	b.n	800ac78 <_vfiprintf_r+0x4c>
 800aca4:	2300      	movs	r3, #0
 800aca6:	9309      	str	r3, [sp, #36]	; 0x24
 800aca8:	2320      	movs	r3, #32
 800acaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acae:	f8cd 800c 	str.w	r8, [sp, #12]
 800acb2:	2330      	movs	r3, #48	; 0x30
 800acb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae78 <_vfiprintf_r+0x24c>
 800acb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acbc:	f04f 0901 	mov.w	r9, #1
 800acc0:	4623      	mov	r3, r4
 800acc2:	469a      	mov	sl, r3
 800acc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acc8:	b10a      	cbz	r2, 800acce <_vfiprintf_r+0xa2>
 800acca:	2a25      	cmp	r2, #37	; 0x25
 800accc:	d1f9      	bne.n	800acc2 <_vfiprintf_r+0x96>
 800acce:	ebba 0b04 	subs.w	fp, sl, r4
 800acd2:	d00b      	beq.n	800acec <_vfiprintf_r+0xc0>
 800acd4:	465b      	mov	r3, fp
 800acd6:	4622      	mov	r2, r4
 800acd8:	4629      	mov	r1, r5
 800acda:	4630      	mov	r0, r6
 800acdc:	f7ff ff93 	bl	800ac06 <__sfputs_r>
 800ace0:	3001      	adds	r0, #1
 800ace2:	f000 80aa 	beq.w	800ae3a <_vfiprintf_r+0x20e>
 800ace6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace8:	445a      	add	r2, fp
 800acea:	9209      	str	r2, [sp, #36]	; 0x24
 800acec:	f89a 3000 	ldrb.w	r3, [sl]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 80a2 	beq.w	800ae3a <_vfiprintf_r+0x20e>
 800acf6:	2300      	movs	r3, #0
 800acf8:	f04f 32ff 	mov.w	r2, #4294967295
 800acfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad00:	f10a 0a01 	add.w	sl, sl, #1
 800ad04:	9304      	str	r3, [sp, #16]
 800ad06:	9307      	str	r3, [sp, #28]
 800ad08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad0e:	4654      	mov	r4, sl
 800ad10:	2205      	movs	r2, #5
 800ad12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad16:	4858      	ldr	r0, [pc, #352]	; (800ae78 <_vfiprintf_r+0x24c>)
 800ad18:	f7f5 fa72 	bl	8000200 <memchr>
 800ad1c:	9a04      	ldr	r2, [sp, #16]
 800ad1e:	b9d8      	cbnz	r0, 800ad58 <_vfiprintf_r+0x12c>
 800ad20:	06d1      	lsls	r1, r2, #27
 800ad22:	bf44      	itt	mi
 800ad24:	2320      	movmi	r3, #32
 800ad26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad2a:	0713      	lsls	r3, r2, #28
 800ad2c:	bf44      	itt	mi
 800ad2e:	232b      	movmi	r3, #43	; 0x2b
 800ad30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad34:	f89a 3000 	ldrb.w	r3, [sl]
 800ad38:	2b2a      	cmp	r3, #42	; 0x2a
 800ad3a:	d015      	beq.n	800ad68 <_vfiprintf_r+0x13c>
 800ad3c:	9a07      	ldr	r2, [sp, #28]
 800ad3e:	4654      	mov	r4, sl
 800ad40:	2000      	movs	r0, #0
 800ad42:	f04f 0c0a 	mov.w	ip, #10
 800ad46:	4621      	mov	r1, r4
 800ad48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad4c:	3b30      	subs	r3, #48	; 0x30
 800ad4e:	2b09      	cmp	r3, #9
 800ad50:	d94e      	bls.n	800adf0 <_vfiprintf_r+0x1c4>
 800ad52:	b1b0      	cbz	r0, 800ad82 <_vfiprintf_r+0x156>
 800ad54:	9207      	str	r2, [sp, #28]
 800ad56:	e014      	b.n	800ad82 <_vfiprintf_r+0x156>
 800ad58:	eba0 0308 	sub.w	r3, r0, r8
 800ad5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ad60:	4313      	orrs	r3, r2
 800ad62:	9304      	str	r3, [sp, #16]
 800ad64:	46a2      	mov	sl, r4
 800ad66:	e7d2      	b.n	800ad0e <_vfiprintf_r+0xe2>
 800ad68:	9b03      	ldr	r3, [sp, #12]
 800ad6a:	1d19      	adds	r1, r3, #4
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	9103      	str	r1, [sp, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	bfbb      	ittet	lt
 800ad74:	425b      	neglt	r3, r3
 800ad76:	f042 0202 	orrlt.w	r2, r2, #2
 800ad7a:	9307      	strge	r3, [sp, #28]
 800ad7c:	9307      	strlt	r3, [sp, #28]
 800ad7e:	bfb8      	it	lt
 800ad80:	9204      	strlt	r2, [sp, #16]
 800ad82:	7823      	ldrb	r3, [r4, #0]
 800ad84:	2b2e      	cmp	r3, #46	; 0x2e
 800ad86:	d10c      	bne.n	800ada2 <_vfiprintf_r+0x176>
 800ad88:	7863      	ldrb	r3, [r4, #1]
 800ad8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad8c:	d135      	bne.n	800adfa <_vfiprintf_r+0x1ce>
 800ad8e:	9b03      	ldr	r3, [sp, #12]
 800ad90:	1d1a      	adds	r2, r3, #4
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	9203      	str	r2, [sp, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfb8      	it	lt
 800ad9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad9e:	3402      	adds	r4, #2
 800ada0:	9305      	str	r3, [sp, #20]
 800ada2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae88 <_vfiprintf_r+0x25c>
 800ada6:	7821      	ldrb	r1, [r4, #0]
 800ada8:	2203      	movs	r2, #3
 800adaa:	4650      	mov	r0, sl
 800adac:	f7f5 fa28 	bl	8000200 <memchr>
 800adb0:	b140      	cbz	r0, 800adc4 <_vfiprintf_r+0x198>
 800adb2:	2340      	movs	r3, #64	; 0x40
 800adb4:	eba0 000a 	sub.w	r0, r0, sl
 800adb8:	fa03 f000 	lsl.w	r0, r3, r0
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	4303      	orrs	r3, r0
 800adc0:	3401      	adds	r4, #1
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc8:	482c      	ldr	r0, [pc, #176]	; (800ae7c <_vfiprintf_r+0x250>)
 800adca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adce:	2206      	movs	r2, #6
 800add0:	f7f5 fa16 	bl	8000200 <memchr>
 800add4:	2800      	cmp	r0, #0
 800add6:	d03f      	beq.n	800ae58 <_vfiprintf_r+0x22c>
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <_vfiprintf_r+0x254>)
 800adda:	bb1b      	cbnz	r3, 800ae24 <_vfiprintf_r+0x1f8>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	3307      	adds	r3, #7
 800ade0:	f023 0307 	bic.w	r3, r3, #7
 800ade4:	3308      	adds	r3, #8
 800ade6:	9303      	str	r3, [sp, #12]
 800ade8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adea:	443b      	add	r3, r7
 800adec:	9309      	str	r3, [sp, #36]	; 0x24
 800adee:	e767      	b.n	800acc0 <_vfiprintf_r+0x94>
 800adf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf4:	460c      	mov	r4, r1
 800adf6:	2001      	movs	r0, #1
 800adf8:	e7a5      	b.n	800ad46 <_vfiprintf_r+0x11a>
 800adfa:	2300      	movs	r3, #0
 800adfc:	3401      	adds	r4, #1
 800adfe:	9305      	str	r3, [sp, #20]
 800ae00:	4619      	mov	r1, r3
 800ae02:	f04f 0c0a 	mov.w	ip, #10
 800ae06:	4620      	mov	r0, r4
 800ae08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae0c:	3a30      	subs	r2, #48	; 0x30
 800ae0e:	2a09      	cmp	r2, #9
 800ae10:	d903      	bls.n	800ae1a <_vfiprintf_r+0x1ee>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0c5      	beq.n	800ada2 <_vfiprintf_r+0x176>
 800ae16:	9105      	str	r1, [sp, #20]
 800ae18:	e7c3      	b.n	800ada2 <_vfiprintf_r+0x176>
 800ae1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae1e:	4604      	mov	r4, r0
 800ae20:	2301      	movs	r3, #1
 800ae22:	e7f0      	b.n	800ae06 <_vfiprintf_r+0x1da>
 800ae24:	ab03      	add	r3, sp, #12
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4b16      	ldr	r3, [pc, #88]	; (800ae84 <_vfiprintf_r+0x258>)
 800ae2c:	a904      	add	r1, sp, #16
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f3af 8000 	nop.w
 800ae34:	4607      	mov	r7, r0
 800ae36:	1c78      	adds	r0, r7, #1
 800ae38:	d1d6      	bne.n	800ade8 <_vfiprintf_r+0x1bc>
 800ae3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae3c:	07d9      	lsls	r1, r3, #31
 800ae3e:	d405      	bmi.n	800ae4c <_vfiprintf_r+0x220>
 800ae40:	89ab      	ldrh	r3, [r5, #12]
 800ae42:	059a      	lsls	r2, r3, #22
 800ae44:	d402      	bmi.n	800ae4c <_vfiprintf_r+0x220>
 800ae46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae48:	f7ff fcf8 	bl	800a83c <__retarget_lock_release_recursive>
 800ae4c:	89ab      	ldrh	r3, [r5, #12]
 800ae4e:	065b      	lsls	r3, r3, #25
 800ae50:	f53f af12 	bmi.w	800ac78 <_vfiprintf_r+0x4c>
 800ae54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae56:	e711      	b.n	800ac7c <_vfiprintf_r+0x50>
 800ae58:	ab03      	add	r3, sp, #12
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	462a      	mov	r2, r5
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <_vfiprintf_r+0x258>)
 800ae60:	a904      	add	r1, sp, #16
 800ae62:	4630      	mov	r0, r6
 800ae64:	f000 f880 	bl	800af68 <_printf_i>
 800ae68:	e7e4      	b.n	800ae34 <_vfiprintf_r+0x208>
 800ae6a:	bf00      	nop
 800ae6c:	0800c880 	.word	0x0800c880
 800ae70:	0800c8a0 	.word	0x0800c8a0
 800ae74:	0800c860 	.word	0x0800c860
 800ae78:	0800c8c0 	.word	0x0800c8c0
 800ae7c:	0800c8ca 	.word	0x0800c8ca
 800ae80:	00000000 	.word	0x00000000
 800ae84:	0800ac07 	.word	0x0800ac07
 800ae88:	0800c8c6 	.word	0x0800c8c6

0800ae8c <_printf_common>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	4616      	mov	r6, r2
 800ae92:	4699      	mov	r9, r3
 800ae94:	688a      	ldr	r2, [r1, #8]
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	bfb8      	it	lt
 800aea0:	4613      	movlt	r3, r2
 800aea2:	6033      	str	r3, [r6, #0]
 800aea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aea8:	4607      	mov	r7, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b10a      	cbz	r2, 800aeb2 <_printf_common+0x26>
 800aeae:	3301      	adds	r3, #1
 800aeb0:	6033      	str	r3, [r6, #0]
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	0699      	lsls	r1, r3, #26
 800aeb6:	bf42      	ittt	mi
 800aeb8:	6833      	ldrmi	r3, [r6, #0]
 800aeba:	3302      	addmi	r3, #2
 800aebc:	6033      	strmi	r3, [r6, #0]
 800aebe:	6825      	ldr	r5, [r4, #0]
 800aec0:	f015 0506 	ands.w	r5, r5, #6
 800aec4:	d106      	bne.n	800aed4 <_printf_common+0x48>
 800aec6:	f104 0a19 	add.w	sl, r4, #25
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	6832      	ldr	r2, [r6, #0]
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dc26      	bgt.n	800af22 <_printf_common+0x96>
 800aed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aed8:	1e13      	subs	r3, r2, #0
 800aeda:	6822      	ldr	r2, [r4, #0]
 800aedc:	bf18      	it	ne
 800aede:	2301      	movne	r3, #1
 800aee0:	0692      	lsls	r2, r2, #26
 800aee2:	d42b      	bmi.n	800af3c <_printf_common+0xb0>
 800aee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aee8:	4649      	mov	r1, r9
 800aeea:	4638      	mov	r0, r7
 800aeec:	47c0      	blx	r8
 800aeee:	3001      	adds	r0, #1
 800aef0:	d01e      	beq.n	800af30 <_printf_common+0xa4>
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	68e5      	ldr	r5, [r4, #12]
 800aef6:	6832      	ldr	r2, [r6, #0]
 800aef8:	f003 0306 	and.w	r3, r3, #6
 800aefc:	2b04      	cmp	r3, #4
 800aefe:	bf08      	it	eq
 800af00:	1aad      	subeq	r5, r5, r2
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	6922      	ldr	r2, [r4, #16]
 800af06:	bf0c      	ite	eq
 800af08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af0c:	2500      	movne	r5, #0
 800af0e:	4293      	cmp	r3, r2
 800af10:	bfc4      	itt	gt
 800af12:	1a9b      	subgt	r3, r3, r2
 800af14:	18ed      	addgt	r5, r5, r3
 800af16:	2600      	movs	r6, #0
 800af18:	341a      	adds	r4, #26
 800af1a:	42b5      	cmp	r5, r6
 800af1c:	d11a      	bne.n	800af54 <_printf_common+0xc8>
 800af1e:	2000      	movs	r0, #0
 800af20:	e008      	b.n	800af34 <_printf_common+0xa8>
 800af22:	2301      	movs	r3, #1
 800af24:	4652      	mov	r2, sl
 800af26:	4649      	mov	r1, r9
 800af28:	4638      	mov	r0, r7
 800af2a:	47c0      	blx	r8
 800af2c:	3001      	adds	r0, #1
 800af2e:	d103      	bne.n	800af38 <_printf_common+0xac>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af38:	3501      	adds	r5, #1
 800af3a:	e7c6      	b.n	800aeca <_printf_common+0x3e>
 800af3c:	18e1      	adds	r1, r4, r3
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	2030      	movs	r0, #48	; 0x30
 800af42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af46:	4422      	add	r2, r4
 800af48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af50:	3302      	adds	r3, #2
 800af52:	e7c7      	b.n	800aee4 <_printf_common+0x58>
 800af54:	2301      	movs	r3, #1
 800af56:	4622      	mov	r2, r4
 800af58:	4649      	mov	r1, r9
 800af5a:	4638      	mov	r0, r7
 800af5c:	47c0      	blx	r8
 800af5e:	3001      	adds	r0, #1
 800af60:	d0e6      	beq.n	800af30 <_printf_common+0xa4>
 800af62:	3601      	adds	r6, #1
 800af64:	e7d9      	b.n	800af1a <_printf_common+0x8e>
	...

0800af68 <_printf_i>:
 800af68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	7e0f      	ldrb	r7, [r1, #24]
 800af6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af70:	2f78      	cmp	r7, #120	; 0x78
 800af72:	4691      	mov	r9, r2
 800af74:	4680      	mov	r8, r0
 800af76:	460c      	mov	r4, r1
 800af78:	469a      	mov	sl, r3
 800af7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af7e:	d807      	bhi.n	800af90 <_printf_i+0x28>
 800af80:	2f62      	cmp	r7, #98	; 0x62
 800af82:	d80a      	bhi.n	800af9a <_printf_i+0x32>
 800af84:	2f00      	cmp	r7, #0
 800af86:	f000 80d8 	beq.w	800b13a <_printf_i+0x1d2>
 800af8a:	2f58      	cmp	r7, #88	; 0x58
 800af8c:	f000 80a3 	beq.w	800b0d6 <_printf_i+0x16e>
 800af90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af98:	e03a      	b.n	800b010 <_printf_i+0xa8>
 800af9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af9e:	2b15      	cmp	r3, #21
 800afa0:	d8f6      	bhi.n	800af90 <_printf_i+0x28>
 800afa2:	a101      	add	r1, pc, #4	; (adr r1, 800afa8 <_printf_i+0x40>)
 800afa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800b015 	.word	0x0800b015
 800afb0:	0800af91 	.word	0x0800af91
 800afb4:	0800af91 	.word	0x0800af91
 800afb8:	0800af91 	.word	0x0800af91
 800afbc:	0800af91 	.word	0x0800af91
 800afc0:	0800b015 	.word	0x0800b015
 800afc4:	0800af91 	.word	0x0800af91
 800afc8:	0800af91 	.word	0x0800af91
 800afcc:	0800af91 	.word	0x0800af91
 800afd0:	0800af91 	.word	0x0800af91
 800afd4:	0800b121 	.word	0x0800b121
 800afd8:	0800b045 	.word	0x0800b045
 800afdc:	0800b103 	.word	0x0800b103
 800afe0:	0800af91 	.word	0x0800af91
 800afe4:	0800af91 	.word	0x0800af91
 800afe8:	0800b143 	.word	0x0800b143
 800afec:	0800af91 	.word	0x0800af91
 800aff0:	0800b045 	.word	0x0800b045
 800aff4:	0800af91 	.word	0x0800af91
 800aff8:	0800af91 	.word	0x0800af91
 800affc:	0800b10b 	.word	0x0800b10b
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	602a      	str	r2, [r5, #0]
 800b008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b00c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b010:	2301      	movs	r3, #1
 800b012:	e0a3      	b.n	800b15c <_printf_i+0x1f4>
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	6829      	ldr	r1, [r5, #0]
 800b018:	0606      	lsls	r6, r0, #24
 800b01a:	f101 0304 	add.w	r3, r1, #4
 800b01e:	d50a      	bpl.n	800b036 <_printf_i+0xce>
 800b020:	680e      	ldr	r6, [r1, #0]
 800b022:	602b      	str	r3, [r5, #0]
 800b024:	2e00      	cmp	r6, #0
 800b026:	da03      	bge.n	800b030 <_printf_i+0xc8>
 800b028:	232d      	movs	r3, #45	; 0x2d
 800b02a:	4276      	negs	r6, r6
 800b02c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b030:	485e      	ldr	r0, [pc, #376]	; (800b1ac <_printf_i+0x244>)
 800b032:	230a      	movs	r3, #10
 800b034:	e019      	b.n	800b06a <_printf_i+0x102>
 800b036:	680e      	ldr	r6, [r1, #0]
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b03e:	bf18      	it	ne
 800b040:	b236      	sxthne	r6, r6
 800b042:	e7ef      	b.n	800b024 <_printf_i+0xbc>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	6820      	ldr	r0, [r4, #0]
 800b048:	1d19      	adds	r1, r3, #4
 800b04a:	6029      	str	r1, [r5, #0]
 800b04c:	0601      	lsls	r1, r0, #24
 800b04e:	d501      	bpl.n	800b054 <_printf_i+0xec>
 800b050:	681e      	ldr	r6, [r3, #0]
 800b052:	e002      	b.n	800b05a <_printf_i+0xf2>
 800b054:	0646      	lsls	r6, r0, #25
 800b056:	d5fb      	bpl.n	800b050 <_printf_i+0xe8>
 800b058:	881e      	ldrh	r6, [r3, #0]
 800b05a:	4854      	ldr	r0, [pc, #336]	; (800b1ac <_printf_i+0x244>)
 800b05c:	2f6f      	cmp	r7, #111	; 0x6f
 800b05e:	bf0c      	ite	eq
 800b060:	2308      	moveq	r3, #8
 800b062:	230a      	movne	r3, #10
 800b064:	2100      	movs	r1, #0
 800b066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b06a:	6865      	ldr	r5, [r4, #4]
 800b06c:	60a5      	str	r5, [r4, #8]
 800b06e:	2d00      	cmp	r5, #0
 800b070:	bfa2      	ittt	ge
 800b072:	6821      	ldrge	r1, [r4, #0]
 800b074:	f021 0104 	bicge.w	r1, r1, #4
 800b078:	6021      	strge	r1, [r4, #0]
 800b07a:	b90e      	cbnz	r6, 800b080 <_printf_i+0x118>
 800b07c:	2d00      	cmp	r5, #0
 800b07e:	d04d      	beq.n	800b11c <_printf_i+0x1b4>
 800b080:	4615      	mov	r5, r2
 800b082:	fbb6 f1f3 	udiv	r1, r6, r3
 800b086:	fb03 6711 	mls	r7, r3, r1, r6
 800b08a:	5dc7      	ldrb	r7, [r0, r7]
 800b08c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b090:	4637      	mov	r7, r6
 800b092:	42bb      	cmp	r3, r7
 800b094:	460e      	mov	r6, r1
 800b096:	d9f4      	bls.n	800b082 <_printf_i+0x11a>
 800b098:	2b08      	cmp	r3, #8
 800b09a:	d10b      	bne.n	800b0b4 <_printf_i+0x14c>
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	07de      	lsls	r6, r3, #31
 800b0a0:	d508      	bpl.n	800b0b4 <_printf_i+0x14c>
 800b0a2:	6923      	ldr	r3, [r4, #16]
 800b0a4:	6861      	ldr	r1, [r4, #4]
 800b0a6:	4299      	cmp	r1, r3
 800b0a8:	bfde      	ittt	le
 800b0aa:	2330      	movle	r3, #48	; 0x30
 800b0ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0b4:	1b52      	subs	r2, r2, r5
 800b0b6:	6122      	str	r2, [r4, #16]
 800b0b8:	f8cd a000 	str.w	sl, [sp]
 800b0bc:	464b      	mov	r3, r9
 800b0be:	aa03      	add	r2, sp, #12
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	f7ff fee2 	bl	800ae8c <_printf_common>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d14c      	bne.n	800b166 <_printf_i+0x1fe>
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	b004      	add	sp, #16
 800b0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d6:	4835      	ldr	r0, [pc, #212]	; (800b1ac <_printf_i+0x244>)
 800b0d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0dc:	6829      	ldr	r1, [r5, #0]
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0e4:	6029      	str	r1, [r5, #0]
 800b0e6:	061d      	lsls	r5, r3, #24
 800b0e8:	d514      	bpl.n	800b114 <_printf_i+0x1ac>
 800b0ea:	07df      	lsls	r7, r3, #31
 800b0ec:	bf44      	itt	mi
 800b0ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b0f2:	6023      	strmi	r3, [r4, #0]
 800b0f4:	b91e      	cbnz	r6, 800b0fe <_printf_i+0x196>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	f023 0320 	bic.w	r3, r3, #32
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	2310      	movs	r3, #16
 800b100:	e7b0      	b.n	800b064 <_printf_i+0xfc>
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	f043 0320 	orr.w	r3, r3, #32
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	2378      	movs	r3, #120	; 0x78
 800b10c:	4828      	ldr	r0, [pc, #160]	; (800b1b0 <_printf_i+0x248>)
 800b10e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b112:	e7e3      	b.n	800b0dc <_printf_i+0x174>
 800b114:	0659      	lsls	r1, r3, #25
 800b116:	bf48      	it	mi
 800b118:	b2b6      	uxthmi	r6, r6
 800b11a:	e7e6      	b.n	800b0ea <_printf_i+0x182>
 800b11c:	4615      	mov	r5, r2
 800b11e:	e7bb      	b.n	800b098 <_printf_i+0x130>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	6826      	ldr	r6, [r4, #0]
 800b124:	6961      	ldr	r1, [r4, #20]
 800b126:	1d18      	adds	r0, r3, #4
 800b128:	6028      	str	r0, [r5, #0]
 800b12a:	0635      	lsls	r5, r6, #24
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	d501      	bpl.n	800b134 <_printf_i+0x1cc>
 800b130:	6019      	str	r1, [r3, #0]
 800b132:	e002      	b.n	800b13a <_printf_i+0x1d2>
 800b134:	0670      	lsls	r0, r6, #25
 800b136:	d5fb      	bpl.n	800b130 <_printf_i+0x1c8>
 800b138:	8019      	strh	r1, [r3, #0]
 800b13a:	2300      	movs	r3, #0
 800b13c:	6123      	str	r3, [r4, #16]
 800b13e:	4615      	mov	r5, r2
 800b140:	e7ba      	b.n	800b0b8 <_printf_i+0x150>
 800b142:	682b      	ldr	r3, [r5, #0]
 800b144:	1d1a      	adds	r2, r3, #4
 800b146:	602a      	str	r2, [r5, #0]
 800b148:	681d      	ldr	r5, [r3, #0]
 800b14a:	6862      	ldr	r2, [r4, #4]
 800b14c:	2100      	movs	r1, #0
 800b14e:	4628      	mov	r0, r5
 800b150:	f7f5 f856 	bl	8000200 <memchr>
 800b154:	b108      	cbz	r0, 800b15a <_printf_i+0x1f2>
 800b156:	1b40      	subs	r0, r0, r5
 800b158:	6060      	str	r0, [r4, #4]
 800b15a:	6863      	ldr	r3, [r4, #4]
 800b15c:	6123      	str	r3, [r4, #16]
 800b15e:	2300      	movs	r3, #0
 800b160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b164:	e7a8      	b.n	800b0b8 <_printf_i+0x150>
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	462a      	mov	r2, r5
 800b16a:	4649      	mov	r1, r9
 800b16c:	4640      	mov	r0, r8
 800b16e:	47d0      	blx	sl
 800b170:	3001      	adds	r0, #1
 800b172:	d0ab      	beq.n	800b0cc <_printf_i+0x164>
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	079b      	lsls	r3, r3, #30
 800b178:	d413      	bmi.n	800b1a2 <_printf_i+0x23a>
 800b17a:	68e0      	ldr	r0, [r4, #12]
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	4298      	cmp	r0, r3
 800b180:	bfb8      	it	lt
 800b182:	4618      	movlt	r0, r3
 800b184:	e7a4      	b.n	800b0d0 <_printf_i+0x168>
 800b186:	2301      	movs	r3, #1
 800b188:	4632      	mov	r2, r6
 800b18a:	4649      	mov	r1, r9
 800b18c:	4640      	mov	r0, r8
 800b18e:	47d0      	blx	sl
 800b190:	3001      	adds	r0, #1
 800b192:	d09b      	beq.n	800b0cc <_printf_i+0x164>
 800b194:	3501      	adds	r5, #1
 800b196:	68e3      	ldr	r3, [r4, #12]
 800b198:	9903      	ldr	r1, [sp, #12]
 800b19a:	1a5b      	subs	r3, r3, r1
 800b19c:	42ab      	cmp	r3, r5
 800b19e:	dcf2      	bgt.n	800b186 <_printf_i+0x21e>
 800b1a0:	e7eb      	b.n	800b17a <_printf_i+0x212>
 800b1a2:	2500      	movs	r5, #0
 800b1a4:	f104 0619 	add.w	r6, r4, #25
 800b1a8:	e7f5      	b.n	800b196 <_printf_i+0x22e>
 800b1aa:	bf00      	nop
 800b1ac:	0800c8d1 	.word	0x0800c8d1
 800b1b0:	0800c8e2 	.word	0x0800c8e2

0800b1b4 <siscanf>:
 800b1b4:	b40e      	push	{r1, r2, r3}
 800b1b6:	b510      	push	{r4, lr}
 800b1b8:	b09f      	sub	sp, #124	; 0x7c
 800b1ba:	ac21      	add	r4, sp, #132	; 0x84
 800b1bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b1c0:	f854 2b04 	ldr.w	r2, [r4], #4
 800b1c4:	9201      	str	r2, [sp, #4]
 800b1c6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b1ca:	9004      	str	r0, [sp, #16]
 800b1cc:	9008      	str	r0, [sp, #32]
 800b1ce:	f7f4 ffff 	bl	80001d0 <strlen>
 800b1d2:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <siscanf+0x50>)
 800b1d4:	9005      	str	r0, [sp, #20]
 800b1d6:	9009      	str	r0, [sp, #36]	; 0x24
 800b1d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b1da:	480b      	ldr	r0, [pc, #44]	; (800b208 <siscanf+0x54>)
 800b1dc:	9a01      	ldr	r2, [sp, #4]
 800b1de:	6800      	ldr	r0, [r0, #0]
 800b1e0:	9403      	str	r4, [sp, #12]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9311      	str	r3, [sp, #68]	; 0x44
 800b1e6:	9316      	str	r3, [sp, #88]	; 0x58
 800b1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b1f0:	a904      	add	r1, sp, #16
 800b1f2:	4623      	mov	r3, r4
 800b1f4:	f000 f9e4 	bl	800b5c0 <__ssvfiscanf_r>
 800b1f8:	b01f      	add	sp, #124	; 0x7c
 800b1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1fe:	b003      	add	sp, #12
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	0800b22f 	.word	0x0800b22f
 800b208:	2000005c 	.word	0x2000005c

0800b20c <__sread>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	460c      	mov	r4, r1
 800b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b214:	f000 fc9e 	bl	800bb54 <_read_r>
 800b218:	2800      	cmp	r0, #0
 800b21a:	bfab      	itete	ge
 800b21c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b21e:	89a3      	ldrhlt	r3, [r4, #12]
 800b220:	181b      	addge	r3, r3, r0
 800b222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b226:	bfac      	ite	ge
 800b228:	6563      	strge	r3, [r4, #84]	; 0x54
 800b22a:	81a3      	strhlt	r3, [r4, #12]
 800b22c:	bd10      	pop	{r4, pc}

0800b22e <__seofread>:
 800b22e:	2000      	movs	r0, #0
 800b230:	4770      	bx	lr

0800b232 <__swrite>:
 800b232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b236:	461f      	mov	r7, r3
 800b238:	898b      	ldrh	r3, [r1, #12]
 800b23a:	05db      	lsls	r3, r3, #23
 800b23c:	4605      	mov	r5, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	4616      	mov	r6, r2
 800b242:	d505      	bpl.n	800b250 <__swrite+0x1e>
 800b244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b248:	2302      	movs	r3, #2
 800b24a:	2200      	movs	r2, #0
 800b24c:	f000 f902 	bl	800b454 <_lseek_r>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	4632      	mov	r2, r6
 800b25e:	463b      	mov	r3, r7
 800b260:	4628      	mov	r0, r5
 800b262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b266:	f000 b89d 	b.w	800b3a4 <_write_r>

0800b26a <__sseek>:
 800b26a:	b510      	push	{r4, lr}
 800b26c:	460c      	mov	r4, r1
 800b26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b272:	f000 f8ef 	bl	800b454 <_lseek_r>
 800b276:	1c43      	adds	r3, r0, #1
 800b278:	89a3      	ldrh	r3, [r4, #12]
 800b27a:	bf15      	itete	ne
 800b27c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b27e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b286:	81a3      	strheq	r3, [r4, #12]
 800b288:	bf18      	it	ne
 800b28a:	81a3      	strhne	r3, [r4, #12]
 800b28c:	bd10      	pop	{r4, pc}

0800b28e <__sclose>:
 800b28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b292:	f000 b8a1 	b.w	800b3d8 <_close_r>

0800b296 <strcpy>:
 800b296:	4603      	mov	r3, r0
 800b298:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b29c:	f803 2b01 	strb.w	r2, [r3], #1
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d1f9      	bne.n	800b298 <strcpy+0x2>
 800b2a4:	4770      	bx	lr
	...

0800b2a8 <_strtoul_l.constprop.0>:
 800b2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	4f36      	ldr	r7, [pc, #216]	; (800b388 <_strtoul_l.constprop.0+0xe0>)
 800b2ae:	4686      	mov	lr, r0
 800b2b0:	460d      	mov	r5, r1
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2b8:	5de6      	ldrb	r6, [r4, r7]
 800b2ba:	f016 0608 	ands.w	r6, r6, #8
 800b2be:	d1f8      	bne.n	800b2b2 <_strtoul_l.constprop.0+0xa>
 800b2c0:	2c2d      	cmp	r4, #45	; 0x2d
 800b2c2:	d12f      	bne.n	800b324 <_strtoul_l.constprop.0+0x7c>
 800b2c4:	782c      	ldrb	r4, [r5, #0]
 800b2c6:	2601      	movs	r6, #1
 800b2c8:	1c85      	adds	r5, r0, #2
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d057      	beq.n	800b37e <_strtoul_l.constprop.0+0xd6>
 800b2ce:	2b10      	cmp	r3, #16
 800b2d0:	d109      	bne.n	800b2e6 <_strtoul_l.constprop.0+0x3e>
 800b2d2:	2c30      	cmp	r4, #48	; 0x30
 800b2d4:	d107      	bne.n	800b2e6 <_strtoul_l.constprop.0+0x3e>
 800b2d6:	7828      	ldrb	r0, [r5, #0]
 800b2d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b2dc:	2858      	cmp	r0, #88	; 0x58
 800b2de:	d149      	bne.n	800b374 <_strtoul_l.constprop.0+0xcc>
 800b2e0:	786c      	ldrb	r4, [r5, #1]
 800b2e2:	2310      	movs	r3, #16
 800b2e4:	3502      	adds	r5, #2
 800b2e6:	f04f 38ff 	mov.w	r8, #4294967295
 800b2ea:	2700      	movs	r7, #0
 800b2ec:	fbb8 f8f3 	udiv	r8, r8, r3
 800b2f0:	fb03 f908 	mul.w	r9, r3, r8
 800b2f4:	ea6f 0909 	mvn.w	r9, r9
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b2fe:	f1bc 0f09 	cmp.w	ip, #9
 800b302:	d814      	bhi.n	800b32e <_strtoul_l.constprop.0+0x86>
 800b304:	4664      	mov	r4, ip
 800b306:	42a3      	cmp	r3, r4
 800b308:	dd22      	ble.n	800b350 <_strtoul_l.constprop.0+0xa8>
 800b30a:	2f00      	cmp	r7, #0
 800b30c:	db1d      	blt.n	800b34a <_strtoul_l.constprop.0+0xa2>
 800b30e:	4580      	cmp	r8, r0
 800b310:	d31b      	bcc.n	800b34a <_strtoul_l.constprop.0+0xa2>
 800b312:	d101      	bne.n	800b318 <_strtoul_l.constprop.0+0x70>
 800b314:	45a1      	cmp	r9, r4
 800b316:	db18      	blt.n	800b34a <_strtoul_l.constprop.0+0xa2>
 800b318:	fb00 4003 	mla	r0, r0, r3, r4
 800b31c:	2701      	movs	r7, #1
 800b31e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b322:	e7ea      	b.n	800b2fa <_strtoul_l.constprop.0+0x52>
 800b324:	2c2b      	cmp	r4, #43	; 0x2b
 800b326:	bf04      	itt	eq
 800b328:	782c      	ldrbeq	r4, [r5, #0]
 800b32a:	1c85      	addeq	r5, r0, #2
 800b32c:	e7cd      	b.n	800b2ca <_strtoul_l.constprop.0+0x22>
 800b32e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b332:	f1bc 0f19 	cmp.w	ip, #25
 800b336:	d801      	bhi.n	800b33c <_strtoul_l.constprop.0+0x94>
 800b338:	3c37      	subs	r4, #55	; 0x37
 800b33a:	e7e4      	b.n	800b306 <_strtoul_l.constprop.0+0x5e>
 800b33c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b340:	f1bc 0f19 	cmp.w	ip, #25
 800b344:	d804      	bhi.n	800b350 <_strtoul_l.constprop.0+0xa8>
 800b346:	3c57      	subs	r4, #87	; 0x57
 800b348:	e7dd      	b.n	800b306 <_strtoul_l.constprop.0+0x5e>
 800b34a:	f04f 37ff 	mov.w	r7, #4294967295
 800b34e:	e7e6      	b.n	800b31e <_strtoul_l.constprop.0+0x76>
 800b350:	2f00      	cmp	r7, #0
 800b352:	da07      	bge.n	800b364 <_strtoul_l.constprop.0+0xbc>
 800b354:	2322      	movs	r3, #34	; 0x22
 800b356:	f8ce 3000 	str.w	r3, [lr]
 800b35a:	f04f 30ff 	mov.w	r0, #4294967295
 800b35e:	b932      	cbnz	r2, 800b36e <_strtoul_l.constprop.0+0xc6>
 800b360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b364:	b106      	cbz	r6, 800b368 <_strtoul_l.constprop.0+0xc0>
 800b366:	4240      	negs	r0, r0
 800b368:	2a00      	cmp	r2, #0
 800b36a:	d0f9      	beq.n	800b360 <_strtoul_l.constprop.0+0xb8>
 800b36c:	b107      	cbz	r7, 800b370 <_strtoul_l.constprop.0+0xc8>
 800b36e:	1e69      	subs	r1, r5, #1
 800b370:	6011      	str	r1, [r2, #0]
 800b372:	e7f5      	b.n	800b360 <_strtoul_l.constprop.0+0xb8>
 800b374:	2430      	movs	r4, #48	; 0x30
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1b5      	bne.n	800b2e6 <_strtoul_l.constprop.0+0x3e>
 800b37a:	2308      	movs	r3, #8
 800b37c:	e7b3      	b.n	800b2e6 <_strtoul_l.constprop.0+0x3e>
 800b37e:	2c30      	cmp	r4, #48	; 0x30
 800b380:	d0a9      	beq.n	800b2d6 <_strtoul_l.constprop.0+0x2e>
 800b382:	230a      	movs	r3, #10
 800b384:	e7af      	b.n	800b2e6 <_strtoul_l.constprop.0+0x3e>
 800b386:	bf00      	nop
 800b388:	0800c8f4 	.word	0x0800c8f4

0800b38c <_strtoul_r>:
 800b38c:	f7ff bf8c 	b.w	800b2a8 <_strtoul_l.constprop.0>

0800b390 <strtoul>:
 800b390:	4613      	mov	r3, r2
 800b392:	460a      	mov	r2, r1
 800b394:	4601      	mov	r1, r0
 800b396:	4802      	ldr	r0, [pc, #8]	; (800b3a0 <strtoul+0x10>)
 800b398:	6800      	ldr	r0, [r0, #0]
 800b39a:	f7ff bf85 	b.w	800b2a8 <_strtoul_l.constprop.0>
 800b39e:	bf00      	nop
 800b3a0:	2000005c 	.word	0x2000005c

0800b3a4 <_write_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4d07      	ldr	r5, [pc, #28]	; (800b3c4 <_write_r+0x20>)
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	4608      	mov	r0, r1
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	602a      	str	r2, [r5, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f7f7 f845 	bl	8002442 <_write>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d102      	bne.n	800b3c2 <_write_r+0x1e>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	b103      	cbz	r3, 800b3c2 <_write_r+0x1e>
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	20001070 	.word	0x20001070

0800b3c8 <abort>:
 800b3c8:	b508      	push	{r3, lr}
 800b3ca:	2006      	movs	r0, #6
 800b3cc:	f000 fc34 	bl	800bc38 <raise>
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	f7f7 f81b 	bl	800240c <_exit>
	...

0800b3d8 <_close_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d06      	ldr	r5, [pc, #24]	; (800b3f4 <_close_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f7f7 f876 	bl	80024d4 <_close>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_close_r+0x1a>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_close_r+0x1a>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	20001070 	.word	0x20001070

0800b3f8 <__env_lock>:
 800b3f8:	4801      	ldr	r0, [pc, #4]	; (800b400 <__env_lock+0x8>)
 800b3fa:	f7ff ba1d 	b.w	800a838 <__retarget_lock_acquire_recursive>
 800b3fe:	bf00      	nop
 800b400:	20001068 	.word	0x20001068

0800b404 <__env_unlock>:
 800b404:	4801      	ldr	r0, [pc, #4]	; (800b40c <__env_unlock+0x8>)
 800b406:	f7ff ba19 	b.w	800a83c <__retarget_lock_release_recursive>
 800b40a:	bf00      	nop
 800b40c:	20001068 	.word	0x20001068

0800b410 <_fstat_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4d07      	ldr	r5, [pc, #28]	; (800b430 <_fstat_r+0x20>)
 800b414:	2300      	movs	r3, #0
 800b416:	4604      	mov	r4, r0
 800b418:	4608      	mov	r0, r1
 800b41a:	4611      	mov	r1, r2
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	f7f7 f865 	bl	80024ec <_fstat>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	d102      	bne.n	800b42c <_fstat_r+0x1c>
 800b426:	682b      	ldr	r3, [r5, #0]
 800b428:	b103      	cbz	r3, 800b42c <_fstat_r+0x1c>
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	bd38      	pop	{r3, r4, r5, pc}
 800b42e:	bf00      	nop
 800b430:	20001070 	.word	0x20001070

0800b434 <_isatty_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d06      	ldr	r5, [pc, #24]	; (800b450 <_isatty_r+0x1c>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f7 f864 	bl	800250c <_isatty>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_isatty_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_isatty_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	20001070 	.word	0x20001070

0800b454 <_lseek_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	; (800b474 <_lseek_r+0x20>)
 800b458:	4604      	mov	r4, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	602a      	str	r2, [r5, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f7f7 f85d 	bl	8002522 <_lseek>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_lseek_r+0x1e>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_lseek_r+0x1e>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20001070 	.word	0x20001070

0800b478 <memmove>:
 800b478:	4288      	cmp	r0, r1
 800b47a:	b510      	push	{r4, lr}
 800b47c:	eb01 0402 	add.w	r4, r1, r2
 800b480:	d902      	bls.n	800b488 <memmove+0x10>
 800b482:	4284      	cmp	r4, r0
 800b484:	4623      	mov	r3, r4
 800b486:	d807      	bhi.n	800b498 <memmove+0x20>
 800b488:	1e43      	subs	r3, r0, #1
 800b48a:	42a1      	cmp	r1, r4
 800b48c:	d008      	beq.n	800b4a0 <memmove+0x28>
 800b48e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b492:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b496:	e7f8      	b.n	800b48a <memmove+0x12>
 800b498:	4402      	add	r2, r0
 800b49a:	4601      	mov	r1, r0
 800b49c:	428a      	cmp	r2, r1
 800b49e:	d100      	bne.n	800b4a2 <memmove+0x2a>
 800b4a0:	bd10      	pop	{r4, pc}
 800b4a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4aa:	e7f7      	b.n	800b49c <memmove+0x24>

0800b4ac <_realloc_r>:
 800b4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	4614      	mov	r4, r2
 800b4b4:	460e      	mov	r6, r1
 800b4b6:	b921      	cbnz	r1, 800b4c2 <_realloc_r+0x16>
 800b4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	4611      	mov	r1, r2
 800b4be:	f7fe ba19 	b.w	80098f4 <_malloc_r>
 800b4c2:	b92a      	cbnz	r2, 800b4d0 <_realloc_r+0x24>
 800b4c4:	f7fe f9aa 	bl	800981c <_free_r>
 800b4c8:	4625      	mov	r5, r4
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d0:	f000 fc8c 	bl	800bdec <_malloc_usable_size_r>
 800b4d4:	4284      	cmp	r4, r0
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	d802      	bhi.n	800b4e0 <_realloc_r+0x34>
 800b4da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4de:	d812      	bhi.n	800b506 <_realloc_r+0x5a>
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	f7fe fa06 	bl	80098f4 <_malloc_r>
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d0ed      	beq.n	800b4ca <_realloc_r+0x1e>
 800b4ee:	42bc      	cmp	r4, r7
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	bf28      	it	cs
 800b4f6:	463a      	movcs	r2, r7
 800b4f8:	f7fd ff08 	bl	800930c <memcpy>
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4640      	mov	r0, r8
 800b500:	f7fe f98c 	bl	800981c <_free_r>
 800b504:	e7e1      	b.n	800b4ca <_realloc_r+0x1e>
 800b506:	4635      	mov	r5, r6
 800b508:	e7df      	b.n	800b4ca <_realloc_r+0x1e>

0800b50a <_sungetc_r>:
 800b50a:	b538      	push	{r3, r4, r5, lr}
 800b50c:	1c4b      	adds	r3, r1, #1
 800b50e:	4614      	mov	r4, r2
 800b510:	d103      	bne.n	800b51a <_sungetc_r+0x10>
 800b512:	f04f 35ff 	mov.w	r5, #4294967295
 800b516:	4628      	mov	r0, r5
 800b518:	bd38      	pop	{r3, r4, r5, pc}
 800b51a:	8993      	ldrh	r3, [r2, #12]
 800b51c:	f023 0320 	bic.w	r3, r3, #32
 800b520:	8193      	strh	r3, [r2, #12]
 800b522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b524:	6852      	ldr	r2, [r2, #4]
 800b526:	b2cd      	uxtb	r5, r1
 800b528:	b18b      	cbz	r3, 800b54e <_sungetc_r+0x44>
 800b52a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b52c:	4293      	cmp	r3, r2
 800b52e:	dd08      	ble.n	800b542 <_sungetc_r+0x38>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	1e5a      	subs	r2, r3, #1
 800b534:	6022      	str	r2, [r4, #0]
 800b536:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b53a:	6863      	ldr	r3, [r4, #4]
 800b53c:	3301      	adds	r3, #1
 800b53e:	6063      	str	r3, [r4, #4]
 800b540:	e7e9      	b.n	800b516 <_sungetc_r+0xc>
 800b542:	4621      	mov	r1, r4
 800b544:	f000 fc18 	bl	800bd78 <__submore>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d0f1      	beq.n	800b530 <_sungetc_r+0x26>
 800b54c:	e7e1      	b.n	800b512 <_sungetc_r+0x8>
 800b54e:	6921      	ldr	r1, [r4, #16]
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	b151      	cbz	r1, 800b56a <_sungetc_r+0x60>
 800b554:	4299      	cmp	r1, r3
 800b556:	d208      	bcs.n	800b56a <_sungetc_r+0x60>
 800b558:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b55c:	42a9      	cmp	r1, r5
 800b55e:	d104      	bne.n	800b56a <_sungetc_r+0x60>
 800b560:	3b01      	subs	r3, #1
 800b562:	3201      	adds	r2, #1
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	6062      	str	r2, [r4, #4]
 800b568:	e7d5      	b.n	800b516 <_sungetc_r+0xc>
 800b56a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b56e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b572:	6363      	str	r3, [r4, #52]	; 0x34
 800b574:	2303      	movs	r3, #3
 800b576:	63a3      	str	r3, [r4, #56]	; 0x38
 800b578:	4623      	mov	r3, r4
 800b57a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	2301      	movs	r3, #1
 800b582:	e7dc      	b.n	800b53e <_sungetc_r+0x34>

0800b584 <__ssrefill_r>:
 800b584:	b510      	push	{r4, lr}
 800b586:	460c      	mov	r4, r1
 800b588:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b58a:	b169      	cbz	r1, 800b5a8 <__ssrefill_r+0x24>
 800b58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b590:	4299      	cmp	r1, r3
 800b592:	d001      	beq.n	800b598 <__ssrefill_r+0x14>
 800b594:	f7fe f942 	bl	800981c <_free_r>
 800b598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b59a:	6063      	str	r3, [r4, #4]
 800b59c:	2000      	movs	r0, #0
 800b59e:	6360      	str	r0, [r4, #52]	; 0x34
 800b5a0:	b113      	cbz	r3, 800b5a8 <__ssrefill_r+0x24>
 800b5a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd10      	pop	{r4, pc}
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	f043 0320 	orr.w	r3, r3, #32
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5bc:	e7f3      	b.n	800b5a6 <__ssrefill_r+0x22>
	...

0800b5c0 <__ssvfiscanf_r>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b5d0:	49a6      	ldr	r1, [pc, #664]	; (800b86c <__ssvfiscanf_r+0x2ac>)
 800b5d2:	91a0      	str	r1, [sp, #640]	; 0x280
 800b5d4:	f10d 0804 	add.w	r8, sp, #4
 800b5d8:	49a5      	ldr	r1, [pc, #660]	; (800b870 <__ssvfiscanf_r+0x2b0>)
 800b5da:	4fa6      	ldr	r7, [pc, #664]	; (800b874 <__ssvfiscanf_r+0x2b4>)
 800b5dc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b878 <__ssvfiscanf_r+0x2b8>
 800b5e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	91a1      	str	r1, [sp, #644]	; 0x284
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	7813      	ldrb	r3, [r2, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 815a 	beq.w	800b8a6 <__ssvfiscanf_r+0x2e6>
 800b5f2:	5dd9      	ldrb	r1, [r3, r7]
 800b5f4:	f011 0108 	ands.w	r1, r1, #8
 800b5f8:	f102 0501 	add.w	r5, r2, #1
 800b5fc:	d019      	beq.n	800b632 <__ssvfiscanf_r+0x72>
 800b5fe:	6863      	ldr	r3, [r4, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	dd0f      	ble.n	800b624 <__ssvfiscanf_r+0x64>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	5cba      	ldrb	r2, [r7, r2]
 800b60a:	0712      	lsls	r2, r2, #28
 800b60c:	d401      	bmi.n	800b612 <__ssvfiscanf_r+0x52>
 800b60e:	462a      	mov	r2, r5
 800b610:	e7eb      	b.n	800b5ea <__ssvfiscanf_r+0x2a>
 800b612:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b614:	3201      	adds	r2, #1
 800b616:	9245      	str	r2, [sp, #276]	; 0x114
 800b618:	6862      	ldr	r2, [r4, #4]
 800b61a:	3301      	adds	r3, #1
 800b61c:	3a01      	subs	r2, #1
 800b61e:	6062      	str	r2, [r4, #4]
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	e7ec      	b.n	800b5fe <__ssvfiscanf_r+0x3e>
 800b624:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b626:	4621      	mov	r1, r4
 800b628:	4630      	mov	r0, r6
 800b62a:	4798      	blx	r3
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d0e9      	beq.n	800b604 <__ssvfiscanf_r+0x44>
 800b630:	e7ed      	b.n	800b60e <__ssvfiscanf_r+0x4e>
 800b632:	2b25      	cmp	r3, #37	; 0x25
 800b634:	d012      	beq.n	800b65c <__ssvfiscanf_r+0x9c>
 800b636:	469a      	mov	sl, r3
 800b638:	6863      	ldr	r3, [r4, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f340 8091 	ble.w	800b762 <__ssvfiscanf_r+0x1a2>
 800b640:	6822      	ldr	r2, [r4, #0]
 800b642:	7813      	ldrb	r3, [r2, #0]
 800b644:	4553      	cmp	r3, sl
 800b646:	f040 812e 	bne.w	800b8a6 <__ssvfiscanf_r+0x2e6>
 800b64a:	6863      	ldr	r3, [r4, #4]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	6063      	str	r3, [r4, #4]
 800b650:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b652:	3201      	adds	r2, #1
 800b654:	3301      	adds	r3, #1
 800b656:	6022      	str	r2, [r4, #0]
 800b658:	9345      	str	r3, [sp, #276]	; 0x114
 800b65a:	e7d8      	b.n	800b60e <__ssvfiscanf_r+0x4e>
 800b65c:	9141      	str	r1, [sp, #260]	; 0x104
 800b65e:	9143      	str	r1, [sp, #268]	; 0x10c
 800b660:	7853      	ldrb	r3, [r2, #1]
 800b662:	2b2a      	cmp	r3, #42	; 0x2a
 800b664:	bf02      	ittt	eq
 800b666:	2310      	moveq	r3, #16
 800b668:	1c95      	addeq	r5, r2, #2
 800b66a:	9341      	streq	r3, [sp, #260]	; 0x104
 800b66c:	220a      	movs	r2, #10
 800b66e:	46aa      	mov	sl, r5
 800b670:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b674:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b678:	2b09      	cmp	r3, #9
 800b67a:	d91d      	bls.n	800b6b8 <__ssvfiscanf_r+0xf8>
 800b67c:	487e      	ldr	r0, [pc, #504]	; (800b878 <__ssvfiscanf_r+0x2b8>)
 800b67e:	2203      	movs	r2, #3
 800b680:	f7f4 fdbe 	bl	8000200 <memchr>
 800b684:	b140      	cbz	r0, 800b698 <__ssvfiscanf_r+0xd8>
 800b686:	2301      	movs	r3, #1
 800b688:	eba0 0009 	sub.w	r0, r0, r9
 800b68c:	fa03 f000 	lsl.w	r0, r3, r0
 800b690:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b692:	4318      	orrs	r0, r3
 800b694:	9041      	str	r0, [sp, #260]	; 0x104
 800b696:	4655      	mov	r5, sl
 800b698:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b69c:	2b78      	cmp	r3, #120	; 0x78
 800b69e:	d806      	bhi.n	800b6ae <__ssvfiscanf_r+0xee>
 800b6a0:	2b57      	cmp	r3, #87	; 0x57
 800b6a2:	d810      	bhi.n	800b6c6 <__ssvfiscanf_r+0x106>
 800b6a4:	2b25      	cmp	r3, #37	; 0x25
 800b6a6:	d0c6      	beq.n	800b636 <__ssvfiscanf_r+0x76>
 800b6a8:	d856      	bhi.n	800b758 <__ssvfiscanf_r+0x198>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d064      	beq.n	800b778 <__ssvfiscanf_r+0x1b8>
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	9347      	str	r3, [sp, #284]	; 0x11c
 800b6b2:	230a      	movs	r3, #10
 800b6b4:	9342      	str	r3, [sp, #264]	; 0x108
 800b6b6:	e071      	b.n	800b79c <__ssvfiscanf_r+0x1dc>
 800b6b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b6ba:	fb02 1103 	mla	r1, r2, r3, r1
 800b6be:	3930      	subs	r1, #48	; 0x30
 800b6c0:	9143      	str	r1, [sp, #268]	; 0x10c
 800b6c2:	4655      	mov	r5, sl
 800b6c4:	e7d3      	b.n	800b66e <__ssvfiscanf_r+0xae>
 800b6c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b6ca:	2a20      	cmp	r2, #32
 800b6cc:	d8ef      	bhi.n	800b6ae <__ssvfiscanf_r+0xee>
 800b6ce:	a101      	add	r1, pc, #4	; (adr r1, 800b6d4 <__ssvfiscanf_r+0x114>)
 800b6d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6d4:	0800b787 	.word	0x0800b787
 800b6d8:	0800b6af 	.word	0x0800b6af
 800b6dc:	0800b6af 	.word	0x0800b6af
 800b6e0:	0800b7e5 	.word	0x0800b7e5
 800b6e4:	0800b6af 	.word	0x0800b6af
 800b6e8:	0800b6af 	.word	0x0800b6af
 800b6ec:	0800b6af 	.word	0x0800b6af
 800b6f0:	0800b6af 	.word	0x0800b6af
 800b6f4:	0800b6af 	.word	0x0800b6af
 800b6f8:	0800b6af 	.word	0x0800b6af
 800b6fc:	0800b6af 	.word	0x0800b6af
 800b700:	0800b7fb 	.word	0x0800b7fb
 800b704:	0800b7d1 	.word	0x0800b7d1
 800b708:	0800b75f 	.word	0x0800b75f
 800b70c:	0800b75f 	.word	0x0800b75f
 800b710:	0800b75f 	.word	0x0800b75f
 800b714:	0800b6af 	.word	0x0800b6af
 800b718:	0800b7d5 	.word	0x0800b7d5
 800b71c:	0800b6af 	.word	0x0800b6af
 800b720:	0800b6af 	.word	0x0800b6af
 800b724:	0800b6af 	.word	0x0800b6af
 800b728:	0800b6af 	.word	0x0800b6af
 800b72c:	0800b80b 	.word	0x0800b80b
 800b730:	0800b7dd 	.word	0x0800b7dd
 800b734:	0800b77f 	.word	0x0800b77f
 800b738:	0800b6af 	.word	0x0800b6af
 800b73c:	0800b6af 	.word	0x0800b6af
 800b740:	0800b807 	.word	0x0800b807
 800b744:	0800b6af 	.word	0x0800b6af
 800b748:	0800b7d1 	.word	0x0800b7d1
 800b74c:	0800b6af 	.word	0x0800b6af
 800b750:	0800b6af 	.word	0x0800b6af
 800b754:	0800b787 	.word	0x0800b787
 800b758:	3b45      	subs	r3, #69	; 0x45
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d8a7      	bhi.n	800b6ae <__ssvfiscanf_r+0xee>
 800b75e:	2305      	movs	r3, #5
 800b760:	e01b      	b.n	800b79a <__ssvfiscanf_r+0x1da>
 800b762:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b764:	4621      	mov	r1, r4
 800b766:	4630      	mov	r0, r6
 800b768:	4798      	blx	r3
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f43f af68 	beq.w	800b640 <__ssvfiscanf_r+0x80>
 800b770:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b772:	2800      	cmp	r0, #0
 800b774:	f040 808d 	bne.w	800b892 <__ssvfiscanf_r+0x2d2>
 800b778:	f04f 30ff 	mov.w	r0, #4294967295
 800b77c:	e08f      	b.n	800b89e <__ssvfiscanf_r+0x2de>
 800b77e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b780:	f042 0220 	orr.w	r2, r2, #32
 800b784:	9241      	str	r2, [sp, #260]	; 0x104
 800b786:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b78c:	9241      	str	r2, [sp, #260]	; 0x104
 800b78e:	2210      	movs	r2, #16
 800b790:	2b6f      	cmp	r3, #111	; 0x6f
 800b792:	9242      	str	r2, [sp, #264]	; 0x108
 800b794:	bf34      	ite	cc
 800b796:	2303      	movcc	r3, #3
 800b798:	2304      	movcs	r3, #4
 800b79a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b79c:	6863      	ldr	r3, [r4, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	dd42      	ble.n	800b828 <__ssvfiscanf_r+0x268>
 800b7a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7a4:	0659      	lsls	r1, r3, #25
 800b7a6:	d404      	bmi.n	800b7b2 <__ssvfiscanf_r+0x1f2>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	5cba      	ldrb	r2, [r7, r2]
 800b7ae:	0712      	lsls	r2, r2, #28
 800b7b0:	d441      	bmi.n	800b836 <__ssvfiscanf_r+0x276>
 800b7b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	dc50      	bgt.n	800b85a <__ssvfiscanf_r+0x29a>
 800b7b8:	466b      	mov	r3, sp
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	a941      	add	r1, sp, #260	; 0x104
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f000 f876 	bl	800b8b0 <_scanf_chars>
 800b7c4:	2801      	cmp	r0, #1
 800b7c6:	d06e      	beq.n	800b8a6 <__ssvfiscanf_r+0x2e6>
 800b7c8:	2802      	cmp	r0, #2
 800b7ca:	f47f af20 	bne.w	800b60e <__ssvfiscanf_r+0x4e>
 800b7ce:	e7cf      	b.n	800b770 <__ssvfiscanf_r+0x1b0>
 800b7d0:	220a      	movs	r2, #10
 800b7d2:	e7dd      	b.n	800b790 <__ssvfiscanf_r+0x1d0>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9342      	str	r3, [sp, #264]	; 0x108
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e7de      	b.n	800b79a <__ssvfiscanf_r+0x1da>
 800b7dc:	2308      	movs	r3, #8
 800b7de:	9342      	str	r3, [sp, #264]	; 0x108
 800b7e0:	2304      	movs	r3, #4
 800b7e2:	e7da      	b.n	800b79a <__ssvfiscanf_r+0x1da>
 800b7e4:	4629      	mov	r1, r5
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	f000 f9c6 	bl	800bb78 <__sccl>
 800b7ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f2:	9341      	str	r3, [sp, #260]	; 0x104
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7cf      	b.n	800b79a <__ssvfiscanf_r+0x1da>
 800b7fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b800:	9341      	str	r3, [sp, #260]	; 0x104
 800b802:	2300      	movs	r3, #0
 800b804:	e7c9      	b.n	800b79a <__ssvfiscanf_r+0x1da>
 800b806:	2302      	movs	r3, #2
 800b808:	e7c7      	b.n	800b79a <__ssvfiscanf_r+0x1da>
 800b80a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b80c:	06c3      	lsls	r3, r0, #27
 800b80e:	f53f aefe 	bmi.w	800b60e <__ssvfiscanf_r+0x4e>
 800b812:	9b00      	ldr	r3, [sp, #0]
 800b814:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b816:	1d19      	adds	r1, r3, #4
 800b818:	9100      	str	r1, [sp, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f010 0f01 	tst.w	r0, #1
 800b820:	bf14      	ite	ne
 800b822:	801a      	strhne	r2, [r3, #0]
 800b824:	601a      	streq	r2, [r3, #0]
 800b826:	e6f2      	b.n	800b60e <__ssvfiscanf_r+0x4e>
 800b828:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b82a:	4621      	mov	r1, r4
 800b82c:	4630      	mov	r0, r6
 800b82e:	4798      	blx	r3
 800b830:	2800      	cmp	r0, #0
 800b832:	d0b6      	beq.n	800b7a2 <__ssvfiscanf_r+0x1e2>
 800b834:	e79c      	b.n	800b770 <__ssvfiscanf_r+0x1b0>
 800b836:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b838:	3201      	adds	r2, #1
 800b83a:	9245      	str	r2, [sp, #276]	; 0x114
 800b83c:	6862      	ldr	r2, [r4, #4]
 800b83e:	3a01      	subs	r2, #1
 800b840:	2a00      	cmp	r2, #0
 800b842:	6062      	str	r2, [r4, #4]
 800b844:	dd02      	ble.n	800b84c <__ssvfiscanf_r+0x28c>
 800b846:	3301      	adds	r3, #1
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	e7ad      	b.n	800b7a8 <__ssvfiscanf_r+0x1e8>
 800b84c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b84e:	4621      	mov	r1, r4
 800b850:	4630      	mov	r0, r6
 800b852:	4798      	blx	r3
 800b854:	2800      	cmp	r0, #0
 800b856:	d0a7      	beq.n	800b7a8 <__ssvfiscanf_r+0x1e8>
 800b858:	e78a      	b.n	800b770 <__ssvfiscanf_r+0x1b0>
 800b85a:	2b04      	cmp	r3, #4
 800b85c:	dc0e      	bgt.n	800b87c <__ssvfiscanf_r+0x2bc>
 800b85e:	466b      	mov	r3, sp
 800b860:	4622      	mov	r2, r4
 800b862:	a941      	add	r1, sp, #260	; 0x104
 800b864:	4630      	mov	r0, r6
 800b866:	f000 f87d 	bl	800b964 <_scanf_i>
 800b86a:	e7ab      	b.n	800b7c4 <__ssvfiscanf_r+0x204>
 800b86c:	0800b50b 	.word	0x0800b50b
 800b870:	0800b585 	.word	0x0800b585
 800b874:	0800c8f4 	.word	0x0800c8f4
 800b878:	0800c8c6 	.word	0x0800c8c6
 800b87c:	4b0b      	ldr	r3, [pc, #44]	; (800b8ac <__ssvfiscanf_r+0x2ec>)
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f43f aec5 	beq.w	800b60e <__ssvfiscanf_r+0x4e>
 800b884:	466b      	mov	r3, sp
 800b886:	4622      	mov	r2, r4
 800b888:	a941      	add	r1, sp, #260	; 0x104
 800b88a:	4630      	mov	r0, r6
 800b88c:	f3af 8000 	nop.w
 800b890:	e798      	b.n	800b7c4 <__ssvfiscanf_r+0x204>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b898:	bf18      	it	ne
 800b89a:	f04f 30ff 	movne.w	r0, #4294967295
 800b89e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8a8:	e7f9      	b.n	800b89e <__ssvfiscanf_r+0x2de>
 800b8aa:	bf00      	nop
 800b8ac:	00000000 	.word	0x00000000

0800b8b0 <_scanf_chars>:
 800b8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b4:	4615      	mov	r5, r2
 800b8b6:	688a      	ldr	r2, [r1, #8]
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	b932      	cbnz	r2, 800b8cc <_scanf_chars+0x1c>
 800b8be:	698a      	ldr	r2, [r1, #24]
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	bf0c      	ite	eq
 800b8c4:	2201      	moveq	r2, #1
 800b8c6:	f04f 32ff 	movne.w	r2, #4294967295
 800b8ca:	608a      	str	r2, [r1, #8]
 800b8cc:	6822      	ldr	r2, [r4, #0]
 800b8ce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b960 <_scanf_chars+0xb0>
 800b8d2:	06d1      	lsls	r1, r2, #27
 800b8d4:	bf5f      	itttt	pl
 800b8d6:	681a      	ldrpl	r2, [r3, #0]
 800b8d8:	1d11      	addpl	r1, r2, #4
 800b8da:	6019      	strpl	r1, [r3, #0]
 800b8dc:	6816      	ldrpl	r6, [r2, #0]
 800b8de:	2700      	movs	r7, #0
 800b8e0:	69a0      	ldr	r0, [r4, #24]
 800b8e2:	b188      	cbz	r0, 800b908 <_scanf_chars+0x58>
 800b8e4:	2801      	cmp	r0, #1
 800b8e6:	d107      	bne.n	800b8f8 <_scanf_chars+0x48>
 800b8e8:	682a      	ldr	r2, [r5, #0]
 800b8ea:	7811      	ldrb	r1, [r2, #0]
 800b8ec:	6962      	ldr	r2, [r4, #20]
 800b8ee:	5c52      	ldrb	r2, [r2, r1]
 800b8f0:	b952      	cbnz	r2, 800b908 <_scanf_chars+0x58>
 800b8f2:	2f00      	cmp	r7, #0
 800b8f4:	d031      	beq.n	800b95a <_scanf_chars+0xaa>
 800b8f6:	e022      	b.n	800b93e <_scanf_chars+0x8e>
 800b8f8:	2802      	cmp	r0, #2
 800b8fa:	d120      	bne.n	800b93e <_scanf_chars+0x8e>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b904:	071b      	lsls	r3, r3, #28
 800b906:	d41a      	bmi.n	800b93e <_scanf_chars+0x8e>
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	06da      	lsls	r2, r3, #27
 800b90c:	bf5e      	ittt	pl
 800b90e:	682b      	ldrpl	r3, [r5, #0]
 800b910:	781b      	ldrbpl	r3, [r3, #0]
 800b912:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b916:	682a      	ldr	r2, [r5, #0]
 800b918:	686b      	ldr	r3, [r5, #4]
 800b91a:	3201      	adds	r2, #1
 800b91c:	602a      	str	r2, [r5, #0]
 800b91e:	68a2      	ldr	r2, [r4, #8]
 800b920:	3b01      	subs	r3, #1
 800b922:	3a01      	subs	r2, #1
 800b924:	606b      	str	r3, [r5, #4]
 800b926:	3701      	adds	r7, #1
 800b928:	60a2      	str	r2, [r4, #8]
 800b92a:	b142      	cbz	r2, 800b93e <_scanf_chars+0x8e>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dcd7      	bgt.n	800b8e0 <_scanf_chars+0x30>
 800b930:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b934:	4629      	mov	r1, r5
 800b936:	4640      	mov	r0, r8
 800b938:	4798      	blx	r3
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d0d0      	beq.n	800b8e0 <_scanf_chars+0x30>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	f013 0310 	ands.w	r3, r3, #16
 800b944:	d105      	bne.n	800b952 <_scanf_chars+0xa2>
 800b946:	68e2      	ldr	r2, [r4, #12]
 800b948:	3201      	adds	r2, #1
 800b94a:	60e2      	str	r2, [r4, #12]
 800b94c:	69a2      	ldr	r2, [r4, #24]
 800b94e:	b102      	cbz	r2, 800b952 <_scanf_chars+0xa2>
 800b950:	7033      	strb	r3, [r6, #0]
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	443b      	add	r3, r7
 800b956:	6123      	str	r3, [r4, #16]
 800b958:	2000      	movs	r0, #0
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	bf00      	nop
 800b960:	0800c8f4 	.word	0x0800c8f4

0800b964 <_scanf_i>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	4698      	mov	r8, r3
 800b96a:	4b76      	ldr	r3, [pc, #472]	; (800bb44 <_scanf_i+0x1e0>)
 800b96c:	460c      	mov	r4, r1
 800b96e:	4682      	mov	sl, r0
 800b970:	4616      	mov	r6, r2
 800b972:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b976:	b087      	sub	sp, #28
 800b978:	ab03      	add	r3, sp, #12
 800b97a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b97e:	4b72      	ldr	r3, [pc, #456]	; (800bb48 <_scanf_i+0x1e4>)
 800b980:	69a1      	ldr	r1, [r4, #24]
 800b982:	4a72      	ldr	r2, [pc, #456]	; (800bb4c <_scanf_i+0x1e8>)
 800b984:	2903      	cmp	r1, #3
 800b986:	bf18      	it	ne
 800b988:	461a      	movne	r2, r3
 800b98a:	68a3      	ldr	r3, [r4, #8]
 800b98c:	9201      	str	r2, [sp, #4]
 800b98e:	1e5a      	subs	r2, r3, #1
 800b990:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b994:	bf88      	it	hi
 800b996:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b99a:	4627      	mov	r7, r4
 800b99c:	bf82      	ittt	hi
 800b99e:	eb03 0905 	addhi.w	r9, r3, r5
 800b9a2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9a6:	60a3      	strhi	r3, [r4, #8]
 800b9a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b9ac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b9b0:	bf98      	it	ls
 800b9b2:	f04f 0900 	movls.w	r9, #0
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	463d      	mov	r5, r7
 800b9ba:	f04f 0b00 	mov.w	fp, #0
 800b9be:	6831      	ldr	r1, [r6, #0]
 800b9c0:	ab03      	add	r3, sp, #12
 800b9c2:	7809      	ldrb	r1, [r1, #0]
 800b9c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	f7f4 fc19 	bl	8000200 <memchr>
 800b9ce:	b328      	cbz	r0, 800ba1c <_scanf_i+0xb8>
 800b9d0:	f1bb 0f01 	cmp.w	fp, #1
 800b9d4:	d159      	bne.n	800ba8a <_scanf_i+0x126>
 800b9d6:	6862      	ldr	r2, [r4, #4]
 800b9d8:	b92a      	cbnz	r2, 800b9e6 <_scanf_i+0x82>
 800b9da:	6822      	ldr	r2, [r4, #0]
 800b9dc:	2308      	movs	r3, #8
 800b9de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9e2:	6063      	str	r3, [r4, #4]
 800b9e4:	6022      	str	r2, [r4, #0]
 800b9e6:	6822      	ldr	r2, [r4, #0]
 800b9e8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b9ec:	6022      	str	r2, [r4, #0]
 800b9ee:	68a2      	ldr	r2, [r4, #8]
 800b9f0:	1e51      	subs	r1, r2, #1
 800b9f2:	60a1      	str	r1, [r4, #8]
 800b9f4:	b192      	cbz	r2, 800ba1c <_scanf_i+0xb8>
 800b9f6:	6832      	ldr	r2, [r6, #0]
 800b9f8:	1c51      	adds	r1, r2, #1
 800b9fa:	6031      	str	r1, [r6, #0]
 800b9fc:	7812      	ldrb	r2, [r2, #0]
 800b9fe:	f805 2b01 	strb.w	r2, [r5], #1
 800ba02:	6872      	ldr	r2, [r6, #4]
 800ba04:	3a01      	subs	r2, #1
 800ba06:	2a00      	cmp	r2, #0
 800ba08:	6072      	str	r2, [r6, #4]
 800ba0a:	dc07      	bgt.n	800ba1c <_scanf_i+0xb8>
 800ba0c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ba10:	4631      	mov	r1, r6
 800ba12:	4650      	mov	r0, sl
 800ba14:	4790      	blx	r2
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f040 8085 	bne.w	800bb26 <_scanf_i+0x1c2>
 800ba1c:	f10b 0b01 	add.w	fp, fp, #1
 800ba20:	f1bb 0f03 	cmp.w	fp, #3
 800ba24:	d1cb      	bne.n	800b9be <_scanf_i+0x5a>
 800ba26:	6863      	ldr	r3, [r4, #4]
 800ba28:	b90b      	cbnz	r3, 800ba2e <_scanf_i+0xca>
 800ba2a:	230a      	movs	r3, #10
 800ba2c:	6063      	str	r3, [r4, #4]
 800ba2e:	6863      	ldr	r3, [r4, #4]
 800ba30:	4947      	ldr	r1, [pc, #284]	; (800bb50 <_scanf_i+0x1ec>)
 800ba32:	6960      	ldr	r0, [r4, #20]
 800ba34:	1ac9      	subs	r1, r1, r3
 800ba36:	f000 f89f 	bl	800bb78 <__sccl>
 800ba3a:	f04f 0b00 	mov.w	fp, #0
 800ba3e:	68a3      	ldr	r3, [r4, #8]
 800ba40:	6822      	ldr	r2, [r4, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d03d      	beq.n	800bac2 <_scanf_i+0x15e>
 800ba46:	6831      	ldr	r1, [r6, #0]
 800ba48:	6960      	ldr	r0, [r4, #20]
 800ba4a:	f891 c000 	ldrb.w	ip, [r1]
 800ba4e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d035      	beq.n	800bac2 <_scanf_i+0x15e>
 800ba56:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ba5a:	d124      	bne.n	800baa6 <_scanf_i+0x142>
 800ba5c:	0510      	lsls	r0, r2, #20
 800ba5e:	d522      	bpl.n	800baa6 <_scanf_i+0x142>
 800ba60:	f10b 0b01 	add.w	fp, fp, #1
 800ba64:	f1b9 0f00 	cmp.w	r9, #0
 800ba68:	d003      	beq.n	800ba72 <_scanf_i+0x10e>
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba70:	60a3      	str	r3, [r4, #8]
 800ba72:	6873      	ldr	r3, [r6, #4]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	6073      	str	r3, [r6, #4]
 800ba7a:	dd1b      	ble.n	800bab4 <_scanf_i+0x150>
 800ba7c:	6833      	ldr	r3, [r6, #0]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	6033      	str	r3, [r6, #0]
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	60a3      	str	r3, [r4, #8]
 800ba88:	e7d9      	b.n	800ba3e <_scanf_i+0xda>
 800ba8a:	f1bb 0f02 	cmp.w	fp, #2
 800ba8e:	d1ae      	bne.n	800b9ee <_scanf_i+0x8a>
 800ba90:	6822      	ldr	r2, [r4, #0]
 800ba92:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ba96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ba9a:	d1bf      	bne.n	800ba1c <_scanf_i+0xb8>
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	6063      	str	r3, [r4, #4]
 800baa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baa4:	e7a2      	b.n	800b9ec <_scanf_i+0x88>
 800baa6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800baaa:	6022      	str	r2, [r4, #0]
 800baac:	780b      	ldrb	r3, [r1, #0]
 800baae:	f805 3b01 	strb.w	r3, [r5], #1
 800bab2:	e7de      	b.n	800ba72 <_scanf_i+0x10e>
 800bab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bab8:	4631      	mov	r1, r6
 800baba:	4650      	mov	r0, sl
 800babc:	4798      	blx	r3
 800babe:	2800      	cmp	r0, #0
 800bac0:	d0df      	beq.n	800ba82 <_scanf_i+0x11e>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	05db      	lsls	r3, r3, #23
 800bac6:	d50d      	bpl.n	800bae4 <_scanf_i+0x180>
 800bac8:	42bd      	cmp	r5, r7
 800baca:	d909      	bls.n	800bae0 <_scanf_i+0x17c>
 800bacc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bad4:	4632      	mov	r2, r6
 800bad6:	4650      	mov	r0, sl
 800bad8:	4798      	blx	r3
 800bada:	f105 39ff 	add.w	r9, r5, #4294967295
 800bade:	464d      	mov	r5, r9
 800bae0:	42bd      	cmp	r5, r7
 800bae2:	d02d      	beq.n	800bb40 <_scanf_i+0x1dc>
 800bae4:	6822      	ldr	r2, [r4, #0]
 800bae6:	f012 0210 	ands.w	r2, r2, #16
 800baea:	d113      	bne.n	800bb14 <_scanf_i+0x1b0>
 800baec:	702a      	strb	r2, [r5, #0]
 800baee:	6863      	ldr	r3, [r4, #4]
 800baf0:	9e01      	ldr	r6, [sp, #4]
 800baf2:	4639      	mov	r1, r7
 800baf4:	4650      	mov	r0, sl
 800baf6:	47b0      	blx	r6
 800baf8:	6821      	ldr	r1, [r4, #0]
 800bafa:	f8d8 3000 	ldr.w	r3, [r8]
 800bafe:	f011 0f20 	tst.w	r1, #32
 800bb02:	d013      	beq.n	800bb2c <_scanf_i+0x1c8>
 800bb04:	1d1a      	adds	r2, r3, #4
 800bb06:	f8c8 2000 	str.w	r2, [r8]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	6018      	str	r0, [r3, #0]
 800bb0e:	68e3      	ldr	r3, [r4, #12]
 800bb10:	3301      	adds	r3, #1
 800bb12:	60e3      	str	r3, [r4, #12]
 800bb14:	1bed      	subs	r5, r5, r7
 800bb16:	44ab      	add	fp, r5
 800bb18:	6925      	ldr	r5, [r4, #16]
 800bb1a:	445d      	add	r5, fp
 800bb1c:	6125      	str	r5, [r4, #16]
 800bb1e:	2000      	movs	r0, #0
 800bb20:	b007      	add	sp, #28
 800bb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb26:	f04f 0b00 	mov.w	fp, #0
 800bb2a:	e7ca      	b.n	800bac2 <_scanf_i+0x15e>
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	f8c8 2000 	str.w	r2, [r8]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f011 0f01 	tst.w	r1, #1
 800bb38:	bf14      	ite	ne
 800bb3a:	8018      	strhne	r0, [r3, #0]
 800bb3c:	6018      	streq	r0, [r3, #0]
 800bb3e:	e7e6      	b.n	800bb0e <_scanf_i+0x1aa>
 800bb40:	2001      	movs	r0, #1
 800bb42:	e7ed      	b.n	800bb20 <_scanf_i+0x1bc>
 800bb44:	0800c5fc 	.word	0x0800c5fc
 800bb48:	0800b38d 	.word	0x0800b38d
 800bb4c:	0800bd75 	.word	0x0800bd75
 800bb50:	0800ca0d 	.word	0x0800ca0d

0800bb54 <_read_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	; (800bb74 <_read_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7f6 fc5c 	bl	8002420 <_read>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_read_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_read_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20001070 	.word	0x20001070

0800bb78 <__sccl>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	780b      	ldrb	r3, [r1, #0]
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	2b5e      	cmp	r3, #94	; 0x5e
 800bb80:	bf0b      	itete	eq
 800bb82:	784b      	ldrbeq	r3, [r1, #1]
 800bb84:	1c48      	addne	r0, r1, #1
 800bb86:	1c88      	addeq	r0, r1, #2
 800bb88:	2200      	movne	r2, #0
 800bb8a:	bf08      	it	eq
 800bb8c:	2201      	moveq	r2, #1
 800bb8e:	1e61      	subs	r1, r4, #1
 800bb90:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bb94:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bb98:	42a9      	cmp	r1, r5
 800bb9a:	d1fb      	bne.n	800bb94 <__sccl+0x1c>
 800bb9c:	b90b      	cbnz	r3, 800bba2 <__sccl+0x2a>
 800bb9e:	3801      	subs	r0, #1
 800bba0:	bd70      	pop	{r4, r5, r6, pc}
 800bba2:	f082 0201 	eor.w	r2, r2, #1
 800bba6:	54e2      	strb	r2, [r4, r3]
 800bba8:	4605      	mov	r5, r0
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bbb0:	292d      	cmp	r1, #45	; 0x2d
 800bbb2:	d006      	beq.n	800bbc2 <__sccl+0x4a>
 800bbb4:	295d      	cmp	r1, #93	; 0x5d
 800bbb6:	d0f3      	beq.n	800bba0 <__sccl+0x28>
 800bbb8:	b909      	cbnz	r1, 800bbbe <__sccl+0x46>
 800bbba:	4628      	mov	r0, r5
 800bbbc:	e7f0      	b.n	800bba0 <__sccl+0x28>
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	e7f1      	b.n	800bba6 <__sccl+0x2e>
 800bbc2:	786e      	ldrb	r6, [r5, #1]
 800bbc4:	2e5d      	cmp	r6, #93	; 0x5d
 800bbc6:	d0fa      	beq.n	800bbbe <__sccl+0x46>
 800bbc8:	42b3      	cmp	r3, r6
 800bbca:	dcf8      	bgt.n	800bbbe <__sccl+0x46>
 800bbcc:	3502      	adds	r5, #2
 800bbce:	4619      	mov	r1, r3
 800bbd0:	3101      	adds	r1, #1
 800bbd2:	428e      	cmp	r6, r1
 800bbd4:	5462      	strb	r2, [r4, r1]
 800bbd6:	dcfb      	bgt.n	800bbd0 <__sccl+0x58>
 800bbd8:	1af1      	subs	r1, r6, r3
 800bbda:	3901      	subs	r1, #1
 800bbdc:	1c58      	adds	r0, r3, #1
 800bbde:	42b3      	cmp	r3, r6
 800bbe0:	bfa8      	it	ge
 800bbe2:	2100      	movge	r1, #0
 800bbe4:	1843      	adds	r3, r0, r1
 800bbe6:	e7e0      	b.n	800bbaa <__sccl+0x32>

0800bbe8 <_raise_r>:
 800bbe8:	291f      	cmp	r1, #31
 800bbea:	b538      	push	{r3, r4, r5, lr}
 800bbec:	4604      	mov	r4, r0
 800bbee:	460d      	mov	r5, r1
 800bbf0:	d904      	bls.n	800bbfc <_raise_r+0x14>
 800bbf2:	2316      	movs	r3, #22
 800bbf4:	6003      	str	r3, [r0, #0]
 800bbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfa:	bd38      	pop	{r3, r4, r5, pc}
 800bbfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbfe:	b112      	cbz	r2, 800bc06 <_raise_r+0x1e>
 800bc00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc04:	b94b      	cbnz	r3, 800bc1a <_raise_r+0x32>
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 f830 	bl	800bc6c <_getpid_r>
 800bc0c:	462a      	mov	r2, r5
 800bc0e:	4601      	mov	r1, r0
 800bc10:	4620      	mov	r0, r4
 800bc12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc16:	f000 b817 	b.w	800bc48 <_kill_r>
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d00a      	beq.n	800bc34 <_raise_r+0x4c>
 800bc1e:	1c59      	adds	r1, r3, #1
 800bc20:	d103      	bne.n	800bc2a <_raise_r+0x42>
 800bc22:	2316      	movs	r3, #22
 800bc24:	6003      	str	r3, [r0, #0]
 800bc26:	2001      	movs	r0, #1
 800bc28:	e7e7      	b.n	800bbfa <_raise_r+0x12>
 800bc2a:	2400      	movs	r4, #0
 800bc2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc30:	4628      	mov	r0, r5
 800bc32:	4798      	blx	r3
 800bc34:	2000      	movs	r0, #0
 800bc36:	e7e0      	b.n	800bbfa <_raise_r+0x12>

0800bc38 <raise>:
 800bc38:	4b02      	ldr	r3, [pc, #8]	; (800bc44 <raise+0xc>)
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	6818      	ldr	r0, [r3, #0]
 800bc3e:	f7ff bfd3 	b.w	800bbe8 <_raise_r>
 800bc42:	bf00      	nop
 800bc44:	2000005c 	.word	0x2000005c

0800bc48 <_kill_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4d07      	ldr	r5, [pc, #28]	; (800bc68 <_kill_r+0x20>)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4608      	mov	r0, r1
 800bc52:	4611      	mov	r1, r2
 800bc54:	602b      	str	r3, [r5, #0]
 800bc56:	f7f6 fbc9 	bl	80023ec <_kill>
 800bc5a:	1c43      	adds	r3, r0, #1
 800bc5c:	d102      	bne.n	800bc64 <_kill_r+0x1c>
 800bc5e:	682b      	ldr	r3, [r5, #0]
 800bc60:	b103      	cbz	r3, 800bc64 <_kill_r+0x1c>
 800bc62:	6023      	str	r3, [r4, #0]
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
 800bc66:	bf00      	nop
 800bc68:	20001070 	.word	0x20001070

0800bc6c <_getpid_r>:
 800bc6c:	f7f6 bbb6 	b.w	80023dc <_getpid>

0800bc70 <_strtol_l.constprop.0>:
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc76:	d001      	beq.n	800bc7c <_strtol_l.constprop.0+0xc>
 800bc78:	2b24      	cmp	r3, #36	; 0x24
 800bc7a:	d906      	bls.n	800bc8a <_strtol_l.constprop.0+0x1a>
 800bc7c:	f7fd f9fa 	bl	8009074 <__errno>
 800bc80:	2316      	movs	r3, #22
 800bc82:	6003      	str	r3, [r0, #0]
 800bc84:	2000      	movs	r0, #0
 800bc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd70 <_strtol_l.constprop.0+0x100>
 800bc8e:	460d      	mov	r5, r1
 800bc90:	462e      	mov	r6, r5
 800bc92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc96:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bc9a:	f017 0708 	ands.w	r7, r7, #8
 800bc9e:	d1f7      	bne.n	800bc90 <_strtol_l.constprop.0+0x20>
 800bca0:	2c2d      	cmp	r4, #45	; 0x2d
 800bca2:	d132      	bne.n	800bd0a <_strtol_l.constprop.0+0x9a>
 800bca4:	782c      	ldrb	r4, [r5, #0]
 800bca6:	2701      	movs	r7, #1
 800bca8:	1cb5      	adds	r5, r6, #2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d05b      	beq.n	800bd66 <_strtol_l.constprop.0+0xf6>
 800bcae:	2b10      	cmp	r3, #16
 800bcb0:	d109      	bne.n	800bcc6 <_strtol_l.constprop.0+0x56>
 800bcb2:	2c30      	cmp	r4, #48	; 0x30
 800bcb4:	d107      	bne.n	800bcc6 <_strtol_l.constprop.0+0x56>
 800bcb6:	782c      	ldrb	r4, [r5, #0]
 800bcb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bcbc:	2c58      	cmp	r4, #88	; 0x58
 800bcbe:	d14d      	bne.n	800bd5c <_strtol_l.constprop.0+0xec>
 800bcc0:	786c      	ldrb	r4, [r5, #1]
 800bcc2:	2310      	movs	r3, #16
 800bcc4:	3502      	adds	r5, #2
 800bcc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bcca:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcce:	f04f 0c00 	mov.w	ip, #0
 800bcd2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bcd6:	4666      	mov	r6, ip
 800bcd8:	fb03 8a19 	mls	sl, r3, r9, r8
 800bcdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bce0:	f1be 0f09 	cmp.w	lr, #9
 800bce4:	d816      	bhi.n	800bd14 <_strtol_l.constprop.0+0xa4>
 800bce6:	4674      	mov	r4, lr
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	dd24      	ble.n	800bd36 <_strtol_l.constprop.0+0xc6>
 800bcec:	f1bc 0f00 	cmp.w	ip, #0
 800bcf0:	db1e      	blt.n	800bd30 <_strtol_l.constprop.0+0xc0>
 800bcf2:	45b1      	cmp	r9, r6
 800bcf4:	d31c      	bcc.n	800bd30 <_strtol_l.constprop.0+0xc0>
 800bcf6:	d101      	bne.n	800bcfc <_strtol_l.constprop.0+0x8c>
 800bcf8:	45a2      	cmp	sl, r4
 800bcfa:	db19      	blt.n	800bd30 <_strtol_l.constprop.0+0xc0>
 800bcfc:	fb06 4603 	mla	r6, r6, r3, r4
 800bd00:	f04f 0c01 	mov.w	ip, #1
 800bd04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd08:	e7e8      	b.n	800bcdc <_strtol_l.constprop.0+0x6c>
 800bd0a:	2c2b      	cmp	r4, #43	; 0x2b
 800bd0c:	bf04      	itt	eq
 800bd0e:	782c      	ldrbeq	r4, [r5, #0]
 800bd10:	1cb5      	addeq	r5, r6, #2
 800bd12:	e7ca      	b.n	800bcaa <_strtol_l.constprop.0+0x3a>
 800bd14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bd18:	f1be 0f19 	cmp.w	lr, #25
 800bd1c:	d801      	bhi.n	800bd22 <_strtol_l.constprop.0+0xb2>
 800bd1e:	3c37      	subs	r4, #55	; 0x37
 800bd20:	e7e2      	b.n	800bce8 <_strtol_l.constprop.0+0x78>
 800bd22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bd26:	f1be 0f19 	cmp.w	lr, #25
 800bd2a:	d804      	bhi.n	800bd36 <_strtol_l.constprop.0+0xc6>
 800bd2c:	3c57      	subs	r4, #87	; 0x57
 800bd2e:	e7db      	b.n	800bce8 <_strtol_l.constprop.0+0x78>
 800bd30:	f04f 3cff 	mov.w	ip, #4294967295
 800bd34:	e7e6      	b.n	800bd04 <_strtol_l.constprop.0+0x94>
 800bd36:	f1bc 0f00 	cmp.w	ip, #0
 800bd3a:	da05      	bge.n	800bd48 <_strtol_l.constprop.0+0xd8>
 800bd3c:	2322      	movs	r3, #34	; 0x22
 800bd3e:	6003      	str	r3, [r0, #0]
 800bd40:	4646      	mov	r6, r8
 800bd42:	b942      	cbnz	r2, 800bd56 <_strtol_l.constprop.0+0xe6>
 800bd44:	4630      	mov	r0, r6
 800bd46:	e79e      	b.n	800bc86 <_strtol_l.constprop.0+0x16>
 800bd48:	b107      	cbz	r7, 800bd4c <_strtol_l.constprop.0+0xdc>
 800bd4a:	4276      	negs	r6, r6
 800bd4c:	2a00      	cmp	r2, #0
 800bd4e:	d0f9      	beq.n	800bd44 <_strtol_l.constprop.0+0xd4>
 800bd50:	f1bc 0f00 	cmp.w	ip, #0
 800bd54:	d000      	beq.n	800bd58 <_strtol_l.constprop.0+0xe8>
 800bd56:	1e69      	subs	r1, r5, #1
 800bd58:	6011      	str	r1, [r2, #0]
 800bd5a:	e7f3      	b.n	800bd44 <_strtol_l.constprop.0+0xd4>
 800bd5c:	2430      	movs	r4, #48	; 0x30
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1b1      	bne.n	800bcc6 <_strtol_l.constprop.0+0x56>
 800bd62:	2308      	movs	r3, #8
 800bd64:	e7af      	b.n	800bcc6 <_strtol_l.constprop.0+0x56>
 800bd66:	2c30      	cmp	r4, #48	; 0x30
 800bd68:	d0a5      	beq.n	800bcb6 <_strtol_l.constprop.0+0x46>
 800bd6a:	230a      	movs	r3, #10
 800bd6c:	e7ab      	b.n	800bcc6 <_strtol_l.constprop.0+0x56>
 800bd6e:	bf00      	nop
 800bd70:	0800c8f4 	.word	0x0800c8f4

0800bd74 <_strtol_r>:
 800bd74:	f7ff bf7c 	b.w	800bc70 <_strtol_l.constprop.0>

0800bd78 <__submore>:
 800bd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bd80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd84:	4299      	cmp	r1, r3
 800bd86:	d11d      	bne.n	800bdc4 <__submore+0x4c>
 800bd88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd8c:	f7fd fdb2 	bl	80098f4 <_malloc_r>
 800bd90:	b918      	cbnz	r0, 800bd9a <__submore+0x22>
 800bd92:	f04f 30ff 	mov.w	r0, #4294967295
 800bd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd9e:	63a3      	str	r3, [r4, #56]	; 0x38
 800bda0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bda4:	6360      	str	r0, [r4, #52]	; 0x34
 800bda6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bdaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bdae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bdb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bdb6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bdba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bdbe:	6020      	str	r0, [r4, #0]
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e7e8      	b.n	800bd96 <__submore+0x1e>
 800bdc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bdc6:	0077      	lsls	r7, r6, #1
 800bdc8:	463a      	mov	r2, r7
 800bdca:	f7ff fb6f 	bl	800b4ac <_realloc_r>
 800bdce:	4605      	mov	r5, r0
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d0de      	beq.n	800bd92 <__submore+0x1a>
 800bdd4:	eb00 0806 	add.w	r8, r0, r6
 800bdd8:	4601      	mov	r1, r0
 800bdda:	4632      	mov	r2, r6
 800bddc:	4640      	mov	r0, r8
 800bdde:	f7fd fa95 	bl	800930c <memcpy>
 800bde2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bde6:	f8c4 8000 	str.w	r8, [r4]
 800bdea:	e7e9      	b.n	800bdc0 <__submore+0x48>

0800bdec <_malloc_usable_size_r>:
 800bdec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdf0:	1f18      	subs	r0, r3, #4
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	bfbc      	itt	lt
 800bdf6:	580b      	ldrlt	r3, [r1, r0]
 800bdf8:	18c0      	addlt	r0, r0, r3
 800bdfa:	4770      	bx	lr

0800bdfc <trunc>:
 800bdfc:	ec51 0b10 	vmov	r0, r1, d0
 800be00:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be04:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800be08:	2b13      	cmp	r3, #19
 800be0a:	b5d0      	push	{r4, r6, r7, lr}
 800be0c:	460c      	mov	r4, r1
 800be0e:	dc10      	bgt.n	800be32 <trunc+0x36>
 800be10:	2b00      	cmp	r3, #0
 800be12:	bfa5      	ittet	ge
 800be14:	4a11      	ldrge	r2, [pc, #68]	; (800be5c <trunc+0x60>)
 800be16:	fa42 f303 	asrge.w	r3, r2, r3
 800be1a:	2100      	movlt	r1, #0
 800be1c:	2100      	movge	r1, #0
 800be1e:	bfb9      	ittee	lt
 800be20:	2000      	movlt	r0, #0
 800be22:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800be26:	2000      	movge	r0, #0
 800be28:	ea24 0103 	bicge.w	r1, r4, r3
 800be2c:	ec41 0b10 	vmov	d0, r0, r1
 800be30:	bdd0      	pop	{r4, r6, r7, pc}
 800be32:	2b33      	cmp	r3, #51	; 0x33
 800be34:	dd08      	ble.n	800be48 <trunc+0x4c>
 800be36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be3a:	d1f7      	bne.n	800be2c <trunc+0x30>
 800be3c:	ee10 2a10 	vmov	r2, s0
 800be40:	460b      	mov	r3, r1
 800be42:	f7f4 fa33 	bl	80002ac <__adddf3>
 800be46:	e7f1      	b.n	800be2c <trunc+0x30>
 800be48:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800be4c:	f04f 33ff 	mov.w	r3, #4294967295
 800be50:	fa23 f202 	lsr.w	r2, r3, r2
 800be54:	ea20 0602 	bic.w	r6, r0, r2
 800be58:	4630      	mov	r0, r6
 800be5a:	e7e7      	b.n	800be2c <trunc+0x30>
 800be5c:	000fffff 	.word	0x000fffff

0800be60 <_init>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	bf00      	nop
 800be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be66:	bc08      	pop	{r3}
 800be68:	469e      	mov	lr, r3
 800be6a:	4770      	bx	lr

0800be6c <_fini>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	bf00      	nop
 800be70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be72:	bc08      	pop	{r3}
 800be74:	469e      	mov	lr, r3
 800be76:	4770      	bx	lr
